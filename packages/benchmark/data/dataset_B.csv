,Title,author,journal,year,Abstract,doi,affiliation,status
0,Predicting Relative Thresholds for Object Oriented Metrics,"Ligu, E. and Chatzigeorgiou, A. and Chaikalis, T. and Ygeionomakis, N.","IEEE International Conference on Software Maintenance, ICSM",2013,"Accumulated technical debt can be alleviated by means of refactoring application aiming at architectural improvement. A prerequisite for wide scale refactoring application is the automated identification of the corresponding refactoring opportunities, or code smells. One of the major architectural problems that has received limited attention is the so called 'Refused Bequest' which refers to inappropriate use of inheritance in object-oriented systems. This code smell occurs when subclasses do not take advantage of the inherited behavior, implying that replacement by delegation should be used instead. In this paper we propose a technique for the identification of Refused Bequest code smells whose major novelty lies in the intentional introduction of errors in the inherited methods. The essence of inheritance is evaluated by exercising the system's functionality through the corresponding unit tests in order to reveal whether inherited methods are actually employed by clients. Based on the results of this approach and other structural information, an indication of the smell strength on a 'thermometer' is obtained. The proposed approach has been implemented as an Eclipse plugin. © 2013 IEEE.",10.1109/ICSM.2013.55,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
1,Automatic identification of architecture smell discussions from stack overflow,"Arango, H. and Bonatto, B.D. and Dos Santos Lusvarghi, S.A. and Vasconcelos, G.F.","Journal of Control, Automation and Electrical Systems",2013,"This paper presents a methodology for deflating the weighted average cost of capital (WACC) in which the WACC components (cost of equity and cost of debt) are first individually deflated and after that they are combined to obtain the deflated WACC. This approach reverses the ordering used by the Brazilian Electricity RegulatoryAgency (ANEEL), who first combines and then deflates the resulting WACC. It is contended that the proposed methodology is the right one, on the ground that WACC is a virtual rate without direct connection with the effective practice. It is presented as an example of application of both criteria using the real data of a power distribution company and comparing their respective impacts on the economic value added. The obtained difference, albeit small at first sight, would lead to financial discrepancies which justify the use of the new proposal. © Brazilian Society for Automatics-SBA 2013.",10.1007/s40313-013-0058-6,"UNIFEI - Federal University of Itajuba, Av. BPS, 1303, Bairro Pinheirinho, Itajubá, MG CEP 37500-903, Brazil; Matrix-Engenharia em Energia Ltda., Rua Purpurina, 287, Sumarezinho, São Paulo, SP CEP 05435-030, Brazil",Rejected
2,"A Research plan to characterize, evaluate, and predict the impacts of behavioral decay in design patterns","Khayyambashi, M.R. and Rizi, F.S.","2013 7th Intenational Conference on e-Commerce in Developing Countries: With Focus on e-Security, ECDC 2013",2013,"Online social networks (OSNs) are websites that allow users to build connections and relationships to other Internet users. Social networks store information remotely, rather than on a user's personal computer. They can be used to keep in touch with friends, make new contacts and find people with similar interests and ideas. Nowadays the popularity of online social networks is growing rapidly. Many people besides friends and acquaintances are interested in the information people post on social networks. Identity thieves, scam artists, debt collectors, stalkers, and corporations looking for a market advantage are using social networks to gather information about consumers. Companies that operate social networks are themselves collecting a variety of data about their users, both to personalize the services for the users and to sell to advertisers. The concern of leakage of privacy and security is extremely growing in social networks in these days. The identity theft attacks (ICAs) by creating clone identities in OSNs try to steal users' personal information and nowadays it is very important in cyberspace. If no protection mechanism is applied it effects on users' activity, trust and reliance relations that establish with other users. In this paper, first profile cloning and identity theft attack are introduced, and then a framework for detection suspicious identity is proposed. This approach is based on attribute similarity and friend network similarity. According to similarity measures which are computed in each step and by having predetermined threshold, it will be decided which profile is clone which one is genuine. © 2013 IEEE.",10.1109/ECDC.2013.6556739,"Department of Computer, Faculty of Engineering, University of Isfahan, Isfahan, Iran; Sheikh Bahaei University, Isfahan, Iran",Rejected
3,Understanding Roxygen package documentation in R,"Fraser, S. and Mancl, D. and Opdyke, B. and Bishop, J. and Kathail, P. and Lacar, J. and Ozkaya, I. and Szynkarski, A.","SPLASH 2013 - Proceedings of the 2013 Companion Publication for Conference on Systems, Programming, and Applications: Software for Humanity",2013,"The term ""Technical Debt"" was coined over 20 years ago by Ward Cunningham in a 1992 OOPSLA experience report. Ward used ""Technical debt"" to describe the trade-offs between delivering the most appropriate - Albeit likely immature - product, in the shortest time possible. Since then, the repercussions of ""technical debt"" have become more visible, though not necessarily more widely understood. This SPLASH panel will bring together practitioners to discuss and debate ""Technical Debt"". Copyright © 2013 by the Association for Computing Machinery, Inc. (ACM).",10.1145/2508075.2516596,"Cisco Research Center, Cisco Systems, San Jose, United States; Alcatel-Lucent, Murray Hill, NJ, United States; Corporate Internet Group, JPMorgan Chase, Chicago, United States; Department of Computer Science, Microsoft Research, Redmond, WA, United States; Cisco Systems, San Jose, United States; Cisco Systems, OH, United States; Software Engineering Institute, United States; CAST Software Research Labs, United States",Rejected
4,Can Clean New Code Reduce Technical Debt Density?,"Izurieta, C. and Bieman, J.M.",Software Quality Journal,2013,"Software designs decay as systems, uses, and operational environments evolve. Decay can involve the design patterns used to structure a system. Classes that participate in design pattern realizations accumulate grime-non-pattern-related code. Design pattern realizations can also rot, when changes break the structural or functional integrity of a design pattern. Design pattern rot can prevent a pattern realization from fulfilling its responsibilities, and thus represents a fault. Grime buildup does not break the structural integrity of a pattern but can reduce system testability and adaptability. This research examined the extent to which software designs actually decay, rot, and accumulate grime by studying the aging of design patterns in three successful object-oriented systems. We generated UML models from the three implementations and employed a multiple case study methodology to analyze the evolution of the designs. We found no evidence of design pattern rot in these systems. However, we found considerable evidence of pattern decay due to grime. Dependencies between design pattern components increased without regard for pattern intent, reducing pattern modularity, and decreasing testability and adaptability. The study of decay and grime showed that the grime that builds up around design patterns is mostly due to increases in coupling. © 2012 Springer Science+Business Media, LLC.",10.1007/s11219-012-9175-x,"Department of Computer Science, Montana State University, Bozeman, MT, 59717, United States; Department of Computer Science, Colorado State University, Fort Collins, CO, 80523, United States",Accepted
5,Risk assessment and mitigation for electric power sectors: A developing country's perspective,"Iscoe, I. and Jackson, K. and Kreinin, A. and Ma, X.",Journal of Computational Finance,2013,"Correlation-dependent derivatives, such as asset-backed securities and collateralized debt obligations (CDOs), are common tools for offsetting credit risk. Factor models in the conditional independence framework are widely used in practice to capture the correlated default events of the underlying obligors. An essential part of these models is the accurate and efficient evaluation of the expected loss of the specified tranche, conditional on a given value of a systematic factor (or values of a set of systematic factors). Unlike papers that focus on how to evaluate the loss distribution of the underlying pool, in this paper we focus on the tranche loss function itself. It is approximated by a sum of exponentials so that the conditional expectation can be evaluated in closed form without having to evaluate the pool loss distribution. As an example, we apply this approach to synthetic CDO pricing. Numerical results show that it is efficient. © 2013, Incisive Media Ltd. All rights reserved.",10.21314/JCF.2013.271,"Quantitative Research, Risk Analytics, IBM, Inc., 185 Spadina Avenue, Toronto, ON  M5T 2C6, Canada; Department of Computer Science, University of Toronto, 10 Kings College Road, Toronto, ON  M5S 3G4, Canada; Risk Services, CIBC, 11th Floor, 161 Bay Street, Toronto, ON  M5X 2S8, Canada",Rejected
6,Managing Technical Debt in Database Normalization,,Communications in Computer and Information Science,2013,The proceedings contain 21 papers. The special focus in this conference is on Information and Engineering Systems. The topics include: Brain activity measurement for the scores of on-line English grammar tests with white and blue backgrounds; loss aversion behavior utterances extraction in internet with expected utility; extracting market trends from the cross correlation between stock time series; text-shared collaboration in second language using groupware for an idea generation; capturing and scaling up concurrent transactions in uncertain databases; impact of circularity analysis on classification results; an evolved cellular automata based approach to hyperspectral image processing; bootstrapped dendritic classifiers in MRI analysis for Alzheimer's disease recognition; an analytic aggregation-based ontology alignment approach with multiple matchers; intelligent texture reconstruction of missing data in video sequences using neural networks; using multi-agent systems to enhance the level of autonomy in unmanned vehicles; experts' agreement support for distributed engineering knowledge modelling; teams of agents for solving the resource-constrained project scheduling problem; integrating ultra mobile devices in tactical defence environments through middleware; computational approach for measuring the tear film break-up time in an unsupervised manner; an efficient method of characterization of the bad debt customers in the mail order industry and wearable smart system for physical activity support.,,,Rejected
7,Impacts of software community patterns on process and product: An empirical study,"Williams, S. and Eidenbenz, S.",Simulation Series,2013,"We present Themis, an agent-based simulation of a modern reserve system, along with the financial components of the public sector, and a proxy for the nonbank members of the private sector. The simulation primarily revolves around the key interest rate that benchmarks private lending, which arises from agents' trading within a market for bonds and loans, along with the financial implications of that interest rate. Several tunable parameters allow a user to experiment with different policy configurations and levels of private demand for loans. We both validate the simulation against real-world data, and show the results of three unconventional policy settings: one in which the central bank ""loses its appetite"" for public debt, a second in which the treasury runs deficits without corresponding debt issuance, and a third in which the central bank uses other policy tools to correct for some of the consequences of the second scenario.",,"Information Sciences Group (CCS-3), Los Alamos National Laboratory, United States",Rejected
8,Towards a taxonomy of code review smells,"Papagiannidis, S. and Stamati, T. and Behr, H.",International Journal of E-Business Research,2013,"In this paper the authors studied how Greek politicians use their Internet presence and in particular social media to engage citizens, examining the perceived significance of establishing an online presence and the motivating and hindering factors for doing so. The authors also studied how online strategies are implemented and executed in three different periods, namely pre-elections, a crisis period (in the authors' case the Greek sovereign debt crisis) and a normal period. To answer the authors' research questions the authors adapted a social media conceptual framework to online political presence. Data was collected via in-depth interviews with candidates of 5 different political parties taking part in the general elections of 2012. The authors' analysis suggests that although politicians are increasingly interested in engaging with citizens via online technologies, their efforts are not always focused on achieving measurable and tangible results. Politicians' online strategies need to be organised around the concepts of communication, engagement and influence and not around the electronic spaces where these take place, i.e. the objectives and the means need to be clearly distinguished and utilised. The authors discuss the implications of their findings from a theoretical and practical perspective, in the context of online political marketing and political participation and engagement. © 2013, IGI Global. All rights reserved.",10.4018/ijebr.2013100104,"Business School, Newcastle University, Newcastle upon Tyne, United Kingdom; Department of Informatics & Telecommunications, National and Kapodistrian, University of Athens, Athens, Greece; School of Geography, Politics and Sociology, Newcastle University, Newcastle upon Tyne, United Kingdom",Rejected
9,Pragmatic segmentation-based credit risk management using Machine Learning,"Li, Z. and Lin, X. and Pollak, I.","2013 IEEE Global Conference on Signal and Information Processing, GlobalSIP 2013 - Proceedings",2013,"This paper studies the problem of optimally allocating a cash injection into a financial system in distress. We investigate a one-period borrower-lender network with no dynamics, in which all debts are due at the same time and have the same seniority. Every node in the network represents a financial institution, and every node is labeled with a nonnegative real number which is the cash on hand that the institution has before the debts are due. If node i owes d dollars to node j, this is represented in the network as a directed edge from node i to node j with weight d. We propose a duality-based distributed algorithm to determine the optimal cash injection amount C and its corresponding optimal allocation among the nodes, to minimize the cost function C+?D which is a linear combination of two terms: the total cash injected into the system and the total unpaid liabilities D in the system after the cash injection. The user-selected coefficient ? controls the relative importance of the two terms in the cost function. © 2013 IEEE.",10.1109/GlobalSIP.2013.6737100,"Purdue University, West Lafayettem, IN, 47906, United States",Rejected
10,The Known Unknowns: Discovering Trade-Offs Between Heterogeneous Code Changes: Invited Paper,"Vespucci, M.T. and Zigrino, S. and Bazzocchi, F. and Gelmini, A.",International Series in Operations Research and Management Science,2013,"Trigeneration, or combined cooling, heat and power (CCHP), is the process by which electricity, heating and cooling are simultaneously generated from the combustion of a fuel. Trigeneration systems for serving the electricity, heating and cooling loads in residential districts are a possible solution to enhance energy efficiency, reduce fossil fuel consumption and increase the use of renewable energy sources in the residential sector. Technical, economical and financial issues have to be taken into account when planning a trigeneration system or when expanding an existing generation system. In this chapter a two-step decision support procedure is presented for analysing alternative system configurations. The first step is based on a mixed integer linear programming model that allows to describe the system components in great detail and computes the annual optimal dispatch of the distributed generation system with a hourly discretization, taking into account load profiles, fuel costs and technical constraints. The optimal dispatch is then used for the economic evaluation of the investment, taking into account prices of commodities, taxation, incentives and financial aspects. The procedure allows to compare alternative plant configurations and can be used as a simulation tool, for assessing the system sensitivity to variations of model parameters (e.g. incentives and ratio debt/equity). © Springer Science+Business Media New York 2013.",10.1007/978-1-4614-9035-7_11,"Department of Management, Economics and Quantitative Methods, University of Bergamo, Italy; Ricerca sul Sistema Energetico (RSE) SpA, Milano, Italy",Rejected
11,Exploring the relationship between refactoring and code debt indicators,,"13th Symposium on Programming Languages and Software Tools, SPLST 2013 - Proceedings",2013,The proceedings contain 20 papers. The topics discussed include: monitoring evolution of code complexity in agile/lean software development; configuring software for reuse with VCL; identifying code clones with RefactorErl; code coverage measurement framework for android devices; the role of dependency propagation in the accumulation of technical debt for software implementations; a regression test selection technique for magic systems; service composition for end-users; towards a reference architecture for server-side mashup ecosystem; code oriented approach to 3D widgets; the browser as a host environment for visually rich applications; random number generator for C++ template metaprograms; the asymptotic behavior of the proportion of hard instances of the halting problem; and implementation of natural language semantic wildcards using prolog.,,,Rejected
12,A Transformational Approach to Managing Data Model Evolution of Web Services,"Holvitie, J. and Laakso, M.-J. and Rajala, T. and Kaila, E. and Leppänen, V.","13th Symposium on Programming Languages and Software Tools, SPLST 2013 - Proceedings",2013,"Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation but they all have their shortcomings in maintaining this information. This paper presents a case study that explores the role of dependency propagation in the accumulation of technical debt for a software implementation. A clear relation between the two is identified in addition to some differentiating characteristics.We conclude that formalization of this relation can lead to solutions for the maintenance problem. As such, we use this case study to improve the propagation method implemented in our DebtFlag tool.",,"TUCS, Turku Centre for Computer Science, Turku, Finland; University of Turku, Department of Information Technology, Turku, Finland",Accepted
13,Quick remedy commits and their impact on mining software repositories,"Petej, P. and Gotovac, S.",Proceedings - IEEE Symposium on Computers and Communications,2013,"In distributed software systems and processes that use large amounts of documents there is an essential need for data mining and document classification algorithms. These algorithms are aimed at optimizing the process, making it less error prone. In this paper we deal with the problem of document classification using two machine learning algorithms. Both algorithms use stamp images in documents to classify the document itself. The idea is to classify the document stamp and then, using known information about the stamp owner, search the rest of the document for relevant data. Our results are based on actual documents used in the process of debt collection and our training and test datasets are randomly picked from an existing database with over three million documents. The mentioned machine learning classification algorithms are implemented and compared in terms of classification accurateness, robustness and speed. © 2013 IEEE.",10.1109/ISCC.2013.6755055,"University of Split, Faculty of Electrical Engineering, Mechanical Engineering and Naval Architecture, Split, Croatia",Rejected
14,On the relation between architectural smells and source code changes,"Hwang, S. and Park, M. and Lee, H.-S.",Mathematical and Computer Modelling,2013,"The Korean government announced new policies to regulate mortgage lending that aim to decrease both the loan-to-value ratio and the debt-to-income ratio, in 2008. These policies were implemented on the expectation that they will control housing demand and stabilize house prices, focusing only on the current market status. However, it is difficult to analyze the effectiveness of these kinds of policies using an empirical approach. Consequently, a comprehensive and dynamic method is necessary for analyzing the effects of policies. This paper, therefore, develops an integrated and dynamic model for analyzing policy impacts. Using this model, the validity of mortgage-lending policies is assessed, and the interplay between various factors (including mortgage loans, housing prices, and demand) is examined. The model is also used to analyze unnoticed side effects in the real estate and financial markets. The dynamic analysis in this research can be applied not only to policy implication, but also to other dynamic fields such as project management, financial planning and demand analysis. © 2011.",10.1016/j.mcm.2011.06.023,"Department of Architecture, Seoul National University, Bldg 39-425, Gwanak 599 Gwanak-ro, Gwanak-gu, Seoul 151-742, South Korea",Rejected
15,How do i refactor this? An empirical study on refactoring trends and topics in Stack Overflow,"dos Santos, P.S.M. and Varella, A. and Dantas, C.R. and Borges, D.B.",Lecture Notes in Business Information Processing,2013,"This paper reports the experience of an architecture team of a software development department with 25 agile teams in supporting technical decisions regarding technical practices. The main motivation to use technical debt metaphor was its acknowledged potential in driving software development and maintenance decisions, especially those long term maintenance tradeoffs which are usually less visible to developers and decision makers in general. We propose the use of a ""technical debt board"" with main technical debt categories to manage and visualize the high-level debt, combined with tools to measure it at low-level (software metrics and other kind of static analysis). We have found that our approach improved the teams awareness about the technical debt, stimulated a beneficial competition between teams towards the debt payment and enhanced the communication regarding technical decisions. © Springer-Verlag Berlin Heidelberg 2013.",10.1007/978-3-642-38314-4_9,"Federal University of Rio de Janeiro, System Engineering and Computer Science Department, Cidade Universitária  Centro de Tecnologia, Rio de Janeiro, Brazil; Petrobras, Exploitation and Production Business Solutions, Centro, Rio de Janeiro, 20031-912, Brazil",Accepted
16,Architectural design decisions that incur technical debt  An industrial case study,"Tom, E. and Aurum, A. and Vidgen, R.",Journal of Systems and Software,2013,"Context: Whilst technical debt is considered to be detrimental to the long term success of software development, it appears to be poorly understood in academic literature. The absence of a clear definition and model for technical debt exacerbates the challenge of its identification and adequate management, thus preventing the realisation of technical debt's utility as a conceptual and technical communication device. Objective: To make a critical examination of technical debt and consolidate understanding of the nature of technical debt and its implications for software development. Method: An exploratory case study technique that involves multivocal literature review, supplemented by interviews with software practitioners and academics to establish the boundaries of the technical debt phenomenon. Result: A key outcome of this research is the creation of a theoretical framework that provides a holistic view of technical debt comprising a set of technical debts dimensions, attributes, precedents and outcomes, as well as the phenomenon itself and a taxonomy that describes and encompasses different forms of the technical debt phenomenon. Conclusion: The proposed framework provides a useful approach to understanding the overall phenomenon of technical debt for practical purposes. Future research should incorporate empirical studies to validate heuristics and techniques that will assist practitioners in their management of technical debt. © 2013 Elsevier Inc. © 2013 Elsevier Inc. All rights reserved.",10.1016/j.jss.2012.12.052,"School of Information Systems, Technology and Management, University of New South Wales, Sydney, Australia; Department of Management Systems, Hull University Business School, Hull, United Kingdom",Accepted
17,Algorithmic bias in data-driven innovation in the age of AI,,ACM International Conference Proceeding Series,2013,The proceedings contain 31 papers. The topics discussed include: applying theory of reasoned action in the context of software development practices: insights into teams intention and behavior; realizing web effort estimation: a qualitative investigation; evaluating benefit and quality of technical software documentation: an empirical study; what do game developers expect from development and design tools?; a case study on effectively identifying technical debt; an exploratory study to investigate the impact of conceptualization in smell detection; an externally replicated experiment to evaluate software testing methods; a novel approach for discovering barriers in using automatic static analysis; a conceptual model to address threats to validity in controlled experiments; and a review of research on risk analysis methods for information systems.,,,Rejected
18,Reducing Incidents in Microservices by Repaying Architectural Technical Debt,"Zazworka, N. and Spínola, R.O. and Vetro, A. and Shull, F. and Seaman, C.",ACM International Conference Proceeding Series,2013,"Context: The technical debt (TD) concept describes a tradeoff between short-term and long-term goals in software development. While it is highly useful as a metaphor, it has utility beyond the facilitation of discussion, to inspire a useful set of methods and tools that support the identification, measurement, monitoring, management, and payment of TD. Objective: This study focuses on the identification of TD. We evaluate human elicitation of TD and compare it to automated identification. Method: We asked a development team to identify TD items in artifacts from a software project on which they were working. We provided the participants with a TD template and a short questionnaire. In addition, we also collected the output of three tools to automatically identify TD and compared it to the results of human elicitation. Results: There is little overlap between the TD reported by different developers, so aggregation, rather than consensus, is an appropriate way to combine TD reported by multiple developers. The tools used are especially useful for identifying defect debt but cannot help in identifying many other types of debt, so involving humans in the identification process is necessary. Conclusion: We have conducted a case study that focuses on the practical identification of TD, one area that could be facilitated by tools and techniques. It contributes to the TD landscape, which depicts an understanding of relationships between different types of debt and how they are best discovered. Copyright 2013 ACM.",10.1145/2460999.2461005,"Fraunhofer USA Center for Experimental Software Engineering, College Park, United States; Graduate Program in Systems and Computer, UNIFACS, Salvador, Brazil; Dept. of Control and Computer Engineering, Politecnico di Torino, Torino, Italy; Department of Information Systems, UMBC, Baltimore, United States; Elsevier Information Systems GmbH, Frankfurt, Germany",Accepted
19,Are 20% of Classes Responsible for 80% of Refactorings?,"Woodard, C.J. and Ramasubbu, N. and Tschang, F.T. and Sambamurthy, V.",MIS Quarterly: Management Information Systems,2013,"As information technology becomes integral to the products and services in a growing range of industries, there has been a corresponding surge of interest in understanding how firms can effectively formulate and execute digital business strategies. This fusion of IT within the business environment gives rise to a strategic tension between investing in digital artifacts for long-term value creation and exploiting them for short-term value appropriation. Further, relentless innovation and competitive pressures dictate that firms continually adapt these artifacts to changing market and technological conditions, but sustained profitability requires scalable architectures that can serve a large customer base and stable interfaces that support integration across a diverse ecosystem of complementary offerings. The study of digital business strategy needs new concepts and methods to examine how these forces are managed in pursuit of competitive advantage. We conceptualize the logic of digital business strategy in terms of two constructs: design capital (i.e., the cumulative stock of designs owned or controlled by a firm) and design moves (i.e., the discrete strategic actions that enlarge, reduce, or modify a firm's stock of designs). We also identify two salient dimensions of design capital, namely, option value and technical debt. Using embedded case studies of four firms, we develop a rich conceptual model and testable propositions to lay out a design-based logic of digital business strategy. This logic highlights the interplay between design moves and design capital in the context of digital business strategy and contributes to a growing body of insights that link the design of digital artifacts to competitive strategy and firm-level performance.",10.25300/MISQ/2013/37.2.10,"School of Information Systems, Singapore Management University, Singapore 178902, Singapore; Katz Graduate School of Business, University of Pittsburgh, Pittsburgh, PA 15260, United States; Lee Kong Chian School of Business, Singapore Management University, Singapore 178899, Singapore; Eli Broad College of Business, Michigan State University, East Lansing, MI 48824, United States",Rejected
20,Measuring affective states from technical debt: A psychoempirical software engineering experiment,"Izurieta, C. and Griffith, I. and Reimanis, D. and Luhr, R.","2013 International Conference on Information Science and Applications, ICISA 2013",2013,"Measurements are subject to random and systematic errors, yet almost no study in software engineering makes significant efforts in reporting these errors. Whilst established statistical techniques are well suited for the analysis of random error, such techniques are not valid in the presence of systematic errors. We propose a departure from de-facto methods of reporting results of technical debt measurements for more rigorous techniques drawn from established methods in the physical sciences. This line of inquiry focuses on technical debt calculations; however it can be generalized to quantitative software engineering studies. We pose research questions and seek answers to the identification of systematic errors in metric-based tools, as well as the reporting of such errors when subjected to propagation. Exploratory investigations reveal that the techniques suggested allow for the comparison of uncertainties that come from differing sources. We suggest the study of error propagation of technical debt is a worthwhile subject for further research and techniques seeded from the physical sciences present viable options that can be used in software engineering reporting. © 2013 IEEE.",10.1109/ICISA.2013.6579461,"Software Engineering Laboratory, Department of Computer Science, Montana State University, United States",Accepted
21,How disabled tests manifest in test maintainability challenges?,"Barr, J.R. and Dobson, W.K.",International Journal of Semantic Computing,2013,"Artificial neural networks, due to their ability to find the underlying model even in complex highly nonlinear and highly coupled problems, have found significant use as prediction engines in many domains. However, in problems where the input space is of high dimensionality, there is the unsolved problem of reducing dimensionality in some optimal way such that Shannon information important to the prediction is preserved. The important Shannon information may be a subset of total information with an unknown partition, unknown coupling and linear or nonlinear in nature. Solving this problem is an important step in classes of machine learning problems and many data mining applications. This paper describes a semi-automatic algorithm that was developed over a 5-year period while solving problems with increasing dimensionality and difficulty in (a) flow prediction for a magnetically levitated artificial heart (13 dimensions), (b) simultaneous chemical identification/concentration in gas chromatography (22 detection dimensions with wavelet compressed time series of 180,000 points), and finally in (c) financial analytics portfolio prediction in credit card and sub-prime debt problems (80 to 300 dimensions of sparse data with a portfolio value of approximately US$300,000,000.00). The algorithm develops a map of input space combinations and their importance to the prediction. This information is used directly to construct the optimal neural network topology for a given error performance. Importantly, the algorithm also produces information that shows whether the space between input nodes is linear or nonlinear; an important parameter in determining the number of training points required in the reduced dimensionality of the training set. Software was developed in the MatLAB environment using the Artificial Neural Network Toolbox, Parallel and Distributed Computing toolboxes, and runs on Windows or Linux based supercomputers. Trained neural networks can be compiled and linked to server applications and run on normal servers or clusters for transaction or web based processing. In this paper, application of the algorithm to two separate financial analytics prediction problems with large dimensionality and sparse data sets are shown. The algorithm is an important development in machine learning for an important class of problems in prediction, clustering, image analysis, and data mining. In the first example application for subprime debt portfolio analysis, performance of the neural network provided a 98.4% prediction rate, compared to 33% rate using traditional linear methods. In the second example application regarding credit card debt, performance of the algorithm provided a 95% accurate prediction (in terms of match rate), and is 10% better than other methods we have compared against, primarily logistic regression. © 2013 World Scientific Publishing Company.",10.1142/S1793351X13400060,"Department of Statistics, San Diego State University, San Diego, CA  92182, United States; Sigma Technology Holdings, LLC, 14229 Canyon Vine Cove, Salt Lake City, UT  84020, United States",Rejected
22,Duplicated code pattern mining in visual programming languages,"Shull, F. and Falessi, D. and Seaman, C. and Diep, M. and Layman, L.",Perspectives on the Future of Software Engineering: Essays in Honor of Dieter Rombach,2013,"In this chapter, we discuss recent progress and opportunities in empirical software engineering by focusing on a particular technology, Technical Debt (TD), which ties together many recent developments in the field. Recent advances in TD research are providing empiricists the chance to make more sophisticated recommendations that have observable impact on practice. TD uses a financial metaphor and provides a framework for articulating the notion of tradeoffs between the short-term benefits and the long-term costs of software development decisions. TD is seeing an explosion of interest in the practitioner community, and research in this area is quickly having an impact on practice. We argue that this is due to several strands of empirical research reaching a level of maturity that provides useful benefits to practitioners, who in turn provide excellent data to researchers. They key is providing observable benefit to practitioners, such as the ability to tie technical debt measures to business goals, and the ability to articulate more sophisticated value-based propositions regarding how to prioritize rework. TD is an interesting case study in how the maturing field of empirical software engineering research is paying dividends. It is only a little hyperbolic to call this a watershed moment for empirical study, where many areas of progress are coming to a head at the same time. © 2013 Springer-Verlag Berlin Heidelberg. All rights are reserved.",10.1007/978-3-642-37395-4_12,"Fraunhofer Center for Experimental Software Engineering, 5825 University Research Court, College Park, United States",Accepted
23,Loss given default decomposition using mixture distributions of in-default events,"Brázdil, T. and Chen, T. and Forejt, V. and Novotný, P. and Simaitis, A.","Leibniz International Proceedings in Informatics, LIPIcs",2013,"Solvency games, introduced by Berger et al., provide an abstract framework for modelling decisions of a risk-averse investor, whose goal is to avoid ever going broke. We study a new variant of this model, where, in addition to stochastic environment and fixed increments and decrements to the investor's wealth, we introduce interest, which is earned or paid on the current level of savings or debt, respectively. We study problems related to the minimum initial wealth sufficient to avoid bankruptcy (i.e. steady decrease of the wealth) with probability at least p. We present an exponential time algorithm which approximates this minimum initial wealth, and show that a polynomial time approximation is not possible unless P = NP. For the qualitative case, i.e. p = 1, we show that the problem whether a given number is larger than or equal to the minimum initial wealth belongs to NP ? coNP, and show that a polynomial time algorithm would yield a polynomial time algorithm for mean-payoff games, existence of which is a longstanding open problem. We also identify some classes of solvency MDPs for which this problem is in P. In all above cases the algorithms also give corresponding bankruptcy avoiding strategies. © Tomá Brázdil, Taolue Chen, Vojtech Forejt, Petr Novotný, and Aistis Simaitis;.",10.4230/LIPIcs.FSTTCS.2013.487,"Faculty of Informatics, Masaryk University, Czech Republic; Department of Computer Science, Middlesex University London, United Kingdom; Department of Computer Science, University of Oxford, United Kingdom",Rejected
24,Method for Treatment and Its Incidence in the Change of Social Rehabilitation Regime Using Compensatory Fuzzy Logic,"Fernández-Navarro, F. and Campoy-Muñoz, P. and La Paz-Marín, M.-De. and Hervás-Martínez, C. and Yao, X.",IEEE Transactions on Cybernetics,2013,"The current European debt crisis has drawn considerable attention to credit-rating agencies' news about sovereign ratings. From a technical point of view, credit rating constitutes a typical ordinal regression problem because credit-rating agencies generally present a scale of risk composed of several categories. This fact motivated the use of an ordinal regression approach to address the problem of sovereign credit rating in this paper. Therefore, the ranking of different classes will be taken into account for the design of the classifier. To do so, a novel model is introduced in order to replicate sovereign rating, based on the negative correlation learning framework. The methodology is fully described in this paper and applied to the classification of the 27 European countries' sovereign rating during the 2007-2010 period based on Standard and Poor's reports. The proposed technique seems to be competitive and robust enough to classify the sovereign ratings reported by this agency when compared with other existing well-known ordinal and nominal methods. © 2013 IEEE.",10.1109/TSMCC.2013.2247595,"Department of Computer Science and Numerical Analysis, University of Córdoba, 14004 Córdoba, Spain; Advanced Concepts Team, European Space Research and Technology Centre, European Space Agency, 2201 AZ Noordwijk, Netherlands; Department of Economics, ETEA, University of Córdoba, 14004 Córdoba, Spain; Centre of Excellence for Research in Computational Intelligence and Applications, School of Computer Science, University of Birmingham, Birmingham, B15 2TT, United Kingdom",Rejected
25,Why do builds fail?A conceptual replication study,"Dunayev, B.B.",Cybernetics and Systems Analysis,2013,"In highly developed countries, the policy of raising the standard of living is conducted at the expense of the lack of social security and growth of public debt with little inflation, rather than production. Increasing the consumer demand of the population through the growth of the public debt increases the volume of production and the GDP; however, it could be a time when the debt service payment exceeds the GDP growth and uncontrolled growth of indebtedness begins, which will lead to bankruptcy or default. © 2013 Springer Science+Business Media New York.",10.1007/s10559-013-9576-2,"Engineering Center of the National Academy of Sciences of Ukraine, Kyiv, Ukraine",Rejected
26,Agile Development Practices Applied to Software Startups: A Systematic Mapping Review,"Villar, A. and Matalonga, S.","CIbSE 2013: 16th Ibero-American Conference on Software Engineering - Memorias de la 16th Conferencia Iberoamericana de Ingenieria de Software, CIbSE 2013",2013,,,"Universidad ORT Uruguay, Montevideo Uruguay, Uruguay",Rejected
27,Semi-automatic Column Type Inference for CSV Table Understanding,"Stal, M.",Economics-Driven Software Architecture,2014,"Some organizations consider software architects as advanced software engineers with a high-technology bias. From their perspective, architects do not require expertise in business and strategy. Even software architects themselves tend to believe they are only responsible for technology and design decisions but not for economic aspects. This attitude leads to solutions that are technically sound but fail to deliver the expected return on investment. If software architects do not understand economics and the business, they cannot come up with economic solutions that support the business case and business strategy. This is why mission-critical projects often do not achieve their business goals, thus incurring high additional costs. Although this holds for other engineering disciplines as well, the high flexibility expectations regarding software and its creation increase the economic risks. © 2014 Elsevier Inc. All rights reserved.",10.1016/B978-0-12-410464-8.00007-6,"University of Groningen, Groningen, Netherlands",Rejected
28,The human in model-driven engineering loop: A case study on integrating handwritten code in model-driven engineering repositories,"Zazworka, N. and Vetro, A. and Izurieta, C. and Wong, S. and Cai, Y. and Seaman, C. and Shull, F.",Software Quality Journal,2014,"Software systems accumulate technical debt (TD) when short-term goals in software development are traded for long-term goals (e.g., quick-and-dirty implementation to reach a release date versus a well-refactored implementation that supports the long-term health of the project). Some forms of TD accumulate over time in the form of source code that is difficult to work with and exhibits a variety of anomalies. A number of source code analysis techniques and tools have been proposed to potentially identify the code-level debt accumulated in a system. What has not yet been studied is if using multiple tools to detect TD can lead to benefits, that is, if different tools will flag the same or different source code components. Further, these techniques also lack investigation into the symptoms of TD interest that they lead to. To address this latter question, we also investigated whether TD, as identified by the source code analysis techniques, correlates with interest payments in the form of increased defect- and change-proneness. Comparing the results of different TD identification approaches to understand their commonalities and differences and to evaluate their relationship to indicators of future TD interest. We selected four different TD identification techniques (code smells, automatic static analysis issues, grime buildup, and Modularity violations) and applied them to 13 versions of the Apache Hadoop open source software project. We collected and aggregated statistical measures to investigate whether the different techniques identified TD indicators in the same or different classes and whether those classes in turn exhibited high interest (in the form of a large number of defects and higher change-proneness). The outputs of the four approaches have very little overlap and are therefore pointing to different problems in the source code. Dispersed Coupling and Modularity violations were co-located in classes with higher defect-proneness. We also observed a strong relationship between Modularity violations and change-proneness. Our main contribution is an initial overview of the TD landscape, showing that different TD techniques are loosely coupled and therefore indicate problems in different locations of the source code. Moreover, our proxy interest indicators (change- and defect-proneness) correlate with only a small subset of TD indicators. © 2013, Springer Science+Business Media New York.",10.1007/s11219-013-9200-8,"Elsevier Information Systems GmbH, Frankfurt am Main, Germany; Fraunhofer CESE, College Park, MD, United States; Automatics and Informatics Department, Politecnico di Torino, Turin, Italy; Department of Computer Science, Montana State University, Bozeman, MT, United States; Siemens Healthcare, Malvern, PA, United States; Department of Computer Science, Drexel University, Philadelphia, PA, United States; Department of Information Systems, UMBC, Baltimore, MD, United States",Accepted
29,Age debt: A general framework for minimizing age of information,"Wei, F. and Lecchini-Visintini, A.",Systems and Control Letters,2014,We study the stability of receding horizon control for continuous-time non-linear stochastic differential equations. We illustrate the results with a simulation example in which we employ receding horizon control to design an investment strategy to repay a debt. © 2013 Elsevier B.V. All rights reserved.,10.1016/j.sysconle.2013.11.004,"School of Mathematics, Shandong University, Jinan, 250100, China; Department of Engineering, University of Leicester, Leicester, LE1 7RH, United Kingdom",Rejected
30,On the lack of consensus among technical debt detection tools,"Duan, H. and Wang, Z. and bin Chik, A.R.",WIT Transactions on Information and Communication Technologies,2014,"This study makes a research by 35 listed companies' 2007-2009 annual financial data of real estate as the subject and used the SPSS software as a tool to examine the relation between listed firm capital structure and performance. The research find that the debt ratio of the listed companies had a significant negative effect on Tobin's Q, and it had a more significant positive effect on ROE. By probing into the capital structure of real estate enterprises, the end part clearly defines the reasonable combination in the margin and the strategy of the development of the real estate enterprise in the future. © 2014 WIT Press.",10.2495/ISME20133163,"Hebei University Baoding, China; University Utara of Malaysia Sintok, Kedah, Malaysia",Rejected
31,Characterizing Technical Debt and Antipatterns in AI-Based Systems: A Systematic Mapping Study,"Siebra, C.A. and Cavalcanti, A. and Silva, F.Q.B. and Santos, A.L.M. and Gouveia, T.B.","Proceedings - IEEE 25th International Symposium on Software Reliability Engineering Workshops, ISSREW 2014",2014,"The Technical Debt (TD) metaphor has been used in the software community as a way to manage and communicate the long-term consequences that some technical decisions may cause. Although intuitive, researches in TD do not discuss practical approaches to identify and monitor TD items, which could be applied in a transparent way during the process of software evolution. This work proposes a technique based on software metrics that automates the process of TD identification and monitoring. For that end, a subset of metrics was analyzed and related to aspects of TD items. As a form to validate the technique, it was used to analyze a TD item from a past 7 years multinational project. Evidences suggest that TD items can be related to software metrics so that software metric tools could be an important resource to automate the identification and monitoring of TD items. © 2014 IEEE.",10.1109/ISSREW.2014.59,"Informatics Center, Federal University of Paraiba, Joao Pessoa-PB, Brazil; Informatics Center, Federal University of Pernambuco, Recife-PE, Brazil; CIn/Samsung Laboratory of Research and Development, Recife-PE, Brazil",Accepted
32,"Security Debt: Characteristics, Product Life-Cycle Integration and Items","Suryanarayana, G. and Samarthyam, G. and Sharma, T.",Refactoring for Software Design Smells: Managing Technical Debt,2014,"Awareness of design smells - indicators of common design problems - helps developers or software engineers understand mistakes made while designing, what design principles were overlooked or misapplied, and what principles need to be applied properly to address those smells through refactoring. Developers and software engineers may ""know"" principles and patterns, but are not aware of the ""smells"" that exist in their design because of wrong or mis-application of principles or patterns. These smells tend to contribute heavily to technical debt - further time owed to fix projects thought to be complete - and need to be addressed via proper refactoring. Refactoring for Software Design Smells presents 25 structural design smells, their role in identifying design issues, and potential refactoring solutions. Organized across common areas of software design, each smell is presented with diagrams and examples illustrating the poor design practices and the problems that result, creating a catalog of nuggets of readily usable information that developers or engineers can apply in their projects. The authors distill their research and experience as consultants and trainers, providing insights that have been used to improve refactoring and reduce the time and costs of managing software projects. Along the way they recount anecdotes from actual projects on which the relevant smell helped address a design issue. Contains a comprehensive catalog of 25 structural design smells (organized around four fundamental design principles) that contribute to technical debt in software projects Presents a unique naming scheme for smells that helps understand the cause of a smell as well as points toward its potential refactoring Includes illustrative examples that showcase the poor design practices underlying a smell and the problems that result Covers pragmatic techniques for refactoring design smells to manage technical debt and to create and maintain high-quality software in practice Presents insightful anecdotes and case studies drawn from the trenches of real-world projects. © 2015 Elsevier Inc. All rights reserved.",10.1016/C2013-0-23413-9,"Research and Technology Center, Siemens Technology and Services Pvt. Ltd, Bangalore, India; Bangalore, India; Software Architecture and Development group, Research and Technology Center, Siemens Technology and Services Pvt. Ltd., Bangalore, India",Accepted
33,Assessing Smart Contracts Security Technical Debts,"Bellomo, S. and Ernst, N. and Nord, R. and Kazman, R.",Proceedings of the International Conference on Dependable Systems and Networks,2014,"There is growing interest in continuous delivery practices to enable rapid and reliable deployment. While practices are important, we suggest architectural design decisions are equally important for projects to achieve goals such continuous integration (CI) build, automated testing and reduced deployment-cycle time. Architectural design decisions that conflict with deploy ability goals can impede the team's ability to achieve the desired state of deployment and may result in substantial technical debt. To explore this assertion, we interviewed three project teams striving to practicing continuous delivery. In this paper, we summarize examples of the deploy ability goals for each project as well as the architectural decisions that they have made to enable deploy ability. We present the deploy ability goals, design decisions, and deploy ability tactics collected and summarize the design tactics derived from the interviews in the form of an initial draft version hierarchical deploy ability tactic tree. © 2014 IEEE.",10.1109/DSN.2014.104,"Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States",Rejected
34,The Need for Holistic Technical Debt Management across the Value Stream: Lessons Learnt and Open Challenges,"Alraouji, Y. and Bramantoro, A.","MEDES 2014 - 6th International Conference on Management of Emergent Digital EcoSystems, Proceedings",2014,"In recent years, fraud in telecommunication industry becomes one of encumbrance for a telecommunication operator which is growing dramatically. It is befall a serious international problem for GSM and PSTN network service providers. It has undoubtedly become a significant source of revenue losses and bad debts to the telecommunication industry, and with the expected continuing growth in revenue it can be expected that fraud will increase proportionally. It has become a mainreason of revenue losses in the industry of telecommunications. This study focuses on International call fraud detection system and its techniques. It proposes a new technique to detect fraud in international call by classifying the CDRs for roaming subscribers. SIM Boxes (also known as GSM Gateways) causes significant interconnect revenue losses for mobile operators by bypassing official interconnections which makes the operators lose millions of wholesale minutes. This research provides an algorithm to determine suspected fraud number. Even if ordinal CLI is unavailable, the solution can successfully track calls path. The proposed algorithm enables telecommunication operators apply fraud detection solution at minimum cost of operation. There are two main parts of study. The first one is the theory of fraud in telecommunication operators, fraud management system and its techniques. The second one is the implemented solution to detect fraud in international call by utilizing homework data. Copyright © 2014 ACM.",10.1145/2668260.2668272,"Information System Department, College of Computer and Information Sciences, Al-Imam Muhammad Ibn Saud Islamic University, Riyadh, Saudi Arabia",Rejected
35,Carrot and Stick approaches revisited when managing Technical Debt in an educational context,"Malo, P. and Sinha, A. and Korhonen, P. and Wallenius, J. and Takala, P.",Journal of the Association for Information Science and Technology,2014,"The use of robo-readers to analyze news texts is an emerging technology trend in computational finance. Recent research has developed sophisticated financial polarity lexicons for investigating how financial sentiments relate to future company performance. However, based on experience from fields that commonly analyze sentiment, it is well known that the overall semantic orientation of a sentence may differ from that of individual words. This article investigates how semantic orientations can be better detected in financial and economic news by accommodating the overall phrasestructure information and domain-specific use of language. Our three main contributions are the following: (a) a human-annotated finance phrase bank that can be used for training and evaluating alternative models; (b) a technique to enhance financial lexicons with attributes that help to identify expected direction of events that affect sentiment; and (c) a linearized phrase-structure model for detecting contextual semantic orientations in economic texts. The relevance of the newly added lexicon features and the benefit of using the proposed learning algorithm are demonstrated in a comparative study against general sentiment models as well as the popular word frequency models used in recent financial studies. The proposed framework is parsimonious and avoids the explosion in feature space caused by the use of conventional n-gram features. © 2013 ASIS&T.",10.1002/asi.23062,"Department of Information and Service Economy, Aalto University School of Business, P.O. Box 21210, FI-00076 Aalto, Finland; Department of Finance and Accounting, Aalto University School of Business, P.O. Box 21210, FI-00076 Aalto, Finland",Rejected
36,Self-admitted technical debt in R Packages: An exploratory study,"De Florio, V.","2014 IEEE Conference on Norbert Wiener in the 21st Century: Driving Technology's Future, 21CW 2014 - Incorporating the Proceedings of the 2014 North American Fuzzy Information Processing Society Conference, NAFIPS 2014, Conference Proceedings",2014,"The term gestalt, when used in the context of general systems theory, assumes the value of 'systemic touchstone', namely a figure of reference useful to categorize the properties or qualities of a set of systems. Typical gestalts used, e.g., in biology, are those based on anatomical or physiological characteristics, which correspond respectively to architectural and organizational design choices in natural and artificial systems. In this paper we discuss three gestalts of general systems theory: behavior, organization, and substance, which refer respectively to the works of Wiener, Boulding, and Leibniz. Our major focus here is the system introduced by the latter. Through a discussion of some of the elements of the Leibnitian System, and by means of several novel interpretations of those elements in terms of today's computer science, we highlight the debt that contemporary research still has with this Giant among the giant scholars of the past. © 2014 IEEE.",10.1109/NORBERT.2014.6893923,"PATS Research Group, University of Antwerp, IMinds Research Institute, Middelheimlaan 1, Antwerpen, 2020, Belgium",Rejected
37,Technical debt in the peer-review documentation of r packages: A ropensci case study,"Hu, Y. and Hou, J.",WIT Transactions on Information and Communication Technologies,2014,"The purpose of this paper is to investigate the extent to which Chinese Growth Enterprises Market (GEM) listed companies use the Internet for investor relations (IR) and examine what impacts the implement of Internet investor relations (IIR). The paper reviews literature to develop a conceptual index of IIR. The index has four premises, namely, accessibility, multimediality, interactivity, and timeliness. And data were collected from 100 GEM companies web site. A regression model is used to estimate the level of IIR and some firm characteristics in order to find the influence factors. The paper finds most Chinese company have using Internet technology to communicate with investors but only take partial advantage of Internet and have badly failed in usage of multimedia devices and interactivity. As expected, the paper finds companies with more size, better performance, a relatively low proportion of debt are more likely to engage in IIR activities. The current paper contributes to the literature by being the first study to investigate the Internet usage for Chinese company to disclose information to their investors. © 2014 WIT Press.",10.2495/MIIT131722,"Department of Financial Management, Business School, Sichuan Normal University, Chengdu, China",Rejected
38,Data balancing improves self-admitted technical debt detection,"Molano, J.I.R. and Casallas, J.A.T. and Osma, J.I.P.",Lecture Notes in Business Information Processing,2014,"In service companies, information is the most valuable input, so look for processes that generate the best results for the increase of competitive advantages in an optimal way. Hence the need to align the use of the TI in organizational processes and find metrics to control their inclusion and participation. Therefore, that developed a methodological proposal for the integration of the Balanced Scorecard and the governance of the TI, this describes a step by step as to assess and define indicators that measure the function of the it tools in each process and to ensure that intervention will favor the organizational objectives. The methodology was implemented in a management company (debt recovery) recovery where demonstrate more efficient processes and identified weaknesses, and misuse of the it tools, which was a great contribution since it took corrective and preventive measures as well as allowing the efficient administration and management, together with the alignment of the processes for the implementation of the strategy. © Springer International Publishing Switzerland 2014.",10.1007/978-3-319-08618-7_31,"Universidad Distrital Francisco Jose de Caldas, Bogotá, Colombia",Rejected
39,Predicting Community Smells' Occurrence on Individual Developers by Sentiments,"Sneed, H.M.",Lecture Notes in Business Information Processing,2014,"Technical Debt is a term coined by Ward Cunningham to denote the amount of rework required to put a piece of software into that state which it should have had from the beginning. The term outdates the agile revolution. Technical debt can occur using any development approach, but since agile development has become wide spread the notion of ""technical debt"" has gained much more attention. That is because if agile development is not done properly, technical debt accrues very fast and threatens to strangle the project. In this paper the author describes how technical debt comes to being, how it can be measured and what can be done to prevent it in agile development. The emphasis of the paper is on how to prevent it. What measures are necessary in an agile development project to keep technical debt from accruing over time? The paper lists out a number of measures which can be taken - organizational, procedural and technical. Automated tools play an important role in the struggle against technical debt. Samples are given how a tool can be helpful in identifying and removing problems before they get out of hand. Also important is an external auditing agency which monitors projects in progress with the aide of automated tools. In the end a case study is presented which illustrates the monitoring of technical debt within an agile development and what counter measures are required to stop it. © Springer International Publishing Switzerland 2014.",10.1007/978-3-319-03602-1_4,"ANECON GmbH, Vienna, Austria; Fachhochschule Hagenberg, Upper Austria, Austria",Accepted
40,Arqi: Model for developing web application,"Bellotti, V. and Cambridge, S. and Hoy, K. and Shih, P.C. and Handalian, L. and Han, K. and Carroll, J.M.",Conference on Human Factors in Computing Systems - Proceedings,2014,"Commercial peer-to-peer service exchange businesses, such as AirBnB, Lyft and TaskRabbit, are expanding rapidly, but their non-profit counterparts are lagging behind. We conducted a field study of the most prominent of these, timebanking; a system in which 'time dollars' are earned and spent by people providing services for and receiving them from each other. Our study exposed problems with the very metaphor of banking itself, which deter participation. In this paper we discuss how these problems can be tackled with user experience design for systems supporting timebanking. Our design ideas emphasize the personal and social benefits of participation, and avoid such unappealing concepts as debt and neediness that the timebanking metaphor falls afoul of.",10.1145/2556288.2557061,"Palo Alto Research Center, 3333 Coyote Hill Road, Palo Alto, CA, 94304, United States; UC Berkeley School of Information, 102 South Hall Road, Berkeley CA 94720, United States; College of Information Sciences and Technology, Pennsylvania State University, University Park, PA 16802, United States; California College of the Arts, 1111 Eighth Street, San Francisco, CA 94107, United States; Jack Baskin School of Computer Engineering, UC Santa Cruz, CA, United States",Rejected
41,GDP growth prediction of bangladesh using machine learning algorithm,"Wang, G. and Ma, J. and Yang, S.",Expert Systems with Applications,2014,"With the recent financial crisis and European debt crisis, corporate bankruptcy prediction has become an increasingly important issue for financial institutions. Many statistical and intelligent methods have been proposed, however, there is no overall best method has been used in predicting corporate bankruptcy. Recent studies suggest ensemble learning methods may have potential applicability in corporate bankruptcy prediction. In this paper, a new and improved Boosting, FS-Boosting, is proposed to predict corporate bankruptcy. Through injecting feature selection strategy into Boosting, FS-Booting can get better performance as base learners in FS-Boosting could get more accuracy and diversity. For the testing and illustration purposes, two real world bankruptcy datasets were selected to demonstrate the effectiveness and feasibility of FS-Boosting. Experimental results reveal that FS-Boosting could be used as an alternative method for the corporate bankruptcy prediction. © 2013 Elsevier Ltd. All rights reserved.",10.1016/j.eswa.2013.09.033,"School of Management, Hefei University of Technology, Hefei, Anhui 230009, China; Key Laboratory of Process Optimization and Intelligent Decision-making, Ministry of Education, Hefei, Anhui, China; Department of Information Systems, City University of Hong Kong, Tat Chee Avenue, Kowloon, Hong Kong",Rejected
42,Using Version Control and Issue Tickets to detect Code Debt and Economical Cost,"Papaioannou, M. and Neocleous, C.K. and Papageorgiou, C. and Schizas, C.N.",Engineering Intelligent Systems,2014,"Recently, Greece experienced a serious financial crisis that forced the country to sign a bailout memorandum with Troika (European Commission, International Monetary Fund and European Central Bank who formed a group of international lenders that laid down stringent austerity measures when they provided bailouts for indebted European states). The term Troika, which comes from the Russian meaning 'group of three', was increasingly used during the recent Eurozone crisis. In February of 2012, the country proceeded to a second bailout package. At the same time a debt restructuring was applied, that included a private sector involvement (PSI) that resulted in 75% overall loss. Due to the strong economic ties between Greece and Cyprus, PSI had a substantial impact on the Cypriot economy. A fuzzy cognitive map (FCM) system has been developed and used to study the repercussions of the Greek PSI on the economic dynamics of Cyprus and more specifically on the Cypriot banking sector. A novel FCM methodology has been used as regards to the proper identification, definition and initialization of the concepts and sensitivities, as well as on the updating rule. Different scenarios were implemented aiming to examine how certain core factors of Cyprus economy interact with Greek PSI and between them. The results were confirmed by comparing them with the actual events. Thus, they proved to be very promising and justify the usefulness of FCM for this particular kind of problems. © 2014 CRL Publishing Ltd.",,"Department of Computer Science, University of Cyprus, Nicosia, Cyprus; Department of Mechanical Engineering and Materials Science and Engineering, Cyprus University of Technology, Limassol, Cyprus; European University, Cyprus Research Center, Nicosia, Cyprus",Rejected
43,A systematic mapping study on architectural smells detection,"Vintil?, G. and Gherghina, ?.C.",Economic Computation and Economic Cybernetics Studies and Research,2014,"In this research our aim is to classify a sample of companies which belong to five European emerging countries, respectively Hungary, Poland, Russia, Slovakia, and Ukraine, from the valuation perspective, by using pattern recognition techniques. The classification of the selected companies was realized according to ten indicators: the debt to equity ratio, the debt to total assets ratio, the financial debt to equity ratio, earnings per share, price/earnings ratio, return on sales, current ratio, quick ratio, return on assets, and return on equity. Thus, by employing Ward's method as agglomerative hierarchical clustering there resulted three classes of companies. Subsequently, we identified the discriminant functions based on which we could accomplish predictions regarding the companies' membership to the three previously established classes. The usefulness of both techniques in financial field is remarkable in order to set out the membership of certain objects to several classes, thus being taken the best decisions.",,"Bucharest University of Economic Studies, Romania",Rejected
44,Hop-by-hop Accounting and Rewards for Packet dIspAtching,"Popescu, M.E. and Paun, O.",Proceedings of the 24th International Business Information Management Association Conference - Crafting Global Competitive Economies: 2020 Vision Strategic Planning and Smart Implementation,2014,"In this paper we propose a method for decision making based on performance evaluation. We considered the case of the 28 E.U. member states, for which macroeconomic indicators of economic growth, current account balance, labour productivity, foreign direct investments and general government debt were used. The E.U. economic performance was evaluated by applying a Hierarchical Cluster and the results suggested that based on labour productivity, current account balance and GDP growth rate, the 28 E.U. member states can be classified into two main clusters, one corresponding to high economic performant countries and the second one to countries with lower economic performances. Based on this classification, we then built two CHAID classification trees and tested their prediction ability to correctly classify the 28 E.U. countries into high and lower economic performances countries. Our results suggested that when replacing the macroeconomic indicators of the prediction model with the first principal component of the initial data matrix, the prediction performance of the new CHAID model improved and reached an accuracy of prediction of 89%.",,"Bucharest University of Economic Studies, National Scientific Research Institute for Labour and Social Protection, Bucharest, Romania; Bucharest University of Economic Studies, Bucharest, Romania",Rejected
45,Quantify and alleviate OAuth approach token system exploiting by conspiracy lattice,"Bekiros, S.D.",Computational Economics,2014,"This paper presents an invariant discrete wavelet transform that enables point-to-point (aligned) comparison among all scales, contains no phase shifts, relaxes the strict assumption of a dyadic-length time series, deals effectively with boundary effects and is asymptotically efficient. It also introduces a new entropy-based methodology for the determination of the optimal level of the multiresolution decomposition, as opposed to subjective or ad-hoc approaches used hitherto. As an empirical application, the paper relies on wavelet analysis to reveal the complex dynamics across different timescales for one of the most widely traded foreign exchange rates, namely the Great Britain Pound. The examined period covers the global financial crisis and the Eurozone debt crisis. The timescale analysis attempts to explore the micro-dynamics of across-scale heterogeneity in the second moment (volatility) on the basis of market agent behavior with different trading preferences and information flows across scales. New stylized properties emerge in the volatility structure and the implications for the flow of information across scales are inferred. © 2013 Springer Science+Business Media New York.",10.1007/s10614-013-9381-z,"Department of Economics, European University Institute, Via della Piazzuola 43, 50133 Florence, Italy; Department of Accounting and Finance, Athens University of Economics and Business, 76, Patission str., 10434 Athens, Greece; Rimini Centre for Economic Analysis (RCEA), Via Patara, 3, 47900 Rimini, Italy",Rejected
46,The Acceptance of Pay Later Payment Usage on Business-To-Consumer Online Marketplace in Indonesia,"Palmer, K.D.",Procedia Computer Science,2014,"This is a discussion of the essential features of product development traceability maps in relation to requirements, architecture, functional models, components, and tests as a set of order type hierarchies and their cross-links This paper lays out the structure of these ideal traceability relationships that define the essence of the product under development The importance of the trace relationships to the product is clarified and then the abandonment of traceability in the Agile approach is discussed Following that, a way to transform between synthetic canonical narrative (story) representations that appear in the product backlog and the traditionally separate hierarchical form of the trace structure of the product will be examined The fact that it is possible to transform back and forth between the canonic narrative and traditional hierarchical representations of trace structures, and the fact that trace structures can be produced in a 'just in time' fashion that evolves during product development demonstrate that these trace structures can be used in both an Agile and Lean fashion within the development process Also, we can show that when the trace structure is produced outside the narrative representation it can have the additional benefit of helping to determine the precedent order of development so that rework can be avoided The lack of the extrinsic external trace structure of the product that gives access to its intelligibility is, in fact, a form of technical debt Thus, traditional trace structures using this model can be seen as an essential tool for product owners to produce sound and coherent development narratives and for structuring and prioritizing the backlog in the Agile and Lean approaches to software and systems development © 2014 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2014.03.007,,Accepted
47,Reusability First: Toward FAIR Workflows,"Shaverdi, M. and Heshmati, M.R. and Ramezani, I.",Procedia Computer Science,2014,"Organizational performance evaluation is a very vital and sensitive process in any industry. One of the most crucial aspects of performance assessment is consideration of financial performance evaluation. In this kind of evaluation, we face many criteria and index to performing and also designing a comprehensive and effective model. Thus, this situation can be regarded as a fuzzy multiple criteria decision-making (MCDM) problem, so the fuzziness and uncertainty of subjective perception should be considered. In this paper performance evaluation of seven active companies in the petrochemical industries was evaluated using combined method of fuzzy and analytic hierarchy process. In this paper at the first, Iranian petrochemical industry was studied and then the required framework for a good decision making model was introduced after that financial evaluation criteria and the main financial ratios used in this article was defined the criteria are as follows: current ratio, quick ratio, debt ratio, long term debt, EBIT, total asset, inventory turnover ratio, total asset turnover ratio, fixed asset turnover ratio, receivable accounting turnover ratio, net profit margin, ROI, ROE, asset growth, shareholder's equity growth are among the financial criteria that were used, in the nest stage fuzzy set and fuzzy AHP is described and results of analysis have been presented. © 2014 Published by Elsevier B.V.",10.1016/j.procs.2014.05.352,"HRM Department, Securities and Exchange Organization of Iran, Molsadra Ave., Tehran 1939563662, Iran; Department of Financial Management, University of Tehran, Gisha Bridge, Tehran 1417963193, Iran; Department of Industrial Engineering, Sharif University of Technology, Azadi Ave., Tehran 1115513665, Iran",Rejected
48,One Step Further: Investigating Problematic Files of Architecture Anti-patterns,"Holvitie, J.",Proceedings - International Conference on Research Challenges in Information Science,2014,"Modern, fast-phased, iterative and incremental software development constantly struggles with limited resources and a plethora of frequently changing requirements. This environment often requires the development projects to intentionally - for example through implementing quick-and-dirty - or unintentionally - for example through misinterpretation of requirements - deviate from the optimal product state. While most of the deviation is caught through practices like customer reviews, the remainder stays hidden in the product. The undocumented remainder is difficult to remove, it expands uncontrollably and it negatively affects development as deviations are unexpectedly encountered and overcome. The term technical debt describes this process of accumulating hidden work. Management of technical debt can be expected to be a major factor in software development efficiency and sustainability and as such it should be an integral part of the software implementation's knowledge management. In addition to being difficult to capture, the continuous evolution of the implementation makes maintenance of gained information a challenge. This paper discusses applying technical debt management for software implementations including the entry points for knowledge discovery, network analysis for overcoming the maintenance challenges as well as the pursued outcomes. © 2014 IEEE.",10.1109/RCIS.2014.6861083,"TUCS - Turku Centre for Computer Science, Department of Information Technology, University of Turku, Turku, Finland",Accepted
49,Refactorings and Technical Debt in Docker Projects: An Empirical Study,"Magnusson, J. and Bygstad, B.",ECIS 2014 Proceedings - 22nd European Conference on Information Systems,2014,"Investment decisions related to information technology simultaneously constrain and facilitate prospective options. Hence, past and present decisions in relation to information technology investments impact future decisions and the maneuverability of organizational IT. The purpose of this paper is to develop and explore a new theory for better understanding how technology heritage impacts future decisions. The study expands a previous metaphor from software engineering and management (technical debt) into a broader theory of technology debt, and explores the proposed theory through the case of four investment decisions at a large, public university. As the findings show, there are clear indications of the theory being useful, and this is elaborated on in relation to future studies.",,"University of Gothenburg, NITH, Sweden; University of Oslo, Norway",Accepted
50,Impact of data balancing during training for best predictions,,QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014),2014,The proceedings contain 17 papers. The topics discussed include: automatic detection of performance anti-patterns in inter-component communications; architectural tactics support in cloud computing providers: the jelastic case; performance-based selection of software and hardware features under parameter uncertainty; dealing with uncertainties in the performance modelling of software systems; experiences with modeling memory contention for multi-core industrial real-time systems; using architecture-level performance models as resource profiles for enterprise applications; empirical resilience evaluation of an architecture-based self-adaptive software system; architecture management and evaluation in mature products: experiences from a lightweight approach; efficient re-resolution of SMT specifications for evolving software architectures; and an empirical investigation of modularity metrics for indicating architectural technical debt.,,,Rejected
51,Analysis and Application of Regularized Neural Networks in Smart Agriculture,,Advances in Intelligent Systems and Computing,2014,"The proceedings contain 64 papers. The special focus in this conference is on Distributed Computing and Artificial Intelligence. The topics include: Reachability modeling for multimodal networks prototyping; hybrid solution framework for supply chain problems; scheduling of mobile robots with preemptive tasks; multimodal processes approach to supply chain modeling; behavioral macroeconomics and agent-based macroeconomics; designing a homo psychologicus more psychologicus; differences between entrepreneurs and managers in large organizations; the empirical microstructure of agent-based models; households debt behavior and financial instability; firm size distribution in oblivious equilibrium model with quality ladder; modeling uncertainty in banking networks; from design to production exploiting workflow patterns; distributed and guided genetic algorithm for humanitarian relief planning in disaster case; software fault prediction based on improved fuzzy clustering; SOA modeling based on MDA; intelligent lighting control system; multimodal conversational agents for E-learning; a multi-agent mechanism for human resources allocation in a distributed software development environment; multi-agent web recommendations; designing strategies for improving the performance of groups in collective environments; multiagent application in mobile environments to data collection in park zones; exploring the role of macroeconomic mechanisms in voluntary resource provisioning in community network clouds; mobile access to sensor network; building scalable view module of object-oriented database; modelling an orientation system based on speculative computation; stable learning for neural network tomography by using back projected image; security considerations for patient telemonitoring schemes through wireless networks; development of an ontology for supporting diagnosis in psychiatry; augmented reality sign language teaching model for deaf children; the case of physical activity and childhood obesity; the absorptive capacity-based view of training; LIWC-based sentiment analysis in Spanish product reviews; data extraction tool to analyse, transform and store real data from electricity markets; a review of the security in social networks and internet; extracting sentences describing biomolecular events from the biomedical literature; a graph-based approach to extract keywords from tweets; a threshold scheme for 3D objects based on cellular automata; 2-scene comic creating system based on the distribution of picture state transition; a brief approach to the ear recognition process; integration of mobile robot navigation on a control kernel middleware based system; shared map convolutional neural networks for real-time mobile image recognition; learning Bayesian networks using probability vectors; a constraint programming approach to the Zahn's decision problem; neural-based method of measuring exchange-rate impact on international companies' revenue; parallel batch pattern training algorithm for MLP with two hidden layers on many-core system; a bee-inspired data clustering approach to design RBF neural network classifiers and an item influence-centric algorithm for recommender systems.",,,Rejected
52,Deliberative Technical Debt Management: An Action Research Study,"Liu, C. and Lu, B. and Li, H.",International Journal of Smart Home,2014,"Nowadays, self-service terminals, which are used widely in banking systems, can be seen everywhere. However, few systems could combine a large number of self-service terminals and a diversified electronic payment platforms for providing convenient financial services. In this paper, we develop such a combined self-service terminal system. We also give details about the design of business process and message interface on four main functional modules of our new developed system, which are uploading transaction logs, registering and configuring new self-service terminals, uploading running status, paying debts, and releasing information. Last, we conduct an experiment to evaluate the performance of our self-service terminals in terms of the packet loss rate. Results show that the design of business process and message interface is effective. © 2014 SERSC.",10.14257/ijsh.2014.8.5.13,"School of Computer Science and Engineering, South China University of Technology, Guangzhou, 510006, China; School of Computer Science, Wuyi University, Jiangmen, 529020, China; State Key Laboratory of Pulp and Paper Engineering, South China University of Technology, Guangzhou, 510640, China; School of Computer Science, Carnegie Mellon University, Pittsburgh, PA  15213, United States",Rejected
53,Robotizing bond portfolio selection on the Russian debt market on the basis of a modified strategy of riding the yield curve,"Giraldo, F.D. and España, S. and Pineda, M.A. and Giraldo, W.J. and Pastor, O.",CEUR Workshop Proceedings,2014,"The main goal of this work is to evaluate the feasibility to calculate the technical debt (a traditional software quality approach) in a model-driven context through the same tools used by software developers at work. The SonarQube tool was used, so that the quality check was performed directly on projects created with Eclipse Modeling Framework (EMF) instead of traditionals source code projects. In this work, XML was used as the model specification language to verify in Sonar-Qube due to the creation of EMF metamodels in XMI (XML Metadata Interchange) and that SonarQube offers a plugin to assess the XML language. After this, our work focused on the definition of model rules as an XSD schema (XML Schema Definition) and the integration between EMF-SonarQube in order that these metrics were directly validated by SonarQube; and subsequently, this tool determined the technical debt that the analyzed EMF models could contain.",,"System and Computer Engineering, University of Quindío, Colombia; PROS Research Centre, Universitat Politècnica de València, Spain",Accepted
54,STellaR  A Stationary Telepresence Counselling System for Collaborative Work on Paper Documents,"Takahashi, M. and Azuma, H. and Tsuda, K.",Procedia Computer Science,2014,"This paper presents investigating the customer characteristics of payment method change in the mail order industry. This time we are focusing on the transactional activity of bad debt customers. These kinds of investigations have not made intensively, such as the shipping address, the recipient name, and the payment method so far and the conventional method for predicting such knowledge depends on the employees' working experiences. For these backgrounds, we observed the transaction data with the bad debt customer information gathered from a mail order company and characterized the customer with machine learning. From the results of the analysis, we are succeeded in characterizing the potential customers. Intensive research revealed that the characteristics of customers who make fraud transactions. This result will make use of the revenue expansion with the improvement of the bad debt collections in the target industry. © 2014 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2014.08.254,"Graduate School of Innovation and Technology Management, Yamaguchi University, 2-16-1 Tokiwadai, Ube Yamaguchi, 755-8611, Japan; Graduate School of Systems and Information Engineering, University of Tsukuba, 3-29-1, Otsuka, Bunkyo, Tokyo, 112-0012, Japan; Graduate School of Business Sciences, University of Tsukuba, 3-29-1, Otsuka, Bunkyo, Tokyo, 112-0012, Japan",Rejected
55,Machine learning for cloud data systems: The progress so far and the path forward,"Antonioli, N. and Castanò, F. and Coletta, S. and Grossi, S. and Lembo, D. and Lenzerini, M. and Poggi, A. and Virardi, E. and Castracane, P.","22nd Italian Symposium on Advanced Database Systems, SEBD 2014",2014,"In this paper we present an ontology-based data management (OBDM) project concerning the Italian public debt domain, carried out by Sapienza University of Rome and the Italian Ministry of Economy and Finance. We discuss the motivations at the basis of this project and present the main characteristics of the ontology we have built. We also describe the mechanisms we used to link the ontology to the actual data and the tools we have adopted for supporting ontology development and maintenance, as well as exploiting OBDM services. Finally, we provide a thorough evaluation of the ontology we produced. Copyright © (2014) by Universita Reggio Calabria & Centro di Competenza (ICT-SUD) All rights reserved.",,"Dip. del Tesoro, Min. dell'Economia e delle Finanze, Italy; SOGEI S.p.A., Italy; DIAG, Sapienza Università di Roma, Italy",Rejected
56,Attacking the DeFi Ecosystem with Flash Loans for Fun and Profit,"Skourletopoulos, G. and Mavromoustakis, C.X. and Bahsoon, R. and Mastorakis, G. and Pallis, E.","2014 IEEE 19th International Workshop on Computer Aided Modeling and Design of Communication Links and Networks, CAMAD 2014",2014,"Identifying and managing effectively the Technical Debt has become an issue of great importance over recent years. In cloud marketplaces, where the cloud services can be leased, the difficulty to promptly predict and manage the Technical Debt has a significant impact. In this paper, we examine the Technical Debt, which stems from budget constraints during the software development process as well as the capacity of a cloud service. In this context, the budget and the cloud service selection decisions may introduce Technical Debt. Towards reaching a conclusion, two approaches are taken into consideration. Initially, a cost estimation approach is researched, which is related to implementing Software as a Service (SaaS) in the cloud for three scenarios aiming to predict the incurrence of the Technical Debt in the future. The Constructive Cost Model (COCOMO) is exploited, in order to estimate the implementation cost and define a range of secureness. In addition, a Technical Debt quantification approach is adopted, which is associated with leasing a cloud Software as a Service (SaaS), towards indicating the most appropriate cloud service to be selected. © 2014 IEEE.",10.1109/CAMAD.2014.7033201,"Department of E-Banking Insights, Scientia Consulting S.A., Athens, Greece; Department of Computer Science, University of Nicosia, Nicosia, Cyprus; School of Computer Science, University of Birmingham, Birmingham, United Kingdom; Department of Informatics Engineering, Technological Educational Institute of Crete, Heraklion, Crete, Greece",Accepted
57,On comment patterns that are good indicators of the presence of self-admitted technical debt and those that lead to false positive items,"Ganesh, L.","Proceedings - IEEE 6th International Conference on Technology for Education, T4E 2014",2014,"The existing method of teaching software engineering subjects is severely limited by scope, time and exposure to real world settings. As a result of which the significance of Software Development Processes (SDP) is not very well appreciated by students. Technical debt is the debt that the project incurs by missing any process/activity in the SDP. The idea of this paper is to impart the concept of technical debt in a real world setting to students through the board game ""Hard Choices"". The board game Hard Choices developed by SEI, at Carnegie Mellon University is available under creative commons license. Additionally, this paper evaluates the effectiveness of this board game to communicate the concept of technical debt. During the course of the experiment we observed that students: (i) attached importance to SDP, (ii) understood the consequence of skipping a step in SDP. The above observations stem from the comparison of scores of pre and post test which show that after the conduct of the board game the scores obtained in post-test were significantly higher at 95% confidence levels (t-test paired two sample for means). Additionally a Likert questionnaire analysis also revealed that the students perceived the instruction methodology of using board games to be lucid and engaging. © 2014 IEEE.",10.1109/T4E.2014.28,"Department of Computer Engineering, Thakur College of Engineering and Technology, Mumbai, India",Rejected
58,Behind the scenes: On the relationship between developer experience and refactoring,"Ojameruaye, B. and Bahsoon, R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2014,"[Context and motivation] Eliciting compliance requirements often results in requirements, which might not be satisfied due to uncertainty and unavailability of resources. The lack of anticipation of these factors may increase the cost of achieving compliance. [Question/problem] Managing compliance is an investment activity that requires making decisions about selecting the right compliance goals under uncertainty, handling the obstacles to those goals and minimising risks. [Principal ideas/results] (1) We define the concept of technical debt for managing compliance and we explore its link with obstacles to compliance goals. (2) We propose goal-oriented method and obstacles handling with a portfolio-based thinking for systematically managing obstacles and refining compliance goals. [Contribution]We use an exemplar to illustrate and evaluate the approach. The results show that our approach can provides analysts and compliance managers with an objective tool to assess and rethink their investment decisions when elaborating compliance requirements. © 2014 Springer International Publishing Switzerland.",10.1007/978-3-319-05843-6_12,"University of Birmingham, United Kingdom",Accepted
59,Technical debt reduction using epsilon-Nash equilibrium for the perturbed software refactor game model,"Cai, Y. and Kazman, R. and Silva, C.V.A. and Xiao, L. and Chen, H.-M.",Economics-Driven Software Architecture,2014,"Modularity debt is the most difficult kind of technical debt to quantify and manage. Modularity decay, thus modularity debt, causes huge losses over time in terms of reduced ability to provide new functionality and fix bugs, operational failures, and even canceled projects. As modularity debt accumulates over time, software system managers are often faced with a challenging task of deciding when and whether to refactor, for example, choosing to improve modularity or not. While the costs of refactoring are significant and immediate, their benefits are largely invisible, intangible, and long term. Existing research lacks effective methods to quantify the costs and benefits of refactoring to support refactoring decision making. In this chapter, we present a decision-support system (DSS) approach to the modularity debt management. Using such a system, managers would be able to play out various ""what-if"" scenarios to make informed decisions regarding refactoring. Our DSS approach is built on a scientific foundation for explicitly manifesting the economic implications of software refactoring activities so that the costs and benefits of such activities can be understood, analyzed, and predicted. We discuss our contributions and current progress in developing the building blocks and the underpinning framework, an integrated economics-driven modularization evaluation framework, for the modularity debt management decision-support system (MDM-DSS). © 2014 Elsevier Inc. All rights reserved.",10.1016/B978-0-12-410464-8.00006-4,"Drexel University, Philadelphia, PA, United States; University of Hawaii, Honolulu, HI, United States; Federal University of Bahia, Bahia, Brazil",Accepted
60,Two different facets of architectural smells criticality: An empirical study,"Weber, N.M. and Thomer, A.K.",Examining Paratextual Theory and its Applications in Digital Culture,2014,"The formal literature of science has traditionally acted as a ""ledger"" where debts are acknowledged, previous works are cited, and advances in knowledge are claimed. Recent innovation in electronic publishing, as well as open access requirements from funding agencies in the life sciences, is making it possible to examine this ledger more closely: we can now more definitively ask who is acknowledged, where do citations appear, and what knowledge is claimed within an entire discipline, journal or archive of publications. In this chapter, the authors explore the ledger of bioinformatics, asking how two paratexts- acknowledgment and authorship statements-can be used to understand credit and collaboration within this unique field. © 2014, IGI Global.",10.4018/978-1-4666-6002-1.ch005,"University of Illinois Graduate School of Library and Information Science, Center for Informatics Research in Science and Scholarship, United States; Data Curation Education in Research Centers (DCERC), United States; National Center for Atmospheric Research (NCAR), United States; University of Illinois at Urbana-Champaign, United States",Rejected
61,Algorithmic decision-making and system destructiveness: A case of automatic debt recovery,"Zaytsev, Y.V. and Morrison, A.",Frontiers in Neuroinformatics,2014,"NEST is a simulator for large-scale networks of spiking point neuron models (Gewaltig and Diesmann, 2007). Originally, simulations were controlled via the Simulation Language Interpreter (SLI), a built-in scripting facility implementing a language derived from PostScript (Adobe Systems, Inc., 1999). The introduction of PyNEST (Eppler et al., 2008), the Python interface for NEST enabled users to control simulations using Python. As the majority of NEST users found PyNEST easier to use and to combine with other applications, it immediately displaced SLI as the default NEST interface. However, developing and maintaining PyNEST has become increasingly difficult over time. This is partly because adding new features requires writing low-level C++ code intermixed with calls to the Python/C API, which is unrewarding. Moreover, the Python/C API evolves with each new version of Python, which results in a proliferation of version-dependent code branches. In this contribution we present the re-implementation of PyNEST in the Cython language, a superset of Python that additionally supports the declaration of C/C++ types for variables and class attributes, and provides a convenient foreign function interface (FFI) for invoking C/C++ routines (Behnel etal., 2011). Code generation via Cython allows the production of smaller and more maintainable bindings, including increased compatibility with all supported Python releases without additional burden for NEST developers. Furthermore, this novel approach opens up the possibility to support alternative implementations of the Python language at no cost given a functional Cython back-end for the corresponding implementation, and also enables cross-compilation of Python bindings for embedded systems and supercomputers alike. © 2014 Zaytsev and Morrison.",10.3389/fninf.2014.00023,"Simulation Laboratory Neuroscience, Institute for Advanced Simulation, Julich Aachen Research Alliance, Julich Research Center, Julich, Germany; Albert-Ludwig University of Freiburg, Freiburg im Breisgau, Germany; Institute for Advanced Simulation (IAS-6), Theoretical Neuroscience and Institute of Neuroscience and Medicine (INM-6), Computational and Systems Neuroscience, Julich Research Center and JARA, Julich, Germany; Institute of Cognitive Neuroscience, Ruhr-University Bochum, Bochum, Germany",Rejected
62,SCRUM Framework Extended with Clean Architecture Practices for Software Maintainability,"Valladão, D.M. and Veiga, Á. and Veiga, G.",European Journal of Operational Research,2014,"Large corporations fund their capital and operational expenses by issuing bonds with a variety of indexations, denominations, maturities and amortization schedules. We propose a multistage linear stochastic programming model that optimizes bond issuance by minimizing the mean funding cost while keeping leverage under control and insolvency risk at an acceptable level. The funding requirements are determined by a fixed investment schedule with uncertain cash flows. Candidate bonds are described in a detailed and realistic manner. A specific scenario tree structure guarantees computational tractability even for long horizon problems. Based on a simplified example, we present a sensitivity analysis of the first stage solution and the stochastic efficient frontier of the mean-risk trade-off. A realistic exercise stresses the importance of controlling leverage. Based on the proposed model, a financial planning tool has been implemented and deployed for Brazilian oil company Petrobras. © 2014 Elsevier B.V. All rights reserved.",10.1016/j.ejor.2014.01.028,"Industrial Engineering Department, Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rua Marques de São Vicente, 225, Gávea - Rio de Janeiro, RJ 22451-900, Brazil; Electrical Engineering Department, Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rua Marques de São Vicente, 225, Gávea - Rio de Janeiro, RJ 22451-900, Brazil; n Ciencia e Tecnologia, Rio de Janeiro, Brazil",Rejected
63,Customer loan approval prediction using logistic regression,"Lee, S.M. and Noh, Y. and Choi, D. and Rha, J.S.",Industrial Management and Data Systems,2014,"Purpose - The purpose of this paper is to investigate the effect of ISO 14001 certification on US public firms' equity structure regarding whether the typical heavy investment required for environmental management system is justified in terms of equity risk.
Design/methodology/approach - This study employs the event study methodology and examines the pre- and post-movements of firms' equity structure around the ISO 14001 certification date. This study investigated 5,189 listed firms in the New York Stock Exchange and National Association of Securities Dealers Automated Quotation and the abnormal performance of firms' equity structure was measured by using four dependent variables (assets, liabilities, debt ratio (liabilities/equity), and market-to-book ratio of equity).
Findings - The results showed that the adoption of ISO 14001 increased a firm's total assets, liabilities, and debt ratio in the long run, implying that pursuing the certification entails the increase in a firm's size and equity risk. The long-term movement of the market-to-book ratio of equity showed no abnormal performance, while it fluctuated in the short term.
Practical implications - This study suggests that managers should consider the potential risk from a firm's equity structure when they decide to pursue the ISO 14001 certification. Originality/value - This study is the first effort to investigate the long-term effect of ISO 14001 certification on the firm's equity structure using the event study methodology in the USA. © Emerald Group Publishing Limited.",10.1108/IMDS-01-2014-0021,"Department of Management, University of Nebraska, Lincoln, NE, United States; Department of Management, School of Air Transportation and Logistics, Korea Aerospace University, Seoul, South Korea; Department of Management, Korea Aerospace University, Seoul, South Korea; Department of Management, Dankook University, Seoul, South Korea",Rejected
64,Legacy Digital Transformation: TCO and ROI Analysis,"Lomotey, R.K. and Deters, R.","Proceedings - 2014 IEEE 3rd International Conference on Mobile Services, MS 2014",2014,"Most enterprises today have their own Private Branch Exchange (PBX) systems that enable them to communicate on-premise and with the external or public switch telephone network. Companies that rely on heavy phone calls (especially, debt collectors) find the approach cost effective especially when automation techniques are introduced for auto dialing as a measure to reduce the number of employees who have to do the manual calls. The challenge however is that, PBX telephone systems have long been the target of attacks such as call stealing, server attacks, and sometimes user private data stealing. In this work, we investigate the best ways to prevent intrusion of attackers in a proposed PBX telephone system that is built in Asterisk environment. Instead of using the Asterisk platform as a complete solution, we proposed a cloud-based middleware layer that keeps the most sensitive part of the caller information, and rely on Asterisk only for call dialing, routing, and receiving. The middleware uses the REST standard to interact with the Asterisk platform and other proposed techniques such as message marshaling and demarshaling to enhance privacy. The pilot testing of the proposed approach shows high threshold for security enforcement and intrusion denial. © 2014 IEEE.",10.1109/MobServ.2014.25,"Department of Computer Science, University of Saskatchewan, Saskatoon, Canada",Rejected
65,Blockchain-Enabled Microfinance Model with Decentralized Autonomous Organizations,"Fallahpour, S. and Zadeh, M.H. and Lakvan, E.N.","1st International Conference on Networks and Soft Computing, ICNSC 2014 - Proceedings",2014,"Outbreak of debt crisis in Europe has made the issue of corporate failure prediction, known as financial distress prediction (FDP) as well, a significant topic in the field of management science. The purpose of this paper is to propose five hybrid classifiers to tackle corporate failure prediction problem. Principle component analysis (PCA),information gain (IG) and relief (Re) methods as representatives of feature selection filtering approach, and genetic algorithm (GA) and particle swarm optimization (PSO) techniques as the representatives of feature selection wrapper approach, have been integrated with k-nearest neighborhood (k-NN) to create our five classifies for our given data set. According to results, PSO-kNN ensemble classifier outperformed all the applied classifiers in the literature in terms of prediction accuracy for our defined data set. © 2014 IEEE.",10.1109/CNSC.2014.6906698,"Department of Finance, Faculty of Management, University of Tehran, Iran",Rejected
66,Metrics to Measure Code Complexity Based on Software Design: Practical Evaluation,"Potdar, A. and Shihab, E.","Proceedings - 30th International Conference on Software Maintenance and Evolution, ICSME 2014",2014,"Throughout a software development life cycle, developers knowingly commit code that is either incomplete, requires rework, produces errors, or is a temporary workaround. Such incomplete or temporary workarounds are commonly referred to as 'technical debt'. Our experience indicates that self-admitted technical debt is common in software projects and may negatively impact software maintenance, however, to date very little is known about them. Therefore, in this paper, we use source-code comments in four large open source software projects-Eclipse, Chromium OS, Apache HTTP Server, and ArgoUML to identify self-admitted technical debt. Using the identified technical debt, we study 1) the amount of self-admitted technical debt found in these projects, 2) why this self-admitted technical debt was introduced into the software projects and 3) how likely is the self-admitted technical debt to be removed after their introduction. We find that the amount of self-admitted technical debt exists in 2.4% - 31% of the files. Furthermore, we find that developers with higher experience tend to introduce most of the self-admitted technical debt and that time pressures and complexity of the code do not correlate with the amount of self-admitted technical debt. Lastly, although self-admitted technical debt is meant to be addressed or removed in the future, only between 26.3% - 63.5% of self-admitted technical debt gets removed from projects after introduction. © 2014 IEEE.",10.1109/ICSME.2014.31,"Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, United States; Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada",Accepted
67,Deep Learning Anti-Fraud Model for Internet Loan: Where We Are Going,"Antonioli, N. and Castanò, F. and Coletta, S. and Grossi, S. and Lembo, D. and Lenzerini, M. and Poggi, A. and Virardi, E. and Castracane, P.",Frontiers in Artificial Intelligence and Applications,2014,"In this paper we present an ontology-based data management (OBDM) project concerning the Italian public debt domain, carried out within a joint collaboration between Sapienza University of Rome and the Department of Treasury of the Italian Ministry of Economy and Finance. We discuss the motivations at the basis of this project and present the main characteristics of the ontology we have built. We also describe the mechanisms we used to link the ontology to the actual data and the tools we have adopted for supporting ontology development and maintenance, as well as exploiting OBDM services. Finally, we provide a thorough evaluation of the ontology we produced and discuss in detail the role that it plays within the whole information system of the ministry department responsible for managing Italian public debt data. © 2014 The authors and IOS Press. All rights reserved.",10.3233/978-1-61499-438-1-372,"SOGEI, Italy; Dip. del Tesoro, Ministero dell'Economia e delle Finanze, Italy; DIAG, Sapienza Universita di Roma, Italy",Rejected
68,Predicting the emergence of community smells using socio-technical metrics: A machine-learning approach,"Papagiannidis, S. and Stamati, T. and Behr, H.","Digital Arts and Entertainment: Concepts, Methodologies, Tools, and Applications",2014,"In this paper the authors studied how Greek politicians use their Internet presence and in particular social media to engage citizens, examining the perceived significance of establishing an online presence and the motivating and hindering factors for doing so. The authors also studied how online strategies are implemented and executed in three different periods, namely pre-elections, a crisis period (in the authors' case the Greek sovereign debt crisis) and a 'normal' period. To answer the authors' research questions the authors adapted a social media conceptual framework to online political presence. Data was collected via in-depth interviews with candidates of 5 different political parties taking part in the general elections of 2012. The authors' analysis suggests that although politicians are increasingly interested in engaging with citizens via online technologies, their efforts are not always focused on achieving measurable and tangible results. Politicians' online strategies need to be organised around the concepts of communication, engagement and influence and not around the electronic spaces where these take place, i.e. the objectives and the means need to be clearly distinguished and utilised. The authors discuss the implications of their findings from a theoretical and practical perspective, in the context of online political marketing and political participation and engagement. © 2014, IGI Global.",10.4018/978-1-4666-6114-1.ch059,"Newcastle University, United Kingdom; National and Kapodistrian University of Athens, Greece",Duplicated
69,"Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020","Reimanis, D. and Izurieta, C. and Luhr, R. and Xiao, L. and Cai, Y. and Rudy, G.",International Symposium on Empirical Software Engineering and Measurement,2014,"Context: Long-term software management decisions are directly impacted by the quality of the software's architecture. Goal: Herein, we present a replication case study where structural information about a commercial software system is used in conjunction with bug-related change frequencies to measure and predict architecture quality. Method: Metrics describing history and structure were gathered and then correlated with future bug-related issues; the worst of which were visualized and presented to developers. Results: We identified dependencies between components that change together even though they belong to different architectural modules, and as a consequence are more prone to bugs. We validated these dependencies by presenting our results back to the developers. The developers did not identify any of these dependencies as unexpected, but rather architectural necessities. Conclusions: This replication study adds to the knowledge base of CLIO (a tool that detects architectural degradations) by incorporating a new programming language (C++) and by externally replicating a previous case study on a separate commercial code base. Additionally, we provide lessons learned and suggestions for future applications of CLIO. © 2014 Authors.",10.1145/2652524.2652581,"Software Engineering Laboratory, Computer Science Dept, Bozeman, MT, United States; Computer Science Dept., Drexel University, Philadelphia, PA, United States; Golden Helix Inc., 203 Enterprise Blvd, Bozeman, MT, United States",Rejected
70,"Proceedings - 2020 8th Edition of the International Conference in Software Engineering Research and Innovation, CONISOFT 2020","Ramasubbu, N. and Kemerer, C.F.",IEEE Transactions on Software Engineering,2014,"We develop an evolutionary model and theory of software technical debt accumulation to facilitate a rigorous and balanced analysis of its benefits and costs in the context of a large commercial enterprise software package. Our theory focuses on the optimization problem involved in managing technical debt, and illustrates the different tradeoff patterns between software quality and customer satisfaction under early and late adopter scenarios at different lifecycle stages of the software package. We empirically verify our theory utilizing a ten year longitudinal data set drawn from 69 customer installations of the software package. We then utilize the empirical results to develop actionable policies for managing technical debt in enterprise software product adoption. © 2014 IEEE.",10.1109/TSE.2014.2327027,"Joseph M. Katz Graduate School of Business, University of Pittsburgh, Pittsburgh, PA 15260, United States",Accepted
71,Automated analysis of flakiness-mitigating delays,"Berger, H. and Jones, C.M.","Proceedings of the 7th IADIS International Conference Information Systems 2014, IS 2014",2014,"Our contribution to the wealth of research surrounding Agile development lies in an empirical study that examines a recently implemented Government IS project. Despite full management endorsement for an Agile philosophy the organization's traditional, linear pre-development stages created a tension between senior management and the developers. Focus on the commercial journey, driven by the non-Agile upfront plan driven stages, impeded the benefit from Agile's iterative development cycles being fully realized. In order to develop the right product the constraints posed by the longer, fixed term commercial cycles need to respond to development driven changes captured by developers through the rapid feedback loops. We propose that where Agile projects answer to preceding plan driven strategies there is a need to re-direct focus to accommodate a different journey that reflects actual client 'needs' (an Agile tenet). © 2014 IADIS.",,"Cardiff School of Management, Cardiff Metropolitan University, Western Avenue, Cardiff, CF52YB, United Kingdom",Rejected
72,Sen4Smells: A tool for ranking sensitive smells for an architecture debt index,"Shah, S.M.A. and Torchiano, M. and Vetrò, A. and Morisio, M.",IT Professional,2014,"Practitioners generally view exploratory testing (ET) as a cost-effective substitute for their daily testing activities. However, empirical evidence reported in the literature gives a more comprehensive picture of ET that considers its technical debt implications. © 1999-2012 IEEE.",10.1109/MITP.2013.21,"Politecnico di Torino, Italy",Accepted
73,Overview of an automated framework to measure and track the quality level of a product,"Reimanis, D.",CEUR Workshop Proceedings,2015,"We propose a research plan to further the understanding of design pattern evolution. Current research into design pattern evolution focuses on the structural elements of decay, which is realized as structural grime. We plan to expand the current state of research by introducing the notion of behavioral grime, or unwanted artifacts that appear at run-time in a pattern. This form of grime may be transparent to the current analysis models. We seek to classify types of grime into taxonomy, evaluate each type in terms of impacts on technical debt and quality in the pattern and system as a whole, and predict future occurrences of behavioral grime. Studies are designed for each of these respective goals. The results of this research will further the understanding of design patterns, assisting practitioners and researchers alike. Categories and Subject Descriptors D.2.4 [Software Engineering]: Software/Program Verification - Formal Methods; D.2.8 [Software Engineering]: Metrics - product metrics; D.2.11 [Software Engineering]: Software Architectures - Patterns General Terms Measurement, Design, Experimentation, Verification. © 2015 for this paper by its authors.",,"Department of Computer Science, Montana State University, Bozeman, MT  59717-3880, United States",Rejected
74,On Clones and Comments in Production and Test Classes: An Empirical Study,"De Vasconcelos, L.E.G. and Kusumoto, A.Y. and Leite, N.P.O. and Lopes, C.M.A.",Proceedings of the International Telemetering Conference,2015,"Due to the quick change of business processes in organizations, software needs to adapt quickly to meet new requirements by implementing new business rules. In Research and Development (R&D) scenario, the research is highly non-linear and changes are inevitable. In this context, it is known that traditional methodologies (e.g. waterfall) may lead to the detection of failures late, increase the time and cost of development and maintenance of software. On the other hand, agile methodologies are based on Test-Driven Development (TDD), maintain the technical debt under control, maximize the Return on Investment and reduce the risks for customers and companies. In this paper, we show the use of Scrum and TDD in the development of an experimental tool that aims to make the calibration in real time of the rudder of a fighter aircraft. The preliminary results allowed to increase the coverage testing of the software and hence the quality of the tool.",,"Instituto de Pesquisas e Ensaios em Voo (IPEV), Pça Marechal Eduardo Gomes no 50, São José dos Campos, SP, Brazil; Instituto Tecnológico de Aeronáutica (ITA), Pça Marechal Eduardo Gomes no 50, São José dos Campos, SP, Brazil; Instituto de Aeronáutica e Espaço (IAE), Pça Marechal Eduardo Gomes no 50, São José dos Campos, SP, Brazil",Rejected
75,A Smart Background Scheduler for Storage Systems,"Heikkila, V.T. and Damian, D. and Lassenius, C. and Paasivaara, M.","Proceedings - 41st Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2015",2015,"Agile software development (ASD) methods have gained popularity in the industry and been the subject of an increasing amount of academic research. Although requirements engineering (RE) in ASD has been studied, the overall understanding of RE in ASD as a phenomenon is still weak. We conducted a mapping study of RE in ASD to review the scientific literature. 28 articles on the topic were identified and analyzed. The results indicate that the definition of agile RE is vague. The proposed benefits from agile RE included lower process overheads, a better requirements understanding, a reduced tendency to over allocate development resources, responsiveness to change, rapid delivery of value, and improved customer relationships. The problematic areas of agile RE were the use of customer representatives, the user story requirements format, the prioritization of requirements, growing technical debt, tacit requirements knowledge, and imprecise effort estimation. We also report proposed solutions to the identified problems. © 2015 IEEE.",10.1109/SEAA.2015.70,"Department of Computer Science, University of Victoria, Victoria, BC, Canada; Department of Computer Science, Aalto University, Helsinki, Finland",Rejected
76,Epistemic debt: A concept and measure of technical ignorance in smart manufacturing,"Carrillo, C. and Capilla, R. and Zimmermann, O. and Zdun, U.",ACM International Conference Proceeding Series,2015,"Architectural Knowledge Management (AKM) has been an active research area in the last decade; the importance of making the right architectural decisions - and making these at the right time - has been recognized by the contemporary software engineering practices. Several AKM meta-models, templates and tools have been proposed and applied in practice to capture architectural design decisions and minimize architectural drift during software evolution. However, most of these AKM models, and the architectural decisions captured with them, lack contextual awareness, flexibility and maintainability over time. In this position paper, we outline an extended AKM meta-model and a set of guidelines with the goal to (i) allow AKM tool engineers to construct more configurable and therefore flexible AKM tools, (ii) allow knowledge engineers and method coaches to create more sustainable and therefore maintainable decision logs (AK model instances). We approach these two goals by way of mapping the extended AKM meta-model concepts to quality attributes for architectural knowledge as well as supporting AK metrics. © 2015 ACM.",10.1145/2797433.2797498,"ETSIST-DTE, Universidad Politécnica de Madrid, Madrid, Spain; Faculty of Computer Science, Rey Juan Carlos University, Madrid, Spain; University of Applied Sciences of Eastern Switzerland, Rapperswil, Switzerland; Faculty of Computer Science, University of Vienna, Vienna, Austria",Rejected
77,Multi-Domain Network Slicing with Latency Equalization,"Sharma, T. and Suryanarayana, G. and Samarthyam, G.",IEEE Software,2015,"Refactoring is a key approach for managing technical debt. In the past few years, refactoring techniques and tools have received considerable attention from researchers and tool vendors. However, several practical challenges must be overcome to facilitate the adoption of refactoring in industrial contexts. Results from a survey at the Siemens Corporate Development Center India highlight common challenges to refactoring adoption. The article also outlines ways to address these challenges and describes key initiatives the development center is planning and launching. This article is part of a special issue on Refactoring. © 1984-2012 IEEE.",10.1109/MS.2015.105,"Siemens Technology and Services Private Limited, India",Rejected
78,Predicting technical debt from commit contents: reproduction and extension with automated feature selection,"Kazman, R. and Cai, Y. and Mo, R. and Feng, Q. and Xiao, L. and Haziyev, S. and Fedak, V. and Shapochka, A.",Proceedings - International Conference on Software Engineering,2015,"Our recent research has shown that, in large-scale software systems, defective files seldom exist alone. They are usually architecturally connected, and their architectural structures exhibit significant design flaws which propagate bugginess among files. We call these flawed structures the architecture roots, a type of technical debt that incurs high maintenance penalties. Removing the architecture roots of bugginess requires refactoring, but the benefits of refactoring have historically been difficult for architects to quantify or justify. In this paper, we present a case study of identifying and quantifying such architecture debts in a large-scale industrial software project. Our approach is to model and analyze software architecture as a set of design rule spaces (DRSpaces). Using data extracted from the project's development artifacts, we were able to identify the files implicated in architecture flaws and suggest refactorings based on removing these flaws. Then we built economic models of the before and (predicted) after states, which gave the organization confidence that doing the refactorings made business sense, in terms of a handsome return on investment. © 2015 IEEE.",10.1109/ICSE.2015.146,"SEU/CMU, U. of Hawaii, Honolulu, HI, United States; SoftServe Inc., Lviv, Ukraine; Drexel University, Philadelphia, PA, United States",Accepted
79,Software Architecture Reconstruction via a Genetic Algorithm: Applying the Move Class Refactoring,"Ozkaya, I. and Nord, R.L. and Koziolek, H. and Avgeriou, P.",Proceedings - International Conference on Software Engineering,2015,"Software engineers and architects of complex software systems need to balance hard quality attribute requirements while at the same time manage risks and make decisions with a system-wide and long-lasting impact. To achieve these tasks efficiently, they need quantitative information about design-time and run-time system aspects through usable and quick tools. While there is body of work focusing on code quality and metrics, their applicability at the design and architecture level and at scale are inconsistent and not proven. We are interested in exploring whether architecture can assist with better contextualizing existing system and code quality and metrics approaches. Furthermore, we ask whether we need additional architecture-level metrics to make progress and whether something as complex and subtle as software architecture can be quantified. The goal of this workshop is to discuss progress, gather empirical evidence, and identify priorities for a research agenda on architecture and metrics in the software engineering field. © 2015 IEEE.",10.1109/ICSE.2015.346,"Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; ABB Corporate Research, Ladenburg, Germany; University of Groningen, Groningen, Netherlands",Rejected
80,Towards the use of a framework to make technical debt visible,,"QoSA 2015 - Proceedings of the 11th International ACM SIGSOFT Conference on Quality of Software Architectures, Part of CompArch 2015",2015,"The proceedings contain 16 papers. The topics discussed include: representing and configuring security variability in software product lines; control theory for model-based performance-driven software adaptation; architecture-based assessment and planning of change requests; preemptive management of model driven technical debt for improving software quality; QoS-based feedback for service compositions; modeling fault tolerance tactics with reusable aspects; a catalog of architectural tactics for cyber-foraging; on architectural qualities and tactics for mobile sensing; scalability, elasticity, and efficiency in cloud computing: a systematic literature review of definitions and metrics; exploring performance models of Hadoop applications on cloud architect; identifying optimal sets of standardized architectural features - a method and its automotive application; investigating quality trade-offs in open source critical embedded systems; and automated failure propagation using inner port dependency traces.",,,Rejected
81,Does migrating a monolithic system to microservices decrease the technical debt?,"Zhang, L. and Zhang, X. and Cheng, K.",Journal of Systems Science and Complexity,2015,"This paper proves the co-movement of foreign trade in different countries or areas which belong to ten economic regions by MS-VAR model. The studies show that trade crisis lags behind economic crisis and spreads from the core of the economic crisis to its periphery which is closely-related with it. The trade crisis corresponding to the US subprime crisis spreads faster than before, which has struck worldwide foreign trade. In order to get the main factors affecting trade crisis, the authors construct composite indices which are proxies of economic growth and price levels of internal and external regions. The results of logistic and linear panel models show that economic growth affects more to trade cycle than price level. The results of panel models with dummy variable of trade crisis show that the outside economic growth do bad to the recovery of internal foreign trade during trade crisis corresponding to Mexican peso crisis, the Asian financial crisis and the Russian debt crisis, while the opposite is true during the internet bubble burst and the US subprime crisis. © 2015, Institute of Systems Science, Academy of Mathematics and Systems Science, CAS and Springer-Verlag Berlin Heidelberg.",10.1007/s11424-015-3270-6,"Academy of Mathematics and Systems Science, Chinese Academy of Sciences, Beijing, 100190, China",Rejected
82,A simple tool for reliable government problem solving and getting legislation passed,"Sharma, T. and Samarthyam, G. and Suryanarayana, G.",ACM International Conference Proceeding Series,2015,"It is widely recognized that the systematic application of relevant design principles plays a key role in taming the complexity involved in real-world software development. In our experience as consultant architects and trainers on software architecture and design in a corporate setting, we find that software engineers have a theoretical understanding of design principles but sorely lack knowledge about how to properly apply them to in realworld situations to achieve high-quality design. This half-day tutorial is geared towards bridging this gap. It first introduces fundamental design principles (viz. abstraction, encapsulation, modularization, and hierarchy) and describes how these can be applied using a set of corresponding enabling techniques. Next, it discusses how design smells can be viewed as violations of these enabling techniques, and explains how these design smells can be refactored via the application of relevant design principles. Finally, it highlights useful tools, processes, and practical techniques that support the application of design principles in real-world software projects. Copyright is held by the owner/author(s).",10.1145/2723742.2723764,"Research and Technology Center, Siemens Technology and Services Pvt. Ltd., Bangalore, 560100, India; Independent Consultant, Classic Royale Garden, Hennur, Bangalore, 560093, India",Rejected
83,A comparison of quality flaws and technical debt in model transformation specifications,,Lecture Notes in Business Information Processing,2015,The proceedings contain 17 papers. The special focus in this conference is on Innovative Tools and Prototypes. The topics include: A formal broker framework for secure and cost-effective business process deployment on multiple clouds; presentation and validation of method for security requirements elicitation from business processes; an explorative study for process map design; supporting data collection in complex scenarios with dynamic data collection processes; a method for analyzing time series data in process mining; extracting data manipulation processes from SQL execution traces; mapping and usage of know-how contributions; facilitating effective stakeholder communication in software development processes; towards path-based semantic annotation for web service discovery; a semantic-aware framework for composite services engineering based on semantic similarity and concept lattices; work systems paradigm and frames for fractal architecture of information systems; towards ontology-based information systems and performance management for collaborative enterprises; innovative tools and prototypes conciliating model-driven engineering with technical debt using a quality framework; towards supporting the analysis of online discussions in oss communities; visual and ontological modeling and analysis support for extended enterprise models; unified process modeling with uprom tool and case study report requirements for it governance in organizations experiencing decentralization.,,,Rejected
84,PR and GR technologies as a tool for ensuring the safety of actors and trust in the state in emergency situations,"Betz, S. and Becker, C. and Chitchyan, R. and Duboc, L. and Easterbrook, S.M. and Penzenstadler, B. and Seyff, N. and Venters, C.C.",CEUR Workshop Proceedings,2015,"Sustainability, the capacity to endure, is fundamental for the societies on our planet. Despite its increasing recognition in software engineering, it remains difficult to assess the delayed systemic effects of decisions taken in requirements engineering and systems design. To support this difficult task, this paper introduces the concept of sustainability debt. The metaphor helps in the discovery, documentation, and communication of sustainability issues in requirements engineering. We build on the existing metaphor of technical debt and extend it to four other dimensions of sustainability to help think about sustainabilityaware software systems engineering. We highlight the meaning of debt in each dimension and the relationships between those dimensions. Finally, we discuss the use of the metaphor and explore how it can help us to design sustainability-aware software Copyright © 2015 for this paper by its authors. Copying permitted for private and academic purposes.",,"Karlsruhe Institute of Technology, Karlsruhe, Germany; University of Toronto, Toronto, Canada; Department of Computer Science, University of Leicester, United Kingdom; State University of Rio de Janeiro, Brazil; California State University, Long Beach, United States; University of Applied Sciences and Arts Northwestern Switzerland, Windisch, Switzerland; University of Huddersfield, Huddersfield, United Kingdom; Vienna University of Technology, Austria; University of Zurich, Switzerland",Accepted
85,A garch model with artificial neural networks,"Holvitie, J. and Leppänen, V.",International Journal of Software Engineering and its Applications,2015,"Technical debt management requires means to identify, track, and resolve technical debt in the various software project artifacts. There are several approaches for identifying technical debt from the software implementation, but they all have their shortcomings in maintaining this information. Readily available information is a cornerstone of successful technical debt management integration. As such, this paper presents a two-partite case study that explores the role of dependency propagation in the accumulation of technical debt for software implementations. The first part, targeting a refactorization project in the ViLLE education platform, identifies a clear relation between the propagation and the accumulation in addition to making notions about special propagation characteristics. The second part considers bug reports for the Eclipse IDE, and, thus, provides further verification in observing a similar relationship at a lower implementation abstraction level for this independent data set. We conclude that formalization of this relation should lead to solutions for the technical debt information maintenance problem. As such, we use the case study herein to further improve the propagation model applied in our DebtFlag technical debt management tool. © 2015 SERSC.",10.14257/ijseia.2015.9.6.12,"Turku Centre for Computer Science (TUCS), Dept. of Information Technology, University of Turku, Turku, FI-20520, Finland",Accepted
86,Learning to detect community smells in open source software projects,"Basti, E. and Kuzey, C. and Delen, D.",Decision Support Systems,2015,"In this study, we investigated underpricing of Turkish companies in the initial public offerings (IPOs) issued and traded on Borsa Istanbul between 2005 and 2013. The underpricing of stocks in IPOs, or essentially leaving money on the table, is considered as an important, challenging and worthy research topic in literature. Within the proposed framework, the IPO performance in the short run and the factors that affect this short run performance were analyzed. Popular machine learning methods - several decision tree models and support vector machines - were developed to investigate the major factors affecting the short-term performance of initial IPOs. A k-fold cross validation methodology was used to assess and contrast the performance of the predictive models. An information fusion-based sensitivity analysis was performed to combine the values of individual variable importance results into a common representation. The results showed that there was underpricing in the initial public offerings of Turkish companies, although it was not as high as the underpricing determined in developed markets. The market sentiment, the annual sales amounts, the total assets turnover rates, IPO stocks sales methods, the underwriting methods, the offer prices, debt ratio, and number of shares sold were among the most influential factors affecting the short term performance of initial public offerings of Turkish companies. © 2015 Elsevier B.V. All rights reserved.",10.1016/j.dss.2015.02.011,"Department of Banking and Finance, Faculty of Economics and Administrative Sciences, Fatih University, Buyukcekmece, Istanbul, 34500, Turkey; Department of Management, Faculty of Economics and Administrative Sciences, Fatih University, Buyukcekmece, Istanbul, 34500, Turkey; Management Science and Information Systems, Spears School of Business, Oklahoma State University, 700 N. Greenwood Ave. #NH341, Tulsa, OK  74106, United States",Rejected
87,Does code review really remove coding convention violations?,"Elena, B. and Giuseppina, I. and Arianna, L.","23rd European Conference on Information Systems, ECIS 2015",2015,"Non-performing loans (NPLs) that turn into bad debt or dead loans are a problem for Italy's banking industry. To some extent, this is unavoidable. Previously, Italian banks have given the impression that their risk controls for loans are unsuccessful because the banks own a disproportionate amount of NPLs. These banks are now paying more attention to the management of these risks. (Vaidya, 2013). ""Information Technology (IT) is a critical component in creating value in banking industries. It provides decision makers with an efficient means to report information about risk, profitability and precedent conditions for loan"" (Huaiqing, Mylopoulus and Liao, 2002). The purpose of this work is, through a case study, to highlight the possibility of Information System (IS) to support a new integrated process of credit monitoring to prevent the impairment of asset quality, providing increasingly reliable data, availability on demand and real-time information, and facilitating the creation of the development of global knowledge and new reporting tools, as well as integration of areas of risk and business operating processes. The findings show that the system implemented in a small Italian bank provides enough information on credit monitoring activities to improve the quality of the loans held ortfolio.",,"Department of Economics and Management, University of Pisa, Italy; Department of Communication and Economics, University of Modena and Reggio Emilia, Italy",Rejected
88,Refactoring Recommendations Based on the Optimization of Socio-Technical Congruence,"Aribowo, A.S. and Cahyana, N.H.",International Journal of Advances in Intelligent Informatics,2015,"The problem of bad loans in the koperasi can be reduced if the koperasi can detect whether member can complete the mortgage debt or decline. The method used for identify characteristic patterns of prospective lenders in this study, called Association Rule Mining Classifier. Pattern of credit member will be converted into knowledge and used to classify other creditors. Classification process would separate creditors into two groups: good credit and bad credit groups. Research using prototyping for implementing the design into an application using programming language and development tool. The process of association rule mining using Weighted Itemset Tidset (WIT)tree methods. The results shown that the method can predict the prospective customer credit. Training data set using 120 customers who already know their credit history. Data test used 61 customers who apply for credit. The results concluded that 42 customers will be paying off their loans and 19 clients are decline. © 2015 International Journal of Advances in Intelligent Informatics. All rights reserved.",10.26555/ijain.v1i1.8,"Department of Informatics FTI, UPN Veteran Yogyakarta, Indonesia",Rejected
89,"Hearing the Voice of Software Practitioners on Causes, Effects, and Practices to Deal with Documentation Debt","Klasinc, A.-J.","2015 38th International Convention on Information and Communication Technology, Electronics and Microelectronics, MIPRO 2015 - Proceedings",2015,"This paper presents an analysis of the newly amended Distraint Act in Croatia, concerning foreclosure and sales of properties. The idea behind the act is that making sales of foreclosed properties more transparent by the means of online auctions can create gains for both the foreclosed and the state. The banks may also profit from better repayment of defaulted loans. The unamended act provided that the properties are put on sale by the court in execution proceedings, and those sales were conducted by dealers that saw their interest in lowering the prices. This apparently meant that properties were sold below the market prices and that loans were still not payed off when the sale of property was concluded, which also presented a useful opportunity for some buyers of properties to make profits, as well as for dealers themselves, while the state did not collect as much as it could have and the process of selling was slow. With online sales of properties the process becomes more transparent and it can reach larger number of potential buyers, which could increase the price and profits for both state and the former owners of those properties that are in debt. However, a similar act in the Netherlands provided that the properties should be sold through private online auction resellers, while in Croatia this is given to the government financial agency FINA. The problem is analysed from the perspective of principal agent theory, and from the perspective of supply and demand. © 2015 MIPRO.",10.1109/MIPRO.2015.7160512,"Vertex Projekt D.o.o., Institute for Public Administration, Zagreb, Croatia",Rejected
90,"Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020","Chunchao, C.","Proceedings - 2015 International Conference on Control, Automation and Robotics, ICCAR 2015",2015,"Toll expressway financial risk problem is being paid more and more attention nowadays, because which may induce local government debt risks. This paper focuses on the issues about toll expressway financial risk, and presents a set of monitoring, analyzing and management solution. At first, toll expressway financial risk indexes were designed, which considered not only the current but also the potential solvency about the payment ability of each toll expressway project. Secondly, four risk levels and alerting values were defined by means of those indexes estimation. Meanwhile, corresponding actions were suggested according to risk levels. Thirdly, the decision support system (DSS) was developed on toll expressway financial risk monitoring, and a case study was conducted as well. In the case study, the financial risk level of each project was easily identified by different colors, such as red standing for serious situation. The research achievements provide technical supports and decision-making references for monitoring financial risks of toll expressway projects. © 2015 IEEE.",10.1109/ICCAR.2015.7166016,"Traffic Development Research Center, China Academy of Transportation Science, Beijing, China",Rejected
91,Achieving agility and quality in product development - an empirical study of hardware startups,"Magni, C.A.",European Journal of Operational Research,2015,"Abstract Evaluating an industrial opportunity often means to engage in financial modeling which results in estimation of a large amount of economic and accounting data, which are then gathered in an economically rational framework: the pro forma financial statements. While the standard net present value (NPV) condenses all the available pieces of information into a single metric, we make full use of the crucial information supplied in the pro forma financial statements and give a more detailed account of how economic value is created. In particular, we construct a general model, allowing for varying interest rates, which decomposes the project into investment side and financing side and quantifies the value created by either side; an equity/debt decomposition is also accomplished, which enables to appreciate the role of debt in adding or subtracting value to equityholders. Further, the major role of accounting rates of return as value drivers is highlighted, and new relative measures of worth are introduced: the project ROA and the project WACC, which aggregate information deriving from the period rates of return. To achieve these results, we make use of the Average-Internal-Rate-of-Return (AIRR) approach, recently introduced, which rests on capital-weighted arithmetic means and sets a direct relation between holding period rates and NPV. © 2015 Elsevier B.V. All rights reserved.",10.1016/j.ejor.2015.02.010,"University of Modena and Reggio Emilia, Department of Economics, viale Berengario 51, Modena, 41100, Italy",Rejected
92,Towards an Approach to Identify Obsolete Features based on Importance and Technical Debt,"Costa, M. and Pires, C.P.",Operations Research and Big Data: IO2015-XVII Congress of Portuguese Association of Operational Research (APDIO),2015,"Financial and output market decisions are crucial to the success or failure of an organization. In this paper we analyze the equilibrium default risk in a two-stage duopoly model with an uncertain environment, where firms decide their financial structure in the first stage of the game and decide their quantities in the second stage of the game. Using numerical analysis, we analyze the impact of changing the asymmetry in the two firms' marginal costs on the equilibrium default risk. Our results show that as a firm becomes less efficient it is optimal to reduce its debt level and the quantity produced. The reverse is true for the more efficient firm. This behavior implies that although higher marginal cost leads to lower profits, the less efficient firm reduces its default probability due to a more cautious behavior in the financial and product market. © Springer International Publishing Switzerland 2015. All rights reserved.",10.1007/978-3-319--24154-8_6,"ESTG, CEFAGE-UE, Instituto Politécnico de Leiria, Portugal; CEFAGE-UE, Departamento de Gestão, Universidade de Évora, Portugal",Rejected
93,On the Influence of UML Class Diagrams Refactoring on Code Debt: A Family of Replicated Empirical Studies,"Zakaria, Z. and Nabi, M.H.",Advanced Science Letters,2015,"This paper investigates the nexus between economic growth, export and public debt in Malaysia. The analysis was conducted using the VECM framework and the Granger Causality test over the period of 19702013 in order to explore the existence of causality relationship between these variables. The findings from the analysis show the existence of long run bi-directional relationship between public debt and exports of Malaysia. The causality tests statistics do not support the existence of short run causality relationship from public debt to GDP, or vice versa. The test results also fail to support the existence of short run causal relationship between exports and public debt. However, this study found evidence to support the existence of uni-directional short run causal relationship from exports to public debt in Malaysia. In conclusion, the government debt may not influence Malaysias economic growth in the short run, but it could affect the exports in the long run and subsequently the sustainability of the economy. © 2015 American Scientific Publishers. All rights reserved.",10.1166/asl.2015.6148,"International Business School, UTM, Kuala Lumpur, 54100, Malaysia",Rejected
94,An empirical study of quick remedy commits,"Yuan, F. and Zhang, Q.T. and Jin, S. and Zhu, H.",IEEE Transactions on Wireless Communications,2015,"Energy harvesting (EH) technology has emerged as a promising energy-supplier to unattended wireless systems. In the commonly used harvest-store-use (HSU) scheme, harvested energy is always stored in a battery before its subsequent use. The existence of storage loss in practical battery systems, however, unavoidably reduces the energy efficiency. In this paper, we therefore propose the use of a more efficient harvest-use-store (HUS) architecture for point-to-point data transmission, where the harvested energy is prioritized for use in data transmission while its balance/debt is stored in or extracted from the storage device. We derive the optimal energy polices, under the criterion of throughput maximization, for the HUS architecture on static and block fading channels, and investigate the properties of the resulting power allocation pattern. The optimization is done in the Lagrangian framework, uncovering the special structure of the optimal power pattern and obtaining a closed-form solution conditioned on the knowledge of the block locations for zero battery level. A dynamic programming (DP) based algorithm is developed for locating such blocks in the optimal power patterns. Numerical results are presented to demonstrate the properties of the proposed HUS architecture and its superior performance over the existing schemes. © 2002-2012 IEEE.",10.1109/TWC.2014.2358215,"Jiangsu Key Laboratory of Wireless Communications, College of Telecommunications and Information Engineering, Nanjing University of Posts and Telecommunications, Nanjing, 210003, China; National Mobile Communications Research Laboratory, Southeast University, Nanjing, 210096, China",Rejected
95,Decision Support Tools for Energy Efficiency Obligated Parties towards Energy Poverty Alleviation,"Mendes, T.S. and Almeida, D.A. and Alves, N.S.R. and Spínola, R.O. and Novais, R. and Mendonça, M.","ICEIS 2015 - 17th International Conference on Enterprise Information Systems, Proceedings",2015,"Software development and maintenance activities can be negatively impacted by the presence of technical debt. One of its consequences is the software quality decrease. In order to produce better software, the evolution of technical debt needs to be monitored. However, this is not a trivial task since it usually requires the analysis of large amount of data and different types of debt. The areas of metrics and software visualization can be used to facilitate the monitoring of technical debt. This paper presents an open source tool called VisMinerTD that uses software metrics and visualization to support developers in software comprehension activities including the identification and monitoring of technical debt. VisMinerTD brings a new perspective to the hard work of identifying and monitoring technical debt evolution on software projects. Moreover, the user can easily plug new metrics and new visual metaphors to address specific technical debt identification and monitoring activities. Copyright © 2015 SCITEPRESS - Science and Technology Publications.",10.5220/0005464804570462,"Fraunhofer Project Center for Software and System Engineering at UFBA, Salvador, Brazil; Salvador University - UNIFACS, Salvador, Brazil; Federal Institute of Bahia - IFBA, Salvador, Brazil",Accepted
96,An empirical study on the evolution of design smells,"Yli-Huumo, J. and Maglyas, A. and Smolander, K.",Lecture Notes in Business Information Processing,2015,"Workarounds have existed in software from the very beginning. Being a formalized collection of knowledge rather than a physical artifact, software allows shortcuts in its development process. The shortcuts serve various purposes, like releasing a product to the market faster or postponing the solution of a problem. In this article, we present the findings of an investigation of workarounds in two software companies. Our analysis reveals that the decisions to take a workaround to resolve a technical issue are often intentional and forced by time-to-market requirements. However, the stakeholders are not always familiar with the negative consequences of taking workarounds, like additional hours, costs, and poor quality. We argue that the decision to take a workaround is often made by business managers who see short-term benefits only while developers have to deal with negative consequences in long-term. © Springer International Publishing Switzerland 2015.",10.1007/978-3-319-19593-3_1,"School of Business and Management, Innovation and Software, Lappeenranta University of Technology, Lappeenranta, Finland",Rejected
97,Detecting bad smells with machine learning algorithms: An empirical study,"Giraldo, F.D. and España, S. and Pineda, M.A. and Giraldo, W.J. and Pastor, O.",Lecture Notes in Business Information Processing,2015,"The main goal of this work is to evaluate the feasibility to calculate the technical debt (a traditional software quality approach) in a model-driven context through the same tools used by software developers at work. The SonarQube tool was used, so that the quality check was performed directly on projects created with Eclipse Modeling Framework (EMF) instead of traditionals source code projects. In this work, XML was used as the model specification language to verify in Sonar- Qube due to the creation of EMF metamodels in XMI (XML Metadata Interchange) and that SonarQube offers a plugin to assess the XML language. After this, our work focused on the definition of model rules as an XSD schema (XML Schema Definition) and the integration between EMF-SonarQube in order that these metrics were directly validated by SonarQube; and subsequently, this tool determined the technical debt that the analyzed EMF models could contain. © Springer International Publishing Switzerland 2015.",10.1007/978-3-319-19270-3_13,"System and Computer Engineering, University of Quindío, Quindio, Colombia; PROS Research Centre, Universitat Politècnica de València, Valencia, Spain",Accepted
98,The hidden cost of backward compatibility: When deprecation turns into technical debt - An experience report,"Takahashi, M. and Azuma, H. and Tsuda, K.",Procedia Computer Science,2015,"This paper presents investigating the customer characteristics of reminder effects in the mail order industry, especially the bad debt customers. These kinds of investigations have not made intensively, performed only such as the shipping address, the recipient name, and the payment method so far and the conventional method for predicting such knowledge depends on the employee's working experiences. For these backgrounds, we observe the transaction data with the bad debt customer information gathered from a mail order company in Japan and characterized the customer with machine learning method. From the results of the analysis, potential fraudulent transactions are identified. Intensive research revealed that the classification of the deliberate customer and the careless customer with machine learning. This result will make use of the revenue expansion with the improvement of the bad debt collections. © 2015 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2015.08.136,"Graduate School of Innovation and Technology Management, Yamaguchi University, 2-16-1 Tokiwadai, Ube Yamaguchi, 755-8611, Japan; Graduate School of Systems and Information Engineering, University of Tsukuba, 3-29-1, Otsuka, Bunkyo, Tokyo, 112-0012, Japan; Graduate School of Business Sciences, University of Tsukuba, 3-29-1, Otsuka, Bunkyo, Tokyo, 112-0012, Japan",Rejected
99,An empirical study on self-fixed technical debt,"Akbarinasaji, S.",CEUR Workshop Proceedings,2015,"Software development managers make a release decision with- out fully resolving the defects from current and previous releases due to tight deadlines. Deferring the defects would accumulate a tremendous amount of technical debt in the system. Typically, the defect debts are defined as the type of defect that should be fixed. However, due to competing priorities and the limited amount of time and resources, they would be postponed to the next release. In order to aid practitioners ,who make release decisions, to observe the amount of debt, there is a need for quantifying the defect debt. Software bug repositories roughly provide us with in- formation about the amount of time the defect debt exist in the system, the time the defects are resolved and the severity of the defect. We suggest categorizing the defect into the regular defect and debt prone defect by analyzing this information. Afterwards, we compare the regular defect and debt-prone defect to determine the principal, interest and interest probability of defect debt. We also propose the re- inforcement learning for scheduling which defect debt needs to be paid and when they need to be paid. Categories and Subject Descriptors H.4 [Information Systems Applications]: Miscellaneous; D.2.8 [Software Engineering]: Metrics|complexity measures, performance measures General Terms Theory. © 2015 for this paper by its authors.",,"Data Science Lab, Ryerson University, Toronto, Canada",Accepted
100,A systematic literature review of technical debt prioritization,"Hansen, K.M. and Manikas, K.",IFIP Advances in Information and Communication Technology,2015,"The modularity of a software system is known to have an effect on, among other, development effort, change impact, and technical debt. Modularizing a specific system and evaluating this modularization is, however, challenging. In this paper, we apply community detection methods to the graph of class dependencies in software systems to find optimal modularizations through communities. We evaluate this approach through a study of 111 Java systems contained in the Qualitas Corpus. We found that using the modularity function of Newman with an Erd?s-Rényi null-model and using the community detection algorithm of Reichardt and Bornholdt improved community quality for all systems, that coupling decreased for 99 of the systems, and that coherence increased for 102 of the systems. Furthermore, the modularity function correlates with existing metrics for coupling and coherence. © Springer International Publishing Switzerland 2015.",10.1007/978-3-319-23727-5_8,"Department of Computer Science (DIKU), University of Copenhagen, Copenhagen, Denmark",Accepted
101,Towards microservice smells detection,"Ampatzoglou, A. and Ampatzoglou, A. and Avgeriou, P. and Chatzigeorgiou, A.",BMSD 2015 - Proceedings of the 5th International Symposium on Business Modeling and Software Design,2015,"Technical debt (TD) has gained significant attention over the past years. Due to its interdisciplinary nature, it has become attractive for both technical and management stakeholders, to acknowledge and discuss issues related to decayed design-Time qualities over time, and their corresponding consequences. Until now, despite the inherent relevance of technical debt management to economics, the TD research community has not sufficiently exploited economical methods/models. Therefore, in this paper we present a framework for managing interest in technical debt, founded on top of well-known economic theories (i.e., Loanable Funds and Liquidity Preference Theory) and current TD research. Specifically, in our framework, we will discuss aspects related to technical debt interest, such as: Types of TD interest, TD interest characteristics, and a proposed TD interest theory. Finally, in order to boost the amount of empirical studies in TD research, we will propose several tentative research designs that could be used for exploring the notion of interest in technical debt practice.",10.5220/0005885700750085,"Department of Mathematics and Computer Science, University of Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
102,Piranha: Reducing feature flag debt at Uber,"Gill, A.Q.","International Conference on Information Systems Development, ISD 2015",2015,"Agile development practices focus on developing and delivering working software systems in small iterations with minimal documentation. However, locally project focused agile practices overlook the need for holistic enterprise architecture. Lack of enterprise architecture in agile, especially in the large agile environments, may lead to a number of problems such as technical debt, unnecessary re-work, inconsistent communication, locally focused isolated architecture, design and implementation. There is a missing link between the enterprise architecture and agile development. Enterprise architecture is a strategic capability that should enable and enhance agility of agile development. However, organisations are not sure how best to approach strategic enterprise architecture capability for supporting agile development. This paper proposes and demonstrate the applicability of an integrated adaptive enterprise architecture driven agile development approach for large agile environments.",,"University of Technology Sydney (UTS), Sydney, Australia",Rejected
103,Using a risk-oriented approach incurrent assets management,"Sculley, D. and Holt, G. and Golovin, D. and Davydov, E. and Phillips, T. and Ebner, D. and Chaudhary, V. and Young, M. and Crespo, J.-F. and Dennison, D.",Advances in Neural Information Processing Systems,2015,"Machine learning offers a fantastically powerful toolkit for building useful complex prediction systems quickly. This paper argues it is dangerous to think of these quick wins as coming for free. Using the software engineering framework of technical debt, we find it is common to incur massive ongoing maintenance costs in real-world ML systems. We explore several ML-specific risk factors to account for in system design. These include boundary erosion, entanglement, hidden feedback loops, undeclared consumers, data dependencies, configuration issues, changes in the external world, and a variety of system-level anti-patterns.",,"Google, Inc., United States",Accepted
104,Hybrid Cloud: A Cost Optimised Solution to Cloud Interoperability,"Naedele, M. and Chen, H.-M. and Kazman, R. and Cai, Y. and Xiao, L. and Silva, C.V.A.",Journal of Systems and Software,2015,"Software development suffers from a lack of predictabilitywith respect to cost, time, and quality. Predictability is one of the major concerns addressed by modern manufacturing execution systems (MESs). A MES does not actually execute the manufacturing (e.g., controlling equipment and producing goods), but rather collects, analyzes, integrates, and presents the data generated in industrial production so that employees have better insights into processes and can react quickly, leading to predictable manufacturing processes. In this paper, we introduce the principles and functional areas of a MES. We then analyze the gaps between MES-visiondriven software development and current practices. These gaps include: (1) lack of a unified data collection infrastructure, (2) lack of integrated people data, (3) lack of common conceptual frameworks driving improvement loops from development data, and (4) lack of support for projection and simulation. Finally, we illustrate the feasibility of leveraging MES principles to manage software development, using a Modularity Debt Management Decision Support System prototype we developed. In this prototype we demonstrate that information integration in MES-vision-driven systems enables new types of analyses, not previously available, for software development decision support.We conclude with suggestions formoving current software development practices closer to the MES vision. © 2014 Elsevier Inc. All rights reserved.",10.1016/j.jss.2014.11.015,"ABB Network Management, Baden, Switzerland; University of Hawaii, Honolulu, HI, United States; Drexel University, Philadelphia, PA, United States",Rejected
105,"Feature dependencies in automotive software systems: Extent, awareness, and refactoring","Li, Z. and Avgeriou, P. and Liang, P.",Journal of Systems and Software,2015,"Context: Technical debt (TD) is a metaphor reflecting technical compromises that can yield short-term benefit but may hurt the long-term health of a software system. Objective: This work aims at collecting studies on TD and TD management (TDM), and making a classification and thematic analysis on these studies, to obtain a comprehensive understanding on the TD concept and an overview on the current state of research on TDM. Method: A systematic mapping study was performed to identify and analyze research on TD and its management, covering publications between 1992 and 2013. Results: Ninety-four studies were finally selected. TD was classified into 10 types, 8 TDM activities were identified, and 29 tools for TDM were collected. Conclusions: The term ""debt"" has been used in different ways by different people, which leads to ambiguous interpretation of the term. Code-related TD and its management have gained the most attention. There is a need formore empirical studieswith high-quality evidence on thewhole TDM process and on the application of specific TDM approaches in industrial settings. Moreover, dedicated TDM tools are needed for managing various types of TD in the whole TDM process. © 2014 Elsevier Inc. All rights reserved.",10.1016/j.jss.2014.12.027,"Department of Mathematics and Computing Science, University of Groningen, Nijenborgh 9, Groningen, 9747 AG, Netherlands; State Key Lab of Software Engineering, School of Computer, Wuhan University, Luojiashan, Wuhan, 430072, China; Department of Computer Science, VU University Amsterdam, De Boelelaan 1081a, Amsterdam, 1081 HV, Netherlands",Rejected
106,Two-stage behavior cloning for spoken dialogue system in debt collection,"Griffith, I. and Taffahi, H. and Izurieta, C. and Claudio, D.",Proceedings - Winter Simulation Conference,2015,"Technical debt is a well understood yet understudied phenomena. A current issue is the verification and validation of proposed methods for technical debt management in the context of agile development. In practice, such evaluations are either too costly or too time consuming to be conducted using traditional empirical methods. In this paper, we describe a set of simulations based on models of the agile development process, Scrum, and the integration of technical debt management. The purpose of this study is to identify which strategy is superior and to provide empirical evidence to support existing claims. The models presented are based upon conceptual and industry models concerning defects and technical debt. The results of the simulations provide compelling evidence for current technical debt management strategies proposed in the literature that can be immediately applied by practitioners. © 2014 IEEE.",10.1109/WSC.2014.7019961,"Department of Computer Science, Montana State University, 357 EPS Building, Bozeman, MT  59717, United States; Department of Mechanical and Industrial Engineering, Montana State University, Bozeman, MT  59717, United States",Accepted
107,"Comparing Maintainability Index, SIG Method, and SQALE for Technical Debt Identification","Izurieta, C. and Rojas, G. and Griffith, I.","QoSA 2015 - Proceedings of the 11th International ACM SIGSOFT Conference on Quality of Software Architectures, Part of CompArch 2015",2015,"Technical debt has been the subject of numerous studies over the last few years. To date, most of the research has concentrated on management (detection, quantification, and decision making) approaches -most performed at code and implementation levels through various static analysis tools. However, if practitioners are to adopt model driven techniques, then the management of technical debt also requires that we address this problem during the specification and architectural phases. This position paper discusses several questions that need to be addressed in order to improve the quality of software architecture by exploring the management of technical debt during modeling, and suggests various lines of research that are worthwhile subjects for further investigation. Copyright © 2015 ACM.",10.1145/2737182.2737193,"Department of Computer Science, Software Engineering Laboratory, Montana State University, United States; Department of Computer Science, Faculty of Engineering, University of Concepcion, Chile",Accepted
108,A framework for managing enterprise architecture debts - Outline and research directions,"Lin, Y. and Wang, J.","Proceedings - 2014 7th International Symposium on Computational Intelligence and Design, ISCID 2014",2015,"Enterprise managers should master the debt risk in order to make the right decision. SOM (Self-Organizing Maps) is a type of artificial neural network trained by unsupervised learning. First, the paper improves the neighborhood function of SOM network. Then, this paper uses the improved SOM network to cluster 24 steel listed companies' solvency. The sort of solvency will offer solution for operators to find insufficiencies for enterprise development. © 2014 IEEE.",10.1109/ISCID.2014.225,"School of management, Capital Normal University, Beijing, China",Rejected
109,Towards a modern ontology development environment,"Tajmilur Rahman, M.","2015 IEEE 22nd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2015 - Proceedings",2015,"In my PhD research I will focus on modern release engineering practices. First, I have quantified the time and effort that is involved in stabilizing a release. I found that despite using rapid release, the Chrome and Linux projects still have a period where they rush changes into a release. Second, developers typically isolate unrelated changes on branches. However, developers at major companies, such as Google and Facebook, commit all changes to a single branch. They isolate unrelated changes using feature-flags, which allows them to disable works in progress. My goal is to empirically determine the best practices when using flags and identify dead code. Finally, I will develop tool support to manage feature flags. © 2015 IEEE.",10.1109/SANER.2015.7081893,"Concordia University, Montreal, QC, Canada",Rejected
110,Towards a model-based fuzzy software quality metrics,"Galliani, C. and Zedda, S.",Computational Economics,2015,"In December 2013 the European Commissioner Barnier, presenting the Single Resolution Mechanism for the resolution and recovery of banking crises, said it will break the vicious circle between banks and their sovereigns. But is there any vicious circle? And if so, will resolution tools be able to break it? In literature, the circular nature of the relationship between banking and sovereign debt crises has not yet been properly addressed. Indeed, most papers exclusively focus on one channel of transmission, either quantifying the effects that banking crises have on public finances or analyzing when banking crises may cause sovereign debt crises (or vice-versa). In this paper we propose a computational approach to quantify the effects of this circular relationship and to highlight how sovereign and bank riskiness may increase because of their interconnection. We quantify the effects of bank distress on the banking system itself, passing through the higher public deficit induced by State support, and the subsequent haircut in government bonds. We then test the effectiveness of the bail-in tool proposed in the Single Resolution Mechanism context. The method is tested on four European countries. Results show that, while limited crises tend to be absorbed by the system, serious crises tend to exacerbate at each turn, so that it becomes impossible to stop them without external intervention. Moreover, results show that a bail-in of 8 % of total bank balance sheet can be really effective in breaking the vicious circle and preventing contagion between banks and public finances. This finding supports the bail-in as a valid instrument to avoid taxpayers paying the bill of banking crises. © 2014, Springer Science+Business Media New York.",10.1007/s10614-014-9436-9,"Department of Business and Economics, University of Cagliari, via S. Ignazio 74, Cagliari, 09123, Italy; European Commission, Directorate General for Economic and Financial Affairs - DG ECFIN, Unit D3 - Countries of the G20, IMF, G-Groups, Rue de la Loi 170, Brussels, 1040, Belgium",Rejected
111,Slack's knowledge classification mechanism for architectural knowledge condensation,"Mylonas, Y.",TripleC,2015,"This article looks at the ways mainstream media discuss austerity and its failure to reach its proclaimed goals, to reduce public debt and to boost productivity in the heavily indebted countries of the Eurozones periphery. This study analyzed Der Spiegels articles presenting the crisis and austerity in Europe, focusing on the Greek case, from 2009 until 2014. A thematic analysis was developed in the study a broad corpus of articles, focusing on the main ideas they unfold. Deploying critical political economy literature, critical cultural theory and critical media studies literature, the article criticizes the neoliberal hegemony of the EUs crisis politics and foregrounds the role of mainstream media, including progressivist or objectivist ones such as Spiegel, in the reproduction of neoliberal ideas that expand far beyond the crisis, to produce the institutions, social relations, beliefs and subjectivities for a post-crisis configuration of capitalism. The article concludes that Spiegel, like other mainstream media, produce a biopolitical policing of the crisis exceptionalized subjects (the citizens of indebted countries) and the implementation of crisis-politics by creating a public structure of feeling related to the hegemonic crisis rationales. These rationales are further connected to the development of the new neoliberal subjectivity, which is an objective of the crisis-reforms, such as austerity regimes. In effect, main- stream media discourses reproduce the hegemonic frames of the crisis and austerity, while negating the possibility of new narratives to emerge in the crisis context. © 2015 Unified Theory of Information Research Group. All rights reserved.",,"Media Communications and Design Department, National Research University, Higher School of Economics, Moscow, Russian Federation",Rejected
112,Analysis of bad roads using smart phone,"Soares, H.F. and Alves, N.S.R. and Mendes, T.S. and Mendonca, M. and Spinola, R.O.","Proceedings - 12th International Conference on Information Technology: New Generations, ITNG 2015",2015,"Technical debt is a metaphor that describes the effect of immature artefacts in software development. One of its types is documentation debt, which can be identified by locating missing, inadequate or incomplete artefacts in software projects. Nowadays, we can observe more organizations using agile methods to support their activities. In particular, the use of user stories reduces the focus on requirement specification tasks and, as a consequence, creates difficulties that need to be overcame by the development team. In order to investigate these difficulties and assess whether they create a favourable scenario for incurring documentation debt, this paper presents the results of a literature review and an exploratory study. The results from both studies allowed us to identify a list of causes that can lead the development team to incur documentation debt when working with agile requirements. This is an important step in order to manage the technical debt from a preventive perspective. © 2015 IEEE.",10.1109/ITNG.2015.68,"Program in Systems and Computer at Salvador University, Salvador, Brazil; Fraunhofer Project Center for Software and System Engineering at UFBA, Salvador, Brazil; Federal Institute of Bahia-IFBA, Salvador, Brazil",Accepted
113,Evidence for communicative compensation in debt advice with reduced multimodality,"Tamburri, D.A. and Nitto, E.D.","Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015",2015,"Social and technical debt both represent the state of software development organizations as a result of accumulated decisions. In the case of social debt, decisions (and connected debt) weigh on people and their socio-technical interactions/characteristics. Digging deeper into social debt with an industrial case-study, we found that software architecture, the prince of development artefacts, plays a major role in causing social debt. This paper discusses a key circumstance wherefore social debt is connected to software architectures and what can be done and measured in response, as observed in our case-study. Also, we introduce DAHLIA, that is 'Debt-Aimed Architecture-Level Incommunicability Analysis'-a framework to elicit some of the causes behind social debt for further analysis. © 2015 IEEE.",10.1109/WICSA.2015.16,"VU University Amsterdam, Amsterdam, Netherlands; Politecnico di Milano, Milan, Italy",Accepted
114,TestDCat: Catalog of Test Debt Subtypes and Management Activities,"Li, Z. and Liang, P. and Avgeriou, P.","Proceedings - 12th Working IEEE/IFIP Conference on Software Architecture, WICSA 2015",2015,"Architectural technical debt (ATD) is incurred by design decisions that intentionally or unintentionally compromise system-wide quality attributes, particularly maintainability and evolvability. ATD is harmful to the system's long-term health, thus it needs to be identified for further management. However, existing ATD identification approaches are mainly based on source code analysis and thus suffer from certain shortcomings: they can only identify issues at the system implementation, they can only be employed after the systems is implemented in code, they lack a mechanism to confirm whether the potential ATD identified is real ATD or not. To address these issues, we proposed an ATD identification approach based on architecture decisions and change scenarios. To evaluate the effectiveness and usability of this approach, we conducted a case study with an information system in a large telecommunications company. The results show that the proposed approach is useful and easy to use, and it supports release planning and ATD interest measurement. © 2015 IEEE.",10.1109/WICSA.2015.19,"Department of Mathematics and Computing Science, University of Groningen, Groningen, Netherlands; State Key Lab of Software Engineering, School of Computer, Wuhan University, Wuhan, China",Accepted
115,Reformation of municipal economy: Application of ICT to the sphere of housing and communal services in Uzbekistan,"Tufano, M. and Palomba, F. and Bavota, G. and Olivetox, R. and Di Penta, M. and De Lucia, A. and Poshyvanyk, D.",Proceedings - International Conference on Software Engineering,2015,"In past and recent years, the issues related to managing technical debt received significant attention by researchers from both industry and academia. There are several factors that contribute to technical debt. One of these is represented by code bad smells, i.e., symptoms of poor design and implementation choices. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced. To fill this gap, we conducted a large empirical study over the change history of 200 open source projects from different software ecosystems and investigated when bad smells are introduced by developers, and the circumstances and reasons behind their introduction. Our study required the development of a strategy to identify smellintroducing commits, the mining of over 0.5M commits, and the manual analysis of 9,164 of them (i.e., those identified as smellintroducing). Our findings mostly contradict common wisdom stating that smells are being introduced during evolutionary tasks. In the light of our results, we also call for the need to develop a new generation of recommendation systems aimed at properly planning smell refactoring activities. © 2015 IEEE.",10.1109/ICSE.2015.59,"College of William and Mary, Williamsburg, VA, United States; University of Salerno, Fisciano SA, Italy; Free University of Bozen-Bolzano, Italy; University of Molise, Pesche IS, Italy; University of Sannio, Benevento, Italy",Accepted
116,The technical debt management tools comparison,"Fernández-Sánchez, C. and Garbajosa, J. and Vidal, C. and Yagüe, A.","Proceedings - 2nd International Workshop on Software Architecture and Metrics, SAM 2015",2015,"Technical debt is a metaphor referring to the consequences of weak software development. Managing technical debt is necessary in order to keep it under control, and several techniques have been developed with the goal of accomplishing this. However, available techniques have grown disperse and managers lack guidance. This paper covers this gap by providing a systematic mapping of available techniques and methods for technical debt management, covering architectural debt, and identifying existing gaps that prevent to manage technical debt efficiently. © 2015 IEEE.",10.1109/SAM.2015.11,"Technical University of Madrid (UPM), ETSISI and CITSEM, Spain",Rejected
117,"Effects of anonymity, ephemerality, and system routing on cost in social qestion asking","Venkatasubramanyam, R.D. and Gupta, S. and Uppili, U.","Proceedings - 2015 IEEE 10th International Conference on Global Software Engineering, ICGSE 2015",2015,"Assessment of code and design quality using Software Code Assessment tools is important for continuous improvement and monitoring of code quality in the software industry in general and for global software development in particular. Static Analysis is believed to help identify issues at an early stage in the software development life cycle (SDLC), however it is still under utilized in the industry. In this paper, we discuss our experiences in determining the importance of Static Analysis and the extent to which the defects (that could otherwise be slipped to later stages of SDLC) could have been reduced with the continuous use of Static Analysis. Towards this end, we have performed analysis of defects reported from testing/field by correlating the defects to Static Analysis Rules, for projects that were developed across different regions. Our focus was to gather insight into the number and type of defects that could be identified in advance through Static Analysis Rules. The purpose of gaining the insights is to justify the ROI for software quality checks, fine tune, update existing software quality practices and introduce new practices uniformly across the teams as necessary. The results substantiate the role of Static Analysis in reducing technical debt by identifying potential defects early in the SDLC. © 2015 IEEE.",10.1109/ICGSE.2015.18,"Corporate Technology-Research and Technology Center, Siemens Technology and Services Private Limited, Bengaluru, India; Corporate Technology-Development Center, Siemens Technology and Services Private Limited, Bengaluru, India",Accepted
118,Active hotspot: An issue-oriented model to monitor software evolution and degradation,"Stavnycha, M. and Yin, H. and Römer, T.",ACM International Conference Proceeding Series,2015,"Releasing software with required quality is important for software producers in order to be successful. Therefore, understanding which development practices affect software quality has always been of high interest. However, little empirical evidence has been reported on this matter. The research presented in this paper aims at analyzing the effects of nine pre-selected development practices on the quality aspect correctness of software releases. To this end we collected data from software developers worldwide, using an online survey. 1006 valid responses were received and analyzed with the help of statistical methods. We found that four of the nine development practices show statistically significant effects on the correctness of released software, namely solving technical debt, test coverage, code reviews, and monitoring and fixing software quality problems. Our results indicate that using development practices specifically focusing on improving software quality shows a positive effect on the level of correctness of released software. Development practices that are more organizational in nature didn't show similarly clear effects. © 2015 ACM.",10.1145/2785592.2785617,"Institute of Computer Science, University of Tartu, J. Liivi 2, Tartu, 50409, Estonia; Product Development and Support, ZeroTurnaround OÜ, Ülikooli 2, Tartu, 51003, Estonia",Rejected
119,Factors affecting fraudulent statement in forensic accounting perspective,"Sanchez-Gordon, S. and Calle-Jimenez, T. and Luján-Mora, S.","2015 International Conference on Information Technology Based Higher Education and Training, ITHET 2015",2015,"A massive open online course (MOOC) is a type of online course that can be taken for a huge number of participants. Originally, MOOCs scope was to provide introductory university level courses to students worldwide. Currently, the MOOC model is expanding is scope to training in both private and public sectors. There are more than 30 million of public sector employees only in Latin American and Caribbean Region. Given the huge number of public employees that need to be continuously trained at regional, national, and local range, using MOOCs for training in public sector is not only a valid option but also a necessity. Among the government topics that public employees need training are public service culture, national political constitution, government structure and policies, national development plans, institutional strategy, macroeconomics, monetary and fiscal policy, sovereign debt, regulatory and legal frameworks, and tools for public administration such as management for results. Also, in recent years, government and private organizations have recognized the importance of training their employees on space technologies that manage geographic information for the primary purpose of increase development through getting knowledge of the territory and its behavior. This paper presents four cases of use of MOOCs for public sector training. It also presents strategies to address three major challenges: enrollment, completion and web accessibility. Finally, it states some conclusion and future research. © 2015 IEEE.",10.1109/ITHET.2015.7218016,"Department of Informatics and Computer Sciences, National Polytechnic School, Quito, Ecuador; Department of Software and Computing Systems, University of Alicante (Spain), Spain",Rejected
120,Towards the definition of enterprise architecture debts,,"2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings",2015,The proceedings contain 124 papers. The topics discussed include: proactive self-adaptation under uncertainty: a probabilistic model checking approach; automated multi-objective control for self-adaptive software design; detecting event anomalies in event-based systems; suggesting accurate method and class names; measure it? manage it? ignore it? software practitioners and technical debt; automatically computing path complexity of programs; systematic testing of asynchronous reactive systems; effective test suites for mixed discrete-continuous stateflow controllers; modeling readability to improve unit tests; improving model-based test generation by model decomposition; synthesizing tests for detecting atomicity violations; and optimizing energy consumption of GUIs in android apps: a multi-objective approach.,,,Rejected
121,A novel approach to measure confidence and uncertainty in assurance cases,"Xiao, L.","2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings",2015,"In our prior research, we found that problematic architectural connections can propagate errors. We also found that among multiple files, the architectural connections that violate common design principles strongly correlate with the error-proneness of files. The flawed architectural connections, if not fixed properly and timely, can become debts that accumulate high interest in terms of maintenance costs over time. In this paper, we define architectural debts as clusters of files with problematic architectural connections among them, and their connections incur high maintenance costs over time. Our goal is to 1) precisely identify which and how many files are involved in architectural debts; 2) quantify the penalties of architectural debts in terms of mainte-nance costs; and 3) model the growth trend of penalties- maintenance costs-that accumulate due to architectural debts. We plan to provide a quantitative model for project managers and stakeholders as a reference in making decisions of whether, when and where to invest in refactoring. © 2015 ACM.",10.1145/2786805.2803194,"Drexel University, Philadelphia, United States",Accepted
122,Investigating Instability Architectural Smells Evolution: An Exploratory Case Study,"Ernst, N.A. and Bellomo, S. and Ozkaya, I. and Nord, R.L. and Gorton, I.","2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings",2015,"The technical debt metaphor is widely used to encapsulate numerous software quality problems. The metaphor is attractive to practitioners as it communicates to both technical and nontechnical audiences that if quality problems are not addressed, things may get worse. However, it is unclear whether there are practices that move this metaphor beyond a mere communication mechanism. Existing studies of tech- nical debt have largely focused on code metrics and small surveys of developers. In this paper, we report on our survey of 1,831 participants, primarily software engineers and architects working in long-lived, software-intensive projects from three large organizations, and follow-up interviews of seven software engineers. We analyzed our data using both nonparametric statistics and qualitative text analysis. We found that architectural decisions are the most important source of technical debt. Furthermore, while respondents believe the metaphor is itself important for communication, existing tools are not currently helpful in managing the de- Tails. We use our results to motivate a technical debt time- line to focus management and tooling approaches. © 2015 ACM.",10.1145/2786805.2786848,"Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; College of Computer and Information Science, Northeastern University, United States",Rejected
123,Self-Admitted Technical Debt Removal and Refactoring Actions: Co-Occurrence or More?,"Oliveira, F. and Goldman, A. and Santos, V.","Proceedings - 2015 Agile Conference, Agile 2015",2015,"Ward Cunningham in his experience report presented at the OOPSLA'92 conference introduced the metaphor of technical debt. This metaphor is related to immature, incomplete or inadequate artifacts in the software development cycle that cause higher costs and lower quality. A strategy for the technical debt management is still a challenge because its definition is not yet part of the software development process. Carolyn Seaman and Yuepu Guo proposed a technical debt management framework based on three stages. First, debts are identified and listed. After that, debts are measured by their payment efforts and then debts are selected to be considered in the software development cycle. This study evaluates the application of this framework in the real context of software projects adopting Scrum. Action research is conducted in two companies where their projects have significant technical debt. We performed three action research cycles based on the three stages of the framework for both companies. The main contribution of this paper is to provide real experiences and improvements for projects using Scrum and that may adopt the technical debt management framework proposed by Seaman and Guo. Both teams recognized that the proposed approach is feasible for being considered in the software development process after some modifications. Because of projects time constraints and ease of use, we reduced the use of the proposed metrics to two: Principal and the Current Amount of Interest. In consequence, decision-making was benefitted by the early consideration of the debts that really need to be paid. Instead of using probabilities to find the interest, these are registered every time the technical debt occurs. During the first phase, the debts identification was improved when all Scrum roles participated, while measurement and decision-making were improved when the team was responsible for these phases. The Product Owner role in both companies understood the importance of Technical Debt monitoring and prioritization during a development cycle. With these changes, the two teams mentioned they would remain using the resulting approach. © 2015 IEEE.",10.1109/Agile.2015.7,"Institute of Research Technology, Saõ Paulo, Brazil; Institute of Mathematics and Statistics, University of Saõ Paulo, Saõ Paulo, Brazil; Federal University of Pará, Belém, Brazil",Accepted
124,Preliminary citation and topic analysis of international conference on agile software development papers (2002-2018),"Rigatos, G.G. and Siano, P.","Proceeding - 2015 IEEE International Conference on Industrial Informatics, INDIN 2015",2015,"The paper proposes a systematic method for forecasting default probabilities for financial firms with particular interest in electric power corporations. According to credit risk theory a company's proximity to default is determined by the distance of its assets' value from its debts. The assets' value depends primarily on the company's market (option) value through a complex nonlinear relation. Therefore, by forecasting with accuracy the enterprize's option value it becomes also possible to estimate the future value of the enterprize's asset value and the associated probability of default. This paper proposes a systematic method for forecasting the probability to default for companies (option / asset value forecasting methods) using a new nonlinear Kalman Filtering method under the name Derivative-free nonlinear Kalman Filter. The company's option value is considered to be described by the Black-Scholes nonlinear partial differential equation. Using differential flatness theory the partial differential equation is transformed into an equivalent state-space model in the so-called canonical form. Using the latter model and by redesigning the Derivative-free nonlinear Kalman Filter as a m-step ahead predictor, estimates are obtained of the company's future option values. Thus, by forecasting the company's market (option) values, it becomes also possible to forecast the associated asset value and volatility and finally to estimate the company's future default risk. © 2015 IEEE.",10.1109/INDIN.2015.7281900,"Unit of Industrial Automation, Industrial Systems Institute, Rion-Patras, 26504, Greece; Department of Industrial Engineering, University of Salerno, Fisciano, 84084, Italy",Rejected
125,Mining Retail Telecommunication Data to Predict Profitability,"Falessi, D. and Kruchten, P.",ACM International Conference Proceeding Series,2015,"Technical Debt is a useful metaphor to explain some of the difficulties of software evolution. The concept of Technical Debt is gaining importance from a scientific perspective, as the number of related papers, special issues, and international events grow over the years. From a practical perspective, the number of tools related to Technical Debt and their industrial adoption grow as well. Despite this high interest, Technical Debt is not yet included in the software engineering curriculum and hence the greater part of students graduating in computer science or software engineering does not know about Technical Debt. The aim of this paper is to discuss the inclusion of Technical Debt in the software engineering curriculum. We claim that Technical Debt should be treated as a first class entity the same as Requirements Engineering, Software Design and Architecture, and Software Testing. We support our claim by presenting five reasons why Technical Debt should be included in the software engineering curriculum. © 2015 ACM.",10.1145/2797433.2797462,"California Polytechnic State University, San Luis Obispo, CA, United States; University of British Columbia, Vancouver, BC, Canada",Rejected
126,Reusing Code from StackOverflow: The Effect on Technical Debt,"Shi, D. and Guan, J. and Zurada, J.","Proceedings - 2015 Asia-Pacific Conference on Computer-Aided System Engineering, APCASE 2015",2015,"The research using computational intelligence methods to improve bad debt recovery is imperative due to the rapid increase in the cost of healthcare in the U.S. This study explores effectiveness of using cost-sensitive learning methods to classify the unknown cases in imbalanced bad debt datasets and compares the results with those of two other methods: undersampling and oversampling, often used in processing imbalanced datasets. The study also analyzes the function of a semi-supervised learning algorithm in different circumstances. The results show that although the predictive accuracy rates with oversampling in balanced testing datasets is the best, it is unpractical due to the existence of imbalanced classes in real healthcare situations. The models constructed by undersampling have high classification accuracy rates of the minority class in imbalanced datasets, but they tend to make the overall classification accuracy rates of the majority class worse. The results show that cost-sensitive learning methods can improve the classification accuracy rates of the minority class in imbalanced datasets while achieving considerably good overall classification accuracy rates and classification accuracy rates of majority class. The results and analysis in this study show that cost-sensitive learning methods provide a potentially viable approach to classify the unknown cases in imbalanced bad debt datasets. At last, more practical predictive results are obtained by using the models to predict the unlabeled cases. Although oversampling and the cost-sensitive learning methods with the semi-supervised learning can improve the overall and majority class classification accuracy rates, the minority class classification accuracy rates are still relatively low. The semi-supervised learning algorithms need to be improved to adapt to the imbalanced bad debt datasets. © 2015 IEEE.",10.1109/APCASE.2015.13,"Department of Computer Engineering, School of Electronics and Information Engineering, Anhui Jianzhu University, Hefei, 230601, China; Universidad Técnica Particular de Loja, Loja, Ecuador; Department of Computer Information Systems, College of Business, University of Louisville, Louisville, KY  40292, United States",Rejected
127,"Software archinaut: A tool to understand architecture, identify technical debt hotspots and manage evolution","Abad, Z.S.H. and Ruhe, G.","2015 IEEE 23rd International Requirements Engineering Conference, RE 2015 - Proceedings",2015,"Despite the importance of Requirements Engineering (RE) for the success of software products, most of the requirements decisions such as requirements specification and prioritization are still ad hoc and depend upon the managers' preferences and the trade-offs they make. The Technical Debt (TD) metaphor looks into the trade-offs between short term and long-term goals in software development projects that may lead to increased cost in the future. This problem is mainly due to the lack of a systematic and well-defined approach to manage the high level of uncertainty in requirements decisions. In this paper, we propose to apply the real options thinking to develop a quantitative method for managing requirements decisions under uncertainty and, more specifically for managing requirements debt in software development projects. A real option is a right without an obligation to make a specific future decision depending on how uncertainty resolves. We demonstrate the application of real options in the context of requirements debt valuation by using the binomial model combined with dynamic programming. We provide an illustrative example to show how uncertainty creates option value and influences requirements decisions and finally outline a future research agenda. © 2015 IEEE.",10.1109/RE.2015.7320428,"Department of Computer Science, University of Calgary, 2500 University Dr. NW, Calgary, AB, Canada",Accepted
128,Identifying self-admitted technical debt through code comment analysis with a contextualized vocabulary,"Martini, A. and Bosch, J. and Chaudron, M.",Information and Software Technology,2015,"Context A known problem in large software companies is to balance the prioritization of short-term with long-term feature delivery speed. Specifically, Architecture Technical Debt is regarded as sub-optimal architectural solutions taken to deliver fast that might hinder future feature development, which, in turn, would hinder agility. Objective This paper aims at improving software management by shedding light on the current factors responsible for the accumulation of Architectural Technical Debt and to understand how it evolves over time. Method We conducted an exploratory multiple-case embedded case study in 7 sites at 5 large companies. We evaluated the results with additional cross-company interviews and an in-depth, company-specific case study in which we initially evaluate factors and models. Results We compiled a taxonomy of the factors and their influence in the accumulation of Architectural Technical Debt, and we provide two qualitative models of how the debt is accumulated and refactored over time in the studied companies. We also list a set of exploratory propositions on possible refactoring strategies that can be useful as insights for practitioners and as hypotheses for further research. Conclusion Several factors cause constant and unavoidable accumulation of Architecture Technical Debt, which leads to development crises. Refactorings are often overlooked in prioritization and they are often triggered by development crises, in a reactive fashion. Some of the factors are manageable, while others are external to the companies. ATD needs to be made visible, in order to postpone the crises according to the strategic goals of the companies. There is a need for practices and automated tools to proactively manage ATD. © 2015 Elsevier B.V. All rights reserved.",10.1016/j.infsof.2015.07.005,"Computer Science and Engineering, Chalmers University of Technology, Gothenburg University, Göteborg, Sweden",Accepted
129,"Dependency bugs: The dark side of variability, reuse and modularity","Fontana, F.A. and Ferme, V. and Zanoni, M.","Proceedings - 2nd International Workshop on Software Architecture and Metrics, SAM 2015",2015,"We can evaluate software architecture quality using a plethora of metrics proposed in the literature, but interpreting and exploiting in the right way these metrics is not always a simple task. This is true for both fixing the right metric threshold values and determining the actions to be taken to improve the quality of the system. Instead of metrics, we can detect code or architectural anomalies that give us useful hints on the possible architecture degradation. In this paper, we focus our attention on the detection of code smells and in particular on their relations and co-occurrences, with the aim to evaluate technical debt in an architectural context. We start from the assumption that certain patterns of code anomalies tend to be better indicators of architectural degradation than simple metrics evaluation. © 2015 IEEE.",10.1109/SAM.2015.8,"Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milan, Italy; Faculty of Informatics, University of Lugano (USI), Switzerland",Accepted
130,A Longitudinal Study of Identifying and Paying Down Architecture Debt,"Alves, N.S.R. and De Araújo, R.S. and Spínola, R.O.","2015 Americas Conference on Information Systems, AMCIS 2015",2015,"Keeping information systems useful during their evolution is a complex task. This complexity usually comes from the lack of concern with their maintainability. The monitoring of technical debt (TD) is one way to minimize the effects of low maintainability. But even before developers can monitor the debt, they need to understand what TD types can be incurred, how they can be identified, and which causes can lead developers to incur them into the project. Nevertheless, despite the importance of to know what TD is, this knowledge is still spread out hindering a common understanding of the area. In this context, this paper presents TD Wiki, a collaborative computational infrastructure for supporting TD knowledge sharing and evolution through the using of knowledge visualization techniques. TD Wiki is already available for using and provides useful information that can be used when developing strategies for TD monitoring during the development of information systems.",,"Salvador University, Salvador, Brazil; Fraunhofer Project Center for Software and System Eng., UFBA, Salvador, Brazil",Accepted
131,A survey on software smells,,CEUR Workshop Proceedings,2015,The proceedings contain 21 papers. The topics discussed include: towards proactive management of technical debt by software metrics; defining metrics for continuous delivery and deployment pipeline; metrics for Gerrit code review; test suite evaluation using code coverage based metrics; accounting testing in software cost estimation: a case study of the current practice and impacts; ICDO: integrated cloud-based development tool for DevOps; internal marketplace as a mechanism for promoting software reuse; lean startup meets software product lines: survival of the fittest or letting products bloom?; model-based technology of software development in large; requirements management in GitHub with a lean approach; and preventing malicious attacks by diversifying Linux shell commands.,,,Rejected
132,Quality risks in the data exchange process for collaborative cpps engineering,"Suovuo, T. and Holvitie, J. and Smed, J. and Leppänen, V.",CEUR Workshop Proceedings,2015,"Technical debt has gained considerable traction both in the industry and the academia due to its unique ability to distinguish asset management characteristics for problematic software project trade-offs. Management of technical debt relies on separate solutions identifying instances of technical debt, tracking the instances, and delivering information regarding the debt to relevant decision making processes. While there are several of these solutions available, due to the multiformity of software development, they are applicable only in predefined contexts that are often independent from one another. As technical debt management must consider all these aspects in unison, our work pursues connecting the software contexts via unlimited capturing and explanation of technical debt propagation intra- and inter-software-contexts. We mine software repositories (MSR) for data regarding the amount of work as a function of time. Concurrently, we gather information on events that are clearly external to the programmers' own work on these repositories. These data are then combined in an effort to statistically measure the impact of these events in the amount of work. With this data, as future work, we can apply taxonomies, code analysis, and other analyses to pinpoint these effects into different technical debt propagation channels. Abstraction of the channel patterns into rules is pursued so that development tools may automatically maintain technical debt information with them (the authors have introduced the DebtFlag tool for this). Hence, successfully implementing this study would allow further understanding and describing technical debt propagation at both the high level (longitudinal technical debt propagation effects for the project) and the low level (artifact level effects describing the mechanism of technical debt value accumulation).",,"TUCS - Turku Centre for Computer Science, Software Development Laboratory and University of Turku, Department of Information Technology, Turku, Finland",Accepted
133,Harnessing collective intelligence in P2P lending,,"Proceedings - 2015 Asia-Pacific Conference on Computer-Aided System Engineering, APCASE 2015",2015,The proceedings contain 66 papers. The topics discussed include: basic features of a reflective middleware for intelligent learning environment in the cloud (IECL); intelligent well systems; automatic segmentation and analysis of thermograms using texture descriptors for breast cancer detection; cost-sensitive learning for imbalanced bad debt datasets in healthcare industry; electroencephalographic signals acquisition for the movement of a wheelchair prototype in a BCI system; proposal for a specialist system for dental implant based on images; design and implementation of a non-ionizing radiation measuring system evaluated with an unmanned aerial vehicle; development of radial waveguide dividers with large number of ports; space-time code selection using channel prediction; and future grid business model innovation: distributed energy resources services platform for renewable energy integration.,,,Rejected
134,Removal of design problems through refactorings: Are we looking at the right symptoms?,"Hansen, K.M. and Manikas, K.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2015,"The modularity of a software system is known to have an effect on, among other, development effort, change impact, and technical debt. Modularizing a specific system and evaluating this modularization is, however, challenging. In this paper, we apply community detection methods to the graph of class dependencies in software systems to find optimal modularizations through communities. We evaluate this approach through a study of 111 Java systems contained in the Qualitas Corpus. We found that using the modularity function of Newman with an Erd?s-Rényi null-model and using the community detection algorithm of Reichardt and Bornholdt improved community quality for all systems, that coupling decreased for 99 of the systems, and that coherence increased for 102 of the systems. Furthermore, the modularity function correlates with existing metrics for coupling and coherence. © Springer International Publishing Switzerland 2015.",10.1007/978-3-319-23727-5_8,"Department of Computer Science (DIKU), University of Copenhagen, Copenhagen, Denmark",Duplicated
135,Big Bangs and Small Pops: On Critical Cyclomatic Complexity and Developer Integration Behavior,"Ludhiyani, A. and Pathak, R. and Katiyal, S. and Joshi, S. and Parandkar, P.","2015 International Conference on Computing for Sustainable Global Development, INDIACom 2015",2015,"With the focus on India-Israel Defense relations three modeling aspects - Multiple Regression on EV/EBTIDA multiple, Projections of share price by Monte Carlo Simulation and Rank Correlation (current year) are being utilized for the study. The result suggested that the contribution in multiple (based on MLR) is more from debt and intercept in the companies of Israel and USA. Indian companies are not very good in using debt as tool to amplify shareholder returns. It was also established that i) optimizations and controlling sales volatility for Israeli companies and right use of debt for Indian companies can increase the returns, ii) margin and multiple have remained stable and is not causing change to the share price as sales volatility. © 2015 IEEE.",,"SMU, Indore, India; ATC, Indore, India; SOE, DAVV, Indore, India; Qcfinance.in, Indore, India",Rejected
136,Supporting analysis of technical debt causes and effects with cross-company probabilistic cause-effect diagrams,"Raghavan, T.E.S.",International Game Theory Review,2015,"Mathematical foundations of conflict resolutions are deeply rooted in the theory of cooperative and non-cooperative games. While many elementary models of conflicts are formalized, one often raises the question whether game theory and its mathematically developed tools are applicable to actual legal disputes in practice. We choose an example from union management conflict on hourly wage dispute and how zero sum two person game theory can be used by a judge to bring about the need for realistic compromises between the two parties. We choose another example from the 2000-year old Babylonian Talmud to describe how a certain debt problem was resolved. While they may be unaware of cooperative game theory, their solution methods are fully consistent with the solution concept called the nucleolus of a TU game. © 2015 World Scientific Publishing Company.",10.1142/S0219198915400150,"Department of Mathematics, Statistics and Computer Science, University of Illinois at Chicago, 851 S. Morgan, Chicago, IL  60607, United States",Rejected
137,SARIF-enabled tooling to encourage gradual technical debt reduction,"Skourletopoulos, G. and Mavromoustakis, C.X. and Mastorakis, G. and Rodrigues, J.J.P.C. and Chatzimisios, P. and Batalla, J.M.","2015 IEEE Globecom Workshops, GC Wkshps 2015 - Proceedings",2015,"Enterprise mobility has become a top technology priority for companies over recent years and many organizations are accelerating the adoption of mobile cloud application models. The mobile cloud can be considered as a marketplace, where the mobile services of the mobile cloud-based system architectures can be leased off via the cloud. In this context, this paper elaborates on a novel fluctuation-based quantification model, which is based on a cost-benefit appraisal, adopting a non- linear and asymmetric approach. The proposed model aims to predict the incurrence and the risk of entering into a new technical debt (TD) in the future and provide insights to inform effective investment decision making. The lease of a cloud- based mobile service was considered, when developing the formula, and the research approach is investigated with respect to the cost that derives from the unused capacity. The probability of overutilization or underutilization of the selected service is examined, as fluctuations in the number of users are forecasted. A quantification tool has been also developed as a proof of concept, implementing the proposed model and intending to quantify and evaluate the technical debt on mobile cloud-based service level, when fluctuations in the demand occur. © 2015 IEEE.",10.1109/GLOCOMW.2015.7413999,"Department of Computer Science, University of Nicosia, Nicosia, Cyprus; Department of Informatics Engineering, Technological Educational Institute of Crete, Heraklion, Crete, Greece; Instituto de Telecomunicações, University of Beira Interior, Covilhã, Portugal; CSSN Research Lab, Alexander Technological Educational Institute of Thessaloniki, Thessaloniki, Greece; Warsaw University of Technology, Nowowiejska Str. 15/19, Warsaw, 00-665, Poland",Accepted
138,Panel data fixed effect model for profitability determinants: Referencing to S&P BSE Sensex,"Vathsavayi, S.H. and Systa, K.","Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016",2016,"Management of technical debt is a challenging andpoorly understood task, and it is becoming even harder inthe case of modern software engineering practices like Agiledevelopment and Continuous Delivery. In this research we assume an agile software development and management process where the organization selects the tasks in the beginning of each sprint. The candidate tasks include implementation of new features with assumed business value and paying back technical debt. The organization needs to select a combination of tasks thatis implementable by the available resources and maximize thebenefit for the organization. The required optimization problemin a large project is complex and is also a multi-objective problem, which involves trade-off between short-term and long-term valuedelivered by the software. In this paper, we apply a multiobjectivegenetic algorithm for solving such an optimizationproblem. The potential of the algorithm is demonstrated byapplying it to a student project. © 2016 IEEE.",10.1109/SEAA.2016.43,"Tampere University of Technology, Department of Pervasive Computing, Tampere, Finland",Accepted
139,ACM International Conference Proceeding Series,"Yli-Huumo, J. and Maglyas, A. and Smolander, K.","Managing Software Process Evolution: Traditional, Agile and Beyond - How to Handle Process Change",2016,"This chapter describes a qualitative study with the goal to explore and understand how software process evolution affects technical debt. We investigated three large software development projects with a long development history with the aim to understand how software processes had evolved during the life cycle and how this evolution affected technical debt. We observed how companies had changed their software processes as well as the reasons, benefits, and consequences of these changes on technical debt. The main driving force for the software process evolution was business pressure from management to increase productivity and become cost-efficient. However, these changes were also the source of technical debt. The results show that software process evolution has a clear effect to technical debt. Software process evolution can be used to decrease technical debt by adopting new methods, tools, and techniques. However, software process evolution includes several challenges. These challenges have a possibility to decrease the productivity and quality of new software processes and technical debt might increase. © Springer International Publishing Switzerland 2016.",10.1007/978-3-319-31545-4_15,"School of Business and Management, Innovation and Software, Lappeenranta University of Technology, P.O. Box 20, Lappeenranta, 53851, Finland; Department of Computer Science, Aalto University, P.O. Box 15400, Aalto, 00076, Finland",Rejected
140,Efficient automated decomposition of build targets at large-scale,"He, X. and Avgeriou, P. and Liang, P. and Li, Z.","Proceedings - 19th ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS 2016",2016,"Technical Debt (TD) is a metaphor referring to immature software artifacts that can hurt the long-term maintenance of a system. Model-Driven Engineering (MDE) is a modelcentric software development approach, which promises better maintainability. However, there is a lack of empirical evidence on the existence and influence of TD in the context of MDE. This paper investigates the code-level TD in MDE projects, which is incurred during code generation. We evaluated 16 open-source and non-trivial GMF/EMF-based MDE projects using bad smells, which are widely-accepted TD indicators. The results demonstrate that MDE is not TD-free, and code generators also incur TD, similarly to developers. In fact, the generated code usually contains more TD than handwritten code, which influences significantly the maintenance of MDE projects. © 2016 ACM.",10.1145/2976767.2976806,"School of Computer and Communication Engineering, University of Science and Technology Beijing, Beijing, 100083, China; Department of Mathematics and Computing Science, University of Groningen, Nijenborgh 9, Groningen, 9747 AG, Netherlands; State Key Lab of Software Engineering, School of Computer Science, Wuhan University, Luojiashan, Wuhan, 430072, China; International School of Software, Wuhan University, Luojiashan, Wuhan, 430072, China",Accepted
141,Elasticity Debt Analytics Exploitation for Green Mobile Cloud Computing: An Equilibrium Model,"Yli-Huumo, J. and Maglyas, A. and Smolander, K.",Journal of Systems and Software,2016,"Technical debt (TD) is a metaphor for taking shortcuts or workarounds in technical decisions to gain short-term benefit in time-to-market and earlier software release. In this study, one large software development organization is investigated to gather empirical evidence related to the concept of technical debt management (TDM). We used the exploratory case study method to collect and analyze empirical data in the case organization by interviewing a total of 25 persons in eight software development teams. We were able to identify teams where the current strategy for TDM was only to fix TD when necessary, when it started to cause too much trouble for development. We also identified teams where the management had a systematic strategy to identify, measure and monitor TD during the development process. It seems that TDM can be associated with a similar maturity concept as software development in general. Development teams may raise their maturity by increasing their awareness and applying more advanced processes, techniques and tools in TDM. TDM is an essential part of sustainable software development, and companies have to find right approaches to deal with TD to produce healthy software that can be developed and maintained in the future. © 2016 The Authors",10.1016/j.jss.2016.05.018,"Lappeenranta University of Technology, School of Business and Management, Department of Innovation and Software, PO Box 20, Skinnarilankatu 34, Lappeenranta, FI-53851, Finland; Aalto University, School of Science, Department of Computer Science, P.O.Box 15400, Aalto, FI-00076, Finland",Accepted
142,CBR insight: Measure and visualize source code quality,"Siebra, C.A. and Oliveira, R.G. and Seaman, C.B. and Silva, F.Q.B. and Santos, A.L.M.",Journal of Systems and Software,2016,"The Technical Debt (TD) metaphor has been used as a way to manage and communicate long-term consequences that some technical decisions may cause. Although intuitive, a lack of practical analysis and demonstrations defers its dissemination over the software community. This exploratory study applied two research methods to characterize the effects associated with a TD item during six years of a real software project lifecycle. First, a quantitative analysis was carried out to characterize the TD item in terms of concrete numbers. Then, Grounded Theory techniques were used to identify categories, properties and their relations, which could together provide a fuller definition of the TD metaphor. The resultant Grounded Theory, in the form of a concept map, confirmed some elements already identified by the technical literature, but also raised up new concepts that should be considered during analysis of TD items. Thus, this work contributes to the effort in building a formal theory about TD and provides directions to assist the work of developers/managers who intend to identify and monitor TD items in their projects, given the practical nature of this study. © 2016 Elsevier Inc.",10.1016/j.jss.2016.05.043,"Center of Informatics, Federal University of Paraiba, Joao Pessoa, PB, Brazil; Department of Information Systems, UMBC, Baltimore, MD, United States; Centro de Informática, Universidade Federal de Pernambuco, Recife, PE, Brazil",Rejected
143,Software Architecture Social Debt: Managing the Incommunicability Factor,"Alégroth, E. and Steiner, M. and Martini, A.","Proceedings - 2016 IEEE International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2016",2016,"Technical debt (TD) is a concept used to describe a sub-optimal solution of a software artifact that negatively affects its comprehensibility, extendability and maintainability. As such, TD adversely affects the costs or quality associated with the artifact, which is also called interest. TD has through research been identified in all types of software artifacts, from architectural design to automated tests (Testware). However, research into testware technical debt (TTD) is limited and primarily focused on testing on lower level of system abstraction, i.e. unit-and integration tests, leaving a need for more TTD research on GUI-based testing. In this study we explore this gap in knowledge through an industrial case study at a Swedish avionics software development company. Four repositories are studied for the presence of TTD using expert interviews, semi-automated document analysis and automatic metric analysis. Results of the study provide initial support that the concept of TTD is applicable to GUI-based testware and show the presence of both TD items unique to GUI-based testware and items common to software. The implications of these results are that engineering best practices must be established for GUI-based testware to minimize TD interest. © 2016 IEEE.",10.1109/ICSTW.2016.47,"Chalmers University of Technology, Department of Computer Science and Engineering, Göteborg, SE-412 96, Sweden",Accepted
144,A multi-agent elasticity management based on multi-tenant debt exchanges,"Fauzi, R. and Wahyudi, I.",Journal of Finance and Data Science,2016,"This study aims to determine characteristics of stocks and firms that are deliberately affected by stock market crash occurring in Indonesia. The study uses data for three major stock market crashes that occurred in 1997, 2000, and 2008. The analysis is accomplished by using multivariate regression method. The results of the study find that stocks with higher betas, larger capitalization, more return volatility, higher debt ratios, lower levels of liquid assets, and lower asset profitability tend to lose more value on crash day. This study also finds that there are short-term and long-term momentum effects on stock returns during most of stock market crashes. © 2016 China Science Publishing & Media Ltd.",10.1016/j.jfds.2016.07.001,"Department of Management, Faculty of Economics and Business, Universitas Indonesia, Indonesia",Rejected
145,Anonymous Bitcoin v enforcement law,"Codabux, Z. and Williams, B.J.",Proceedings - International Conference on Software Engineering,2016,"Recently, Technical Debt (TD) has gained popularity in the Software Engineering community to describe design decisions that allow software development teams to achieve short term benefits such as expedited release of code. Technical debt accrued should be managed to avoid the disastrous consequences of these temporary workarounds. Management of technical debt involve documenting the debt item in the backlog including some type of quantification in terms of person-hours or story points for example. Subsequently, the debt items are prioritized and addressed. Developers or project managers face problems to decide which debt is higher priority or more ""problematic"" and which one needs to be addressed first. This decision-making process is not standardized and is currently context dependent in most organizations. This paper bridge this gap by proposing a framework which makes use of a plethora of techniques ranging from data mining to prediction and decision models that project managers can use in their decision-making process to determine which technical debt is more critical and should be addressed first. © 2016 Authors.",10.1145/2889160.2892643,"Department of Computer Science and Engineering, Mississippi State University, Starkville, MS, United States",Accepted
146,Personal legacy information management system for muslim in Malaysia: A preliminary design,"Singh, V. and Pollock, L.L. and Snipes, W. and Kraft, N.A.",IEEE International Conference on Program Comprehension,2016,"This paper describes a case study of using developer activity logs as indicators of a program comprehension effort by analyzing temporal sequences of developer actions (e.g., navigation and edit actions). We analyze developer activity data spanning 109,065 events and 69 hours of work on a medium-sized industrial application. We examine potential correlations between different measures of developer activity, code change metrics and code smells to gain insight into questions that could direct future technical debt interest estimation. To gain more insights into the data, we follow our analysis with commit message analysis and a developer interview. Our results indicate that developer activity as an estimate of program comprehension effort is correlated with both change proneness and static metrics for code smells. © 2016 IEEE.",10.1109/ICPC.2016.7503710,"University of Delaware, Newark, DE, United States; ABB Corporate Research, Raleigh, NC, United States",Accepted
147,Technical Debt and Waste in Non-functional Requirements Documentation: An Exploratory Study,"Martini, A. and Bosch, J.",Proceedings - International Conference on Software Engineering,2016,"Architectural Technical Debt is regarded as sub-optimal architectural solutions that need to be refactored in order to avoid the payment of a costly interest in the future. However, decisions on if and when to refactor architecture are extremely important and difficult to take, since changing software at the architectural level is quite expensive. Therefore it is important, for software organizations, to have methods and tools that aid architects and managers to understand if Architecture Technical Debt will generate a costly and growing interest to be paid or not. Current knowledge, especially empirically developed and evaluated, is quite scarce. In this paper we developed and evaluated a method, AnaConDebt, by analyzing, together with several practitioners, 12 existing cases of Architecture Debt in 6 companies. The method has been refined several times in order to be useful and effective in practice. We also report the evaluation of the method with a final case, for which we present anonymized results and subsequent refactoring decisions. The method consists of several components that need to be analyzed, combining the theoretical Technical Debt framework and the practical experience of the practitioners, in order to identify the key factors involved in the growth of interest. The output of the method shows summarized indicators that visualizes the factors in a useful way for the stakeholders. This analysis aids the practitioners in deciding on if and when to refactor Architectural Technical Debt items. The method has been evaluated and has been proven useful to support the architects into systematically analyze and decide upon a case. © 2016 ACM.",10.1145/2889160.2889224,"Chalmers University of Technology, Software Engineering Division, Gothenburg, Sweden",Accepted
148,"20th International Conference on Product-Focused Software Process Improvement, PROFES 2019","Bavota, G. and Russo, B.","Proceedings - 13th Working Conference on Mining Software Repositories, MSR 2016",2016,"Technical debt is a metaphor introduced by Cunningham to indicate ""not quite right code which we postpone making it right"". Examples of technical debt are code smells and bug hazards. Several techniques have been proposed to detect different types of technical debt. Among those, Potdar and Shihab defined heuristics to detect instances of self-admitted technical debt in code comments, and used them to perform an empirical study on five software systems to investigate the phenomenon. Still, very little is known about the diffusion and evolution of technical debt in software projects. This paper presents a differentiated replication of the work by Potdar and Shihab. We run a study across 159 software projects to investigate the diffusion and evolution of self-admitted technical debt and its relationship with software quality. The study required the mining of over 600K commits and 2 Billion comments as well as a qualitative analysis performed via open coding. Our main findings show that self-admitted technical debt (i) is diffused, with an average of 51 instances per system, (ii) is mostly represented by code (30%), defect, and requirement debt (20% each), (iii) increases over time due to the introduction of new instances that are not fixed by developers, and (iv) even when fixed, it survives long time (over 1,000 commits on average) in the system. © 2016 ACM.",10.1145/2901739.2901742,"Free University of Bozen-Bolzano, Bolzano, Italy",Accepted
149,Serious games for software refactoring,"Bellomo, S. and Nord, R.L. and Ozkaya, I. and Popeck, M.","Proceedings - 13th Working Conference on Mining Software Repositories, MSR 2016",2016,"Concretely communicating technical debt and its consequences is of common interest to both researchers and software engineers. In the absence of validated tools and techniques to achieve this goal with repeatable results, developers resort to ad hoc practices. Most commonly they report using issue trackers or their existing backlog management practices to capture and track technical debt. In a manual examination of 1,264 issues from four issue trackers from open source industry and government projects, we identified 109 examples of technical debt. Our study reveals that technical debt and its related concepts have entered the vernacular of developers as they discuss development tasks through issue trackers. Even when issues are not explicitly tagged as technical debt, it is possible to identify technical debt items in these issue trackers using a categorization method we developed. We use our results and data to motivate an improved definition and an approach to explicitly report technical debt in issue trackers. © 2016 ACM.",10.1145/2901739.2901754,"Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States",Rejected
150,Weight of the default component of CDS spreads: Avoiding procyclicality in credit loss provisioning framework,"Akbarinasaji, S. and Bener, A.B. and Erdem, A.","Proceedings - 5th International Workshop on Realizing Artificial Intelligence Synergies in Software Engineering, RAISE 2016",2016,"Identifying and fixing of defects is part of software maintenance activities. However, due to tight budget and schedule, software development teams may not resolve all the existing bugs in the issue tracking systems. The trade-off between the short-term benefit of postponing bug fixing activities and long-term consequence of delaying those activities is interpreted as defect debt. The accumulation of defect debt in the issue tracking system might cause system bankruptcy. Therefore, there is a necessity for software project managers to measure and monitor defect debts. In this study, we categorized the bugs into regular bugs and debt prone bugs and employed the historical data from regular bugs to train a prediction model for estimating the principal for debt prone bugs. The principal for the regular bug is equivalent to a standard amount of time to fix them. There are studies in the literature that predict bug fixing time as a classification. We proposed KNN-regression to predict the standard time for bug fixing time (principal). We performed an empirical study on both commercial and open source projects to investigate the feasibility of our model. The results showed that KNN-regression outperformed the simple linear regression with the predictive power (R2) ranges between 74% to 85 %. © 2016 ACM.",10.1145/2896995.2896999,"Data Science Lab., Ryerson University, Toronto, ON, Canada",Accepted
151,The role of market competition in moderating the debt-performance nexus under overinvestment: Evidence in vietnam,"Xiao, L. and Cai, Y. and Kazman, R. and Mo, R. and Feng, Q.",Proceedings - International Conference on Software Engineering,2016,"Our prior work showed that the majority of error-prone source files in a software system are architecturally connected. Flawed architectural relations propagate defects among these files and accumulate high maintenance costs over time, just like debts accumulate interest. We model groups of architecturally connected files that accumulate high maintenance costs as architectural debts. To quantify such debts, we formally define architectural debt, and show how to automatically identify debts, quantify their maintenance costs, and model these costs over time. We describe a novel history coupling probability matrix for this purpose, and identify architecture debts using 4 patterns of architectural aws shown to correlate with reduced software quality. We evaluate our approach on 7 large-scale open source projects, and show that a significant portion of total project maintenance effort is consumed by paying interest on architectural debts. The top 5 architectural debts, covering a small portion (8% to 25%) of each project's error-prone files, capture a significant portion (20% to 61%) of each project's maintenance effort. Finally, we show that our approach reveals how architectural issues evolve into debts over time. © 2016 ACM.",10.1145/2884781.2884822,"Drexel University, Philadelphia, PA, United States; University of Hawaii, SEI/CMU, Honolulu, HI, United States",Accepted
152,Challenges in assessing technical debt based on dynamic runtime data,"Mendes, T.S. and De Farias, M.A.F. and Mendonça, M. and Soares, H.F. and Kalinowski, M. and Spínola, R.O.",Proceedings of the ACM Symposium on Applied Computing,2016,"Documentation debt is a type of technical debt that describes problems in documentation such as missing, inadequate or incomplete artifacts. Unlike traditional methods, agile methodologies usually employ short iterative cycles and rely on tacit knowledge within a team. In particular, Agile Requirements (AR) (e.g., user stories) tend to reduce the focus on requirements specification activities. This scenario contributes to the occurrence of documentation debt. The goal of this paper is to investigate the impact that this type of debt brings to projects developed by using AR. We address this goal by performing a retrospective study in a real software project that used AR in its development. Our analysis was concentrated on data from 132 maintenance and evolution tasks. Of this total, 65 were related to the presence of documentation debt and were performed within a timeframe of 18 months. The findings indicated an extra maintenance effort of about 47% of the total effort estimated for developing the project and an extra cost of about 48% of the initial cost of the development phase. © 2016 ACM.",10.1145/2851613.2851761,"Federal Institute of Bahia, Federal University of Bahia, Brazil; Federal Institute of Sergipe, Federal University of Bahia, Brazil; Fraunhofer Proj. Center, UFBA, Brazil; Salvador University, El Salvador; Fluminense Federal University, Brazil",Accepted
153,Exploring the relationship between software modularity and technical debt,"Vidal, S. and Vazquez, H. and Diaz-Pace, J.A. and Marcos, C. and Garcia, A. and Oizumi, W.","Proceedings - International Conference of the Chilean Computer Science Society, SCCC",2016,"Code smells are a popular mechanism to identify structural design problems in software systems. Since it is generally not feasible to f x all the smells arising in the code, some of them are often postponed by developer s to be resolved in the future. One reason for this decision is that the improvement of the code structure, to achieve modifability goals, requires extra effort from developer s. Therefore, they might not always spend this additional effort, particularly when they are focused on delivering customer-visible features. This postponement of code smells are seen as a source of technical debt. Furthermore, not all the code smells may be urgent to f x in the context of the system's modifability and business goals. While there are a number of tools to detect smells, they do not allow developer s to discover the most urgent smells according to their goals. In this article, we present a fexible tool to prioritize technical debt in the form of code smells. The tool is fexible to allow developer s to add new smell detection strategies and to prioritize smells, and groups of smells, based on the confguration of their manifold criteria. To illustrate this fexibility, we present an application example of our tool. The results suggest that our tool can be easily extended to be aligned with the developer's goals. © 2015 IEEE.",10.1109/SCCC.2015.7416572,"ISISTAN Research Institute, UNICEN, Argentina; CONICET, Argentina; CIC, Buenos Aires, Argentina; PUC-Rio, Brazil",Accepted
154,A logic for the stepwise development of reactive systems,"Gupta, R.K. and Manikreddy, P. and Naik, S. and Arya, K.",ACM International Conference Proceeding Series,2016,"Tackling the issues of technical debt in a large system in parallel with continuing to enable it to evolve is a challenging problem. In this paper, we are describing a case study of managing technical debt on a legacy project referred here as Global Configurator Project (GCP) using pragmatic approach. The paper presents holistic lifecycle approach with four stages and various practices in each stage for managing technical debt. Given life cycle approach and practices will be useful for any software project. In particular, these practices will be significant to any legacy project towards repaying debt. These methods can also be applied to continuously improve code quality and product quality. This paper also focus on technical debt user stories to gain business buy-in and share few 'best in market' tools that we used in repaying technical debt. It also focuses on sensitizing developers to the concept of debt and improving their skills. This paper describes the process used by a separate team formed to reduce technical debt in a large legacy system. The paper targets to the Project Managers, Test Managers architects and Scrum Masters in agile software development. © 2016 ACM.",10.1145/2856636.2856655,"Corporate Technologies and Development and Digital Platforms Siemens Technology, Services Private Limited, Bangalore, India",Accepted
155,"A tertiary study on technical debt: Types, management strategies, research trends, and base information for practitioners","Nord, R.L. and Ozkaya, I. and Schwartz, E.J. and Shull, F. and Kazman, R.","9th USENIX Workshop on Cyber Security Experimentation and Test, CSET 2016",2016,"Software vulnerabilities originating from design decisions are hard to find early and time consuming to fix later. We investigated whether the problematic design decisions themselves might be relatively easier to find, based on the concept of technical debt, i.e., design or implementation constructs that are expedient in the short term but make future changes and fixes more costly. If so, can knowing which components contain technical debt help developers identify and manage certain classes of vulnerabilities? This paper provides our approach for using knowledge of technical debt to identify software vulnerabilities that are difficult to find using only static analysis of the code. We present initial findings from a study of the Chromium open source project that motivates the need to examine a combination of evidence: quantitative static analysis of anomalies in code, qualitative classification of design consequences in issue trackers, and software development indicators in the commit history. © 2016 USENIX Association. All rights reserved.",,"Carnegie Mellon University, Software Engineering Institute, Pittsburgh, PA, United States; Carnegie Mellon University, Software Engineering Institute, University of Hawaii, Honolulu, HI, United States",Accepted
156,Technical Debt tracking: Current state of practice: A survey and multiple case study in 15 large organizations,"Li, Z. and Liang, P. and Avgeriou, P.",Software Quality Assurance: In Large Scale and Complex Software-intensive Systems,2016,"Technical debt (TD) has attracted an increasing interest from researchers and practitioners in the software engineering domain. Currently, most approaches to managing TD focus on dealing with TD at source code level, while few methods deal with TD at architecture level. If architectural technical debt (ATD) is not effectively managed in the architecting process, the knowledge about ATD is not made available to involved stakeholders and the impact of ATD is not considered during architecture decision-making. Thus, the system's maintainability and evolvability can be intentionally or unintentionally compromised. As a result, architectures are costly to maintain and new features are difficult to introduce. To facilitate the management of ATD, it needs to be documented so that it becomes explicit to stakeholders. To this end, we propose a set of architecture viewpoints related to ATD (ATD viewpoints in short). Each viewpoint frames a number of concerns related to ATD. These ATD viewpoints together help to get a comprehensive understanding of ATD in a software system, thereby providing support for architecture decision-making. To evaluate the effectiveness of the ATD viewpoints in documenting ATD, we conducted a case study in a large telecommunications company. The results of this case study show that the documented ATD views can effectively facilitate the documentation of ATD. Specifically, the ATD viewpoints are relatively easy to understand, it takes an acceptable amount of effort to document ATD using the ATD viewpoints; and the documented ATD views are useful for stakeholders to understand the ATD in the software project. © 2016 Elsevier Inc. All rights reserved.",10.1016/B978-0-12-802301-3.00005-3,"Department of Mathematics and Computing Science, University of Groningen, Groningen, Netherlands; State Key Lab of Software Engineering, School of Computer, Wuhan University, Wuhan, China; Department of Computer Science, VU University Amsterdam, Amsterdam, Netherlands; International School of Software, Wuhan University, Wuhan, China",Accepted
157,Towards a (semi)-automatic reference process to support the reverse engineering and reconstruction of software architectures,"Mensah, S. and Keung, J. and Bosu, M.F. and Bennin, K.E.",CEUR Workshop Proceedings,2016,"Programmers sometimes leave incomplete, temporary workarounds and buggy codes that require rework. This phenomenon in software development is referred to as Self-admitted Technical Debt (SATD). The challenge therefore is for software engineering researchers and practitioners to resolve the SATD problem to improve the software quality. We performed an exploratory study using a text mining approach to extract SATD from developers' source code comments and implement an effort metric to compute the rework effort that might be needed to resolve the SATD problem. The result of this study confirms the result of a prior study that found design debt to be the most predominant class of SATD. Results from this study also indicate that a significant amount of rework effort of between 13 and 32 commented LOC on average per SATD prone source file is required to resolve the SATD challenge across all the four projects considered. The text mining approach incorporated into the rework effort metric will speed up the extraction and analysis of SATD that are generated during software projects. It will also aid in managerial decisions of whether to handle SATD as part of on-going project development or defer it to the maintenance phase. © 2016, CEUR-WS. All rights reserved.",,"Department of Computer Science, City University of Hong Kong, Hong Kong, Hong Kong; Centre for Business, Information Technology and Enterprise, Wintec, Hamilton, New Zealand",Accepted
158,"Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018","Choudhary, A. and Singh, P.",CEUR Workshop Proceedings,2016,"Improving a software system's internal structure through regular refactoring is considered vital for its long and healthy life. However, despite its amenities, refactoring is not readily adopted by software development teams in industry mainly due to strict project deadlines and limited resources. Hence, they look for optimal refactoring recommendations that would incur minimal effort overhead while outputting decent benefits in terms of enhanced software quality. To this end, we propose an approach for identifying and prioritizing object-oriented software classes in need of refactoring. Our approach first identifies the most refactoring-prone as well as architecturally relevant classes, and then generates class ranks based on the code smell information. In addition to locating classes with the most significant incremental refactoring opportunities, this work contributes through suggesting developers on estimating maximum code smell correction (paying off maximum technical debt) with minimum refactoring effort. We evaluated the proposed approach on a sample of 1621 classes and 2358 code smell instances, distributed over 28 versions of four open source java systems. © 2016, CEUR-WS. All rights reserved.",,"National Institute of Technology, Jalandhar, India",Accepted
159,Visual analysis of risks in peer-to-peer lending market,"Velkova, J.",First Monday,2016,"The economies of the Internet are largely driven by sharing. Much of it is often veiled in a celebratory discourse that emphasizes how sharing artifacts online through gift exchanges removes hierarchies and creates broader access to public knowledge, such as in projects of free culture and open source software development. The article critically interrogates these assumptions and the gift economy of open cultural production more generally. Using a practice called open source animation film making, developed by Blender, an organisation at the core of the largest open source 3D computer graphics community, this paper shows that the discourse surrounding free culture online has largely misunderstood the complexity and ambiguities of the economy below the cultural politics of openness. With the help of classical theories of gift and value I discuss issues of debt, obligation, status, discipline, and social hierarchies created by exchanging online a variety of digital artifacts of different value, such as software, culture, and labor. This article shows that the wealth of open cultural production relies on combining multiple dimensions of gifting with fiscal and hidden forms of capital, producing a culture of secrecy in parallel to that of openness.",10.5210/fm.v21i10.6944,"Södertörn University, Stockholm, Sweden",Rejected
160,EXA2PRO programming environment: Architecture and applications,"De Freitas Farias, M.A. and Santos, J.A. and Da Silva, A.B. and Kalinowski, M. and Mendonça, M. and Spínola, R.O.",ICEIS 2016 - Proceedings of the 18th International Conference on Enterprise Information Systems,2016,"In order to effectively manage technical debt (TD), a set of indicators has been used by automated approaches to identify TD items. However, some debt may not be directly identified using only metrics collected from the source code. CVM-TD is a model to support the identification of technical debt by considering the developer point of view when identifying TD through code comment analysis. In this paper, we analyze the use of CVM-TD with the purpose of characterizing factors that affect the accuracy of the identification of TD. We performed a controlled experiment investigating the accuracy of CVM-TD and the influence of English skills and developer experience factors. The results indicated that CVM-TD provided promising results considering the accuracy values. English reading skills have an impact on the TD detection process. We could not conclude that the experience level affects this process. Finally, we also observed that many comments suggested by CVM-TD were considered good indicators of TD. The results motivate us continuing to explore code comments in the context of TD identification process in order to improve CVM-TD. Copyright © 2016 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.",10.5220/0005914503690378,"Federal Institute of Sergipe, Lagarto, Sergipe, Brazil; Federal University of Bahia, Salvador, Bahia, Brazil; State University of Feira de Santana, Feira de Santana, Bahia, Brazil; Federal University of Sergipe, Aracaju, Sergipe, Brazil; Fluminense Federal University, Rio de Janeiro, Brazil; Fraunhofer Proj. Center, UFBA, Salvador, Bahia, Brazil; Salvador University, Salvador, Bahia, Brazil",Accepted
161,Technical debt as an external software attribute,"Avgeriou, P. and Kruchten, P. and Nord, R.L. and Ozkaya, I. and Seaman, C.",IEEE Software,2016,"Technical debt's effect on software development is roughly analogous to friction in mechanical devices. Technical debt includes maintenance, innovation, obsolescence, data integrity, etc. The vision of a successful technical-debt management initiative implies using technical debt as a strategic software development approach. As an initial step toward the marriage of software engineering and economics, development teams should make economic and business tradeoffs that explicitly influence technical decisions. The initial focus on the source code level will give way to managing technical debt at the level of architecture decisions and associated tradeoffs and risks. Using software development data for technical-debt analysis will become mainstream, with improved tools targeting developer productivity and efficiency. Validated models will provide an empirical basis for decision making. Instrumenting small changes in development activities can easily enable data collection without overhead for development teams. Educators should include discussions of technical debt across the curriculum.",10.1109/MS.2016.13,"University of Groningen, Netherlands; University of British Columbia, Canada; Software Engineering Institute, United States; University of Maryland, Baltimore County, United States",Rejected
162,Analyzing a decade of Linux system calls,"Zhang, Y. and Xiao, Z. and Guo, D. and Mao, M. and Tan, H.",Communications in Computer and Information Science,2016,"Recently, the total public debt outstanding (TPDO) of the United States has increased rapidly, and to more than $17 trillion on October 18, 2013. It is important and necessary to conduct the TPDO projection for better policies making and more effective measurements taken. In this paper, we present the ten-year projection for the public debt of the United States (termed also the US public debt, USPD) via a 3-layer feed-forward neuronet. Specifically, using the calendar year data on the USPD from the Department of the Treasury, the neuronet is trained, and then is applied to projection. Via a series of numerical tests, we find that there are several possibilities of the change of the USPD in the future, which are classified into two categories in terms of projection trend: the continuous-increase trend and the increase-peak-decline trend. In the most possible situation, the neuronet indicates that the TPDO of the United States is projected to increase, and it will double in 2019 and double again in 2024. © Springer Science+Business Media Singapore 2016.",10.1007/978-981-10-0356-1_75,"School of Information Science and Technology, Sun Yat-sen University, Guangzhou, 510006, China; SYSU-CMU Shunde International Joint Research Institute, Shunde, 528300, China; Key Laboratory of Autonomous Systems and Networked Control, Ministry of Education, Guangzhou, 510640, China",Rejected
163,Toward predicting architectural significance of implementation issues,"Mohiuddin, O. and Mohiuddin, A. and Obaidullah, M. and Ahmed, H. and Asumadu-Sarkodie, S.",Cogent Engineering,2016,"Pakistan has been experiencing energy crisis owing to its sole dependence on fossil fuels. Reduction in local fossil fuel reserves has led to an increase in their prices, thereby increasing the cost of electricity. Since the tariff remains the same, Pakistan is over-burdened with circular debts and observes a daily power shortfall of about 12-14 h. Being an Agra-economic country, many major and minor crops are produced and exported in large quantities. This results in a bulk of the agricultural waste which are not utilized. The waste can be utilized to meet the countrys energy demand while mitigating climate change and its impact. The study examines the electricity production potential and social benefits of rice husk in Pakistan. It is estimated in this study that if 70% of rice husk residues are utilized, there will be annual electricity production of 1,328 GWh and the cost of per unit electricity by rice husk is found at 47.36 cents/kWh as compared to 55.22 cents/kWh of electricity generated by coal. Importantly, the study will increase the awareness of the benefits of utilizing agricultural waste for useful products such as silica, with several social and environmental benefits such as a reduction of 36,042 tCO2e/yr of methane, reducing carbon dioxide emissions, improving the air quality, and providing 4.5 k new jobs. The paper concludes with the policy recommendations based on this study. © 2016 The Author(s).",10.1080/23311916.2016.1177156,"Sustainable Environment and Energy Systems, Middle East Technical University, Northern Cyprus Campus, Mersin, 10, Turkey",Rejected
164,A position study to investigate technical debt associated with security weaknesses,"Coletti, P. and Murgia, M.",Algorithmic Finance,2016,"We build the network of the top 190 Italian quoted companies during the two financial crises of 2008-2009 (US credit crisis) and 2010-2011 (European sovereign debt crisis) and compare its structure to the pre-crises years, using both minimum spanning trees and the full network with thresholds. We also analyze the centrality and compactness of industry sectors. We find a general contraction of the network during the crises, both numerically due to stronger correlation as well as topologically, with the appearance of central dominant companies which attract the other ones into a very large cluster, dominated by financial institutions (commercial banks and insurance companies). In particular, we note the role of insurance behemoth Assicurazioni Generali, which rises from a pre-crises subordinate role to become the central company in the minimum spanning tree after the crises period. The few sectors which maintain compactness before and during the crises are utilities, publishing, and construction. © 2016 - IOS Press and the authors.",10.3233/AF-160177,"Faculty of Economics and Management, Free University of Bozen Bolzano, piazza dell'Università 1, Bolzano, 39100, Italy",Rejected
165,Governing technology debt: Beyond technical debt,"Khan, P.A. and Venkatesh, B.","Lecture Notes of the Institute for Computer Sciences, Social-Informatics and Telecommunications Engineering, LNICST",2016,"Smart Grid Technologies are set to transform electric power systems and energy storage is a key tools that will enable this transformation. Energy storage provides innumerable services such as energy arbitrage, frequency regulation, transmission and distribution system deferral, etc. In electric power systems, asset procurement is based upon investment models that ultimately minimize net amortized annual asset costs to supply a unit of electric energy. Accordingly, energy storage procurement is also scrutinized for cost-effectiveness. This paper provides cost effectiveness of different electrical energy storage technologies when used for single and multiple energy storage services. Different popular economic parameters like Net Present Value, Internal Rate of Return, Cost-Benefit Ratio, etc. are estimated to find out cost effectiveness of the technologies. © ICST Institute for Computer Sciences, Social Informatics and Telecommunications Engineering 2016.",10.1007/978-3-319-33681-7_23,"Centre for Urban Energy, Ryerson University, Toronto, ON, Canada",Rejected
166,Proceedings - International Conference on Software Engineering,"Birch, J. and Pantelous, A.A. and Soramäki, K.",Computational Economics,2016,"In this paper, we consider three methods for filtering pertinent information from a series of complex networks modelling the correlations between stock price returns of the DAX 30 stocks for the time period 20012012 using the Thomson Reuters Datastream database and also the FNA platform to create the visualizations of the correlation-based networks. These methods reduce the complete 30 × 30 correlation coefficient matrix to a simpler network structure consisting only of the most relevant edges. The chosen network structures include the minimum spanning tree, asset graph and the planar maximally filtered graph. The resulting networks and the extracted information are analysed and compared, looking at the clusters, cliques and connectivity. Finally, we consider some specific time periods (a) a period of crisis (OctoberDecember 2008) and (b) a period of recovery (MayAugust 2010) where we discuss the possible underlying economic reasoning for some aspects of the network structures produced. Overall, we find that network based representations of correlations within a broad market index are useful in providing insights about the growth dynamics of an economy. © 2015, Springer Science+Business Media New York.",10.1007/s10614-015-9481-z,"Institute for Financial and Actuarial Mathematics, Department of Mathematical Sciences, University of Liverpool, Liverpool, United Kingdom; Institute for Risk and Uncertainty, University of Liverpool, Liverpool, United Kingdom; Financial Network Analytics, London, United Kingdom",Rejected
167,ICPE 2018 - Proceedings of the 2018 ACM/SPEC International Conference on Performance Engineering,,CEUR Workshop Proceedings,2016,"The proceedings contain 15 papers. The topics discussed include: local variables with compound names and comments as signs of fault-prone java methods; sustainability profiling of long-living software systems; towards improved adoption: effectiveness of research tools in the real world; predicting quality of service (QoS) parameters using extreme learning machines with various kernel methods; improving recall in code search by indexing similar codes under proper terms; code coverage analysis of combinatorial testing; trying to increase the mature use of agile practices by group development psychology training - an experiment; when, why and for whom do practitioners detect technical debt? an experience report; using analytics to quantify interest of self-admitted technical debt; rework effort estimation of self-admitted technical debt; minimizing refactoring effort through prioritization of classes based on historical, architectural and code smell information; co-existence of the 'technical debt' and 'software legacy' concepts; and perspectives on managing technical debt: a transition point and roadmap from Dagstuhl.",,,Duplicated
168,To adapt or not to adapt? Technical debt and learning driven self-adaptation for managing runtime performance,,CEUR Workshop Proceedings,2016,The proceedings contain 6 papers. The topics discussed include: beyond context-oriented software; building ecosystem-aware tools using the ecosystem monitoring framework; on the non-generalizability in bug prediction; towards efficient object-centric debugging with declarative breakpoints; comparing the accumulation of technical debt between two applications developed with spring web MVC and apache struts 2; and CSS corpus for reproducible analysis.,,,Duplicated
169,"Austerity discourses in der spiegel journal, 20092014",,Proceedings - International Conference on Software Engineering,2016,"The proceedings contain 156 papers. The topics discussed include: investing in the impending digital quake 80% jobs/companies/research disrupted?; an empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt; practical programming, validation and verification with finite-state machines: a library and its industrial application; battles with false positives in static analysis of JavaScript web applications in the wild; detecting problems in the database access code of large scale systems - an industrial experience report; engineering the servo web browser engine using rust; the bones of the system: a case study of logging and telemetry at Microsoft; log clustering based problem identification for online service systems; assessing the usefulness of a requirements monitoring tool: a study involving industrial software engineers; lessons learned in aligning data and model evolution in collaborative information systems; VEnron: A versioned spreadsheet corpus and related evolution analysis; enhancing test case prioritization in an industrial setting with resource awareness and multi-objective search; integrating automatic backward error recovery in asynchronous rich clients; a study of the quality-impacting practices of modern code review at sony mobile; and correct: code reviewer recommendation in GitHub based on cross-project and technology experience.",,,Duplicated
170,Optimal dividend payment strategies with debt constraint in a hybrid regime-switching jumpdiffusion model,"Russo, D.",Communications in Computer and Information Science,2016,"Even though the use of Open Source Software (OSS) might seem paradoxical in Defense environments, this has been proven to be wrong. The use of OSS does not harm security; on the contrary, it enhances it. Even with some drawbacks, OSS is highly reliable and maintained by a huge software community, thus decreasing implementation costs and increasing reliability. Moreover, it allows military software engineers to move away from proprietary applications and single-vendor contracts. Furthermore, it decreases the cost of long-term development and lifecycle management, besides avoiding vendors lock in. Nevertheless, deploying OSS deserves an appropriate organization of its life cycle and maintenance, which has a relevant impact on the projects budget that cannot be overseen. In this paper, we will describe some of the major trends in OSS in Defense environments. The community for OSS has a pivotal role, since it is the core development unit. With Agile and the newest DevOps methodologies, government officials could leverage OSS capabilities, decreasing the Design (or Technical) Debt. Software for Defense purposes could perform better, increase the number of the releases, enhance coordination through the different IT Departments (and the community), and increase release automation, decreasing the probability of errors. © Springer International Publishing Switzerland 2016.",10.1007/978-3-319-27896-4_11,"Consorzio Interuniversitario Nazionale per lInformatica (CINI), Rome, Italy",Rejected
171,Scheduling transmissions with latency constraints in an IEEE 802.15.4e TSCH network,"Alves, N.S.R. and Mendes, T.S. and De Mendonça, M.G. and Spinola, R.O. and Shull, F. and Seaman, C.",Information and Software Technology,2016,"Context: The technical debt metaphor describes the effect of immature artifacts on software maintenance that bring a short-term benefit to the project in terms of increased productivity and lower cost, but that may have to be paid off with interest later. Much research has been performed to propose mechanisms to identify debt and decide the most appropriate moment to pay it off. It is important to investigate the current state of the art in order to provide both researchers and practitioners with information that enables further research activities as well as technical debt management in practice. Objective: This paper has the following goals: to characterize the types of technical debt, identify indicators that can be used to find technical debt, identify management strategies, understand the maturity level of each proposal, and identify what visualization techniques have been proposed to support technical debt identification and management activities. Method: A systematic mapping study was performed based on a set of three research questions. In total, 100 studies, dated from 2010 to 2014, were evaluated. Results: We proposed an initial taxonomy of technical debt types, created a list of indicators that have been proposed to identify technical debt, identified the existing management strategies, and analyzed the current state of art on technical debt, identifying topics where new research efforts can be invested. Conclusion: The results of this mapping study can help to identify points that still require further investigation in technical debt research. © 2015 Elsevier B.V. All rights reserved.",10.1016/j.infsof.2015.10.008,"Fraunhofer Project Center for Software and Systems Engineering, Federal University of Bahia (UFBA), Salvador, Bahia, Brazil; Graduate Program in Systems and Computer, Salvador University, Salvador, Bahia, Brazil; Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States; Information Technology Department, Federal Institute of Bahia (IFBA), Santo Amaro, Bahia, Brazil; Carnegie Mellon University, Software Engineering Institute, Arlington, VA, United S",Rejected
172,Managing tax dispute due to IFRS-16 on the retrofits implementation in Indonesia,"Mooij, A.J. and Joy, M.M. and Eggen, G. and Janson, P. and R?dulescu, A.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2016,"Software maintenance consumes an increasing proportion of industrial software engineering budgets. Over time the technical debt grows, until it becomes unavoidable to rejuvenate the legacy software to a new design, while preserving the valuable domain logic. In this paper, we explore the feasibility of a model-based rejuvenation approach for use in an industrial context. The approach is based on existing open-source parsers and a combination of models and model transformations, some of which are generic and others are tailored to the specific applications. We illustrate similar techniques on two industrial cases with different goals. Afterwards we extract some lessons learned, like the choice between extracting the domain logic or eliminating the implementation details. © Springer International Publishing Switzerland 2016.",10.1007/978-3-319-42064-6_11,"Embedded Systems Innovation by TNO, Eindhoven, Netherlands; FEI Company, Eindhoven, Netherlands; Philips Healthcare, Best, Netherlands",Rejected
173,Preprocessing and feature extraction methods for microfinance overdue data,,Lecture Notes in Business Information Processing,2016,The proceedings contain 10 papers. The special focus in this conference is on Business Modeling and Software Design. The topics include: Towards dynamic business process management; new approaches for automated process model discovery; a business process meta-model for knowledge identification based on a core ontology; semantic technologies for the integration of methods into an enterprise architecture; supporting the security certification and privacy level agreements in the context of clouds; two case studies on generating administrative process applications with adminDSL; a financial approach for managing interest in technical debt; classifying business model canvas usage from novice to master; make the most of it-enabled capabilities and the process of process management.,,,Rejected
174,Towards a cloud architectural decision framework using case-based reasoning and rule-based reasoning,"Yli-Huumo, J. and Maglyas, A. and Smolander, K. and Haller, J. and Törnroos, H.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2016,"The knowledge about technical debt and its management has increased in recent years. The interest of academia and industry has generated many viewpoints on technical debt. Technical debt management consists of technical and organizational aspects, which make it a challenge in software development. To increase technical debt visibility and manageability, new processes must be developed and thoroughly empirically tested for their applicability. In this paper, we use the action research methodology to design processes for identification, documentation, and prioritization of technical debt. Our partner in this research is a large Nordic IT company Tieto, currently in a need for new ways to improve their technical debt management. The results include a set of processes and templates that were successfully used to identify and document technical debt. The identified technical debt items were later prioritized based on evaluation by Tieto employees. Tieto was able to create a prioritized technical debt backlog, which is now used for reduction activities to create a healthy and sustainable product for the future. © Springer International Publishing AG 2016.",10.1007/978-3-319-49094-6_24,"Lappeenranta University of Technology, Lappeenranta, Finland; Aalto University, Espoo, Finland; Tieto Sweden AB, Stockholm, Sweden; Tieto Oyj, Helsinki, Finland",Accepted
175,Designing a technical debt visualization tool to improve stakeholder communication in the decision-making process: A case study,"Newman, J.",IFIP Advances in Information and Communication Technology,2016,"Software-intensive Science, and in particular the method of modelling large and complex systems by means of computer simulation, presents acute dilemmas of epistemic trust. Some authors have contended that simulations are essentially epistemically opaque vis and vis a human agent, others that complex simulation models suffer from an inescapable confirmation holism. We argue that the shortcomings lie in the failure of modellers to adopt sound Software Engineering practices, and that the elevation of computational models into superior epistemic authorities runs counter to principles that are common to both Science and Software Engineering. © IFIP International Federation for Information Processing 2016.",10.1007/978-3-319-47286-7_18,"Birkbeck College, University of London, London, United Kingdom",Rejected
176,Data analysis on the performance of technology sector in malaysia with entropy-topsis model,"Kuhlen, D. and Speck, A.","Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)",2016,"The agile software development method is common in many software development companies worldwide. The following paper approaches an universal problem of agile development projects in the whole software development branch of industry. Unfortunately, in many cases, the requirements are incomplete and the projects are under-specified. Imprecise requirements and specifications cause not only problems in the development, but they also result in inaccurate cost estimations. This leads to problems even in the development and in the requirements engineering. Moreover, the lack of clear specifications may lead to further customer requests at the development time. They might be realized at very high costs. This increases the time pressure for the developers. In order to realize the software in time, the developers lower the quality level of the code. A lack of quality causes technical debts which reduces the economic efficiency of the system considerably. A potential solution, proposed in the paper, is the use of code-generation systems. The use of a code generator could offer potentials to improve the processes of requirements engineering. The support of these generators enables the software developers to focus on the requirements engineering. As the generated code contributes directly to the sprint goal, this approach could be well accepted by the developers. The potentials of such a concept are investigated.",,"Datenlotsen Informationssysteme GmbH, Technische Beratung, Beim Strohhause 27, Hamburg, 20095, Germany; Christian Albrechts Universität zu Kiel, Abteilung, Hermann-Rodewald-Straße 3, Kiel, 24098, Germany",Accepted
177,The Human Resources Debt in Software Business: Towards a Research Roadmap,"Izurieta, C. and Ozkaya, I. and Seaman, C. and Kruchten, P. and Nord, R. and Snipes, W. and Avgeriou, P.",CEUR Workshop Proceedings,2016,"Thirty-three practitioners, researchers, students, and tool vendors gathered in Dagstuhl, Germany, for five days in April 2016 to discuss the state of managing technical debt in software engineering. Participants reflected on the significant advances that the Managing Technical Debt (MTD) community has made since its inception in 2010; reached a consensus on a definition, called the Dagstuhl 16K technical debt definition; and discussed avenues for future progress in the area. This paper provides a brief history, summarizes current research, and offers a roadmap and a vision that describe the areas of research where significant challenges remain. © 2016, CEUR-WS. All rights reserved.",,"Montana State University, Bozeman, MT, United States; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; University of Maryland Baltimore County, Maryland, MD, United States; University of British ColumbiaBC, Canada; ABB Corporate Research, Raleigh, NC, United States; University of Groningen, Groningen, Netherlands",Rejected
178,The agent rationality in the doom loop of sovereign debt: An agent-based model simulation of systemic risk emergence process,"Machova, R. and Lnenicka, M.",eJournal of eDemocracy and Open Government,2016,"Every e-government development has its supporting factors and various limitations that hinder the implementation of e-government initiatives and further improvement of e-services. This paper examines and evaluates the specific challenges, trends and the progress of e-government between the years 2008 and 2014 in the European Union Member States based on the global e-government development indices. It is focused on the effects and consequences of the European recession, which started as the global financial crisis in 2007 and was followed by the European debt crisis since the end of 2009. The purpose of this research is to understand the influence of selected indicators on the development of e-government in order to uncover similarities and identify areas that were affected by the crisis a need improvement. The findings can be used to introduce more efficient measurements and benchmarking frameworks of the e-government development. The methods used are descriptive, correlation and cluster analysis. © 2016, Department for E-Governance and Administration. All rights reserved.",10.29379/jedem.v8i1.412,"Institute of System Engineering and Informatics, Faculty of Economics and Administration, University of Pardubice, Czech Republic",Rejected
179,Managing architectural technical debt: A unified model and systematic literature review,"Mohanty, H. and Mohanty, J.R. and Balakrishnan, A.",Trends in Software Testing,2016,"This book is focused on the advancements in the field of software testing and the innovative practices that the industry is adopting. Considering the widely varied nature of software testing, the book addresses contemporary aspects that are important for both academia and industry. There are dedicated chapters on seamless high-efficiency frameworks, automation on regression testing, software by search, and system evolution management. There are a host of mathematical models that are promising for software quality improvement by model-based testing. There are three chapters addressing this concern. Students and researchers in particular will find these chapters useful for their mathematical strength and rigor. Other topics covered include uncertainty in testing, software security testing, testing as a service, test technical debt (or test debt), disruption caused by digital advancement (social media, cloud computing, mobile application and data analytics), and challenges and benefits of outsourcing. The book will be of interest to students, researchers as well as professionals in the software industry. © Springer Science+Business Media Singapore 2017.",10.1007/978-981-10-1415-4,"School of Computer and Information Sciences, University of Hyderabad, Hyderabad, Telengana, India; School of Computer Applications, KIIT University, Bhubaneswar, Odisha, India; Mettler Toledo Turing Softwares, Coimbatore, Tamil Nadu, India",Rejected
180,Information technology investments and firm risk across industries: Evidence from the bond market,"Górecki, J. and Hofert, M. and Hole?a, M.",Journal of Intelligent Information Systems,2016,"Copulas are distribution functions with standard uniform univariate marginals. Copulas are widely used for studying dependence among continuously distributed random variables, with applications in finance and quantitative risk management; see, e.g., the pricing of collateralized debt obligations (Hofert and Scherer, Quantitative Finance, 11(5), 775787, 2011). The ability to model complex dependence structures among variables has recently become increasingly popular in the realm of statistics, one example being data mining (e.g., cluster analysis, evolutionary algorithms or classification). The present work considers an estimator for both the structure and the parameters of hierarchical Archimedean copulas. Such copulas have recently become popular alternatives to the widely used Gaussian copulas. The proposed estimator is based on a pairwise inversion of Kendalls tau estimator recently considered in the literature but can be based on other estimators as well, such as likelihood-based. A simple algorithm implementing the proposed estimator is provided. Its performance is investigated in several experiments including a comparison to other available estimators. The results show that the proposed estimator can be a suitable alternative in the terms of goodness-of-fit and computational efficiency. Additionally, an application of the estimator to copula-based Bayesian classification is presented. A set of new Archimedean and hierarchical Archimedean copula-based Bayesian classifiers is compared with other commonly known classifiers in terms of accuracy on several well-known datasets. The results show that the hierarchical Archimedean copula-based Bayesian classifiers are, despite their limited applicability for high-dimensional data due to expensive time consumption, similar to highly-accurate classifiers like support vector machines or ensemble methods on low-dimensional data in terms of accuracy while keeping the produced models rather comprehensible. © 2014, Springer Science+Business Media New York.",10.1007/s10844-014-0350-3,"Department of Informatics, SBA in Karviná, Silesian University in Opava, Karviná, Czech Republic; Department of Statistics and Actuarial Science, University of Waterloo, 200 University Avenue West, Waterloo, ON, Canada; Institute of Computer Science, Academy of Sciences of the Czech Republic, Praha, Czech Republic",Rejected
181,Formative Evaluation of a Tool for Managing Software Quality,"Vogel-Heuser, B. and Rösch, S.","Proceedings - 2015 IEEE International Conference on Systems, Man, and Cybernetics, SMC 2015",2016,"Automated production systems (aPS), a specific class of mechatronic systems, are complex, long living, software intensive, evolving systems designed according to customer request. Often, the evolution of such systems has to cope with imponderables and sudden disturbances of the systematic development or maintenance process. In software engineering, the concept of technical debt and, in more detail, architectural technical debt has been introduced recently to describe phenomena, which increase software development costs over time. This paper tries to adapt and apply the classification of technical debt and architectural technical debt to automated production systems, identifying similar dimensions but adding specific challenges, causes and their effects. Once the causes and effects are identified, management and recovery strategies coping with technical debt and architectural technical debt shall be developed in the future, thereby enlarging the strategies from software engineering. The adapted classification and adaptations are based on the experience of several industrial projects in aPS. © 2015 IEEE.",10.1109/SMC.2015.35,"Institute of Automation and Information Systems, Technical University Munich, Garching near Munich, Germany",Rejected
182,The pricey bill of Technical Debt - When and by whom will it be paid?,"Chernov, D. and Sornette, D.",Advanced Sciences and Technologies for Security Applications,2016,"The analysis of the two largest financial disasters in the USA so far in the first decade of this centurythe collapse of Enron in 2001 and the subprime mortgage crisis of 20072008suggests that the huge scale of these disasters stemmed from a lack of timely information. We present extensive evidence that regulators, investors and associates were not informed of the conditions and risks associated with the activities of Enron management in the first case, or with the assessment and underwriting of collateralized debt obligations (CDOs) in the second; and with little understanding of the whole picture of risks, they could not intervene decisively to prevent or minimize disaster. Moreover, we identify similar obstacles to the transmission of reliable risk information in past cases such as the Barings Bank crash, the Deepwater Horizon oil spill, the nuclear accidents at Chernobyl and Fukushima-Daiichi as well as in the current development of the US shale energy industry. Based on the careful observation of events before the moment of collapse in three financial events (Barings, Enron and subprime crisis), one mixed financial-industrial case and three industrial catastrophes, we document and discuss how the inadequate transmission or outright concealment of risk information constitutes a powerful engine of disasters. © 2016, Springer International Publishing Switzerland.",10.1007/978-3-319-41849-0_8,"ETH Zürich, Zurich, Switzerland",Rejected
183,Using Natural Language Processing to Automatically Detect Self-Admitted Technical Debt,"Santhosh, S. and Binu, A.","Proceedings - 2015 5th International Conference on Advances in Computing and Communications, ICACC 2015",2016,"Cloud computing is an enchanting technology for the allocation of resources on-demand. The cloud Systems mostly hinges upon Virtualization techniques for the resource allocation purposes. All the Cloud Services that service providers put forward are chargeable and are charging the users depending on demand. So its important for them to improve the scalability factor to provide a superlative service to the users. As a solution, recently the providers began to use an auto scaling mechanism which can scale the resources according to the need of them. Auto Scaling mechanism on Virtual machines will impart a streamlined use of cloud resources. It is considered as an effective Resource management technique that utilize data center in structured manner although, the already existing scaling methods just take into account CPU utilization only. Hence it is needed to consider an Auto Scaling method that guarantees the execution of applications within the deadline. So here we concentrate on an auto scaling method that handles Bag-of-Tasks jobs in Private and Public cloud environment. The results of Simulation shows how effectively the resources are allocated considering the deadline as parameter. © 2015 IEEE.",10.1109/ICACC.2015.101,"Network Engineering, Rajagiri School of Engineering and Technology, Kakkand, Cochin, India; Department of Information Technology, Rajagiri School of Engineering and Technology, Kakkand, Cochin, India",Rejected
184,Credit scoring using ensemble classification based on variable weighting clustering,"Ganea, G. and Marinescu, R.","Proceedings - 17th International Symposium on Symbolic and Numeric Algorithms for Scientific Computing, SYNASC 2015",2016,"By modelling a software project as a complex system, its internal structure can be analyzed in order to asses its design quality. As a software system is being developed, the quality of its internal structure is evolving too, not always for the better. Flaws in the internal structure are usually indicators of code that is hard to understand, maintain and, in many cases, they are pointers of accumulated technical debt. While there are already methods and tools that enable design flaw detection, they only look at a snapshot of the code, they do not analyze how the design flaw evolved over time. We propose an approach which enhances design flaw detection with history information, in order to: (i) find patterns in the evolution of a design flaw, which could then be used to predict future activity, (ii) improve detection by eliminating false negatives, (iii) improve the recommendation system to provide better refactoring advices and a better ranking of design flaws, in order to address the most critical first. © 2015 IEEE.",10.1109/SYNASC.2015.70,"Politehnica University of Timisoara, Romania",Accepted
185,Towards a mapping of software technical debt onto testware,"Brenner, R.",Cutter IT Journal,2016,,,"Chaco Canyon Consulting, United States",Rejected
186,Determinants of household indebtedness in east Malaysia: An evaluation,"Thomas, L.C. and Matuszyk, A. and So, M.C. and Mues, C. and Moore, A.",European Journal of Operational Research,2016,"One approach to modelling Loss Given Default (LGD), the percentage of the defaulted amount of a loan that a lender will eventually lose is to model the collections process. This is particularly relevant for unsecured consumer loans where LGD depends both on a defaulter's ability and willingness to repay and the lender's collection strategy. When repaying such defaulted loans, defaulters tend to oscillate between repayment sequences where the borrower is repaying every period and non-repayment sequences where the borrower is not repaying in any period. This paper develops two models - one a Markov chain approach and the other a hazard rate approach to model such payment patterns of debtors. It also looks at simplifications of the models where one assumes that after a few repayment and non-repayment sequences the parameters of the model are fixed for the remaining payment and non-payment sequences. One advantage of these approaches is that they show the impact of different write-off strategies. The models are applied to a real case study and the LGD for that portfolio is calculated under different write-off strategies and compared with the actual LGD results. © 2015 Elsevier B.V.",10.1016/j.ejor.2015.09.013,"Southampton Business School, University of Southampton, Southampton, SO17 1BJ, United Kingdom; Warsaw School of Economics, Al. Niepodleglosci 162, Warsaw, 02554, Poland",Rejected
187,Technical debt and the software project characteristics. A repository-based exploratory analysis,"Kim, J. and Kang, P.",Decision Support Systems,2016,"Debt collection via call centers is an important operation in many business domains since it can significantly improve a firm's financial status by turning bad receivables into normal cash income that contributes to profits. Since the job performance of call center agents who carry out debt collection is primarily evaluated by the amount of debt collected, call center managers are faced with the challenge of allocating customer contact lists in a fair manner to eliminate a non-controllable external factor that could distort the objective evaluation of the agent's job performance. In this paper, we develop five machine learning-based late payment prediction models and ten customer scoring rules to predict the payment likelihood and the amount of the late payment for the customers who currently have an unpaid debt. The proposed scoring rules are verified under ten different contexts by varying the number of agents. Experimental results confirm that the prediction model-based scoring rules lead to fairer customer allocation results among the agents compared to the existing heuristic-based customer scoring rules. Among the prediction models, a hybrid approach can capture the late payers effectively, whereas tree-based models report more impartial customer allocation than the other methods. © 2016 Elsevier B.V. All rights reserved.",10.1016/j.dss.2016.03.002,"Department of Industrial and Information Systems, Graduate School of Public Policy and Information Technology, Seoul National University of Science and Technology, Seoul, South Korea; School of Industrial Management Engineering, Korea University, Seoul, South Korea",Rejected
188,Application of expert systems for agricultural crop disease diagnoses -A review,"Fontana, F.A. and Roveda, R. and Zanoni, M.",Proceedings of the ACM Symposium on Applied Computing,2016,"During software development, maintenance and evolution, we can assess the quality of code, design and architecture to capture hints of possible problems and face them as soon as possible. We can capture signals of architecture erosion in different ways by exploiting several tools with the aim to identify architectural violations, architectural smells or other relevant features. In this paper, we provide our experience report in using three known tools to capture information that can be useful to identify and evaluate the architectural debt of an application. We outline the main differences among these tools and the results they produce. © 2016 ACM.",10.1145/2851613.2851963,"ESSeRE, DISCo Department, University of Milano-Bicocca, Milano, Italy",Accepted
189,Technical debt principal assessment through structural metrics,,"Proceedings - 3rd International Workshop on Software Engineering Research and Industrial Practice, SER and IP 2016",2016,"The proceedings contain 10 papers. The topics discussed include: experiences in scaling field studies of software developer behavior; software engineering research lab to airplanes, Orion and beyond; strategies for building successful company-university research collaborations; toward effective management of large-scale software; security engineering risk analysis (SERA); understanding the impact of technical debt in coding and testing: an exploratory case study; fostering collaboration through API economy: the E015 digital ecosystem; TestMEReq: generating abstract tests for requirements validation; cost-efficient quality assurance of natural language processing tools through continuous monitoring with continuous integration; and how to catch 'em all: WatchDog, a family of IDE plug-ins to assess testing.",,,Rejected
190,Software industrialisation - How to industrialise knowledge work?,"Rahman, Md.T. and Querel, L.-P. and Rigby, P.C. and Adams, B.","Proceedings - 13th Working Conference on Mining Software Repositories, MSR 2016",2016,"Continuous delivery and rapid releases have led to innovative techniques for integrating new features and bug fixes into a new release faster. To reduce the probability of integration conflicts, major software companies, including Google, Facebook and Netflix, use feature toggles to incrementally integrate and test new features instead of integrating the feature only when it's ready. Even after release, feature toggles allow operations managers to quickly disable a new feature that is behaving erratically or to enable certain features only for certain groups of customers. Since literature on feature toggles is surprisingly slim, this paper tries to understand the prevalence and impact of feature toggles. First, we conducted a quantitative analysis of feature toggle usage across 39 releases of Google Chrome (spanning five years of release history). Then, we studied the technical debt involved with feature toggles by mining a spreadsheet used by Google developers for feature toggle maintenance. Finally, we performed thematic analysis of videos and blog posts of release engineers at major software companies in order to further understand the strengths and drawbacks of feature toggles in practice. We also validated our findings with four Google developers. We find that toggles can reconcile rapid releases with long-term feature development and allow flexible control over which features to deploy. However they also introduce technical debt and additional maintenance for developers. © 2016 ACM.",10.1145/2901739.2901745,"Concordia University, United States; Polytechnique Montreal, Montreal, QC, Canada",Rejected
191,Revealing social debt with the CAFFEA framework: An antidote to architectural debt,"Abad, Z.S.H. and Karimpour, R. and Ho, J. and Didar-Al-Alam, S.M. and Ruhe, G. and Tse, E. and Barabash, K. and Hargreaves, I.","Proceedings - 3rd International Workshop on Software Engineering Research and Industrial Practice, SER and IP 2016",2016,"Technical Debt (TD) refers to the long-term consequences of shortcuts taken during different phases of software development life cycle. Lack of attention to monitoring and managing testing and development debt can contribute to unexpectedly large cost overruns and severe quality issues in software development projects. This paper describes a case study conducted with an industry partner to explore the impact of TD in coding and testing. By conducting (i) a semi-structured interview, and (ii) a quantitative survey, we found that (1) the status of TD is largely project-independent, (2) we could not reject that there is no significant difference between the percentage of existing TD and the required time for reducing this TD in testing and development teams, (3) there is a statistically significant difference between the perceived influence of reducing TD on productivity increase in testing and development teams, (4) team member's experience has impact on the existing percentage of TD and influences productivity increase that is caused by reducing TD, (5) allocating more resources such as time, budget, and infrastructure is considered a potential solution for reducing TD. © 2016 ACM.",10.1145/2897022.2897023,"Department of Computer Science, University of Calgary, Canada; SMART, Calgary, AB, Canada",Accepted
192,The effects of spectrum allocation mechanisms on market outcomes: Auctions vs beauty contests,"Sharma, T. and Fragkoulis, M. and Spinellis, D.","Proceedings - 13th Working Conference on Mining Software Repositories, MSR 2016",2016,"Infrastructure as Code (IaC) is the practice of specifying computing system configurations through code, and managing them through traditional software engineering methods. The wide adoption of configuration management and increasing size and complexity of the associated code, prompt for assessing, maintaining, and improving the configuration code's quality. In this context, traditional software engineering knowledge and best practices associated with code quality management can be leveraged to assess and manage configuration code quality. We propose a catalog of 13 implementation and 11 design configuration smells, where each smell violates recommended best practices for configuration code. We analyzed 4,621 Puppet repositories containing 8.9 million lines of code and detected the cataloged implementation and design configuration smells. Our analysis reveals that the design configuration smells show 9% higher average co-occurrence among themselves than the implementation configuration smells. We also observed that configuration smells belonging to a smell category tend to co-occur with configuration smells belonging to another smell category when correlation is computed by volume of identified smells. Finally, design configuration smell density shows negative correlation whereas implementation configuration smell density exhibits no correlation with the size of a configuration management system. © 2016 ACM.",10.1145/2901739.2901761,"Dept of Management Science and Technology, Athens University of Economics and Business, Athens, Greece",Rejected
193,Technical debt interest assessment: From issues to project,"Cai, Y. and Kazman, R.","Proceedings - 1st International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities, Bridge 2016",2016,"In this paper, we first discuss the concept of architecture debt and how this debt grows in virtually every software-intensive project. Next we propose a methodology for developers to monitor the health of a project's architecture through an analysis of the development artifacts that a project produces. Our objective is to monitor and manage architecture debt by leveraging an architecture model that we proposed recently, called the Design Rule Space (DRSpace). We use DRSpaces to split a complex system into smaller subsystems based on features, patterns, refactoring targets, etc., so that we can monitor and analyze the evolution and interaction of each subsystem separately. We also employ a recently proposed architectural metric - Decoupling Level - to quantitatively monitor changes in a project's overall level of architecture maintainability. Using these tools, we describe our vision for a software architecture ""health monitor"", on analogy with a health monitor used in a hospital, to continuously monitor the health of the ""patient"" and alert staff to any potential danger signs. © 2016 ACM.",10.1145/2896935.2896940,"Drexel University, Philadelphia, PA, United States; University of Hawaii, SEI, CMU, Honolulu, HI, United States",Accepted
194,An investigation of technical debt in automatic production systems,"Sharma, T. and Mishra, P. and Tiwari, R.","Proceedings - 1st International Workshop on Bringing Architectural Design Thinking Into Developers' Daily Activities, Bridge 2016",2016,"Poor design quality and huge technical debt are common issues perceived in real-life software projects. Design smells are indicators of poor design quality and the volume of design smells found could be treated as the design debt of the software system. The existing smell detection tools focus largely on implementation smells and do not reveal a comprehensive set of smells that arise at design level. In this paper, we present Designite - a software design quality assessment tool. It not only supports comprehensive design smells detection but also provides a detailed metrics analysis. Further, it offers various features to help identify issues contributing to design debt and improve the design quality of the analyzed software system. © 2016 ACM.",10.1145/2896935.2896938,"Athens University of Economics and Business, Athens, Greece; Designite, Bangalore, India",Accepted
195,Attractiveness of European countries from the view of private equity and its impact to the industry in Europe,"Mera-Gómez, C. and Bahsoon, R. and Buyya, R.","Proceedings - 9th IEEE/ACM International Conference on Utility and Cloud Computing, UCC 2016",2016,"Cloud elasticity provides the underlying primitives to dynamically acquire and release shared computational resources on demand. Therefore, elasticity constantly takes adaptation decisions to adjust the resource provisioning constrained by quality of service and operating costs minimization. However, dynamic trade-offs for resource provisioning rarely consider the value of the adaptation decisions under uncertainty. Part of the problem stems from the lack of a utility-driven model to reason about it. In this paper, we introduce the concept of elasticity debt as an approach to reason about elasticity decisions from a utility-driven perspective, where we apply the technical debt metaphor in the context of cloud elasticity. Moreover, we extended CloudSim as a proof of concept to show that a debt-aware elasticity decision-making can achieve a higher utility over time. We provide an elasticity conceptual model that links the key factors to consider when adapting resource provisioning and the potential debts incurred by these decisions. We propose a new perspective to value elasticity decisions in the uncertain cloud environment by introducing a technical debt perspective. Copyright © 2016 ACM.",10.1145/2996890.2996904,"School of Computer Science, University of Birmingham, Edgbaston, B15 2TT, United Kingdom; Escuela Superior Politécnica del Litoral, ESPOL, Facultad de Ingeniería en Electricidad y Computación, Campus Gustavo Galindo, Km 30.5 Vía Perimetral, P.O. Box 09-01-5863, Guayaquil, Ecuador; Cloud Computing and Distributed Systems (CLOUDS) Lab, Department of Computing and Information Systems, University of Melbourne, Australia; Escuela Superior Politécnica del Litoral, ESPOL, Facultad de Ingeniería en Elec",Accepted
196,"Pragmatic scrum transformation: Challenges, practices & impacts during the journey a case study in a multi-location legacy software product development team","Wehaibi, S. and Shihab, E. and Guerrouj, L.","2016 IEEE 23rd International Conference on Software Analysis, Evolution, and Reengineering, SANER 2016",2016,"Technical debt refers to incomplete or temporary workarounds that allow us to speed software development in the short term at the cost of paying a higher price later on. Recently, studies have shown that technical debt can be detected from source code comments, referred to as self-admitted technical debt. Researchers have examined the detection, classification and removal of self-admitted technical debt. However, to date there is no empirical evidence on the impact of self-admitted technical debt on software quality. Therefore, in this paper, we examine the relation between self-admitted technical debt and software quality by investigating whether (i) files with self-admitted technical debt have more defects compared to files without self-admitted technical debt, (ii) whether self-admitted technical debt changes introduce future defects, and (iii) whether self-admitted technical debt-related changes tend to be more difficult. We measured the difficulty of a change using well-known measures proposed in prior work such as the amount of churn, the number of files, the number of modified modules in a change, as well as the entropy of a change. An empirical study using five open source projects, namely Hadoop, Chromium, Cassandra, Spark and Tomcat, showed that: i) there is no clear trend when it comes to defects and self-admitted technical debt, although the defectiveness of the technical debt files increases after the introduction of technical debt, ii) self-admitted technical debt changes induce less future defects than none technical debt changes, however, iii) self-admitted technical debt changes are more difficult to perform, i.e., they are more complex. Our study indicates that although technical debt may have negative effects, its impact is not only related to defects, rather making the system more difficult to change in the future. © 2016 IEEE",10.1109/SANER.2016.72,"Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Département de Génie Logiciel et des TI, École de Technologie Supérieure, Montréal, Canada",Accepted
197,Quantifying software: Global and industry perspectives,"Fontana, F.A. and Roveda, R. and Zanoni, M. and Raibulet, C. and Capilla, R.","Proceedings - 2016 13th Working IEEE/IFIP Conference on Software Architecture, WICSA 2016",2016,"Architecture erosion constitutes the most visible effect of the degradation of design. It is a major reason to address the design debt, often caused by architectural mismatch problems. Today, the identification of design erosion is a major concern for designers and software maintainers. Adequate tools are necessary to identify and repair the debt. This paper describes our experience on identifying architectural erosion problems on existing open source software applications through the support of two well known tools. Moreover, we outline if the tools provide useful hints in repairing some of the detected problems. © 2016 IEEE.",10.1109/WICSA.2016.37,"Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Rey Juan Carlos University, Madrid, Spain",Accepted
198,Supervision of a distributed energy resources generation system using IEC and ISA standards,"Skourletopoulos, G. and Mavromoustakis, C.X. and Batalla, J.M. and Mastorakis, G. and Pallis, E. and Kormentzas, G.","2016 IEEE International Conference on Communications, ICC 2016",2016,"As network bandwidth and coverage continue to increase, the adoption rates of mobile devices are growing over time and the mobile technology is becoming increasingly industrialized. In mobile cloud marketplaces, the cloud-supported mobile services can be leased off. However, the mobile service selection may introduce technical debt (TD), which is essential to be predicted and quantified. In this context, this paper examines the incurrence of technical debt in the future when leasing cloud-based mobile services by proposing a novel quantitative model, which adopts a linear and symmetric approach as a linear growth in the number of users is predicted. The formulation of the problem is based on a cost-benefit analysis, elaborating on the potential profit that could be obtained if the number of users would be equal to the maximum value. The probability of overutilization of the selected service in the long run is also researched. Finally, a quantification tool has been developed as a proof of concept (PoC), which initiates the technical debt analysis and optimization on mobile cloud-based service level and aims to provide insights into the overutilization or underutilization of a web service when a linear increase in the number of users occurs. © 2016 IEEE.",10.1109/ICC.2016.7510995,"Mobile Systems (MoSys) Laboratory, Department of Computer Science, University of Nicosia, Nicosia, Cyprus; National Institute of Telecommunications and Seidor S.A., Szachowa Str. 1 and Eix Onze de Setembre, 41-43, Warsaw, Poland; Department of Informatics Engineering, Technological Educational Institute of Crete, Heraklion, Crete, Greece; Department of Information and Communication Systems Engineering, University of the Aegean, Samos, Greece",Accepted
199,Evaluating quality issues in BPMN models by extending a technical debt software platform,,IEEE International Conference on Program Comprehension,2016,The proceedings contain 45 papers. The topics discussed include: do code smells hamper novice programming?; improving code readability models with textual features; navigating the WordPress plugin landscape; a case study of program comprehension effort and technical debt estimations; on method ordering; identifying modularization patterns by visual comparison of multiple hierarchies; glyph-based software component identification; taming the IDE with fine-grained interaction data; learning to rank for bug report assignee recommendation; a novel approach for estimating truck factors; and can we enforce a benefit for dynamically typed languages in comparison to statically typed ones? a controlled experiment.,,,Rejected
200,"15th International Conference on Service-Oriented Computing, ICSOC 2017","Falessi, D. and Kruchten, P. and Avgeriou, P.",Journal of Systems and Software,2016,,10.1016/j.jss.2016.06.069,"California Polytechnic State University, United States; University of British Columbia, Canada; University of Groningen, Netherlands",Rejected
201,Human resource optimization for bug fixing: Balancing short-term and long-term objectives,"Guo, Y. and Seaman, C. and da Silva, F.Q.B.",Journal of Systems and Software,2016,"Technical debt (TD) is a metaphor that characterizes the effect of immature software artifacts. The costs and benefits of TD, along with the uncertainty of its interest repayment, provide leverage for software managers, but also could lead to problems such as increased costs and lower quality during maintenance if it is left unattended. Therefore, effective approaches to TD management are needed by software practitioners. As one of our series of studies on TD management, this study was originally designed to reveal the cost side of explicit TD management. The study design required applying a simple proposed TD management approach to the subject project and then collecting cost information. Not surprisingly, we observed some deviation of the actual management process from our proposed one, which provided us with an opportunity to investigate the obstacles to explicitly managing TD. We also identified some costs and cost patterns related to TD management. Based on the insights gained from this study, we further propose strategies to overcome the obstacles and improve the application of TD management in practice. © 2016 Elsevier Inc.",10.1016/j.jss.2016.07.008,"Department of Information Systems, UMBC, Baltimore, MD, United States; Center for Informatics, Federal University of Pernambuco, Recife, PE, Brazil",Accepted
202,Investigating the identification of technical debt through code comment analysis,"Mohan, M. and Greer, D. and McMullan, P.",Journal of Systems and Software,2016,"Software refactoring has been recognized as a valuable process during software development and is often aimed at repaying technical debt. Technical debt arises when a software product has been built or amended without full care for structure and extensibility. Refactoring is useful to keep technical debt low and if it can be automated there are obvious efficiency benefits. Using a combination of automated refactoring techniques, software metrics and metaheuristic searches, an automated refactoring tool can improve the structure of a software system without affecting its functionality. In this paper, four different refactoring approaches are compared using an automated software refactoring tool. Weighted sums of metrics are used to form different fitness functions that drive the search process towards certain aspects of software quality. Metrics are combined to measure coupling, abstraction and inheritance and a fourth fitness function is proposed to measure reduction in technical debt. The 4 functions are compared against each other using 3 different searches on 6 different open source programs. Four out of the 6 programs show a larger improvement in the technical debt function after the search based refactoring process. The results show that the technical debt function is useful for assessing improvement in quality. © 2016 Elsevier Inc.",10.1016/j.jss.2016.05.019,"Department of Electronics, Electrical Engineering and Computer Science, Queen's University BelfastNorthern Ireland  BT7 1NN, United Kingdom",Accepted
203,Confidential benchmarking based on multiparty computation,"Holvitie, J. and Licorish, S.A. and Leppanen, V.","Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016",2016,"Noting the overwhelming speed during software development, and particularly in environments where rapid delivery is the norm, the lack of accumulated technical debt information could result in ineffective management. We introduce technical debt propagation channels in this paper to advance software maintenance research on two accounts: (1) We describe the fundamental components for the channels, allowing identification of distinct channels, and (2) we describe a procedure to identify and abstract technical debt channels in order to produce technical debt propagation models. Our propagation models pursue automation of technical debt information maintenance with program analysis results, and translation of the maintained information between existing-and currently disconnected-technical debt management solutions. We expect the immediate technical debt information to enhance applicability and effectiveness of existing technical debt management approaches. © 2016 IEEE.",10.1109/SEAA.2016.53,"TUCS, Turku Centre for Computer Science, Software Development Laboratory, Turku, Finland; University of Turku, Dept. of Information Technology, Turku, Finland; University of Otago, Department of Information Science, Dunedin, Otago, New Zealand",Accepted
204,Technical Debt Management with Genetic Algorithms,,"Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016",2016,"The proceedings contain 53 papers. The topics discussed include: supporting feature estimation with risk and effort annotations; towards guidelines for preventing critical requirements engineering problems; busting software architecture beliefs: a survey on success factors in architecture decision making; technical debt management with genetic algorithms; evidence-based timelines for user experience software process improvement retrospectives; identifying developers' expertise in social coding platforms; continuous, lean, and wasteless: minimizing lead time from development done to production use; implementing continuous customer care: first-hand experiences from an industrial setting; estimating and quantifying the benefits of refactoring to improve a component modularity: a case study; a case study on the utilization of problem and solution domain measures for software size estimation; MVP explained: a systematic mapping study on the definitions of minimal viable product; product innovation through internal startup in large software companies: a case study; systematic mapping study of dealing with error in software development effort estimation; Bayesian synthesis for knowledge translation in software engineering: method and illustration; a property model ontology; handling uncertainty in automatically generated implementation models in the automotive domain; and literature review of empirical research studies within the domain of acceptance testing.",,,Rejected
205,The effects of software process evolution to technical debt-perceptions from three large software projects,"Besker, T. and Martini, A. and Bosch, J.","Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016",2016,"Fast software deliveries are hindered by high maintenance efforts due to internal quality issues and Technical Debt (TD) and specifically, Architectural Technical Debt (ATD) has received increased attention in the last few years. ATD has a significant influence and impact on system success and, left unchecked, it can cause expensive repercussions, it is, therefore, of maintenance and evolutionary importance to understand the basic underlying factors of ATD. Thus, with this as background, there is a need for a descriptive model to illustrate and explain the different ATD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the ATD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the ATD phenomenon. This model categorizes the main characteristics of ATD and reveals their corresponding relations. The model is based on a systematic literature review (SLR) of currently recognized knowledge concerning ATD. © 2016 IEEE.",10.1109/SEAA.2016.42,"Computer Science and Engineering, Software Engineering, Chalmers University of Technology, Gotenorg, Sweden",Rejected
206,Technical debt in MDE: A case study on GMF/EMF-based projects,"Reimanis, D. and Izurieta, C.","Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",2016,"Providing software developers and researchers with useful technical debt analysis tools is an instrumental outcome of software engineering and technical debt research. Such tools aggregate industry best practices to provide users with organized and quantifiable metrics that can help minimize the time it takes to synthesize and make an intelligent future decision regarding a system. Today, most tools rely primarily on structural measurements from static analysis to generate results. However, it is also necessary to consider measurements that capture the behavior of software, as these represent additional complexities within a system that structural measurements are incapable of detecting. Herein, we present our position, that more effort needs to be placed towards understanding software behavior so that technical debt analysis tools can begin supporting them, in order to provide tool users with a more accurate and complete view of their system. In this paper, we describe this problem in the context of design patterns and outline an effective method to talk about behaviors in the future. We create and classify two example behaviors using our method, both of which increase the technical debt in their respective design pattern applications. © 2016 IEEE.",10.1109/MTD.2016.13,"Computer Science Department, Montana State University, Bozeman, MA  59715, United States",Accepted
207,How do software development teams manage technical debt?  An empirical study,,"Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",2016,The proceedings contain 7 papers. The topics discussed include: how 'specification by example' and test-driven development help to avoid technical debt; the perception of technical debt in the embedded systems domain: an industrial case study; database design debts through examining schema evolution; towards assessing the technical debt of undesired software behaviors in design patterns; technical debt indexes provided by tools: a preliminary discussion; practical technical debt discovery by matching patterns in assessment graph; and adjusting the balance sheet by appending technical debt.,,,Rejected
208,Theoretical conceptualization of TD: A practical perspective,"Fontana, F.A. and Roveda, R. and Zanoni, M.","Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",2016,"In software maintenance and evolution, it is important to assess both code and architecture in order to identify issues to be solved to improve software quality. Different tools provide some kind of index giving us an overall evaluation of a project to be used when managing its technical debt. In this paper, we outline how the indexes, that we call in general Technical Debt Indexes, provided by five different tools are computed. We describe their principal features and differences, what aspects they are missing, and we outline if (and how) the indexes take into account architectural problems that could have a major impact on the architectural debt. We show that the indexes rely on different information sources and measure different quantities. © 2016 IEEE.",10.1109/MTD.2016.11,"Universita degli Studi di Milano, Bicocca, Milan, Italy",Accepted
209,Exploring the Presence of Technical Debt in Industrial GUI-Based Testware: A Case Study,"Zhu, L. and Zhao, X. and Chua, D.K.H.",Journal of Computing in Civil Engineering,2016,"The negotiation of the debt terms of public-private partnership (PPP) projects is time consuming and expensive. Although attempts have been made to examine this negotiation inefficiency, there still lacks a theoretical model for this. The aim of this study is to develop an agent-based debt terms' bargaining model that simulates the negotiation process and improves the negotiation inefficiency. This model was developed using bargaining game theory, time-dependent negotiation tactics, and a learning-based approach, and then validated on a real PPP project. Scenario simulations were also carried out to test the effect of the first offerer, negotiation tactics, and bargaining powers on the duration and payoff of the negotiation. Results show that the use of the negotiation tactics and learning ability can quickly finalize the negotiation, improving the negotiation inefficiency. Results also indicate that being the first offerer and possessing more bargaining power can make the player obtain a better payoff. The developed system can be used by decision makers to understand the reason for the lengthy negotiation and make improved strategies under different scenarios. © 2016 American Society of Civil Engineers.",10.1061/(ASCE)CP.1943-5487.0000571,"Dept. of Civil and Environmental Engineering, National Univ. of Singapore, Singapore, 117576, Singapore; School of Engineering and Technology, Central Queensland Univ., Sydney, NSW  2000, Australia",Rejected
210,The effect of firm and stock characteristics on stock returns: Stock market crash analysis,"Shapochka, A. and Omelayenko, B.","Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",2016,"This article reflects on experiences collected by doing technical debt assessments for many years as a primary job. It argues for a model that represents software source code and other informational artifacts as a graph with metadata describing these artifacts. Technical debt items are discovered with graph matching patterns that represent technical debt discovery patterns. These patterns automate manual work, avoid effort duplication, and boost assessment performance. The overall approach is illustrated with a prototype implementation and a case study. © 2016 IEEE.",10.1109/MTD.2016.7,"Principal Architect SoftServe Inc., Ukraine; Software Architect SoftServe Inc., Ukraine",Accepted
211,Technical debt prioritization using predictive analytics,"Al-Barak, M. and Bahsoon, R.","Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016",2016,"Causes of the database debt can stem from ill-conceptual, logical, and/or physical database design decisions, violations to key design databases principles, use of anti-patterns etc. In this paper, we explore the problem of relational database design debt and define the problem. We develop a taxonomy, which classifies various types of debts that can relate to conceptual, logical and physical design of a database. We define the concept of Database Design Debt, discuss their origin, causes and preventive mechanisms. We draw on MediaWiki case study and examine its database schema evolution to support our work. The contribution hopes to make database designers and application developers aware of these debts so they can minimize/avoid their consequences on a given system. © 2016 IEEE.",10.1109/MTD.2016.9,"School of Computer Science, King Saud University, Saudi Arabia; School of Computer Science, University of Birmingham, Birmingham, United Kingdom",Accepted
212,A case study of program comprehension effort and technical debt estimations,"Ichii, M. and Shimbara, D. and Suzuki, Y. and Ogawa, H.","IWoR 2016 - Proceedings of the 1st International Workshop on Software Refactoring, co-located with ASE 2016",2016,"Software refactoring is an effective way for dealing with technical debt accumulated in a software system; however, regression risk prevents developers from refactoring their code. Herein, we propose an approach to check the equivalence of source code before and after refactoring using the AST-based model extracted from source code. In order to detect unintended changes to the program structure, our approach first transforms the model from the refactored code in accordance with the refactoring pattern so that the refactoring is cancelled, and then compares it with the model from the code before refactoring. We also built a tool named POM/EQ based on the Eclipse Modeling Framework for checking C/C++ source code. As a result of the case study using the tool, we successfully checked 56 % of the refactoring changes that are performed on an industrial product. © 2016 ACM.",10.1145/2975945.2975950,"Center for Technology Innovation - Systems Engineering, Hitachi, Ltd., Research and Development Group, Yokohama, Kanagawa, Japan",Accepted
213,An empirically developed method to aid decisions on architectural technical debt refactoring: AnaConDebt,"De Rosario, A.H. and Martín, A.S. and Pérez, M.D.C.C.",Public Administration and Information Technology,2016,"Social media have changed how governments communicate with society, encouraging participation and the interaction of citizens in public affairs. The main aim of this study is to analyse the online practices of Spanish local governments, through Facebook, to examine the factors that influence these practices and to determine citizens mood in this respect. The results obtained show that the popularity and virality of municipal Facebook pages are greater than their followers degree of commitment. Users take a positive view of the pages, and the type of information most commonly shared on Facebook by Spanish local governments is of a social nature. Factors that influence local governments Facebook practices include the level of internet use among the population, the level of municipal debt, the number of inhabitants and the economic capacity of the population. © Springer International Publishing Switzerland 2016.",10.1007/978-3-319-17722-9_12,"Department of Economics and Business, University of Almería, Carretera de Sacromonte s/n, Almería, 04120, Spain",Rejected
214,A large-scale empirical study on self-admitted technical debt,"Singleton, J.L. and Leavens, G.T.","Proceedings - 2016 IEEE 17th International Conference on Information Reuse and Integration, IRI 2016",2016,"Compositional reuse of software libraries is important for productivity. To promote reliability and correctness, the field also needs a way to compose specifications for reuse. However, specifications cannot be adapted by the use of wrappers in the same ways as code can, which leads to specifications being copied and modified. This copying and modification of specifications leads to poor maintainability and technical debt. We propose a system, Spekl, that solves these problems and makes compositional reuse of specifications possible in a way independent of the choice of specification languages and tools. © 2016 IEEE.",10.1109/IRI.2016.24,"Department of Computer Science, University of Central Florida, Orlando, FL, United States",Rejected
215,Got technical debt? Surfacing elusive technical debt in issue trackers,"Samarthyam, G. and Muralidharan, M. and Anna, R.K.",Trends in Software Testing,2016,"Technical debt occurs when teams knowingly or unknowingly make technical decisions in return for short-term gain(s) in their projects. The test dimension of technical debt is known as test technical debt (or test debt). Test debt is an emerging topic and has received considerable interest from software industry in the last few years. This chapter provides an overview of test debt, factors that contribute to test debt, and strategies for repaying test debt. The chapter also discusses how to identify test smells and refactor them for repaying technical debt in industrial projects using numerous examples and case studies. This chapter would be of considerable value to managers and leads working in IT companies as well as researchers working in the area of test debt. © Springer Science+Business Media Singapore 2017.",10.1007/978-981-10-1415-4_1,"Bangalore, India; Siemens Research and Technology Center, Bangalore, India; Symantec Software, Pune, India",Accepted
216,Measuring the principal of defect debt,"Kim, K. and Mithas, S. and Kimbrough, M.",MIS Quarterly: Management Information Systems,2017,"This study documents variation across industries in creditors' perceptions of the risk of information technology (IT) investments. The associations we document between IT investments and both initial bond ratings and yield spreads suggest that credit-rating agencies and bond investors consider IT investments in automate and informate industries less risky than those in transform industries. We document that IT investments are associated with more volatile future cash flows in transform industries than in automate or informate industries. The findings indicate that bond investors prefer IT investments in automate industries, where the cash flow payoffs to IT investment are smaller but more stable than in transform industries. Overall, these findings provide the important insight that bondholders' perceptions of IT investments vary across industries based on bondholders' aversion to the riskiness and the lack of collateralizability of IT investments. Senior managers should recognize that IT investments have implications for both operational performance and financing costs (e.g., costs of debt) of the firm, and they should consider the potential financial benefits of increased IT capabilities, such as the willingness of corporate bond investors to accept lower financing costs.",10.25300/MISQ/2017/41.4.15,"Department of Decision Sciences and Managerial Economics, CUHK Business School, Chinese University of Hong Kong, Shatin, Hong Kong; Robert H. Smith School of Business, University of Maryland, College Park, MD  20742, United States",Rejected
217,Identifying and quantifying architectural debt,"Guzman, L. and Vollmer, A.M. and Ciolkowski, M. and Gillmann, M.",International Symposium on Empirical Software Engineering and Measurement,2017,"Context/Background: To achieve high software quality, particularly in the context of agile software development, organizations need tools to continuously analyze software quality. Several quality management (QM) tools have been developed in recent years. However, there is a lack of evidence regarding the quality of QM tools, standardized definitions of such quality, and reliable instruments for measuring it. This, in turn, impedes proper selection and improvement of QM tools. Goals: We aimed at operationalizing the quality of a research QM tool, namely the ProDebt prototype, and evaluating its quality. The goal of the ProDebt prototype is to provide practitioners with support for managing software quality and technical debt. Method: We performed interviews, workshops, and a mapping study to operationalize the quality of the ProDebt prototype and to identify reliable instruments to measure it. We designed a mixed-method study aimed at formative evaluation, i.e., at assessing the quality of the ProDebt prototype and providing guidance for its further development. Eleven practitioners from two German companies evaluated the ProDebt prototype. Results: The participants assessed the information provided by the ProDebt prototype as understandable and relevant. They considered the ProDebt prototype's functionalities as easy to use but of limited usability. They identified improvement needs, e.g., that the analysis results should be linked to other information sources. Conclusions: The evaluation design was of practical value for evaluating the ProDebt prototype considering the limited resources such as the practitioners' time. The evaluation results provided the developers of the ProDebt prototype with guidance for its further development. We conclude that it can be used and tailored for replication or evaluation of other QM tools. © 2017 IEEE.",10.1109/ESEM.2017.43,"Fraunhofer IESE, Fraunhofer Platz 1, Kaiserslautern, 67663, Germany; QAware GmbH, Aschauer Str. 32, Munchen, 81549, Germany; Insiders Technologies GmbH, Brusseler Str. 1, Kaiserslautern, 67657, Germany",Accepted
218,Impacts of agile requirements documentation debt on software projects: A retrospective study,"Besker, T. and Martini, A. and Bosch, J.","Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017",2017,"Software companies need to support continuous and fast delivery of customer value both in short and a long-term perspective. However, this can be hindered by evolution limitations and high maintenance efforts due to internal software quality issues by what is described as Technical Debt. Although significant theoretical work has been undertaken to describe the negative effects of Technical Debt, these studies tend to have a weak empirical basis and often lack quantitative data. The aim of this study is to estimate wasted time, caused by the Technical Debt interest during the software life-cycle. This study also investigates how practitioners perceive and estimate the impact of the negative consequences due to Technical Debt during the software development process. This paper reports the results of both an online web-survey provided quantitative data from 258 participants and follow-up interviews with 32 industrial software practitioners. The importance and originality of this study contributes and provides novel insights into the research on Technical Debt by quantifying the perceived interest and the negative effects it has on the software development life-cycle. The findings show that on average, 36 % of all development time is estimated to be wasted due to Technical Debt; Complex Architectural Design and Requirement Technical Debt generates most negative effect; and that most time is wasted on understanding and/or measuring the Technical Debt. Moreover, the analysis of the professional roles and the age of the software system in the survey revealed that different roles are affected differently and that the consequences of Technical Debt are also influenced by the age of the software system. © 2017 IEEE.",10.1109/ICSME.2017.42,"Computer Science and Engineering, Chalmers University of Technology, Gothenburg, Sweden",Rejected
219,JSpIRIT: A flexible tool for the analysis of code smells,"Maldonado, E.D.S. and Shihab, E. and Tsantalis, N.",IEEE Transactions on Software Engineering,2017,"The metaphor of technical debt was introduced to express the trade off between productivity and quality, i.e., when developers take shortcuts or perform quick hacks. More recently, our work has shown that it is possible to detect technical debt using source code comments (i.e., self-Admitted technical debt), and that the most common types of self-Admitted technical debt are design and requirement debt. However, all approaches thus far heavily depend on the manual classification of source code comments. In this paper, we present an approach to automatically identify design and requirement self-Admitted technical debt using Natural Language Processing (NLP). We study 10 open source projects: Ant, ArgoUML, Columba, EMF, Hibernate, JEdit, JFreeChart, JMeter, JRuby and SQuirrel SQL and find that 1) we are able to accurately identify self-Admitted technical debt, significantly outperforming the current state-of-The-Art based on fixed keywords and phrases; 2) words related to sloppy code or mediocre source code quality are the best indicators of design debt, whereas words related to the need to complete a partially implemented requirement in the future are the best indicators of requirement debt; and 3) we can achieve 90 percent of the best classification performance, using as little as 23 percent of the comments for both design and requirement self-Admitted technical debt, and 80 percent of the best performance, using as little as 9 and 5 percent of the comments for design and requirement self-Admitted technical debt, respectively. The last finding shows that the proposed approach can achieve a good accuracy even with a relatively small training dataset. © 1976-2012 IEEE.",10.1109/TSE.2017.2654244,"Data-Driven Analysis of Software (DAS) Lab, Department of Computer Science and Software Engineering, Concordia University, Montreal, QC  H4B 1R6, Canada; Department of Computer Science and Software Engineering, Concordia University, Montreal, QC  H4B 1R6, Canada",Accepted
220,Pragmatic approach for managing technical debt in legacy software project,"Ding, H. and Zhang, P. and Lu, T. and Gu, H. and Gu, N.","Proceedings of the 2017 IEEE 21st International Conference on Computer Supported Cooperative Work in Design, CSCWD 2017",2017,"Credit scoring plays an important role in financial institutions and debt based crowdfunding platforms as well as peer to peer lending platforms. In the last few years, adopting ensemble methods for credit scoring has become much more popular. However, the performance of ensemble methods is easily affected by the parameter settings and the number of base classifiers. Ensemble classification based on clustering is able to determine the best number of base classifiers automatically by clustering and find optimal parameter settings for base classifiers by training them individually on the training subsets combined by clusters. By this way, the adverse effect of manually setting the parameters and the number of base classifiers can be avoided. However, the different contributions of attributes to the distance metrics are not considered in conventional clustering methods, which may decrease the performance of ensemble classifiers based on them. Moreover, unbalanced training subsets decrease the performance of base classifiers, which results in the bad performance of ensemble classifiers. In our approach, to address the above problems, we first assign different weights to different variables when measuring the distance between two instances in the clustering step, and then adopt Subagging resampling method to deal with unbalanced training subsets in the training process. Experimental results show that our approach can improve the performance of the ensemble classifier. © 2017 IEEE.",10.1109/CSCWD.2017.8066746,"School of Computer Science, Fudan University, Shanghai, China; Shanghai Key Laboratory of Data Science, Fudan University, Shanghai, China; Seagate Technology, Longmont, CO, United States",Rejected
221,Can knowledge of technical debt help identify software vulnerabilities?,"Alegroth, E. and Gonzalez-Huerta, J.","Proceedings - 43rd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2017",2017,"Technical Debt (TD) is a metaphor used to explain the negative impacts that sub-optimal design decisions have in the long-term perspective of a software project. Although TD is acknowledged by both researchers and practitioners to have strong negative impact on Software development, its study on Testware has so far been very limited. A gap in knowledge that is important to address due to the growing popularity of Testware (scripted automated testing) in software development practice.In this paper we present a mapping analysis that connects 21 well-known, Software, object-oriented TD items to Testware, establishing them as Testware Technical Debt (TTD) items. The analysis indicates that most Software TD items are applicable or observable as TTD items, often in similar form and with roughly the same impact as for Software artifacts (e.g. reducing quality of the produced artifacts, lowering the effectiveness and efficiency of the development process whilst increasing costs). In the analysis, we also identify three types of connections between software TD and TTD items with varying levels of impact and criticality. Additionally, the study finds support for previous research results in which specific TTD items unique to Testware were identified. Finally, the paper outlines several areas of future research into TTD. © 2017 IEEE.",10.1109/SEAA.2017.65,"Software Engineering Research Lab Sweden, Blekinge Institute of Technology, Karlskrona, SE-371 79, Sweden",Accepted
222,Architecture viewpoints for documenting architectural technical debt,"Azman, N.S. and Hamdan, R. and Suki, N.M. and Shari, A.",Advanced Science Letters,2017,"The total household debt in Malaysia grew by RM70.4 billion compared to previous year where the growth in aggregate household debt was driven by the outstanding debts from credit cardholders amounted to RM32,841.40 million by year 2015 (Bank Negara, 2015). The development of credit card facility as a medium of payment had encouraged households to spend beyond their means. Credit cards are used to accommodate the cost of living as a tool to smooth their consumption which had caused abusive attitude in using credit cards among the households, hence contributing to a higher household debt, especially to those under economic shock vulnerability income group. Thus, this study investigated factors that determine urban household likelihood to be pro debt by integrating socio-economic and psychological factors. The data were collected from 143 urban households by using convenience sampling and self-administered structured questionnaire surveys in Sabah and Sarawak. The logistic regression analysis results verified that age, level of education, income level, households saving pattern and specific attitude towards credit are significant factors that determine urban household likelihood to be pro debt. To overcome the indebtedness problem, the synergy role of the stakeholders is crucial to educate households in good financial management and planning as well as direct and consistent monitoring and control on the household financial and debts patterns. These can increase the awareness towards negative effects of debts and assist the government to enhance the effective economic policies to overcome household indebtedness issue. © 2017 American Scientific Publishers. All rights reserved.",10.1166/asl.2017.9852,"Labuan Faculty of International Finance, Universiti Malaysia Sabah, Jalan Sungai Pagar, F. T. Labuan, 87000, Malaysia; Faculty of Economics and Business, Universiti Malaysia Sarawak, Jalan Dato Mohd Musa, Kota Samarahan, Sarawak  94300, Malaysia",Rejected
223,Rework effort estimation of self-admitted technical debt,"De Jesus, J.S. and De Melo, A.C.V.","Proceedings - 2017 IEEE 19th Conference on Business Informatics, CBI 2017",2017,"Technical debt is a deviation of any software project's aspect related to a quality standard previously established. In general, this deviation is created to accomplish a short-term objective, but may cause some difficulties to perform further software developments and evolutions. Even though this happens in many software projects today, there is no common understanding of which factors and conditions can contribute to the accumulation of software technical debts. To account for the aspects of software projects (like size, time, the number of commit to correct defects and the number of collaborators) that may contribute to software technical debts, we collected data from fifty projects in a public software repository to make a statistical analysis on the relation of some aspects with the software technical debts. This paper presents the results of this study from which we realized that the project's size, the number of collaborators and speed of development are the most related aspects with the number of software technical debts. On the other hand, the number of commits created to correct the defects did not show to be connected to the amount of technical debt found in the analyzed projects. © 2017 IEEE.",10.1109/CBI.2017.62,"Dept of Computer Science, Institute of Mathematics and Statistics, University of Sao Paulo, Brazil",Accepted
224,"Minimizing refactoring effort through prioritization of classes based on historical, architectural and code smell information","Deepthi, M.B. and Sreekantha, D.K.","Proceedings of the International Conference on Inventive Communication and Computational Technologies, ICICCT 2017",2017,"India has 1.4 million square-kilometers of land under cultivation and only about 39 percent is irrigated and other 61 percent is fully dependent on rain and if rain fails or gets delayed, crops fail driving debt ridden farmers to suicide. Agricultural output of India is the second largest in the world and India is second largest producer of cotton and one of the largest exporters of cotton in the world. An average farmer family owns 5 acres of agricultural land. Applications of state of art technologies may increase the productivity/ hectors. Expert system is a computer based programs. Expert systems have been successfully used in various scientific and business applications. Expert system is also available in agricultural operations to assists the farmers to identify the suitable crops for their farmland. Expert system helps to carry out crop management incredibly effective, efficient way and offers a lot of accurate results to the farmer production systems now-a-days. Authors have carried out a review on applications of expert system for or Disease Diagnoses of Crops around the world to make assessment of the ground realities on utilization of expert system by the farmers and benefits they realized. Authors are conducting a research on the design of Expert Systems for diagnosis of diseases for Paddy crop. © 2017 IEEE.",10.1109/ICICCT.2017.7975192,"Department of Computer Science and Engineering, NMAM Institute of Technology, Nitte, India",Rejected
225,Open cultural production and the online gift economy: The case of Blender,"Kosti, M.V. and Ampatzoglou, A. and Chatzigeorgiou, A. and Pallas, G. and Stamelos, I. and Angelis, L.","Proceedings - 43rd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2017",2017,"One of the first steps towards the effective Technical Debt (TD) management is the quantification and continuous monitoring of the TD principal. In the current state-ofresearch and practice the most common ways to assess TD principal are the use of: (a) structural proxies - i.e., most commonly through quality metrics; and (b) monetized proxies - i.e., most commonly through the use of the SQALE (Software Quality Assessment based on Lifecycle Expectations) method. Although both approaches have merit, they seem to rely on different viewpoints of TD and their levels of agreement have not been evaluated so far. Therefore, in this paper, we empirically explore this relation by analyzing data obtained from 20 open source software projects and build a regression model that establishes a relationship between them. The results of the study suggest that a model of seven structural metrics, quantifying different aspects of quality (i.e., coupling, cohesion, complexity, size, and inheritance) can accurately estimate TD principal as appraised by SonarQube. The results of this case study are useful to both academia and industry. In particular, academia can gain knowledge on: (a) the reliability and agreement of TD principal assessment methods and (b) the structural characteristics of software that contribute to the accumulation of TD, whereas practitioners are provided with an alternative evaluation model with reduced number of parameters that can accurately assess TD, through traditional software quality metrics and tools. © 2017 IEEE.",10.1109/SEAA.2017.59,"Department of Informatics, Aristotle University of Thessaloniki, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece, United States",Accepted
226,Investigating the use of a contextualized vocabulary in the identification of technical debt: A controlled experiment,"Adersberger, J. and Siedersleben, J.",Digital Marketplaces Unleashed,2017,"Industrial production has been paramount for survival on competitive markets. But what does this mean for software development? Will occidental programmers be supplanted by computers churning out software? Or by hordes of low paid programmers in India as clothing manufacturers have been by sewers in Bangladesh? Industrialisation is usually measured in terms of production capacity (how much can you produce per day?) and production price (at what unit costs?). This raises two questions: (1) What is a suitable unit of software quantity? And (2) how do you calculate the unit price? The answer to (1) should depend on the value a piece of software really affords the user, which leads to the notion of a feature with measurable benefit. A rash answer to (2) would be ""required time multiplied by labour costs"" but this neglects quality debts caused by flaws such as unclean code, careless testing, lacking functions, breached architecture, poor performance or insufficient data security. Software debts tend to go unnoticed for a while but lead to a dead end in the long run: time and money is squandered on imperative repairs while new features grow more and more expensive, with the project being finally brought to a grinding halt. This article explains what software industrialisation really means and how it is achieved. And, most importantly, it tells how to keep quality debts close to zero. © Springer-Verlag GmbH Germany 2018.",10.1007/978-3-662-49275-8_24,"QAware GmbH, Munich, Germany",Rejected
227,Reducing friction in software development,"Martini, A. and Bosch, J.","Proceedings - 2017 IEEE International Conference on Software Architecture Workshops, ICSAW 2017: Side Track Proceedings",2017,"Large software companies need a well-managed Software Architecture to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both evolution and maintenance of existing systems are hampered by Architectural Technical Debt. To avoid the accumulation and the costly consequences of ATD, it is critical that the responsibilities to minimize it are well understood and shared in a large software organization. In this paper, we argue that an organizational model, based on a well validated framework such as CAFFEA, can be used to reveal sub-optimalities in the social structure of the organization: in other words, it can reveal Social Debt. Such sub-optimality, according to previous work, leads to the accumulation of ATD. In conclusion, using the CAFFEA framework as an organizational analysis tool, can reveal weak spots (Social Debt) in the organization and can help preventing costly ATD and its consequences. © 2017 IEEE.",10.1109/ICSAW.2017.42,"Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden",Accepted
228,USPD doubling or declining in next decade estimated by WASD neuronet using data as of October 2013,"Kuroda, T. and Baquero Forero, M.D.P.",Telecommunications Policy,2017,"This paper compares the evolution of seven key market outcomes in 47 countries after the allocation of mobile phone spectrum by auctions and beauty contests held from 2000 to 2008. Traditional auction theory predicts the merits of auction versus beauty contests. However, recent theoretical research shows that auctions impose selection and debt effects on the after-market competition that could harm consumers. We employ two semi-parametric estimators to determine the treatment effects and find that 3G mobile phone penetration rates among auctioning countries are 1.048.95% lower. Findings suggest that auctions, when used to raise public revenues, not only transfer profits to government but also sacrifice consumer surplus. © 2017 Elsevier Ltd",10.1016/j.telpol.2017.01.006,"Faculty of Economics, Tokyo Keizai University, Japan; Graduate School of Economics, Kyoto University, Japan; Commission for Aviation Regulation, Alexandra House, Dublin, Ireland",Rejected
229,Using agile methods for software development in R&D scenario,"Martini, A. and Vajda, S. and Vasa, R. and Jones, A. and Abdelrazek, M. and Grundy, J. and Bosch, J.",ACM International Conference Proceeding Series,2017,"The interest of Technical Debt (TD) is difcult to calculate, especially on a project level. Current approaches are based on fne-grain issue assessment, but there is no evidence about how TD is assessed on a project level. A few tools use an aggregation function that sum the TD issues on a project level. We conducted a multiple case-study on four diferent projects. We asked the project teams to assess the TD both on an issue level and on a project level. We also asked the product manager and a senior developer to assess the TD on a project level. We found that the function mapping the interest of TD to a project overall is not the sum of issue-level TD. We report the quantitative results of the performed experiment and we also developed a qualitative explanation of the results based on interviews with the development team. This paper represents a frst step towards assessing the interest of TD at a project level. © 2017 Association for Computing Machinery.",10.1145/3120459.3120469,"Chalmers University of Technology, Gothenburg, Sweden; Deakin Software and Technology, Innovation Lab, Melbourne, Australia",Accepted
230,A Mapping Study on Requirements Engineering in Agile Software Development,"Besker, T. and Martini, A. and Bosch, J. and Tichy, M.",ACM International Conference Proceeding Series,2017,"Technical Debt is a recent concept, borrowed from the financial domain. It has been recently used in software development to describe technical sub-optimal solutions that have short-term benefits but long-term extra-costs. However, no body of literature investigates how Automatic Production Systems companies deal with Technical Debt. We investigated how Technical Debt is known, how much it hurts and how is managed in an automatic production systems company. Results from one in-depth investigation show that the automatic production systems company spend quite a lot of resources because of Technical Debt, both in the extra-costs (interest) and in its management. The company presents moderate awareness of what Technical Debt is and how much is present in its systems. However, the tracking level is quite low. We, therefore, claim that Technical Debt needs more research in this domain, as it is a source of substantial extracosts and the current practices to manage it are not suitable. © 2017 Association for Computing Machinery.",10.1145/3120459.3120466,"Chalmers University of Technology, Computer Science and Engineering, Gothenburg, Sweden; Ulm University, Institute of Software Engineering and Programming Languages, Ulm, Germany",Accepted
231,Guidelines and metrics for configurable and sustainable architectural knowledge modelling,"Marasová, D. and ?ulková, K. and Bittner, M.",TEM Journal,2017,"Global financial crisis revealed possibilities of access to public and private financing and national governments started to regulate financial sector more strictly. Private equity presents a new way of debt financing, and cheap money supported massive growth of industrial sectors of individual countries. Contribution analyzes index of private equity attractiveness and risk capital, presenting the attractiveness of individual European countries. Analysis was orientated to the performance of individual industries, orientated to the relation among indexes, industries and private equity acting in industry. Results show individual private equity investments and economic value show growth in individual countries. Countries with best performance recorded high growth of PE funds in spite of economic crisis. Similar results are recorded in most European countries. © 2017 Daniela Marasová, Katarína ?ulková, Martin Bittner.",10.18421/TEM62-18,"Technical University Koice,Faculty BERG, Institute of Logistics, Letná 9, Koice, Slovakia; Technical University Koice, Faculty BERG, Institute of Earth Sources, Letná 9, Koice, Slovakia; Barclays PLC Banking and Financial services, London, United Kingdom",Rejected
232,Challenges to and Solutions for Refactoring Adoption: An Industrial Perspective,"Gupta, R.K. and Manikreddy, P. and Arya, K.C.",ACM International Conference Proceeding Series,2017,"This paper is a case study of globally distributed product for its journey of agile-scrum transformation. The case study provides a holistic view of various challenges, innovative practices, and impacts on product success. The challenges cover areas like communication, collaboration, testing, technical debt, and scaling business. We benchmarked our challenges with various pieces of literature. We also described how our problems in Agile-scrum adoption guided leadership team as well as product development team to evolve different innovative practices like new taxonomy for Scrum roles and responsibilities, collaborative events, innovative dashboard and pragmatic approach for technical debt to name a few. This paper also brings the detailed analysis of our practices which brought impact on cost, product & code quality, scaling up new users and early reach to market. This paper will guide management and leadership team of any legacy product that is bringing in agile practices in their development team. © 2017 ACM.",10.1145/3021460.3021478,"Siemens Healthcare Pvt. Ltd., #84, Keonics Electronics City Hosur Road, Bangalore, 560100, India",Rejected
233,"Electricity production potential and social benefits from rice husk, a case study in Pakistan","Jones, C.",Quantifying Software: Global and Industry Perspectives,2017,"Software is one of the most important products in human history and is widely used by all industries and all countries. It is also one of the most expensive and labor-intensive products in human history. Software also has very poor quality that has caused many major disasters and wasted many millions of dollars. Software is also the target of frequent and increasingly serious cyber-attacks. Among the reasons for these software problems is a chronic lack of reliable quantified data. This reference provides quantified data from many countries and many industries based on about 26,000 projects developed using a variety of methodologies and team experience levels. The data has been gathered between 1970 and 2017, so interesting historical trends are available. Since current average software productivity and quality results are suboptimal, this book focuses on best in class results and shows not only quantified quality and productivity data from best-in-class organizations, but also the technology stacks used to achieve best-in-class results. The overall goal of this book is to encourage the adoption of best-in-class software metrics and best-in-class technology stacks. It does so by providing current data on average software schedules, effort, costs, and quality for several industries and countries. Because productivity and quality vary by technology and size, the book presents quantitative results for applications between 100 function points and 100,000 function points. It shows quality results using defect potential and DRE metrics because the number one cost driver for software is finding and fixing bugs. The book presents data on cost of quality for software projects and discusses technical debt, but that metric is not standardized. Finally, the book includes some data on three years of software maintenance and enhancements as well as some data on total cost of ownership. © 2018 by Taylor & Francis Group, LLC.",10.1201/9781315314426,"Namcook Analytics LLC, United States",Rejected
234,A Case Study in Locating the Architectural Roots of Technical Debt,"Zapata, G. and Salazar, A. and Moreno, D. and Garcia, R.","2016 IEEE Colombian Conference on Robotics and Automation, CCRA 2016 - Conference Proceedings",2017,"This paper develops a proposal for designing a SCADA system for the supervision of a photovoltaic generation system using IEC 61850 and ISA S101 international standards, and industrial communication protocols such as Modbus TCP and OPC. The complete description of the elements of the generating system and communication architecture for this, based on the standard IEC 61850-7-420 is performed. This standard contains the logical nodes (LNs) for modeling systems of distributed energy resources (DER). An important contribution of this work is the design of the human-machine interface (HMI) of the SCADA, which follows the guidelines of the new standard ISA S101, which makes innovative proposals for graphical display of the processes to improve situational awareness in the supervision. The standard has been proposed for industrial processes, but is expected to be adopted in the power systems supervision. Additionally, the inclusion of a section that allows to select two new modes of operation (back up and optimization), as a contribution to the objective of integration of distributed generation in existing power system to promote the transition to a smart grid is highlighted. Finally, the continuous calculation of the amount of CO2 emissions that are avoided and the update on the carbon debt caused by the use of DER sources as a contribution to improving energy efficiency and a new variable to the relevant supervision system is presented. For this job is used mature technology in the electronic component of process control so the contribution is aimed at DER sources supervision and their integration into the power system. © 2016 IEEE.",10.1109/CCRA.2016.7811414,"Universidad Nacional de Colombia, Medellín, Colombia; Power Distribution Company Codensa S.A., ESP, Bogotá, Colombia",Rejected
235,Second International Workshop on Software Architecture and Metrics (SAM 2015),"Giraldo, F.D. and Osorio, F.D.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"Taking into account the current role of modelling at organizational levels, the quality of business process models (i.e., models that indicate how to achieve business objectives) is an essential aspect for the development and technological support of any organization. Based on the hypothesis that the quality of business process models in the BPMN notation can be automatically analyzed, in this work we propose an extension of a code-quality software platform (the SonarQube project) through a complement that allows the quality of these models to be validated. This paper reports the guidelines and quality metrics that were used to evaluate BPMN models. Then the SonarQube code evaluation platform and a plugin that was created in this work (which contains the identified metrics) was used to automatically obtain values of the technical debt from BPMN models. © 2017, Springer International Publishing AG.",10.1007/978-3-319-70625-2_19,"SINFOCI Research Group, University of Quindío, Armenia, Colombia",Rejected
236,"QoSA 2015 - Proceedings of the 11th International ACM SIGSOFT Conference on Quality of Software Architectures, Part of CompArch 2015",,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,The proceedings contain 53 papers. The special focus in this conference is on Service-Oriented Computing. The topics include: Confidence-aware reputation bootstrapping in composite service environments; compound trace clustering to generate accurate and simple sub-process models; an approach to modeling and discovering event correlation for service collaboration; energy efficient scheduling of application components via brownout and approximate markov decision process; predicting the available bandwidth on intra cloud network links for deadline constrained workflow scheduling in public clouds; inferring calling relationship based on external observation for microservice architecture; a QoS-aware resource allocation controller for function as a service (FaaS) platform; probabilistic qualitative preference matching in long-term IaaS composition; an embedding based factorization machine approach for web service QoS prediction; RISE: Resolution of identity through similarity establishment on unstructured job descriptions; a deep learning approach for long term QoS-compliant service composition; an artifact-driven approach to monitor business processes through real-world objects; benchFoundry: A benchmarking framework for cloud storage services; automated analysis of cloud offerings for optimal service provisioning; middleware for dynamic upgrade activation and compensations in multi-tenant SaaS; risk-based proactive process adaptation; a debt-aware learning approach for resource adaptations in cloud elasticity management; large-scale and adaptive service composition using deep reinforcement learning; ECHO: An adaptive orchestration platform for hybrid dataflows across cloud and edge; ensuring and assessing architecture conformance to microservice decomposition patterns; social-sensor cloud service for scene reconstruction; polly: A language-based approach for custom change detection of web service data; design and evaluation of a self-service delivery framework.,,,Rejected
237,Construction and analysis of common foreign trade cycle based on MS-VAR: An empirical study of global experience,"Khalil, E. and Assaf, M. and Sayyad, A.S.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"In software development projects, bugs are usually accumulated and technical debt gets bigger over time. Managers decide to reduce the technical debt by planning one or more iterations for bug fixing. The time required to fix a bug depends on the required skill and the resource skill level. Managers seek to achieve fixing the highest number of bugs during the iteration while at the same time fixing the highest possible number of high severity and high priority bugs. In this study, we optimize the human resource assignment to achieve the objectives above, using multi-objective evolutionary algorithms, and then we add a fourth objective, i.e. that the bugs left out of the iteration should require the least time to finish. We show that the additional objective can be optimized without the detriment of other objectives. The lesson is that complicating the multi-objective problem formulation can help with the overall quality of the solutions. © Springer International Publishing AG 2017.",10.1007/978-3-319-66299-2_9,"Birzeit University, Ramallah, Palestine",Accepted
238,Applying design principles in practice,"de Freitas Farias, M.A. and Santos, J.A. and Kalinowski, M. and Mendonça, M. and Spínola, R.O.",Lecture Notes in Business Information Processing,2017,"In order to effectively manage technical debt (TD), a set of indicators has been used by automated approaches to identify TD items. However, some debt items may not be directly identified using only metrics collected from the source code. CVM-TD is a model to support the identification of technical debt by considering the developer point of view when identifying TD through code comment analysis. In this paper, we investigate the use of CVM-TD with the purpose of characterizing factors that affect the accuracy of the identification of TD, and the most chosen patterns by participants as decisive to indicate TD items. We performed a controlled experiment investigating the accuracy of CVM-TD and the influence of English skills and developer experience factors. We also investigated if the contextualized vocabulary provided by CVM-TD points to candidate comments that are considered indicators of technical debt by participants. The results indicated that CVM-TD provided promising results considering the accuracy values. English reading skills have an impact on the TD detection process. We could not conclude that the experience level affects this process. We identified a list of the 20 most chosen patterns by participants as decisive to indicate TD items. The results motivate us continuing to explore code comments in the context of TD identification process in order to improve CVM-TD. © Springer International Publishing AG 2017.",10.1007/978-3-319-62386-3_14,"Federal Institute of Sergipe, Lagarto, Sergipe, Brazil; Federal University of Bahia, Salvador, Bahia, Brazil; State University of Feira de Santana, Feira de Santana, Bahia, Brazil; Fluminense Federal University, Rio de Janeiro, Brazil; Fraunhofer Project Center at UFBA, Salvador, Bahia, Brazil; Salvador University, Salvador, Bahia, Brazil",Accepted
239,"Information Systems Engineering in Complex Environments, CAiSE Forum 2014","Damgård, I. and Damgård, K. and Nielsen, K. and Nordholt, P.S. and Toft, T.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"We report on the design and implementation of a system that uses multiparty computation to enable banks to benchmark their customers confidential performance data against a large representative set of confidential performance data from a consultancy house. The system ensures that both the banks and the consultancy houses data stays confidential, the banks as clients learn nothing but the computed benchmarking score. In the concrete business application, the developed prototype helps Danish banks to find the most efficient customers among a large and challenging group of agricultural customers with too much debt. We propose a model based on linear programming for doing the benchmarking and implement it using the SPDZ protocol by Damgård et al., which we modify using a new idea that allows clients to supply data and get output without having to participate in the preprocessing phase and without keeping state during the computation. We ran the system with two servers doing the secure computation using a database with information on about 2500 users. Answers arrived in about 25 s. © International Financial Cryptography Association 2017.",10.1007/978-3-662-54970-4_10,"Department of Computer Science, Aarhus University, Aarhus, Denmark; The Alexandra Institute, Aarhus, Denmark; Department of Food and Resource Economics, University of Copenhagen, Copenhagen, Denmark; Partisia, Aarhus, Denmark",Rejected
240,Sustainability debt: A metaphor to support Sustainability design decisions,"Vassallo, C. and Zampetti, F. and Romano, D. and Beller, M. and Panichella, A. and Di Penta, M. and Zaidman, A.","Proceedings - 2016 IEEE International Conference on Software Maintenance and Evolution, ICSME 2016",2017,"Continuous Delivery is an agile software development practice in which developers frequently integrate changes into the main development line and produce releases of their software. An automated Continuous Integration infrastructure builds and tests these changes. Claimed advantages of CD include early discovery of (integration) errors, reduced cycle time, and better adoption of coding standards and guidelines. This paper reports on a study in which we surveyed 152 developers of a large financial organization (ING Nederland), and investigated how they adopt a Continuous Integration and delivery pipeline during their development activities. In our study, we focus on topics related to managing technical debt, as well as test automation practices. The survey results shed light on the adoption of some agile methods in practice, and sometimes confirm, while in other cases, confute common wisdom and results obtained in other studies. For example, we found that refactoring tends to be performed together with other development activities, technical debt is almost always ""self-admitted"", developers timely document source code, and assure the quality of their product through extensive automated testing, with a third of respondents dedicating more than 50% of their time to do testing activities. © 2016 IEEE.",10.1109/ICSME.2016.72,"University of Zurich, Switzerland; University of Sannio, Italy; ING NL, Amsterdam, Netherlands; Delft University of Technology, Netherlands",Rejected
241,Examining technical debt accumulation in software implementations,"Lohokare, J. and Dani, R. and Sontakke, S.","2017 International Conference on Emerging Trends and Innovation in ICT, ICEI 2017",2017,"Financial credibility of a person is a cardinal factor in the approval of loans or permitting credit transactions. Today, this credibility is based on the 'credit score' of the person which is calculated from the person's past performance on debt obligations. This paper provides a unique alternative solution to collect this data. Harnessing the fact that almost everyone has smartphones today, there can be a smartphone application that collects all such data and submits it to the official body. Financial transactions are not the only parameters that can determine credibility of a person. This paper proposes accessing social media data to get insights into general social status of a person. Today, all transactions are conveyed by banks and other institutes to the users via SMS. Hence, having access to SMS will result to getting data related to all such transactions. The proposed solution will have smartphone application that will capture bank transaction data and data related to online purchases through SMS. Use of artificial neural networks will enable calculating the final credibility score based on the various data parameters collected. The primary contribution of this paper is that it provides a system to automatically collect all data required to calculate the credit score. What is unique in this approach is the involvement of data from social media. This approach is better than the existing solutions as it will collect data other than just transactional data thus enabling calculation of a more effective credit score. © 2017 IEEE.",10.1109/ETIICT.2017.7977024,"Department of Computer and IT, College of Engineering, Pune, India; Department of Electrical Engineering, College of Engineering, Pune, India",Rejected
242,Analyzing initial public offerings' short-term performance using decision trees and SVMs,"DOrazio, P. and Giulioni, G.",JASSS,2017,"The paper develops an agent-based model populated by heterogeneous consumers, a production sector and a banking sector. Taking a bottom up approach, the paper aims at providing a first tool to analyze households borrowing dynamics in the different phases of the business cycle by relaxing some assumptions of mainstream consumption models and considering more realistic household borrowing behaviors. Although very simple, the model allows us to grasp the main implications of the interaction between consumers wants (desired consumption), consumers beliefs (their expectations about their future income), the behavior of the banking sector (rationing) and the behavior of the production sector (forecasting future demand). After presenting and discussing sensitivity analysis over a set of parameters, the paper reports simulation results and the ex-post validation by comparing artificial and empirical distributions computed using the European Household Finance and Consumption Survey data set. © 2017, University of Surrey. All rights reserved.",10.18564/jasss.3260,"Faculty of Economics and Management, Ruhr University Bochum, Univer-sitätsstraße, 150, Bochum, 44801, Germany; Department of Philosophical, Pedagogical and Economic-Quantitative Sciences, Gabriele DAnnunzio University, Pescara, 44801, Italy",Rejected
243,Practices of Software Architects in Business and Strategy-An Industry Experience Report,"De Antonio Liedo, D. and Muñoz, E.F.",International Journal of Computational Economics and Econometrics,2017,"This paper analyses the nowcasting performance of hyperparameterised dynamic regression models with a large number of variables in log levels, and compares it with state-of-the-art methods for nowcasting.We deal with the 'curse of dimensionality' by exploiting prior information originating in the Bayesian VAR literature. The real-time forecast simulation conducted over the most severe phase of the Great Recession shows that our method yields reliable GDP predictions almost one and a half months before the official figures are published. The usefulness of our approach is confirmed in a genuine out-of-sample evaluation over the European sovereign debt crisis and subsequent recovery. Copyright © 2017 Inderscience Enterprises Ltd.",10.1504/IJCEE.2017.080667,"National Bank of Belgium, Research and Development (Statistics), Boulevard de Berlaimont 14, Brussels, 1000, Belgium; I.E.S. Brianda de Mendoza, Economics Department, Calle de Los Hermanos, Fernández Galiano 6, Guadalajara, 19004, Mexico",Rejected
244,Comparing four approaches for technical debt identification,"Naifar, N.","Proceedings of the 30th International Business Information Management Association Conference, IBIMA 2017 - Vision 2020: Sustainable Economic development, Innovation Management, and Global Growth",2017,"The primary objective of this paper is to present the social impact of an innovative partnership (Musharaka) sukuk structure that combines the best features of debt and equities. This structure is developed by the Islamic Development Bank (IDB), SABIC Chair for Islamic Financial Markets, the International Shariah Research Academy (ISRA) and the specialist Islamic finance law firm, Agha & CoWe study the implications of this new faith-based investing as a powerful tool enhancing Islamic and ethical aspects of corporate governance, mitigating moral hazard problem and promoting risk-sharing principle (a necessary form of purification and redistribution of wealth). The secondary objective of this paper is to propose a pricing methodology for MLP Musharaka sukuk (hereafter MLP sukuk) with an empirical illustration. This study is relevant and valuable to faith-based investors, sukuk market development and Islamic corporate financing decisions. © 2017 International Business Information Management Association IBIMA. All Rights Reserved.",,"Department of Finance and Investment, College of Economics and Administrative Sciences, Al Imam Mohammad Ibn Saud Islamic University (IMSIU), PO Box 5701, Riyadh, Saudi Arabia",Rejected
245,On the stability of receding horizon control for continuous-time stochastic systems,"Welburn, J.W. and Hausken, K.",Computational Economics,2017,"A game theoretic model of six kinds of players is analyzed, i.e. countries, central banks, banks, firms, households, and financial inter-governmental organizations. Each player has a strategy set, with strategies such as setting interest rates, lending, borrowing, producing, consuming, investing, importing, exporting, defaulting, and penalizing default. Markets for goods, debt, and capital are modeled endogenously. This conceptualization of strategic opportunities for as many as six types of players is richer than anything that has been attempted earlier. 20052011 empirical data for Greece is used to analyze how utility is impacted by public consumption and lump sum transfers, and negative productivity shocks, and to analyze equilibrium over several time periods with and without the possibility of default. 20072008 empirical data for Greece and Germany is used to determine how the two countries utilities depend on Greeces public 2007 consumption, with and without negative productivity shocks. Greeces high debt burden is shown to make default optimal when productivity shocks are large and the default penalty is small. We find that Germany has limited ability, through its available strategies, to prevent a Greek default, and may need to resort to unconventional tools such as debt forgiveness and changing the default penalty. © 2015, Springer Science+Business Media New York.",10.1007/s10614-015-9542-3,"Department of Industrial Engineering, University of Wisconsin-Madison, 1550 Engineering Drive, Room 3158, Madison, WI  53706, United States; Faculty of Social Sciences, University of Stavanger, Stavanger, 4036, Norway",Rejected
246,"Institutional environment, debit ratio, and enterprise performance-evidence listed companies in China","Korotin, V. and Ulchenkov, A. and Islamov, R.",Computational Economics,2017,"The issue of discovering an optimal debt portfolio in case of oil company under oil price uncertainty is considered in the paper. New algorithm to build optimal debt structure is proposed. It is shown that optimal portfolio reduces financial risk in case of oil price uncertainty. Non-parametric approximation is used to describe functional relationship between US dollar and Russian ruble, considered as commodity currency. © 2016, Springer Science+Business Media New York.",10.1007/s10614-015-9555-y,"Corporate Finance Department, JSC NK RussNeft, 69, Pyatnitskaya Street, Moscow, 115054, Russian Federation; International Centre for Nuclear Safety, 2/8, Krasnoselskaya M. Street, Moscow, Russian Federation",Rejected
247,Applying metrics to identify and monitor technical debt items during software evolution,"Bheemaiah, K.",The Blockchain Alternative: Rethinking Macroeconomic Policy and Economic Theory,2017,"Examine what would happen if we were to deploy blockchain technology at the sovereign level and use it to create a decentralized cashless economy. This book explains how finance and economics work today, and how the convergence of various technologies related to the financial sector can help us find solutions to problems, such as excessive debt creation, banks getting too big to fail, and shadow banking. The Blockchain Alternative offers sensible corrections to outdated and incorrect dogmas, such as the efficient markets hypothesis and rational expectations theory. You'll also be introduced to universal basic income, the consequences of going cashless, why complexity economics needs to be understood and what kinds of tools and theories you'll need to redefine the existing definition of capitalism. While the book does discuss technologies and methods that are primed for our future, a number of references are made to economic history and the works of great thinkers from a different era. You'll see how the blockchain can be used to deploy solutions that were devised in the past, but which can serve as the antidote to our current economic malaises. You'll discover that what is required today is not an adaptation of the old theories, but a new methodology that is suited to this new era. Without undertaking such an endeavor, one will always be burdened with a definition of capitalism that is out of kilter with the evolution of our digital humanity. What would this mean to monetary and fiscal policy, market structure and our current understanding of economics? More importantly would we need to change our current understanding of capitalism? And if we were to change our perceptions, what would the future version look like? This book answers these questions, and analyses some of the most pertinent issues of our generation. © 2017 by Kariappa Bheemaiah. All rights reserved.",10.1007/978-1-4842-2674-2,"StartupBootCamp, Paris, France; Cambridge Judge Business School, United Kingdom; ESCP Europe, France; GEM, France; Uchange, France",Rejected
248,Refactoring for Software Design Smells: Managing Technical Debt,"Rigatos, G.G.",Intelligent Systems Reference Library,2017,"The chapter proposes a systematic method for forecasting default probabilities for financial firms with particular interest in electric power corporations. According to credit risk theory a companys closeness to default is determined by the distance of its assets value from its debts. The assets value depends primarily on the companys market (option) value through a complex nonlinear relation. By forecasting with accuracy the enterprizes option value it becomes also possible to estimate the future value of the enterprizes asset value and the associated probability of default. This chapter proposes a systematic method for forecasting the probability to default for companies (option/asset value forecasting methods) using a new nonlinear Kalman Filtering method under the name Derivative-free nonlinear Kalman Filter. The firms option value is considered to be described by the Black-Scholes nonlinear partial differential equation. Using differential flatness theory, the partial differential equation is transformed into an equivalent state-space model in the so-called canonical form. Using the latter model and by redesigning the Derivative-free nonlinear Kalman Filter as a m-step ahead predictor, estimates are obtained of the companys future option values. By forecasting the companys market (option) values, it becomes also possible to forecast the associated asset value and volatility and finally to estimate the companys future default risk. © Springer International Publishing AG 2017.",10.1007/978-3-319-52866-3_8,"Unit of Industrial Automation, Industrial Systems Institute, Rion, Patras, Greece",Rejected
249,Toward design decisions to enable deployability: Empirical study of three projects reaching for the continuous delivery holy grail,,CIbSE 2017 - XX Ibero-American Conference on Software Engineering,2017,"The proceedings contain 64 papers. The topics discussed include: automated structural software testing of autonomous vehicles; supporting assessment and improvement of software development processes using model transformations; logical unified modeling for NoSQL databases; using voice commands for UML modelling support on interactive whiteboards: insights and experiences; toward technical debt aware software modeling; teaching of agile UML modelling: recommendations from students' reflections; an enhanced evaluation model for search-based product line architecture design; towards the predictive performance analysis of adaptive systems with emotions; family of strategies for different evaluation purposes; time to pay up - technical debt from a software quality perspective; so little value a multi-case study on improving the impact of data-driven development practices; a survey on preferences of quality attributes in the decision-making for self-adaptive and self-managed systems: the bad, the good and the ugly; requirements engineering for robotic system: a systematic mapping study; requirements engineering practice and problems in agile projects: results from an international survey; retrospective and trends in requirements engineering for embedded systems: a systematic literature review; and limiting the scope of the domain language to build user stories.",,,Rejected
250,International call fraud detection systems and techniques,"Rojas, G. and Izurieta, C. and Griffith, I.",CIbSE 2017 - XX Ibero-American Conference on Software Engineering,2017,"Over the last decade, the technical debt metaphor has gained in populari-ty, and many tools exist today that can calculate the debt associated with a miscella-ny of source code. However, no corpus of studies has investigated the effects that creation and refactoring of conceptual models have on technical debt of correspond-ing code. Our work addresses this fundamental gap by first providing a map of cor-respondences between recognized model smells of UML Class Diagrams and Java source code issues. We then describe a set of empirical studies to calculate the tech-nical debt of generated source code as a result of refactorings performed on their corresponding models. Our results reveal a significant disconnect between model smells and technical debt values of resultant generated source code, and little effect of model refactorings on reducing these values. However, once correspondences be-tween model smells and code issues are defined, model refactoring proves helpful in preventing technical debt from a high abstraction level. We exemplify this scenario by providing an in-depth example, and conclude with a discussion of results.",,"Department of Computer Science, University of Concepción, Concepción, Chile; Department of Computer Science, Montana State University, Bozeman, United States",Accepted
251,Good debt or bad debt: Detecting semantic orientations in economic texts,"Manjarres, D. and Landa-Torres, I. and Andonegui, I.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"In the last years, default prediction systems have become an important tool for a wide variety of financial institutions, such as banking systems or credit business, for which being able of detecting credit and default risks, translates to a better financial status. Nevertheless, small and medium-sized enterprises did not focus its attention on customer default prediction but in maximizing the sales rate. Consequently, many companies could not cope with the customers debt and ended up closing the business. In order to overcome this issue, this paper presents a novel decision support system for default prediction specially tailored for small and medium-sized enterprises that retrieves the information related to the customers in an Enterprise Resource Planning (ERP) system and obtain the default risk probability of a new order or client. The resulting approach has been tested in a Graphic Arts printing company of The Basque Country allowing taking prioritized and preventive actions with regard to the default risk probability and the customers characteristics. Simulation results verify that the proposed scheme achieves a better performance than a naïve Random Forest (RF) classification technique in real scenarios with unbalanced datasets. © Springer International Publishing AG 2017.",10.1007/978-3-319-59060-8_48,"TECNALIA, Derio, 48160, Spain; Department of Applied Physics I, University of the Basque Country UPV/EHU, Bilbao, 48013, Spain",Rejected
252,"Behavior, organization, substance: Three gestalts of general systems theory",,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"The proceedings contain 15 papers. The special focus in this conference is on Software Architecture. The topics include: Synthesis and quantitative verification of tradeoff spaces for families of software systems; PARAD repository: on the capitalization of the performance analysis process for AADL designs; continuous rearchitecting of QoS models: collaborative analysis for uncertainty reduction; the evolution of technical debt in the apache ecosystem; preventing erosion in exception handling design using static-architecture conformance checking; considerations about continuous experimentation for resource-constrained platforms in self-driving vehicles; an architecture framework for modelling and simulation of situational-aware cyber-physical systems; control of self-adaptation under partial observation; on cognitive biases in architecture decision making; automatic extraction of design decisions from issue management systems; design areas, stakeholders, use cases, and requirements; software architecture risk containers; a model for prioritization of software architecture effort; architectural assumptions and their management in industry - an exploratory study; microservices in a small development organization.",,,Rejected
253,Investor relations on the internet: An empirical study on Chinese listed companies,"Guaman, D. and Sarmiento, P.A.-Q. and Barba-Guamán, L. and Cabrera, P. and Enciso, L.","2017 7th International Workshop on Computer Science and Engineering, WCSE 2017",2017,"Technical Debt (TD), also known as technical debt design or technical debt code, analyze the consequence that could have a system once it has been designed architecturally, coding or implemented. TD refers to work to be performed rather than software design or coding is considered complete or correct. Static analysis is a technique to identify and analyze software characteristics from source code; through static analysis we can identify elements such as packages, classes, relationships, lines of code (LOC's), bugs, complexity, coding violations and others. In addition, subsystems, components and their relationships supported by tools, algorithms, frameworks to analyze the code were identified. SQALE is a quality and analysis model contains the internal properties expected from the code in the context of the evaluation, it has been used to perform many assessments of software source code, of various sizes in different application domains and programming language. SonarQube is an open source platform to manage the source code quality, this cover seven axes of code quality among which stand: architecture and design, duplications, unit test, complexity, potential bugs, codifications rules, comments, among others; this platform work with over 20 programming languages. This paper, use as input the source code of the software applications written in different programming language for through static analysis identify metrics, characteristics, and technical debt with the aim to improve the quality when writing code, also supported in static analysis identify aspects such as correct apply of quality attributes, standards and best practices of programming that based in ISO 9126 and SQALE ensure the correct software development in terms of design and coding.",,"Departamento de Ciencias de la Computatión y Electrónica, Grupo Innovatión Tecnológica Educativa (GITE), Escuela de Informatica y Multimedia, Universidad Tecnica Particular de Loja, Ecuador; Departamento de Ciencias de la Computatión y Electrónica, Grupo Innovatión Tecnológica Educativa (GITE), Escuela de Informatica y Multimedia, Universidad International del Ecuador, Loja-Quito, Ecuador",Accepted
254,Integration Between IT Governance and Balanced Scorecard,"Balletto, G. and Garau, C.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"The purpose of this paper is to identify environmental issues related to the geo-resources demand, which arises by the new context of the metropolitan city of Cagliari, in the framework of the existing environmental and place-based policies. This is achieved through the correlation of the main planning tools (the Regional Plan of Extractive Activities [RPEA] for geo-resources planning sector, and the urban masterplan [UMP] for urban planning sector), in order to identify environmental indicators, useful for monitoring and for decision support systems. This comparison defined a new integrated methodological approach between urban, place-based and environmental policies, referring to geo-resources planning, in line with the newest paradigm of smart region and of the panarchy process. This approach allowed to evaluate the delayed impacts of UMPs, and its environmental impacts, resulting from the quarry activities of geo-resources (such as natural aggregates). In fact, quarry activity is the leading effect in UMPs (because the materials of construction are obtained principally by it), and it simultaneously decreases the environmental sustainability, increasing the environmental debt. © Springer International Publishing AG 2017.",10.1007/978-3-319-62398-6_26,"DICAAR  Department of Civil and Environmental Engineering and Architecture, University of Cagliari, Cagliari, Italy",Rejected
255,Dealing with Technical Debt in agile development projects,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,The proceedings contain 22 papers. The special focus in this conference is on Conceptual Modeling. The topics include: Towards an ontology for strategic decision making: The Case of quality in rapid software development projects; detecting bad smells of refinement in goal-oriented requirements analysis; Requirements engineering for data warehouses (RE4DW): From strategic goals to multidimensional model; towards formal strategy analysis with goal models and semantic web technologies; assisting process modeling by identifying business process elements in natural language texts; Using multidimensional concepts for detecting problematic Sub-KPIs in analysis systems; automatically annotating business process models with ontology concepts at design-time; OPL-ML: A modeling language for representing ontology pattern languages; Evaluating quality issues in BPMN models by extending a technical debt software platform; data modelling for dynamic monitoring of vital signs: Challenges and perspectives; utility-driven data management for data-intensive applications in fog environments; Assessing the positional planimetric accuracy of DBpedia georeferenced resources; Assessing the completeness evolution of DBpedia: A case study; towards care systems using model-driven adaptation and monitoring of autonomous multi-clouds; clustering event traces by behavioral similarity; goal-based selection of visual representations for big data analytics; A four Vs design approach of NoSQL graph databases; towards efficient and informative omni-channel customer relationship management; stream clustering of chat messages with applications to twitch streams; towards consistent demarcation of enterprise design domains.,,,Rejected
256,Towards community-centered support for peer-to-peer service exchange: Rethinking the timebanking metaphor,"Mera-Gómez, C. and Ramírez, F. and Bahsoon, R. and Buyya, R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"Elasticity is a cloud property that enables applications and their execution systems to dynamically acquire and release shared computational resources on demand. Moreover, it unfolds the advantage of economies of scale in the cloud through a drop in the average costs of these shared resources. However, it is still an open challenge to achieve a perfect match between resource demand and provision in autonomous elasticity management. Resource adaptation decisions essentially involve a trade-off between economics and performance, which produces a gap between the ideal and actual resource provisioning. This gap, if not properly managed, can negatively impact the aggregate utility of a cloud customer in the long run. To address this limitation, we propose a technical debt-aware learning approach for autonomous elasticity management based on a reinforcement learning of debts in resource provisioning; the adaptation pursues strategic decisions that values the potential utility produced by the gaps between resource supply and demand. We extend CloudSim and Burlap to evaluate our approach. The evaluation indicates that a debt-aware elasticity management obtains a higher utility for a cloud customer, while conforming expected levels of performance. © Springer International Publishing AG 2017.",10.1007/978-3-319-69035-3_26,"School of Computer Science, University of Birmingham, Edgbaston, B15 2TT, United Kingdom; Facultad de Ingeniería en Electricidad y Computación, ESPOL Polythecnic University, Escuela Superior Politécnica del Litoral, ESPOL, Campus Gustavo Galindo Km 30.5 Vía Perimetral, P.O. Box 09-01-5863, Guayaquil, Ecuador; Cloud Computing and Distributed Systems (CLOUDS) Lab, School of Computing and Information Systems, The University of Melbourne, Melbourne, Australia",Accepted
257,Identification of refused bequest code smells,"Dai, K. and Kruchten, P.",CEUR Workshop Proceedings,2017,"Managing technical debt effectively to prevent it from accumulating too quickly is of great concern to software stakeholders. To pay off technical debt regularly, software developers must be conscious of the existence of technical debt items. The first step is to make technical debt explicit; that is the identification of technical debt. Although there exist many kinds of static source code analysis tools to identify code-level technical debt, identifying non-code-level technical debt is very challenging and needs deep exploration. This paper proposed an approach to identifying non-code-level technical debt through issue tracking data sets using natural language processing and machine learning techniques and validated the feasibility and performance of this approach using an issue tracking data set recorded in Chinese from a commercial software project. We found that there are actually some common words that can be used as indicators of technical debt. Based on these key words, we achieved the precision of 0.72 and the recall of 0.81 for identifying technical debt items using machine learning techniques respectively. Copyright © 2017 for this paper by its authors.",,"Department of Electrical and Computer Engineering, University of British Columbia, Vancouver, BC, Canada",Accepted
258,Methodology for the regulatory deflation of theweighted average cost of capital (WACC) in electricity markets,"Ciolkowski, M. and Guzmán, L. and Trendowicz, A. and Salfner, F.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"Due to cost and time constraints, software quality is often neglected in the evolution and adaptation of software. Thus, maintainability suffers, maintenance costs rise, and the development takes longer. These effects are referred to as technical debt. The challenge for project managers is to find a balance when using the given budget and schedule, either by reducing technical debt or by adding technical features. This balance is needed to keep time to market for current product releases short and future maintenance costs at an acceptable level. Method: The project ProDebt aimed at developing an innovative methodology and a software tool to support the strategic planning of technical debt in the context of agile software development. In this project, we created quality models and collected corresponding measurement data for two case studies in two different companies. Altogether, the two case studies contributed 56 years of data, from the end of 2011, resp. mid-2012, until today. Using measurement and effort data, we trained a machine-learning model to predict productivity based on measurement datarepresenting the technical debt of a file at a given point in time. Result: We developed a prototype and a prediction model for forecasting potential savings based on proposed refactorings of key drivers of technical debt identified by the model. In this paper, we present the approach and the experiences made during model development. © Springer International Publishing AG 2017.",10.1007/978-3-319-69926-4_42,"QAware GmbH, Aschauer Str. 32, Munich, 81549, Germany; Fraunhofer IESE, Fraunhofer-Platz 1, Kaiserslautern, 67663, Germany; Seerene GmbH, August-Bebel-Str. 26-53, Potsdam, 14482, Germany",Accepted
259,An approach for detecting profile cloning in online social networks,"Njima, M. and Demeyer, S.",CEUR Workshop Proceedings,2017,"This position paper addresses the software engineering practices in startups. The focus of most software engineering research has been on established companies. However, startup technology companies have become important producers of innovative and software intensive products despite the fact that they are under severe time-to-market pressure. Given that software engineering is the core activity in said startups, inadequacies in such practices might be a substantial contributing factor to this pressure to keep up with the software industry competitive needs. Startups build non-traditional business architectures by taking the easy path to find a product-market fit and thus, accumulate large amounts of technical debt. We shed light on the major efforts in the domain and indicate the research directions we plan to explore further.",,"Department of Mathematics and Computer Science, University of Antwerp, Antwerp, Belgium; Department of Mathematics and Computer Science, University of Antwerp, Antwerp, Belgium",Rejected
260,Technical debt: From source to mitigation,"Palomba, F. and Serebrenik, A. and Zaidman, A.",CEUR Workshop Proceedings,2017,"The success of software engineering projects is in a large part dependent on social and organization aspects of the development community. Indeed, it not only depends on the complexity of the product or the number of requirements to be implemented, but also on people, processes, and how they impact the technical side of software development. Social debt represents patterns across the organizational structure around a software system that may lead to additional unforeseen project costs. Condescending behavior, disgruntlement or rage quitting are just some examples of social issues that may occur among the developers of a software project. While the research community has recently investigated the underlying dynamics leading to the introduction of social debt (e.g., the so-called community smells which represent symptoms of the presence of social problems in a community), as well as how such debt can be payed off, there is still a noticeable lack of empirical evidence on how social debt impacts software maintenance and evolution. In this paper, we present our position on how social debt can impacts technical aspects of source code by presenting a road map toward a deeper understanding of such relationship.",,"Delft University of Technology, Eindhoven University of Technology, Netherlands; Eindhoven University of Technology, Netherlands; Delft University of Technology, Netherlands",Rejected
261,"A multiple case study of design pattern decay, grime, and rot in evolving software systems","Parodi, E. and Matalonga, S. and Macchi, D. and Solari, M.","Proceedings of the 2016 42nd Latin American Computing Conference, CLEI 2016",2017,"Technical Debt is a metaphor that explains a phenomenon that occurs in software development when programmers are faced with trade-off decisions (usually ship first vs. quality assurance). This work analyses the amount of technical debt incurred by undergraduate students using different coding techniques. This observational study uses source code from seventy-five students. We provided students with similar exercises to compare techniques by measuring with static code analyzers (Sonar, FindBugs). The techniques are TDD, Test Last, and ad hoc programming. Our results could not find a statistically significant difference of technical debt incurred by each development practices. Nonetheless, with both tools ad hoc programming measures less technical debt than TDD, and TDD measures less than Test Last. Furthermore, we observed that the two measurement tools outputs are not statistically correlated. Finally, we discuss implications for the research of technical debt stemming from our observations. © 2016 IEEE.",10.1109/CLEI.2016.7833380,"PEDECIBA Informática, Montevideo, Uruguay; Facultad de Ingeniería, Universidad ORT Uruguay, Montevideo, Uruguay",Rejected
262,Pricing synthetic collateralized debt obligations based on exponential approximations to the payoff function,"Ramchand, K. and Chhetri, M.B. and Kowalczyk, R.","Proceedings of the 28th Australasian Conference on Information Systems, ACIS 2017",2017,"Most organisations moving their legacy systems to the cloud base their decisions on the naive assumption that public cloud always provides cost savings, without sufficiently assessing the underlying application architecture, and the technical and financial constraints that it imposes on the chosen cloud architecture. This can lead to undesirable consequences including project delays, budget overruns, below-par performance, application instability and creation of technical debt. In this paper, we address the shortcomings of this assumption by proposing a structured yet flexible decision framework comprising models, guidelines, tools and calculators that enables IT and/or business practitioners to make the correct architectural decision between public, private and hybrid cloud, from a functional, non-functional and financial perspective, based on the application architecture. By treating the application architecture as a first-class citizen in the decision making process, our proposed framework ensures that business and technical stakeholders make the correct decision early on in the migration process, resulting in timely deployment and quality-assured provision of critical business functions, minimization of waste, and avoidance of rework. We use a sample scenario to illustrate the need and usefulness of such a decision framework. © ACIS 2017.",,"School of Computer Science and Software Engineering, Swinburne University of Technology, Melbourne, Australia; Systems Research Institute Polish Academy of Sciences, Warsaw, Poland",Accepted
263,"16th International Conference on Knowledge-Based and Intelligent Information and Engineering Systems, KES 2012","Fernández-Sánchez, C. and Garbajosa, J. and Yagüe, A. and Perez, J.",Journal of Systems and Software,2017,"Technical debt, a metaphor for the long-term consequences of weak software development, must be managed to keep it under control. The main goal of this article is to identify and analyze the elements required to manage technical debt. The research method used to identify the elements is a systematic mapping, including a synthesis step to synthesize the elements definitions. Our perspective differs from previous literature reviews because it focused on the elements required to manage technical debt and not on the phenomenon of technical debt or the activities used in performing technical debt management. Additionally, the rigor and relevance for industry of the current techniques used to manage technical debt are studied. The elements were classified into three groups (basic decision-making factors, cost estimation techniques, practices and techniques for decision-making) and mapped according three stakeholders points of view (engineering, engineering management, and business-organizational management). The definitions, classification, and analysis of the elements provide a framework that can be deployed to help in the development of models that are adapted to the specific stakeholders interests to assist the decision-making required in technical debt management and to assess existing models and methods. The analysis indicated that technical debt management is context dependent. © 2016 Elsevier Inc.",10.1016/j.jss.2016.10.018,"Technical University of Madrid (UPM), CITSEM, ctra. de Valencia Km7, Madrid, E-28031, Spain; Technical University of Madrid (UPM), ETSISI, ctra. de Valencia Km7, Madrid, E-28031, Spain",Rejected
264,Design and Development of an IoT Based Smart Irrigation and Fertilization System for Chilli Farming,"Bolo?, M.I. and Sab?u-Popa, D.C.",International Journal of Fuzzy Systems,2017,"This study is part of research from corporate governance domain, knowing that one of the major concerns of stakeholders is to identify decisions that ensure adequate control over costs and hence over the risk of cash flow, in order to ensure a high level of performance. The immediate consequence is that the decision to control the risk of cash flow has impact on the market value of the listed companies. In this context, the paper addresses the issue of cash flow risk in terms of leverage, except that the debt service of a company is often a fixed cost and the company has a certain level of affordability of this cost. This level of cost affordability for capital is determined by the existence of the free cash flow available for being used in subsequent reimbursement of the borrowed capital. Moreover, since the free cash flow has a certain evolution during the period the capital has to be repaid, the question of maintaining security in the debt service of free cash flow is raised. The objective of this study is achieved using a fuzzy adaptive controller. © 2016, Taiwan Fuzzy Systems Association and Springer-Verlag Berlin Heidelberg.",10.1007/s40815-016-0159-z,"Department of Finance and Accounting, University of Oradea, Oradea, Romania",Rejected
265,An Adaptive algorithm to predict bad debts during COVID-19 Pandemic,"Sermpinis, G. and Stasinakis, C. and Rosillo, R. and de la Fuente, D.",European Journal of Operational Research,2017,"In this paper, two different Locally Weighted Support Vector Regression (wSVR) algorithms are generated and applied to the task of forecasting and trading five European Exchange Traded Funds. The trading application covers the recent European Monetary Union debt crisis. The performance of the proposed models is benchmarked against traditional Support Vector Regression (SVR) models. The Radial Basis Function, the Wavelet and the Mahalanobis kernel are explored and tested as SVR kernels. Finally, a novel statistical SVR input selection procedure is introduced based on a principal component analysis and the Hansen, Lunde, and Nason (2011) model confidence test. The results demonstrate the superiority of the wSVR models over the traditional SVRs and of the v-SVR over the ?-SVR algorithms. We note that the performance of all models varies and considerably deteriorates in the peak of the debt crisis. In terms of the kernels, our results do not confirm the belief that the Radial Basis Function is the optimum choice for financial series. © 2016 Elsevier B.V.",10.1016/j.ejor.2016.09.005,"University of Glasgow Business School, University of Glasgow, Adam Smith Building, Glasgow, G12 8QQ, United Kingdom; Business and Management Department, University of León, Campus de Vegazana s/n, León, 24071, Spain; Business and Management Department, University of Oviedo, Campus de Viesques s/n, Gijón, 33204, Spain",Rejected
266,Training needs of farmers in adoption of groundnut production technologies in Ariyalur district of Tamil Nadu,"Delplanque, J. and Etien, A. and Auverlot, O. and Mens, T. and Anquetil, N. and Ducasse, S.","SANER 2017 - 24th IEEE International Conference on Software Analysis, Evolution, and Reengineering",2017,"Relational databases (DB) play a critical role in many information systems. For different reasons, their schemas gather not only tables and columns but also views, triggers or stored functions (i.e., fragments of code describing treatments). As for any other code-related artefact, software quality in a DB schema helps avoiding future bugs. However, few tools exist to analyse DB quality and prevent the introduction of technical debt. Moreover, these tools suffer from limitations like the difficulty to deal with some entities (e.g., functions) or dependencies between entities. This paper presents research issues related to assessing the software quality of a DB schema by adapting existing source code analysis research to database schemas. We present preliminary results that have been validated through the implementation of DBCritics, a prototype tool to perform static analysis on the SQL source code of a database schema. DBCritics addresses the limitations of existing DB quality tools based on an internal representation considering all entities of the database and their relationships. © 2017 IEEE.",10.1109/SANER.2017.7884648,"Université de Lille, CRIStAL, CNRS, UMR 9189, France; RMoD Team, Inria Lille Nord Europe, France; Software Engineering Lab, Université de Mons, Belgium",Accepted
267,Real-time crop monitoring in agriculture,"Charalampidou, S. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.",ACM International Conference Proceeding Series,2017,"An important parameter in deciding to eliminate technical debt (TD) is the probability of a module to generate interest along software evolution. In this study, we explore code smells, which according to practitioners are the most commonly occurring type of TD in industry, by assessing the associated interest probability. As a proxy of smell interest probability we use the frequency of smell occurrences and the change proneness of the modules in which they are identified. To achieve this goal we present a case study on 47,751 methods extracted from two well-known open source projects. The results of the case study suggest that: (a) modules in which ""code smells"" are concentrated are more change-prone than smell-free modules, (b) there are specific types of ""code smells"" that are concentrated in the most change-prone modules, and (c) interest probability of code clones seems to be higher than the other two examined code smells. These results can be useful for both researchers and practitioners, in the sense that the former can focus their research on resolving ""code smells"" that produce more interest, and the latter can improve accordingly the prioritization of their repayment strategy and their training. © 2017 Association for Computing Machinery.",10.1145/3120459.3120465,"Department of Mathematics and Computer Science, University of Groningen, Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
268,An improved boosting based on feature selection for corporate bankruptcy prediction,"Martini, A. and Bosch, J.",ACM International Conference Proceeding Series,2017,"The interest of Technical Debt is difcult to assess. The negative efects (severity) of Technical Debt might depend on the context of the organization and the estimations might be subjective. There is a need for assessing Technical Debt interest in a more systematic way. Based on the results of previous research, we have developed and used a lightweight tool, AnaConDebt, to assess the severity of the interest of 9 Technical Debt items with the stakeholders in 3 Agile teams. The systematic and semi-automatic assessment of seven factors and their growth has been compared to the stakeholders' intuitive estimations. The results show that the outcome of the tool is very close to the estimation given by the stakeholders. The implications are that, if further data support the hypothesis, the severity of the interest can be systematically assessed by the stakeholders by estimating only seven factors in a cost-efective manner with acceptable results. © 2017 Association for Computing Machinery.",10.1145/3120459.3120467,"Chalmers University of Technology, Gothenburg, Sweden",Accepted
269,Themis-1: An agent-based model of a modern monetary reserve system,"Fontana, F.A. and Trumler, W. and Izurieta, C. and Nord, R.L.",ACM International Conference Proceeding Series,2017,"Welcome to the Ninth International Workshop on Managing Technical Debt, collocated with the 18th International Conference on Agile Software Development (XP 2017) in Cologne. The technical debt research community continues to expand through collaborations of industry, tool vendors, and academia. The main topic of this year's workshop was on the impact of agile development approaches towards the management of technical debt. © 2017 Association for Computing Machinery.",10.1145/3120459.3120461,"Università degli Studi di Milano-Bicocca, Milano, Italy; Corporate Technology, Siemens AG, Erlangen, Germany; Montana State University, Bozeman, MT, United States; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States",Rejected
270,A fuzzy cognitive map system to explore the repercussions of Greek PSI and Bank recapitalization on the Cyprus economy,"Amanatidis, T. and Ampatzoglou, A. and Chatzigeorgiou, A. and Stamelos, I.",ACM International Conference Proceeding Series,2017,"Technical debt (TD) impedes software projects by reducing the velocity of development teams during software evolution. Although TD is usually assessed on either the entire system or on individual software artifacts, it is the actual craftsmanship of developers that causes the accumulation of TD. In the light of extremely high maintenance costs, efficient software project management cannot occur without recognizing the relation between developer characteristics and the tendency to evoke violations that lead to TD. In this paper, we investigate three research questions related to the distribution of TD among the developers of a software project, the types of violations caused by each developer and the relation between developers' maturity and the tendency to accumulate TD. The study has been performed on four widely employed PHP open-source projects. All developers' personal characteristics have been anonymized in the study. © 2017 ACM.",10.1145/3120459.3120464,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Computer Science, Aristotle University of Thessaloniki, Thessaloniki, Greece",Accepted
271,The role of information systems to prevent the impairment of asset quality in the banks balance sheet. An Italian case study,"Haendler, T. and Sobernig, S. and Strembeck, M.",ACM International Conference Proceeding Series,2017,"Managing technical debt includes the detection and assessment of debt at the code and design levels (such as bad smells). Existing approaches and tools for smell detection primarily use static program data for decision support. While a static analysis allows for identifying smell candidates without executing and instrumenting the system, such approaches also come with the risk of missing candidates or of producing false positives. Moreover, smell candidates might result from a deliberate design decision (e.g., of applying a particular design pattern). Such risks and the general ambivalence of smell detection require a manual design and/or code inspection for reviewing all alleged smells. In this paper, we propose an approach to obtain tailorable design documentation for object-oriented systems based on runtime tests. In particular, the approach supports a tool-supported triaging of code-smell candidates. We use runtime scenario tests to extract execution traces. Based on these execution traces, different (automatically derived) model perspectives on method-call dependencies (e.g., dependency structure matrices, DSMs; UML2 sequence diagrams) are then used as decision support for assessing smell candidates. Our approach is implemented as part of the KaleidoScope tool which is publicly available for download. © 2017 Copyright held by the owner/author(s). Publication rights licensed to Association for Computing Machinery.",10.1145/3120459.3120468,"WU Vienna, Austria; Secure Business Austria, Complexity Science Hub Vienna, Austria",Accepted
272,Feasibility study for banking loan using association rule mining classifier,"Palomba, F. and Zaidman, A. and Oliveto, R. and De Lucia, A.",IEEE International Conference on Program Comprehension,2017,"Refactoring aims at improving the internal structure of a software system without changing its external behavior. Previous studies empirically assessed, on the one hand, the benefits of refactoring in terms of code quality and developers' productivity, and on the other hand, the underlying reasons that push programmers to apply refactoring. Results achieved in the latter investigations indicate that besides personal motivation such as the responsibility concerned with code authorship, refactoring is mainly performed as a consequence of changes in the requirements rather than driven by software quality. However, these findings have been derived by surveying developers, and therefore no software repository study has been carried out to corroborate the achieved findings. To bridge this gap, we provide a quantitative investigation on the relationship between different types of code changes (i.e., Fault Repairing Modification, Feature Introduction Modification, and General Maintenance Modification) and 28 different refactoring types coming from 3 open source projects. Results showed that developers tend to apply a higher number of refactoring operations aimed at improving maintainability and comprehensibility of the source code when fixing bugs. Instead, when new features are implemented, more complex refactoring operations are performed to improve code cohesion. Most of the times, the underlying reasons behind the application of such refactoring operations are represented by the presence of duplicate code or previously introduced self-admitted technical debts. © 2017 IEEE.",10.1109/ICPC.2017.38,"Delft University of Technology, Netherlands; University of Salerno, Italy; University of Molise, Italy",Rejected
273,Would two-stage scoring models alleviate bank exposure to bad debt?,"Arvanitou, E.-M. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.",ACM International Conference Proceeding Series,2017,"Change proneness is a quality characteristic of software artifacts that represents their probability to change in the future due to: (a) evolving requirements, (b) bug fixing, or (c) ripple effects. In the literature, change proneness has been associated with many negative consequences along software evolution. For example, artifacts that are change-prone tend to produce more defects, and accumulate more technical debt. Therefore, identifying and monitoring modules of the system that are change-prone is of paramount importance. Assessing change proneness requires information from two sources: (a) the history of changes in the artifact as a proxy of how frequently the artifact itself is changing, and (b) the source code structure that affects the probability of a change being propagated among artifacts. In this paper, we propose a method for assessing the change proneness of classes based on the two aforementioned information sources. To validate the proposed approach, we performed a case study on five open-source projects. Specifically, we compared the accuracy of the proposed approach to the use of other software metrics and change history to assess change proneness, based on the 1061-1998 IEEE Standard on Software Measurement. The results of the case study suggest that the proposed method is the most accurate and reliable assessor of change proneness. The high accuracy of the method suggests that the method and accompanying tool can effectively aid practitioners during software maintenance and evolution. © 2017 Association for Computing Machinery ACM.",10.1145/3084226.3084239,"Department of Mathematics and Computer Science, University of Groningen, Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
274,Analysis of Nonperforming Debts Impact on Profitability and Liquidity of Some Iraqi Commercial Banks for the Period between 2011-2018,"Skourletopoulos, G. and Mavromoustakis, C.X. and Mastorakis, G. and Sahalos, J.N. and Batalla, J.M. and Dobre, C.","Proceedings of the 14th International Conference on Telecommunications, ConTEL 2017",2017,"The lack of models to aid the technical debt estimation and monitoring in cloud architectures motivates the need to develop a technical debt management (TDM) theory and practical approach for effective management decision making. The cloud is a marketplace in which services and resources are leased off based on the volume of data and the number of cloud-oriented users, which affect the accuracy of the technical debt measurement. In this research paper, we propose a game theoretic formulation of the technical debt management problem on cloud-based service level. A technical debt measurement game is constructed, parameterizing the current number of players per service, while each new end-user can choose any of the offered cloud-based services. In this direction, a technical debt-inspired throttling mechanism is also discussed for resource leasing optimization and scalability. The validation tests verify the effectiveness of our approach in real-world operations, avoiding accumulated technical debt and optimizing available resources in cloud-centric systems. © 2017 University of Zagreb, Faculty of Electrical Engineering and Computing.",10.23919/ConTEL.2017.8000012,"Mobile Systems Laboratory (MoSys Lab), Department of Computer Science, University of Nicosia, Nicosia, Cyprus; Department of Informatics Engineering, Technological Educational Institute of Crete, Heraklion, Crete, Greece; Radio-Communications Laboratory (RCLab), Department of Physics, Aristotle University of Thessaloniki, Thessaloniki, Greece; National Institute of Telecommunications, Warsaw University of Technology, Szachowa Str. 1 and Nowowiejska Str. 15/19, Warsaw, Poland; Department of Compu",Accepted
275,A Data Slicing Method to Improve Machine Learning Model Accuracy in Bankruptcy Prediction,"Mohagheghi, P. and Aparicio, M.E.",Information and Software Technology,2017,"Context Eliciting, managing and implementing product quality requirements (in-short quality requirements) in a large organization can be challenging when many stakeholders are involved and projects run in parallel; sometimes with varying priorities with regards to quality. In this case from a public organization in Norway, the separation between business units and the IT-department and the legacy burden are additional factors that increase the complexity of requirement management. Objective This paper presents results and experiences from three years long work with quality requirements, starting from ad-hoc handling of quality requirements in separate projects to systematic work across projects with reusable sets of requirements and processes. Method We present how quality requirements are captured and classified, as well as changes to the agile software development process as a consequence of increasing focus on product quality. Results The ISO/IEC-25010:2011 standard is tailored for better context fit and is supported by concrete requirements and a methodology that covers the life cycle of software products in both greenfield and brownfield projects. In addition, the organization had to examine the current state of existing IT-capabilities in order to establish a quality baseline for future development, and develop shared vision and roadmaps for product quality. Conclusions In our experience, stakeholders prefer an iterative and lightweight approach in eliciting and refining quality requirements. The classification model and requirement lists are used as guidelines in requirement workshops. The developed terminology, updated templates and processes are reusable in projects and generalizable to different contexts, and are well adopted by the IT and business units. © 2017 Elsevier B.V.",10.1016/j.infsof.2017.04.002,"Norwegian Labour and Welfare Administration, Oslo, 0130, Norway; Miles Oslo AS, Oslo, Norway",Rejected
276,Agricultural crisis and farmers suicides in India,"Devicienti, F. and Manello, A. and Vannoni, D.",European Journal of Operational Research,2017,"This paper explores the link between the presence of unions in the workplace, the adoption of decentralized labor agreements and technical efficiency, using a large sample of Italian manufacturing firms. We apply the Data Envelopment Analysis, and its robust version based on bootstrap theory, to get reliable estimates of technical efficiency at the firm level in a standard first stage. We devote particular attention to the specific technology adopted, by distinguishing 20 different sector frontiers, as well as to the presence of outliers. The obtained efficiency scores are analyzed in a second stage applying a truncated regression model estimated via Maximum Likelihood, following the Simar and Wilson (2007, 2011) methodology. Our results highlight that the presence of workplace unionization decreases the level of technical efficiency, while aspects limiting the unions power such as a strong exposure to international markets, high debt levels or the prevalence of flexible assets partially reduce the negative effect. However, when firms adopt decentralized labor contracts agreements, the effect on efficiency is positive and partially compensates the negative unions effect. © 2017 Elsevier B.V.",10.1016/j.ejor.2017.01.022,"Department of Economics, Mathematics and Statistics (ESOMAS), University of Turin, Corso Unione Sovietica 218 bis, Turin, Italy; Collegio Carlo Alberto, Via Real Collegio, 30, Moncalieri, 10024, Italy; CNR-IRCrES, National Research Council of Italy - Research Institute on Sustainable Economic Growth, via Real Collegio 30, Moncalieri, 10024, Italy",Rejected
277,Online Engagement and Impact: The Case of Greek Politicians during the Financial Crisis,"Engwerda, J.C.",Optimal Control Applications and Methods,2017,"This paper reconsiders existence of worst-case Nash equilibria in noncooperative multi-player differential games, this, within an open-loop information structure. We show that these equilibria can be obtained by determining the open-loop Nash equilibria of an associated differential game with an additional initial state constraint. For the special case of linear-quadratic differential games, we derive both necessary and sufficient conditions for solvability of the finite planning horizon problem. In particular, we demonstrate that, unlike in the standard linear-quadratic differential game setting, uniqueness of equilibria may fail to hold. A both necessary and sufficient condition under which there is a unique equilibrium is provided. A sufficient existence condition for a unique equilibrium is derived in terms of a Riccati differential equation. Consequences for control policies are demonstrated in a simple debt stabilization game. © 2016 The Authors. Optimal Control Applications and Methods published by John Wiley & Sons, Ltd. 2016 The Authors. Optimal Control Applications and Methods published by John Wiley & Sons, Ltd.",10.1002/oca.2290,"Department of Econometrics and O. R., Tilburg University, PO Box 90153, Tilburg, 5000 LE, Netherlands",Rejected
278,A distributed algorithm for systemic risk mitigation in financial systems,"Baylor, D. and Breck, E. and Cheng, H.-T. and Fiedel, N. and Foo, C.Y. and Haque, Z. and Haykal, S. and Ispir, M. and Jain, V. and Koc, L. and Koo, C.Y. and Lew, L. and Mewald, C. and Modi, A.N. and Polyzotis, N. and Ramesh, S. and Roy, S. and Whang, S.E. and Wicke, M. and Wilkiewicz, J. and Zhang, X. and Zinkevich, M.",Proceedings of the ACM SIGKDD International Conference on Knowledge Discovery and Data Mining,2017,"Creating and maintaining a platform for reliably producing and deploying machine learning models requires careful orchestration of many components - a learner for generating models based on training data, modules for analyzing and validating both data as well as models, and finally infrastructure for serving models in production. This becomes particularly challenging when data changes over time and fresh models need to be produced continuously. Unfortunately, such orchestration is often done ad hoc using glue code and custom scripts developed by individual teams for specific use cases, leading to duplicated effort and fragile systems with high technical debt. We present TensorFlow Extended (TFX), a TensorFlow-based general-purpose machine learning platform implemented at Google. By integrating the aforementioned components into one platform, we were able to standardize the components, simplify the platform configuration, and reduce the time to production from the order of months to weeks, while providing platform stability that minimizes disruptions. We present the case study of one deployment of TFX in the Google Play app store, where the machine learning models are refreshed continuously as new data arrive. Deploying TFX led to reduced custom code, faster experiment cycles, and a 2% increase in app installs resulting from improved data and model analysis. © 2017 Copyright held by the owner/author(s).",10.1145/3097983.3098021,"Google Inc., United States",Rejected
279,Financial agency FINA and online auctions in croatian amended distraint act,"Besker, T. and Martini, A. and Bosch, J.","Proceedings - 43rd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2017",2017,"The negative consequences of Technical Debt is an area of increasing interest, and more specifically the Architectural aspects of it have received increased attention in the last few years. Besides the negative effects of Architectural Technical Debt on the overall software product quality in terms of hindering evolution and causing high maintenance costs, Architectural Technical Debt also has a significant negative impact on software practitioners' daily work. Although a great deal of theoretical work on Architectural Technical Debt has been undertaken, there is a lack of empirical studies that examine the negative effects of Architectural Technical Debt during the software development lifecycle. The aim of this study is to investigate how practitioners perceive and estimate the impact of Architectural Technical Debt during the software development process. This paper reports the results of an online web survey providing quantitative data from 258 participants. The contribution of this paper is threefold: First, it shows that practitioners experience that the Architectural type of Technical Debt has the highest negative impact on daily software development work. Secondly, we provide evidence that does not support the commonly held belief that Architectural Technical Debt increases with the age of the software. Thirdly, we show that despite different responsibilities and working tasks of software professionals, Architectural Technical Debt negatively affects all roles without any significant difference between the roles. © 2017 IEEE.",10.1109/SEAA.2017.16,"Computer Science and Engineering, Chalmers University of Technology, G'teborg, Sweden",Rejected
280,DSS development on toll expressway financial risk monitoring,"Rocha, J.C. and Zapalowski, V. and Nunes, I.",ACM International Conference Proceeding Series,2017,"Keeping the source code clean and organized throughout the software development and evolution is a challenging task. Due to many factors, design choices that cause the overall code structure to decay may be made and implemented, so that benefits, such as reduced development time, can be obtained in the short term. In order to deal with these situations, the metaphor of technical debt emerged to allow such situations to be systematically managed. Although this concept is already known in academia, there are limited evidences that the industry widely adopts it. Therefore, this paper presents the results of a survey involving 74 participants that work in the Brazilian software industry, in order to understand why technical debt is introduced, eliminated and how it is managed in practice, with a focus on the code level. Our survey is not limited to the explicit management of technical debt but also includes the notion that the introduction of poor code without the awareness that it is a poor design choice can also become a debt. Such a code can be acknowledged as a debt to be paid as the software evolves. Our results show that overload of work and lack of time, together with pressure from the management, are the main reasons for the creation of technical debt. However, when participants evaluate other developers, they believe that inexperience also plays a key role. Moreover, the most effective practice to avoid the creation of technical debt is code review, in the opinion of participants. © 2017 ACM.",10.1145/3131151.3131164,"Universidade Federal Do Rio Grande Do sul (UFRGS), Porto Alegre, Brazil; UFRGS, Porto Alegre, Brazil; TU Dortmund, Dortmund, Germany",Accepted
281,"Investment, financing and the role of ROA and WACC in value creation","Fernandez-Sanchez, C. and Humanes, H. and Garbajosa, J. and Diaz, J.","Proceedings - 43rd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2017",2017,"Technical debt monitoring is one of the activities that have to be performed in technical debt management. To do that, there are different techniques that can be used to estimate technical debt and different tools that implement those different techniques. This paper presents TEDMA Tool, a tool for monitoring technical debt over the software evolution and that it is open to integrate third party tools. TEDMA is based on the analysis of source code repositories and is useful for researching using empirical data extracted from software projects. Currently, it is been used to analyze big projects in the execution of several case studies. The expected evolution of TEDMA will make the tool useful for software development industry. © 2017 IEEE.",10.1109/SEAA.2017.60,"Universidad Politecnica de Madrid, CITSEM, Madrid, Spain; Universidad Politecnica de Madrid, CITSEM, ETSISI, Madrid, Spain",Accepted
282,"Financial structure, product market decisions and default risk in an asymmetric duopoly","Ribeiro, L.F. and Alves, N.S.R. and De Mendonca Neto, M.G. and Spinola, R.O.","Proceedings - 43rd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2017",2017,"Technical debt (TD) refers to likely long-term costs associated with software development shortcuts taken by programmers to achieve short-term business benefits. If a development team does not manage TD, it can cause significant long-term problems such as high maintenance costs. Management strategies monitor debt items and evaluate when and if they should be paid. In order to effectively support this task, the systematic use of decision criteria can be decisive. In this context, this paper presents a strategy for TD management that uses multiple decision criteria to decide when to pay debt items off. In addition, it presents a case study that assessed the feasibility of the proposed strategy regarding its usefulness, ease of use and self-predicted future use. The results provided positive evidence on the use of the proposed strategy, indicating (i) that it can be useful in supporting TD management activities and (ii) that it can bring gains in terms of productivity, performance, and efficacy when evaluating the desirable time to pay debt items off. © 2017 IEEE.",10.1109/SEAA.2017.37,"Dept. of Teaching, Federal Institute of Bahia IFBA, PPGCOMP, Salvador University, Jequi, Brazil; PGCOMP, Federal University of Bahia, Fraunhofer Project Center at UFBA, Salvador, Brazil; PPGCOMP, Salvador University, Fraunhofer Project Center at UFBA, Salvador, Brazil",Accepted
283,The network of the Italian stock market during the 2008-2011 financial crises,"Zhang, Y. and Xue, Z. and Li, W. and Ling, Y. and Ye, C.","ICCSS 2017 - 2017 International Conference on Information, Cybernetics, and Computational Social Systems",2017,"Japan has the highest debt-to-GDP ratio among advanced countries. Japanese central government debt has increased rapidly in the past 20 years. According to the data provided by Ministry of Finance, Japan, the total central government debt (TCGD) of Japan reached ¥1, 066,423.4 billion (December 31, 2016). This number refreshes the history record of Japanese central government debt. It is important to conduct a projection for the TCGD so that the government can make better fiscal policies and predict the risk in the future. In this paper, we conduct a ten-quarter projection for the TCGD of Japan via a three-layer feed-forward neuronet. The neuronet is trained successfully with the central government debt data from June 30, 1996 to December 31, 2016, provided by Ministry of Finance, Japan, in quarterly manner. Numerical experiments show four different trends of TCGD: Slightly increasing trend, sharply increasing trend, decreasing-increasing trend and decreasing trend. The most possibility is that the TCGD increases slightly in short term. Furthermore, we conduct a relatively longer-term (i.e., twenty-four quarters) projection with the most possibility. © 2017 IEEE.",10.1109/ICCSS.2017.8091488,"School of Information Science and Technology, Sun Yat-sen University, Guangzhou, 510006, China; School of Computer Science, Qinghai Normal University, Xining, 810008, China",Rejected
284,Continuous delivery practices in a large financial organization,"Al Mamun, M.A. and Berger, C. and Hansson, J.",ACM International Conference Proceeding Series,2017,"Background: The increasing up-trend of software size brings about challenges related to release planning and maintainability. Foreseeing the growth of software metrics can assist in taking proactive decisions regarding different areas where software metrics play vital roles. For example, source code metrics are used to automatically calculate technical debt related to code quality which may indicate how maintainable a software is. Thus, predicting such metrics can give us an indication of technical debt in the future releases of software. Objective: Estimation or prediction of software metrics can be performed more meaningfully if the relationships between different domains of metrics and relationships between the metrics and different domains are well understood. To understand such relationships, this empirical study has collected 25 metrics classified into four domains from 9572 software revisions of 20 open source projects from 8 well-known companies. Results: We found software size related metrics are most correlated among themselves and with metrics from other domains. Complexity and documentation related metrics are more correlated with size metrics than themselves. Metrics in the duplications domain are observed to be more correlated to themselves on a domain-level. However, a metric to domain level relationship exploration reveals that metrics with most strong correlations are in fact connected to size metrics. The Overall correlation ranking of duplication metrics are least among all domains and metrics. Contribution: Knowledge earned from this research will help to understand inherent relationships between metrics and domains. This knowledge together with metric-level relationships will allow building better predictive models for software code metrics. © 2017 Association for Computing Machinery.",10.1145/3143434.3143445,"Department of Computer Science and Engineering, Chalmers University of Technology, University of Gothenburg, Gothenburg, 41296, Sweden; Department of Computer Science and Engineering, Chalmers University of Technology, Sweden; University of Gothenburg, Gothenburg, 41296, Sweden; School of Informatics, University of Skövde, Skövde, Sweden",Accepted
285,Automated data collection for credit score calculation based on financial transactions and social media,"Bräuer, J. and Saft, M. and Plösch, R. and Körner, C.",ACM International Conference Proceeding Series,2017,"Current software development trends have shortened release cycles and forced developers to implement short-term solutions that cannot cope with increasing product complexity. This phenomenon of introducing hasty design choices or applying bad design practices becomes something known as technical debt, in particular design debt. To pay of this debt, the literature offers approaches for identifying these design glaws; however, few methods for properly prioritizing investment efforts are available. In this paper, we propose an approach that supports the decision-making process regarding design improvements. It identifies violations of design best practices that are then arranged within a two-dimensional portfolio matrix. This matrix combines the importance of practices of design quality with actual achievement relative to a benchmark suite. To show the application of the approach in a quality-improvement process, we performed a feasibility study on three open-source projects and a benchmark suite containing 50 projects. This study clearly shows that the importance of the design best practices greatly impacts the improvement decisions and must be aligned with the strategic quality goals of the product. ' 2017 Copyright held by the owner/author(s). Publication rights licensed to ACM.",10.1145/3143434.3143454,"Johannes Kepler University Linz, Linz, Austria; Corporate Technology Siemens AG, Munich, Germany; Johannes Kepler University Linz, Linz, Austria; Corporate Technology Siemens AG, Munich, Germany",Accepted
286,SWOT analysis as an effective tool for identification of the strengths and weaknesses of the state's financial security system,"Zampetti, F. and Noiseux, C. and Antoniol, G. and Khomh, F. and Di Penta, M.","Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017",2017,"Previous research has shown how developers ""self-admit"" technical debt introduced in the source code, commenting why such code represents a workaround or a temporary, incomplete solution. This paper investigates the extent to which previously self-admitted technical debt can be used to provide recommendations to developers when they write new source code, suggesting them when to ""self-admit"" design technical debt, or possibly when to improve the code being written. To achieve this goal, we have developed a machine learning approach named TEDIOUS (TEchnical Debt IdentificatiOn System), which leverages various kinds of method-level features as independent variables, including source code structural metrics, readability metrics and, last but not least, warnings raised by static analysis tools. We assessed TEDIOUS on data from nine open source projects for which there are available tagged self-admitted technical debt instances, also comparing the performances of different machine learners. Results of the study indicate that TEDIOUS achieves, when recommending self-admitted technical debts within a single project, an average precision of about 50% and a recall of 52%. When predicting cross-projects, TEDIOUS improves, achieving an average precision of 67% and a recall of 55%. Last, but not least, we noticed how TEDIOUS leverages readability, size and complexity metrics, as well as some warnings raised by static analysis tools. © 2017 IEEE.",10.1109/ICSME.2017.44,"Dept. of Engineering, University of Sannio, Italy; SOCCER-SWAT Labs., DGIGL, Polytechnique Montréal, Canada",Accepted
287,Study on machine learning techniques in financial markets,"Da Maldonado, E.S. and Abdalkareem, R. and Shihab, E. and Serebrenik, A.","Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017",2017,"Technical debt refers to the phenomena of taking shortcuts to achieve short term gain at the cost of higher maintenance efforts in the future. Recently, approaches were developed to detect technical debt through code comments, referred to as Self-Admitted Technical Debt (SATD). Due to its importance, several studies have focused on the detection of SATD and examined its impact on software quality. However, preliminary findings showed that in some cases SATD may live in a project for a long time, i.e., more than 10 years. These findings clearly show that not all SATD may be regarded as 'bad' and some SATD needs to be removed, while other SATD may be fine to take on. Therefore, in this paper, we study the removal of SATD. In an empirical study on five open source projects, we examine how much SATD is removed and who removes SATD? We also investigate for how long SATD lives in a project and what activities lead to the removal of SATD? Our findings indicate that the majority of SATD is removed and that the majority is self-removed (i.e., removed by the same person that introduced it). Moreover, we find that SATD can last between approx. 18-172 days, on median. Finally, through a developer survey, we find that developers mostly use SATD to track future bugs and areas of the code that need improvements. Also, developers mostly remove SATD when they are fixing bugs or adding new features. Our findings contribute to the body of empirical evidence on SATD, in particular evidence pertaining to its removal. © 2017 IEEE.",10.1109/ICSME.2017.8,"Data-driven Analysis of Software (DAS) Lab., Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Eindhoven University of Technology, Eindhoven, Netherlands",Accepted
288,Financial parameters of selected nationalised banks in India,"Tufano, M. and Palomba, F. and Bavota, G. and Oliveto, R. and Penta, M.D. and De Lucia, A. and Poshyvanyk, D.",IEEE Transactions on Software Engineering,2017,"Technical debt is a metaphor introduced by Cunningham to indicate 'not quite right code which we postpone making it right'. One noticeable symptom of technical debt is represented by code smells, defined as symptoms of poor design and implementation choices. Previous studies showed the negative impact of code smells on the comprehensibility and maintainability of code. While the repercussions of smells on code quality have been empirically assessed, there is still only anecdotal evidence on when and why bad smells are introduced, what is their survivability, and how they are removed by developers. To empirically corroborate such anecdotal evidence, we conducted a large empirical study over the change history of 200 open source projects. This study required the development of a strategy to identify smell-introducing commits, the mining of over half a million of commits, and the manual analysis and classification of over 10K of them. Our findings mostly contradict common wisdom, showing that most of the smell instances are introduced when an artifact is created and not as a result of its evolution. At the same time, 80 percent of smells survive in the system. Also, among the 20 percent of removed instances, only 9 percent are removed as a direct consequence of refactoring operations. © 1976-2012 IEEE.",10.1109/TSE.2017.2653105,"College of William and Mary, Williamsburg, VA  23185, United States; University of Salerno, Fisciano, SA  84084, Italy; Universita della Svizzera Italiana (USI), Lugano, 6900, Switzerland; University of Molise, Pesche, IS  86090, Italy; University of Sannio, Benevento, BN  82100, Italy",Accepted
289,Application of logistic regression models to assess household financial decisions regarding debt,"Heikkilä, V.T. and Paasivaara, M. and Lasssenius, C. and Damian, D. and Engblom, C.",Empirical Software Engineering,2017,"In a large organization, informal communication and simple backlogs are not sufficient for the management of requirements and development work. Many large organizations are struggling to successfully adopt agile methods, but there is still little scientific knowledge on requirements management in large-scale agile development organizations. We present an in-depth study of an Ericsson telecommunications node development organization which employs a large scale agile method to develop telecommunications system software. We describe how the requirements flow from strategy to release, and related benefits and problems. Data was collected by 43 interviews, which were analyzed qualitatively. The requirements management was done in three different processes, each of which had a different process model, purpose and planning horizon. The release project management process was plan-driven, feature development process was continuous and implementation management process was agile. The perceived benefits included reduced development lead time, increased flexibility, increased planning efficiency, increased developer motivation and improved communication effectiveness. The recognized problems included difficulties in balancing planning effort, overcommitment, insufficient understanding of the development team autonomy, defining the product owner role, balancing team specialization, organizing system-level work and growing technical debt. The study indicates that agile development methods can be successfully employed in organizations where the higher level planning processes are not agile. Combining agile methods with a flexible feature development process can bring many benefits, but large-scale software development seems to require specialist roles and significant coordination effort. © 2016, The Author(s).",10.1007/s10664-016-9491-z,"Aalto University, PO Box 15400, Aalto, FI-00076, Finland; University of Victoria, PO Box 1700, STN CSC, Victoria, BC  V8W 2Y2, Canada; Oy LM Ericsson AB, Kirkkonummi, Finland",Rejected
290,A generalised regression neural network model of financing imbalance: Shari'ah compliance as the roadmap for sustainability of capital markets,"Ludwig, J. and Xu, S. and Webber, F.","2017 IEEE International Conference on Systems, Man, and Cybernetics, SMC 2017",2017,"This paper identifies a small, essential set of static software code metrics linked to the software product quality characteristics of reliability and maintainability and to the most commonly identified sources of technical debt. A plug-in is created for the Understand code visualization and static analysis tool that calculates and aggregates the metrics. The plug-in produces a high-level interactive html report as well as developer-level information needed to address quality issues using Understand. A script makes use of Git, Understand, and the plug-in to compile results for a list of GitHub repositories into a single file. The primary contribution of this work is to describe an open-source plug-in to measure and visualize architectural complexity based on the propagation cost and core size metrics, which are not currently found in other tools. The plug-in should be useful to researchers and practitioners interested in these two metrics and as an expedient starting point to experimentation with metric collection and aggregation for groups of GitHub repositories. The plug-in was developed as a first step in an ongoing project aimed at applying case-based reasoning to the issue of software product quality. © 2017 IEEE.",10.1109/SMC.2017.8122569,"Stottler Henke Associates, Inc., San Mateo, CA, United States; Air Force Research Laboratory, 711th HPW/RHAS, WPAFB, OH, United States",Accepted
291,Enterprise financial investment platform simulation based on FPGA-based high-performance algorithm,,"Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017",2017,The proceedings contain 78 papers. The topics discussed include: the pricey bill of technical debt - when and by whom will it be paid?; detecting DOM-sourced cross-site scripting in browser extensions; the co-evolution of test maintenance and code maintenance through the lens of fine-grained semantic changes; embroidery: patching vulnerable binary code of fragmentized android devices; what are the testing habits of developers? a case study in a large it company; how long and how much: what to expect from summer of code participants?; and the utility challenge of privacy-preserving data-sharing in cross-company defect prediction.,,,Rejected
292,Network-aware strategies in financial systems,"Choi, S. and Noh, M.S. and Yoon, J. and Park, H. and Seo, W.",IEEE Access,2017,"A technology evaluation system is mandatory to successfully implement a technology-based financial support system. Technology evaluation has generally been relied on the experts' manual work. Various quantitative indicators have been presented to improve the efficiency of this manual work. Among these indicators, the spillover effect is perceived as useful for the disposal of patents of a firm, which received credit guarantee but lost its ability to service its debt. A model for measuring the spillover effects has already been proposed, but it has low reliability. Therefore, this paper presents a systematic approach for measuring technological spillover effects between technology classes. The approach mainly relies on patent data due to its features of the latest reliable sources of technological intelligence. We first extract co-classification information from patent data and generate association rules between technology classes. The relationships represented by the rules, however, can only depict the direct effects. Therefore, we first derive the indirect effects from the direct ones and then integrate both the effects to measure the technological spillover effects. We conduct an empirical study to show the applicability of the presented approach using patents granted in the Korean Intellectual Property Office. We expect that this paper can contribute to establish a quantitative evaluation model to help assess technologies for successful technology-based credit guarantee system. It will improve the reliability of the technology assessment by reducing the variance of the qualitative evaluation results due to the individual differences of the evaluator. Furthermore, it will also enhance the efficiency of evaluation work. © 2018 IEEE.",10.1109/ACCESS.2017.2788918,"Department of Industrial and Management Engineering, Gachon University, Seongnam, 13120, South Korea; Department of Statistics, Pukyong National University, Busan, 48513, South Korea; Department of Industrial Engineering, Konkuk University, Seoul, 05029, South Korea; Department of Information System, Hanyang University, Seoul, 04763, South Korea; Graduate School of Management of Technology, Pukyong National University, Busan, 48513, South Korea",Rejected
293,The Efficacy of Financial Ratios for Fraud Detection Using Self Organising Maps,"Palakvangsa-Na-Ayudhya, S. and Pongchandaj, S. and Kriangsakdachai, S. and Sunthornwutthikrai, K.","IEEE Region 10 Annual International Conference, Proceedings/TENCON",2017,"Research has confirmed that the national financial stability is considered as a crucial foundation for the country development. With regard to this, one of the money supply sources to strengthen the financial stability is Gross Domestic Saving (GDS) which consists of savings from the public sector, the private corporate sector, and the household sector. Unfortunately, World Bank reports that the average GDS values of many countries have been generally declining in the past five years. On the contrary, Bank of International Settlements shows that the debt of the household sector has critically risen and the debt consequently leads to different levels of problems such as personal stress, crime commission, and bankruptcy cases. Research has revealed that to alleviate such problems the financial capability is extremely needed especially long term savings behavior. To ensure such behavior, three challenges are identified. First of all, the learning process of money management should start since the childhood and secondly parents need to be involved in guiding their children. Finally, there must be a mechanism to maintain the retention level of children throughout this process. Focusing on these challenges, KeptAom is proposed as a savings management tool that focuses on promoting long term savings behavior for children with the engagement of their families. KeptAom composes of three components - KeptAom on Cloud, KeptAom on Mobile, and KeptAom on Piggybank. With KeptAom, children can set and fulfill their goals by saving their money and completing various chores given from their parents; on the other hand, parents can observe and interact with their children through KeptAom's notification. KeptAom deploys the gamification concept and a digital cashless piggy bank to increase the engagement of children in order to ensure repeating uses which is a potential method to lead to long term savings behavior in the future. © 2017 IEEE.",10.1109/TENCON.2017.8228235,"Faculty of Information and Communication Technology, Mahidol University, Nakhon Pathom, Thailand",Rejected
294,Intellectual capital and firms financing decisions in the European context: A panel data analysis,"Falessi, D. and Russo, B. and Mullen, K.",International Symposium on Empirical Software Engineering and Measurement,2017,"What would have happened if I did not have any code smell? This is an interesting question that no previous study, to the best of our knowledge, has tried to answer. In this paper, we present a method for implementing a what-if scenario analysis estimating the number of defective files in the absence of smells. Our industrial case study shows that 20% of the total defective files were likely avoidable by avoiding smells. Such estimation needs to be used with the due care though as it is based on a hypothetical history (i.e., zero number of smells and same process and product change characteristics). Specifically, the number of defective files could even increase for some types of smells. In addition, we note that in some circumstances, accepting code with smells might still be a good option for a company. © 2017 IEEE.",10.1109/ESEM.2017.14,"Dept. of Computer Science and Software Engineering, California Polytechnic State, University San Luis Obispo, Luis Obispo, CA, United States; Faculty of Computer Science Free, University of Bozen-Bolzano, Bolzano, Italy; Keymind A Division of Axiom, Resource Management, Inc., Falls Church, VA, United States",Accepted
295,Financial Risk Evaluation Z-Score Model for Intelligent IoT-based Enterprises,"Rekha, P. and Rangan, V.P. and Ramesh, M.V. and Nibi, K.V.","GHTC 2017 - IEEE Global Humanitarian Technology Conference, Proceedings",2017,"Agriculture is one of the main needs for human to survive. Agriculture has to tackle many problems like changing climate, water shortage, changing soil quality, etc. Due to the increasing demand for cereals and other crops for daily usage by the consumers there is a need for smarter implementation of irrigation and also develop farming methods that alter the basic eco systems and is less harmful to other creatures. India is one of highest crop producing countries all over the world. At the same time, India is facing the challenge of farmers committing suicide because of crop failure and debt. Most of the land in India is still being used for agriculture purposes. Still there exists several places that uses very primitive methods for irrigation, fertilization etc. This leads to the reduction in the crop yield and eventually less income for the farmers. This paper discusses the design and development of an IoT framework that helps farmers to improvise their methods of farming and also make the best use of their land for a better yield and income. The major goal of this IoT framework is to sense agriculture characteristics and advice farmers to properly grow and treat the crops. The system deploys a group of wireless sensor networks nodes deployed in the field for sensing agricultural parameters and the RF communication of WSN node is used to transmit the measured data to base station. Base station is connected to a decision support system. Based on the sensed parameters and the optimum values, the decision support system will generate an appropriate message for farmers. By using the collected data from the sensors, the proposed system will provide suggestions about the monitoring crop such as irrigation timings, directions for optimum usage of fertilizers etc. in accordance to the farmers' lands. An android application has been designed to deliver the messages to farmers in their regional language. The android app also gives information regarding the weather forecast and precaution to be taken based on the weather forecast. © 2017 IEEE.",10.1109/GHTC.2017.8239287,"Amrita Center for Wireless Networks and Applications (AmritaWNA), Amrita School of Engineering, Amritapuri, Amrita Vishwa Vidyapeetham, Amrita University, India",Rejected
296,The hungry energised allergic disease-ridden matrix for financial decision dilemmas of entrepreneurs,,"Iberian Conference on Information Systems and Technologies, CISTI",2017,The proceedings contain 396 papers. The topics discussed include: business intelligence in a public institution - evaluation of a financial data mart; teleoperation of a mobile robot based on eye-gaze tracking; processing of biomedical signal with neural network adaline; AmarganA: a spelling game of the Portuguese language for use in mobile devices; development of software prototypes through model game jam and basic vision artificial techniques; and use of SQALE and tools for analysis and identification of code technical debt through static analysis.,,,Duplicated
297,Pest-method development to assess the financial stability of logistic companies,,CEUR Workshop Proceedings,2017,"The proceedings contain 10 papers. The topics discussed include: pitfalls and countermeasures in software quality measurements and evaluations; static and dynamic architecture conformance checking: a systematic, case study-based analysis on tradeoffs and synergies; towards a quality framework for enterprise architecture models; multi-level compliance measurements for software process appraisal; towards the reengineering of readiness review process with R2P2 life-cycle model; a web application to manage and improve software development projects by SEMAT essence; investigating the effectiveness of greedy algorithm on open source software systems for determining refactoring sequence; automatically identifying dead fields in test code by resolving method call and field dependency; detecting technical debt through issue trackers; and estimating web service quality of service parameters using source code metrics and LSSVM.",,,Duplicated
298,Neural network model for the evaluation of the developing Bankruptcy stages of corporations,,ACM International Conference Proceeding Series,2017,The proceedings contain 24 papers. The topics discussed include: security challenges in IoT development: a software engineering perspective; an analysis of the bluetooth terminal development pivots from lean startup perspective: experience and lessons learnt; an investigation of technical debt in automatic production systems; inter-team coordination mechanisms in large-scale agile; the magnificent seven: towards a systematic estimation of technical debt interest; CitySense: blockchain-oriented smart cities; assigned roles for inter-team coordination in large-scale agile development: a literature review; who is producing more technical debt? a personalized assessment of TD principal; generating innovations for the internet of things: agility and speed; technical debt interest assessment: from issues to project; coordination in the large: a research design; the safe way to the agile trends in agile development of safety-critical software: a summary of the 3D international workshop on agile development of safety-critical software (ASCS 2017); agile transformation model for large software development organizations; and the dynamics of agile practices for safety-critical software development.,,,Duplicated
299,Using support vector machine for the prediction of unpaid credit card debts,"Cai, Y. and Kazman, R.","Proceedings - 2017 IEEE/ACM 39th International Conference on Software Engineering Companion, ICSE-C 2017",2017,"In this technical briefing, we will introduce the theory, practice, and tool support for detecting and quantifying architectural debt. We will introduce the concept of design rule space (DRSpace) - a new architectural model forming the foundation of architectural debt detection, hotspot patterns - recurring architectural flaws leading to architectural debt, and architectural debt quantification. © 2017 IEEE.",10.1109/ICSE-C.2017.165,"Computer Science Department, Drexel University, Philadelphia, PA, United States; Shidler College of Business, University of Hawaii, Honolulu, HI, United States",Rejected
300,A decision support system to optimize debt collection assignments,"Mrázová, I. and Zvirinský, P.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2017,"Recently, the Czech Insolvency Register covers about 200000 insolvency proceedings. In order to better assess the real impact of indebtedness across the Czech society, the data about creditors or reasons for debt might be of great value. Unfortunately, the vast majority of such information is contained only in scanned document copies attached to the insolvency proceedings. Therefore, this study aims at finding efficient pre-processing, clustering and classification techniques capable of extracting the wanted information from these cca 1200000 pdf-files. © Springer International Publishing AG 2017.",10.1007/978-3-319-59060-8_12,"Department of Theoretical Computer Science and Mathematical Logic, Faculty of Mathematics and Physics, Charles University, Prague, Czech Republic",Rejected
301,Game-theoretic analysis of development practices: Challenges and opportunities,"Proijt, L. and Wiersenia, W.",ACM International Conference Proceeding Series,2017,"In cases where architectural documentation is outdated or missing, software architecture reconstruction (SAR) techniques may be used to create architectural views of a system. This paper describes a case study in which SAR techniques are applied to reconstruct module views of a case system; a debt settlements suite for local governments, developed in C#. A manual approach and its results are described and compared to the outcome of a layers reconstruction algorithm. Furthermore, this paper explains how software architecture compliance checking (SACC) techniques may help to test the results of reconstruction activities. In this study, SAR and SACC were supported by HUSACCT, a tool that provides rich sets of module and rule types in support of layers, facade, and gateway patterns. © 2017 ACM.",10.1145/3129790.3129809,"HU University of Applied Sciences, Utrecht, Netherlands",Accepted
302,Multi-agent monitoring information systems,"Wille, D. and Wehling, K. and Seidl, C. and Pluchator, M. and Schaefer, I.",ACM International Conference Proceeding Series,2017,"Technical architectures (TAs) represent the computing infrastructure of a company with all its hardware and software components. Over the course of time, the number of TAs grows with the companies' requirements and usually a large variety of TAs has to be maintained. Core challenge is the missing information on relations between the existing variants of TAs, which complicates reuse of solutions across systems. However, identifying these relations is an expensive task as architects have to manually analyze each TA individually. Restructuring the existing TAs poses severe risks as often sufficient information is not available (e.g., due to time constraints). To avoid failures in productive systems and resulting loss of profit, companies continue to create new solutions without restructuring existing ones. This increased variability in TAs represents technical debt. In this paper, we adapt the idea of variability mining from the software product line domain and present an efficient and automatic mining algorithm to identify the common and varying parts of TAs by analyzing a potentially arbitrary number of TAs in parallel. Using the identified variability information, architects are capable of analyzing the relations of TAs, identifying reuse potential, and making well-founded maintenance decisions. We show the feasibility and scalability of our approach by applying it to a real-world industrial case study with large sets of TAs. © 2017 ACM.",10.1145/3106195.3106202,"TU Braunschweig, Germany; Volkswagen AG, Germany",Accepted
303,A study on impact of national and global events on performance of Indian mutual fund: Pre and post event analysis,"Fehlmann, T. and Kranich, E.","Proceedings of the 11th European Conference on Information Systems Management, ECISM 2017",2017,"The Buglione-Trudel Matrix (BT Matrix) is a tool based on Six Sigma Transfer Functions. It originated from practical experiences in managing software development with agile teams. It maps User Stories to Business Goals. It manages the development work in a transparent way. Its primary objectives are visualizing tasks, prioritizing user stories, and assigning them to sprints. Tasks are represented as Story Cards, representing a user story, or a portion of it that fits into a single sprint. Story cards carry various software measurements; functional size, testing intensity and applicable test cases, technical debt, effort estimates (by story points), and value for customers. The BT Matrix is used to communicate story cards to the teams, and managers, of the project, and to give feedback to developers how to align their story cards with the overall project goals.",,"Euro Project Office, Zurich, Switzerland; Duisburg, Germany",Rejected
304,Neoliberal trends in the global economy,"Besker, T. and Martini, A. and Bosch, J.",CIbSE 2017 - XX Ibero-American Conference on Software Engineering,2017,"Software companies need to produce high-quality software and support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered by compromised software quality attributes that have an important influence on the overall software development lifecycle. The aim of this study is threefold: To understand which quality issues have the most negative impact on the software development lifecycle process, to determine the association of these quality issues in relation to the age of the software, and relate each of these quality issues to the impact of different Technical Debt types. This paper reports the results of six initial group interviews with in total 43 practitioners, an online web-survey provided quantitative data from 258 participants and seven follow-up group interviews with in total 32 industrial software practitioners. First, this study shows that practitioners identified maintenance difficulties, a limited ability to add new features, restricted reusability, and poor reliability, and performance degradation issues as the quality issues having the most negative effect on the software development lifecycle. Secondly, we found no evidence for the generally held view that the Technical Debt increases with age of the software. Thirdly, we show that Technical Debt affects not only productivity but also several other quality attributes of the system.",,"Chalmers University of Technology, Göteborg, Sweden",Accepted
305,Towards A More Effective Bidirectional LSTM-Based Learning Model for Human-Bacterium Protein-Protein Interactions,"Sharma, T. and Spinellis, D.",Journal of Systems and Software,2018,"Context: Smells in software systems impair software quality and make them hard to maintain and evolve. The software engineering community has explored various dimensions concerning smells and produced extensive research related to smells. The plethora of information poses challenges to the community to comprehend the state-of-the-art tools and techniques. Objective: We aim to present the current knowledge related to software smells and identify challenges as well as opportunities in the current practices. Method: We explore the definitions of smells, their causes as well as effects, and their detection mechanisms presented in the current literature. We studied 445 primary studies in detail, synthesized the information, and documented our observations. Results: The study reveals five possible defining characteristics of smells  indicator, poor solution, violates best-practices, impacts quality, and recurrence. We curate ten common factors that cause smells to occur including lack of skill or awareness and priority to features over quality. We classify existing smell detection methods into five groups  metrics, rules/heuristics, history, machine learning, and optimization-based detection. Challenges in the smells detection include the tools proneness to false-positives and poor coverage of smells detectable by existing tools. © 2017",10.1016/j.jss.2017.12.034,"Department of Management Science and Technology, Athens University of Economics and Business, Greece",Rejected
306,Development strategy of educational robot industry based on big data analysis,"Ciolkowski, M. and Guzmán, L. and Trendowicz, A. and Vollmer, A.M.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Existing definitions and metrics of technical debt (TD) tend to focus on static properties of software artifacts, in particular on code measurement. Our experience from software renovation projects is that dynamic aspects - runtime indicators of TD - often play a major role. In this position paper, we present insights and solution ideas gained from numerous software renovation projects at QAware and from a series of interviews held as part of the ProDebt research project. We interviewed ten practitioners from two German software companies in order to understand current requirements and potential solutions to current problems regarding TD. Based on the interview results, we motivate the need for measuring dynamic indicators of TD from the practitioners' perspective, including current practical challenges. We found that the main challenges include a lack of production-ready measurement tools for runtime indicators, the definition of proper metrics and their thresholds, as well as the interpretation of these metrics in order to understand the actual debts and derive countermeasures. Measuring and interpreting dynamic indicators of TD is especially difficult to implement for companies because the related metrics are highly dependent on runtime context and thus difficult to generalize. We also sketch initial solution ideas by presenting examples of dynamic indicators for TD and outline directions for future work. © 2018 IEEE.",10.1109/SEAA.2018.00078,"QAware GmbH, Aschauer Str. 32, München, 81549, Germany; Fraunhofer IESE, Fraunhofer Platz 1, Kaiserslautern, 67663, Germany",Accepted
307,Financial tools as an alternative to bank deposits and deposits of microfinance organizations,"Skiada, P. and Ampatzoglou, A. and Arvanitou, E.-M. and Chatzigeorgiou, A. and Stamelos, I.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Modularity is one of the key principles of software design. In order for a software system to be modular, it should be organized into modules that are highly coherent internally, whereas at the same time as independent from other modules as possible. In this paper we explore coupling and cohesion metrics at the software package level - i.e., one of most basic levels of software functional decomposition in object-oriented (OO) systems, with the aim of investigating their relation to the technical debt of each package. Current state-of-the-art tools in TD measurement are working on the source code level, and the extent to which they can unveil limitations at the architecture level (e.g., violations of the modularity principle), has not been explored so far. To achieve this goal, we conducted a case study on 1,200 packages retrieved from 20 well-known open source software projects. The results of the study suggested that current measures of technical debt are able to identify / predict modules that lack modularity, and therefore suffer from Architectural Technical Debt (ATD). The results of the study are discussed both from the practitioners' and re-searchers' point of view. © 2018 IEEE.",10.1109/SEAA.2018.00072,"Department of Informatics, Aristotle University, Thessaloniki, Greece, Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece, United States",Accepted
308,Motives of Entrepreneurial Activity in Regions with Limited Potential for Self-Development,"Madeira, A. and Barbosa, L.S. and Hennicker, R. and Martins, M.A.",Theoretical Computer Science,2018,"D? is a new dynamic logic combining regular modalities with the binder constructor typical of hybrid logic, which provides a smooth framework for the stepwise development of reactive systems. Actually, the logic is able to capture system properties at different levels of abstraction, from high-level safety and liveness requirements, to constructive specifications representing concrete processes. The paper discusses its semantics, given in terms of reachable transition systems with initial states, its expressive power and a proof system. The methodological framework is in debt to the landmark work of D. Sannella and A. Tarlecki, instantiating the generic concepts of constructor and abstractor implementations by standard operators on reactive components, e.g. relabelling and parallel composition, as constructors, and bisimulation for abstraction. © 2018 Elsevier B.V.",10.1016/j.tcs.2018.03.004,"QuantaLab, HASLab INESC TEC, Univ. Minho, Portugal; United Nations University, UNU-EGOV, United States; Ludwig-Maximilians-Universität München, Germany; CIDMA, Dep. Mathematics, Univ. Aveiro, Portugal",Rejected
309,New opportunities for harmonizing tax relations in the conditions of digitalization of the tax system,"Rios, N. and Mendonça Neto, M.G.D. and Spínola, R.O.",Information and Software Technology,2018,"Context: The concept of technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during its development. Currently, it is common to associate any impediment related to the software product and its development process to the definition of TD. This can bring confusion and ambiguity in the use of the term. Besides, due to the increasing amount of work in the area, it is difficult to have a comprehensive view of the plethora of proposals on TD management. Objective: This paper intends to investigate the current state of research on TD by identifying what research topics have been considered, organizing research directions and practical knowledge that has already been defined, identifying the known types of TD, and organizing what activities, strategies and tools have been proposed to support the management of TD. Method: A tertiary study was performed based on a set of five research questions. In total, 13 secondary studies, dated from 2012 to March 2018, were evaluated. Results: The results of this tertiary study are beneficial for both practitioners and researchers. We evolved a taxonomy of TD types, identified a list of situations in which debt items can be found in software projects, and organized a map representing the state of the art of activities, strategies and tools to support TD management. Besides, we also summarized some research directions and practical knowledge, and identified the research topics that have been more considered in secondary studies. Conclusion: This tertiary study revisited the TD landscape. Its results can help to identify points that still require further investigation in TD research. © 2018 Elsevier B.V.",10.1016/j.infsof.2018.05.010,"Department of Computer Science, Federal University of Bahia, Salvador, Brazil; Graduate Program in Systems and Computer, Salvador University, Salvador, Brazil; Fraunhofer Project Center for Software and System Engineering, Federal University of Bahia, Salvador, Bahia, Brazil",Rejected
310,Fuel up with OATmeals! The case of the French nominal yield curve,"Martini, A. and Besker, T. and Bosch, J.",Science of Computer Programming,2018,"Large software companies need to support continuous and fast delivery of customer value both in the short and long term. However, this can be hindered if both the evolution and maintenance of existing systems are hampered by Technical Debt. Although a lot of theoretical work on Technical Debt has been produced recently, its practical management lacks empirical studies. In this paper, we investigate the state of practice in several companies to understand what the cost of managing TD is, what tools are used to track TD, and how a tracking process is introduced in practice. We combined two phases: a survey involving 226 respondents from 15 organizations and an in-depth multiple case study in three organizations including 13 interviews and 79 Technical Debt issues. We selected the organizations where Technical Debt was better tracked in order to distill best practices. We found that the development time dedicated to managing Technical Debt is substantial (an average of 25% of the overall development), but mostly not systematic: only a few participants (26%) use a tool, and only 7.2% methodically track Technical Debt. We found that the most used and effective tools are currently backlogs and static analyzers. By studying the approaches in the companies participating in the case study, we report how companies start tracking Technical Debt and what the initial benefits and challenges are. Finally, we propose a Strategic Adoption Model for the introduction of tracking Technical Debt in software organizations. © 2018 The Authors",10.1016/j.scico.2018.03.007,"CA Technologies Strategic, Research Team Barcelona, Spain; University of Oslo, Programming and Software Engineering, Oslo, Norway; Computer Science and Engineering, Chalmers University of Technology, Göteborg, Sweden",Rejected
311,Investment Banking and Its Features in Russia,"Guamán, D. and Pérez, J. and Díaz, J.",ACM International Conference Proceeding Series,2018,"The purpose of this work is to define a reference process to support the software architecture reconstruction in a systematic and automatic way. This process aims to be applied to the construction and maintenance phases within Agile methodologies and Continuous Integration processes, where the quick and continuous test and changes at design or coding level can generate an increase or reduction of technical debt and green software levels. This process is based on phases, activities, techniques, and strategies proposed by related works about reverse engineering and software architecture reconstruction. Specifically, it integrates all of them to create a complete process; which may be a reference process by providing green and technical debt-oriented recommendations during the decision-making of software architecture at design level or coding level. This recommendation phase will be based on algorithms and techniques of Machine Learning, that will allow to apply the process in an Agile way and taking into account previous knowledge. © 2018 Association for Computing Machinery.",10.1145/3241403.3241414,"Universidad Técnica Particular de Loja, Austria; Universidad Politécnica de Madrid, Spain",Accepted
312,Model for Assessment of the Quality of Financial Management in Solving the Problem of Agency Conflicts,,"Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018",2018,The proceedings contain 34 papers. The topics discussed include: modeling and executing software architecture using SysADL; how to evaluate software architectures: tutorial on practical insights on architecture evaluation projects with industrial customers; a case study for workflow-based automation in the Internet of Things; straightforward specification of adaptation-architecture-significant requirements of IoT-enabled cyber-physical systems; I4.0-device integration: a qualitative analysis of methods and technologies utilized by system integrators: implications for engineering future industrial internet of things system; using blockchain technology to ensure trustful information flow monitoring in CPS; traceable threat modeling for safety-critical systems; architectural technical debt identification: moving forward; engineering software architectures of blockchain-oriented applications; towards a dual processing perspective of software architecture decision making; decision making and cognitive biases in designing software architectures; perspectives for selecting cloud microservices; the vision of self-aware performance models; can network analysis techniques help to predict design dependencies? an initial study; cost-aware stage-based experimentation: challenges and emerging results; bridging the gap between architecture specifications and simulation models; and designing and executing software architectures models using SysADL studio.,,,Rejected
313,"Transformations of the modern russian economy: Causes, trends, possible alternatives","Xiao, Z. and Li, Y. and Zhang, K.",Personal and Ubiquitous Computing,2018,"Online peer-to-peer (P2P) lending financial products have been developing rapidly in recent years. This investment method is designed for people free of high-rate debts. However, the lending and borrowing affairs between anonymities may potentially produce risks, including wash sale and money laundering. Apart from the well-documented research on the causal factors and economic influence of the P2P lending market, limited attention has been paid to the risk management of individual P2P lending platforms. This study presents a visual analysis method that detects and analyzes risks in P2P lending transactions. Moreover, we evaluate our approach on real-world P2P data sets and report our findings. © 2018, Springer-Verlag London Ltd., part of Springer Nature.",10.1007/s00779-018-1165-y,"School of Computer Software, Tianjin University, Tianjin, 300354, China; College of Management and Economics, Tianjin University, Tianjin, 300072, China; Department of Computer Science, The University of Texas at Dallas, Richardson, TX  75080-3021, United States; Faculty of Information Technology, Macau University of Science and Technology, Avenida Wai Long, Taipa, Macau",Rejected
314,Problems of Assessing the Debt Sustainability of Federal Subjects of the Russian Federation,"Soudris, D. and Papadopoulos, L. and Kessler, C.W. and Kehagias, D.D. and Papadopoulos, A. and Seferlis, P. and Chatzigeorgiou, A. and Ampatzoglou, A. and Thibault, S. and Namyst, R. and Pleiter, D. and Gaydadjiev, G. and Becker, T. and Haefele, M.",ACM International Conference Proceeding Series,2018,"The EXA2PRO programming environment will integrate a set of tools and methodologies that will allow to systematically address many exascale computing challenges, including performance, performance portability, programmability, abstraction and reusability, fault tolerance and technical debt. The EXA2PRO tool-chain will enable the efficient deployment of applications in exascale computing systems, by integrating high-level software abstractions that offer performance portability and efficient exploitation of exascale systems' heterogeneity, tools for efficient memory management, optimizations based on trade-offs between various metrics and fault-tolerance support. Hence, by addressing various aspects of productivity challenges, EXA2PRO is expected to have significant impact in the transition to exascale computing, as well as impact from the perspective of applications. The evaluation will be based on 4 applications from 4 different domains that will be deployed in JUELICH supercomputing center. The EXA2PRO will generate exploitable results in the form of a tool-chain that support diverse exascale heterogeneous supercomputing centers and concrete improvements in various exascale computing challenges. © 2018 ACM.",10.1145/3229631.3239369,"National Technical University of Athens, Greece; PELAB, Department of Computer and Information Science, Linkping University, Sweden; CERTH, Greece; Inria Bordeaux, Sud-Ouest Bordeaux, France; Forschungszentrum Juulich, Germany; Maxeler Technologies Ltd., United Kingdom; Maison de la Simulation, CEA, CNRS, University of Paris-Sud, France",Rejected
315,Financing the Development of the Central Asian States in the Context of Russias National Interest Policy,"Lavazza, L. and Morasca, S. and Tosi, D.",Proceedings - International Conference on Software Engineering,2018,"Background: Technical debt is currently receiving increasing attention from practitioners and researchers. Several metaphors, concepts, and indications concerning technical debt have been introduced, but no agreement exists about a solid definition of technical debt. Objective: We aim at providing a solid basis to the definition of technical debt and the way it should be quantified. Method: We view technical debt as a software quality attribute and therefore we use Measurement Theory, the general reference framework for the quantification of attributes, to define technical debt and its characteristics in a rigorous way. Results: We show that technical debt should be defined as an external software quality attribute. Therefore, it should be quantified via statistical and machine-learning models whose independent variables are internal software quality attributes. Different models may exist, depending on the specific needs and goals of the software product and development environment. Also, technical debt is a multifaceted concept, so different kinds of technical debt exist, related to different quality attributes, such as performance, usability, and maintainability. These different kinds of technical debt should be evaluated individually, so one can better focus on the specific quality issues that need to be addressed. Conclusions: We show that, to provide it with a rigorous basis, technical debt should be considered and measured as an external software attribute. Researchers and practitioners should build models for technical debt and use them to (1) assess the extent of the technical debt and (2) investigate and assess different ways of modifying software to repay technical debt. © 2018 ACM.",10.1145/3194164.3194168,"Dip. di Scienze Teoriche e Applicate, Universit degli Studi dell'Insubria, Varese, Italy",Accepted
316,Financing Sustainable Development Amid the Crisis of 2020. A Research Note,"Bagherzadeh, M. and Kahani, N. and Bezemer, C.-P. and Hassan, A.E. and Dingel, J. and Cordy, J.R.",Empirical Software Engineering,2018,"Over the past 25 years, thousands of developers have contributed more than 18 million lines of code (LOC) to the Linux kernel. As the Linux kernel forms the central part of various operating systems that are used by millions of users, the kernel must be continuously adapted to the changing demands and expectations of these users. The Linux kernel provides its services to an application through system calls. The combined set of all system calls forms the essential Application Programming Interface (API) through which an application interacts with the kernel. In this paper, we conduct an empirical study of 8,770 changes that were made to Linux system calls during the last decade (i.e., from April 2005 to December 2014). In particular, we study the size of the changes, and we manually identify the type of changes and bug fixes that were made. Our analysis provides an overview of the evolution of the Linux system calls over the last decade. We find that there was a considerable amount of technical debt in the kernel, that was addressed by adding a number of sibling calls (i.e., 26% of all system calls). In addition, we find that by far, the ptrace() and signal handling system calls are the most challenging to maintain. Our study can be used by developers who want to improve the design and ensure the successful evolution of their own kernel APIs. © 2017, Springer Science+Business Media, LLC.",10.1007/s10664-017-9551-z,"School of Computing, Queens University, Kingston, ON, Canada",Rejected
317,Predictive Model Influenced by External Factors to Reduce Uncertainty in the Budget Forecast of a Gold Mining Company,"Shahbazian, A. and Nam, D. and Medvidovic, N.",Proceedings - International Conference on Software Engineering,2018,"In a software system's development lifecycle, engineers make numerous design decisions that subsequently cause architectural change in the system. Previous studies have shown that, more often than not, these architectural changes are unintentional by-products of continual software maintenance tasks. The result of inadvertent architectural changes is accumulation of technical debt and deterioration of software quality. Despite their important implications, there is a relative shortage of techniques, tools, and empirical studies pertaining to architectural design decisions. In this paper, we take a step toward addressing that scarcity by using the information in the issue and code repositories of open-source software systems to investigate the cause and frequency of such architectural design decisions. Furthermore, building on these results, we develop a predictive model that is able to identify the architectural significance of newly submitted issues, thereby helping engineers to prevent the adverse effects of architectural decay. The results of this study are based on the analysis of 21,062 issues affecting 301 versions of 5 large open-source systems for which the code changes and issues were publicly accessible. © 2018 ACM.",10.1145/3196398.3196440,"University of Southern California, Los Angeles, CA, United States",Accepted
318,Application of Deep Reinforcement Learning Methods in Debt Collection,"Izurieta, C. and Rice, D. and Kimball, K. and Valentien, T.",Proceedings - International Conference on Software Engineering,2018,"Context: Managing technical debt (TD) associated with potential security breaches found during design can lead to catching vulnerabilities (i.e., exploitable weaknesses) earlier in the software lifecycle; thus, anticipating TD principal and interest that can have decidedly negative impacts on businesses. Goal: To establish an approach to help assess TD associated with security weaknesses by leveraging the Common Weakness Enumeration (CWE) and its scoring mechanism, the Common Weakness Scoring System (CWSS). Method: We present a position study with a five-step approach employing the Quamoco quality model to operationalize the scoring of architectural CWEs. Results: We use static analysis to detect design level CWEs, calculate their CWSS scores, and provide a relative ranking of weaknesses that help practitioners identify the highest risks in an organization with a potential to impact TD. Conclusion: CWSS is a community agreed upon method that should be leveraged to help inform the ranking of security related TD items. © 2018 ACM.",10.1145/3194164.3194167,"Montana State University, Bozeman, MT, United States; Georgia College and State University, Milledgeville, GA, United States; Georgia Institute of Technology, Atlanta, GA, United States",Rejected
319,Investment Evaluation Proposal with Fuzzy Tools: Case Molecular Immunology Center,"Magnusson, J. and Juiz, C. and Gómez, B. and Bermejo, B.",Proceedings - International Conference on Software Engineering,2018,"Technical debt has successfully captured the interest of practitioners and researchers alike. We argue that the concept of technical debt holds much more currency within the strategic Information Systems literature. Hence, we have developed a research framework for expanding the concept of technical debt into a new concept we dub ""technology debt"". This expanded concept aims at capturing the path-dependencies reported in literature in regard to digital investments, and to make these both researchable and manageable. Technology debt is defined as the constraining effects of previous governance decisions on future decisions, including technical debt as important factor, but not unique. According to the findings, technology debt is a feasible method for highlighting the constraining aspects of IT investments and including these in the investment evaluation by governing body. This offers support for corporate stakeholders involved in the decision-making surrounding IT related investments, particularly in IT governance and management processes. © 2018 ACM.",10.1145/3194164.3194169,"Swedish Center for Digital Innovation, University of Gothenburg, Westerdal Oslo School of Art, Communication and Technology, Sweden; University of the Balearic Islands, Department of Computer Science, Spain",Accepted
320,Green Bonds: Peculiarities and Directions of Development,,Proceedings - International Conference on Software Engineering,2018,"The proceedings contain 22 papers. The topics discussed include: an exploratory study on the influence of developers in technical debt; architectural technical debt identification: the research landscape; technical debt as an external software attribute; introducing Debtgrep: a tool for fighting technical debt in base station software; AnaConDebt: a tool to assess and track technical debt; cognitive complexity - an overview and evaluation; the past, present and future of technical debt: learning from the past to prepare for the future; the developer's dilemma: factors affecting the decision to repay code debt; from lasagna to spaghetti: a decision model to manage defect debt; a proposed sizing model for managing 3rd party code technical debt; governing technology debt: beyond technical debt; trade-off decisions across time in technical debt management: a systematic literature review; design debt prioritization: a design best practice-based approach; technical debt cripples software developer productivity: a longitudinal study on developers' daily software development work; a framework for managing interest in technical debt: an industrial validation; limiting technical debt with maintainability assurance - an industry survey on used techniques and differences with service- and microservice-based systems; and a position study to investigate technical debt associated with security weaknesses.",,,Rejected
321,The Market Value Assessment of the Land Plots Encumbered with Mortgage Debt,,ICPE 2018 - Proceedings of the 2018 ACM/SPEC International Conference on Performance Engineering,2018,"The proceedings contain 28 papers. The topics discussed include: FOX: cost-awareness for autonomic resource management in public clouds; adaptive performance optimization under power constraint in multi-thread applications with diverse scalability; TESS: automated performance evaluation of self-healing and self-adaptive distributed software systems; to adapt or not to adapt? technical debt and learning driven self-adaptation for managing runtime performance; involving CPUs into multi-GPU deep learning; measuring network latency variation impacts to high performance computing application performance; pattern-based modeling of multiresilience solutions for high-performance computing; energy and performance analysis of parallel particle solvers from the ScaFaCoS library; characterizing the microarchitectural implications of a convolutional neural network (CNN) execution on GPUs; Log4Perf: suggesting logging locations for web-based systems' performance monitoring; ODP: an infrastructure for on-demand service profiling; virtualization techniques compared: performance, resource, and power usage overheads in clouds; investigating performance metrics for scaling microservices in cloud-IoT-environments; evaluating scalability and performance of a security management solution in large virtualized environments; runtime performance management for cloud applications with adaptive controllers; and rapid testing of IaaS resource management algorithms via cloud middleware simulation.",,,Rejected
322,On the Issue of Sustainable Development of the Russian Agro-Industrial Complex,"Chen, T. and Bahsoon, R. and Wang, S. and Yao, X.",ICPE 2018 - Proceedings of the 2018 ACM/SPEC International Conference on Performance Engineering,2018,"Self-adaptive system (SAS) can adapt itself to optimize various key performance indicators in response to the dynamics and uncertainty in environment. In this paper, we present Debt Learning Driven Adaptation (DLDA), an framework that dynamically determines when and whether to adapt the SAS at runtime. DLDA leverages the temporal adaptation debt, a notion derived from the technical debt metaphor, to quantify the time-varying money that the SAS carries in relation to its performance and Service Level Agreements. We designed a temporal net debt driven labeling to label whether it is economically healthier to adapt the SAS (or not) in a circumstance, based on which an online machine learning classifier learns the correlation, and then predicts whether to adapt under the future circumstances. We conducted comprehensive experiments to evaluate DLDA with two different planners, using 5 online machine learning classifiers, and in comparison to 4 state-of-the-art debt-oblivious triggering approaches. The results reveal the effectiveness and superiority of DLDA according to different metrics. © 2018 Association for Computing Machinery.",10.1145/3184407.3184413,"Department of Computing and Technology, Nottingham Trent University, United Kingdom; CERCIA, School of Computer Science, University of Birmingham, United Kingdom; Department of Computer Science and Engineering, Southern University of Science and Technology, China",Accepted
323,Optimal planning and economic evaluation of trigeneration districts,"Mylonas, Y.",TripleC,2018,"This article looks at the ways mainstream media discuss austerity and its failure to reach its proclaimed goals, to reduce public debt and to boost productivity in the heavily indebted countries of the Eurozones periphery. This study analyzed Der Spiegels articles presenting the crisis and austerity in Europe, focusing on the Greek case, from 2009 until 2014. A thematic analysis was developed in the study a broad corpus of articles, focusing on the main ideas they unfold. Deploying critical political economy literature, critical cultural theory and critical media studies literature, the article criticizes the neoliberal hegemony of the EUs crisis politics and foregrounds the role of mainstream media, including progressivist or objectivist ones such as Spiegel, in the reproduction of neoliberal ideas that expand far beyond the crisis, to produce the institutions, social relations, beliefs and subjectivities for a post-crisis configuration of capitalism. The article concludes that Spiegel, like other mainstream media, produce a biopolitical policing of the crisis exceptionalized subjects (the citizens of indebted countries) and the implementation of crisis-politics by creating a public structure of feeling related to the hegemonic crisis rationales. These rationales are further connected to the development of the new neoliberal subjectivity, which is an objective of the crisis-reforms, such as austerity regimes. In effect, mainstream media discourses reproduce the hegemonic frames of the crisis and austerity, while negating the possibility of new narratives to emerge in the crisis context. © 2018, Unified Theory of Information Research Group. All rights reserved.",10.31269/TRIPLEC.V13I2.673,"Media, Communications and Design Department, National Research University, Higher School of Economics, Moscow, Russian Federation",Rejected
324,Pattern recognition techniques to classify the European emerging markets companies from the valuation perspective,"Tan, S. and Jin, Z. and Yin, G.",Nonlinear Analysis: Hybrid Systems,2018,"This paper develops an optimal dividend policy for an insurance company, whose asset and liability have different dynamics, and whose surplus follows a regime-switching jumpdiffusion process. The insurer aims to maximize the expected total discounted value of dividends paid out under the debt management constraint. By using the dynamic programming principle, a generalized system of integro-differential HamiltonJacobiBellman equations is derived. Moreover, this paper studies two cases where the liability of the insurer follows a uniform claim density and a generalized Pareto density in a two-regime economy, respectively. Closed-form solutions of the value functions and the optimal dividend payment strategies are obtained in both cases. A numerical example is provided to illustrate the relationship between the key parameters in the model and the value functions, as well as some interesting economic insights. © 2017 Elsevier Ltd",10.1016/j.nahs.2017.08.007,"Faculty of Actuarial Science and Insurance, Cass Business School, London, United Kingdom; Centre for Actuarial Studies, Department of Economics, The University of Melbourne, VIC, 3010, Australia; Department of Mathematics, Wayne State University, Detroit, MI  48202, United States",Rejected
325,Decision making based on performance evaluation,"Khoufi, I. and Minet, P. and Rmiliy, B.",IEEE Vehicular Technology Conference,2018,"Time Slotted Channel Hopping (TSCH), specified in the IEEE 802.15.4e amendment, has been designed for industrial automation, process control and equipment monitoring. It uses a slotted medium access on several channels in parallel and supports multihop communications. In this paper, we study how applications with data delivery constraints can be supported by a TSCH network. We first propose a framework based on a multislotframe that allows the coexistence of Data Slotframes and Control Slotframes. We then determine a lower bound on the minimum number of slots required to perform data gathering, taking into account the number of channels, the number of interfaces of the sink, the number of packets generated by each sensor node as well as the number of children of the sink. These feasibility conditions are established for two cases: with spatial reuse and without. We propose a debt-based scheduler that for simple topologies, provides a schedule minimizing the slotframe size. Finally, we consider a network configuration representative of an industrial application and evaluate the performance of the TSCH network in terms of data delivery delay and queue size for each sensor node, using the NS-3 simulator. Simulation results confirm the theory. © 2017 IEEE.",10.1109/VTCFall.2017.8288164,"Inria, 2 rue Simone Iff, Paris Cedex 12, 75589, France; CNES Launcher Direct., 52 rue Jacques Hillairet, Paris, 75012, France",Rejected
326,Timescale Analysis with an Entropy-Based Shift-Invariant Discrete Wavelet Transform,"Nasip, I. and Sudarmaji, E.",International Journal of Engineering and Technology(UAE),2018,"The IFRS-16 will shortly be implemented worldwide, where the operating lease is effectively removed, and all operational leases are qualified as debt. The operational lease is a major source and is important for off-balance sheet financing in Indonesia. Therefore, the implementation of IFRS-16 will probably hurt Indonesian business. The contract and/or service level agreements on the retrofits for the energy efficiency product can relieve the business owner from cash flow and new debts. This study established a framework for a critical comparative study; compare and assess the possibility of the retrofit financial practices under the current taxes regime, and the possibility upon IFRS-16 implementation to better understand the favorable measures for retrofit practitioners and future customers to handle the disputes. Triangulate the findings of comparative study and questionnaire survey to develop recommendation for the future researchers, practitioners and the government. The result indicates that the benefits of the retrofits financing implementation beat the cost and complexity posed by the enactment of new IFRS standards. Thus, the impact of the IFRS-16 and taxation are being considered as a part of business constraints that should be addressed together and able to manage the disputes over misperception on retrofits aspects with taxes officers. © 2018 Authors.",10.14419/ijet.v7i3.21.17160,"University of Bina Nusantara, Indonesia; University of Pancasila, Indonesia",Rejected
327,"The causality relationship between public debt, economic growth and export in Malaysia","Wang, J. and Zhang, L. and Shen, P. and Zhu, G. and Zhang, Y.",Communications in Computer and Information Science,2018,"With rapid development of the microfinance industry, the number of customs has surged and the bad debt rate has risen dramatically. Increase of the overdue customers has led to a substantial augment in business volume in the collection industry. However, under the current policy of protecting customer privacy, the lack of credit information, as well as the constraints of collections cost and scale is two major issues that the collection industry comes across. This paper proposes a repayment probability forecasting system that does not rely on credit information, but can improve the collection efficiency. The proposed system focuses on preprocessing more than one hundred thousand overdue data, using word2vec to locate the keyword, extracting features of the data according to their types. Our system also depends on mature machine learning models to predict the customers ability of repayment, including LR, GBDT, XGBoost and RF. Meanwhile, we not only use AUC but also design a new evaluation index that can be adapted to the business background to evaluate the systems performance. Experiments results show that, in the case of a surge in business volume and around 1.5% of the overdue costumers repayment, through our system, collection on only the first half of the customers with high scores can increase the repayment rate by at least 1.2%, which greatly increases the work efficiency and reduces manual labor for collection. © Springer Nature Singapore Pte Ltd. 2018.",10.1007/978-981-13-2922-7_2,"Xidian University, Xian, China; Xian University, Xian, China",Rejected
328,Economic analysis of chemical energy storage technologies,"Ramchand, K. and Chhetri, M.B. and Kowalczyk, R.",ACIS 2018 - 29th Australasian Conference on Information Systems,2018,"Correct decision-making about the cloud platform architecture is crucial for the success of any cloud migration project; bad decisions can lead to undesirable consequences including project delays, budget overruns, application instability, below-par performance and creation of technical debt. Rule-Based Reasoning (RBR), a popular approach for solving clearly defined problems, can be used for cloud platform recommendation if a comprehensive set of requirements are available. However, the responsibility of decision-making is increasingly moving away from the hands of the technical subject matter experts, and into the hands of the business sponsors. Therefore, in this paper, we propose combining Case-Based Reasoning (CBR) with RBR to assist business sponsors in making strategic decisions between public, private and hybrid cloud with a high level of confidence even at the initial stages of the project. © 2018 Ramchand, Baruwal Chhetri, Kowalczyk.",10.5130/acis2018.ac,"School of Computer Science and Software Engineering, Swinburne University of Technology, Melbourne, Australia; Systems Research Institute, Polish Academy of Sciences, Warsaw, Poland",Rejected
329,Analysis of Correlation Based Networks Representing DAX 30 Stock Price Returns,"Pacheco, A. and Marín-Raventós, G. and López, G.",Lecture Notes in Business Information Processing,2018,"Technical debt is the release of immature software to meet time to market. In large complex companies, technical dept drives IT decision, even when participants in the decision-making process do not realize it. In this paper, we propose technical debt visualizations that can serve as a communication platform between different stakeholders. We conducted a case study in a large multi-industry state-owned company that faces significant challenges due to global digital transformation, its rigid control structures, and external pressures for cost reduction and investment optimization. In this study, we designed and evaluated technical debt visualizations to get feedback concerning its usefulness and ease its future acceptance. The results from this case study show that technical debt visualizations were considered useful for decision-making processes associated with software life cycle, especially for executives, business managers, software product owners, architects and project managers. © IFIP International Federation for Information Processing 2018.",10.1007/978-3-319-99040-8_2,"Research Center for Communication and Information Technologies (CITIC), University of Costa Rica (UCR), San José, Costa Rica; University of Costa Rica (UCR), San José, Costa Rica",Accepted
330,From micro behaviors to macro dynamics: An agent-based economic model with consumer credit,"Siew, L.W. and Hoe, L.W. and Fai, L.K.",Communications in Computer and Information Science,2018,"Technology sector plays an important role in a country since the development of the technology can affect the reputation of the country. The financial performance of the technology companies is important because they represent the overall performance of technology sector in Malaysia. The objective of this study is to propose a conceptual framework to evaluate, rank and compare the financial performance of the companies from the technology sector based in Malaysia using Entropy-Technique for Order of Preference by Similarity to Ideal Solution model. The data analysis on the performance of the companies is assessed by current ratio, debt to assets ratio, debt to equity ratio, earnings per share, return on asset and return on equity. The results of this study show that MPI, GTRONIC, KESM and ECS are ranked as the top four technology companies in Malaysia. This study is significant because it helps to determine the financial performance of the companies from the technology sector in Malaysia with the proposed conceptual framework based on entropy-TOPSIS model. © 2018, Springer Nature Singapore Pte Ltd.",10.1007/978-981-13-1628-9_18,"Department of Physical and Mathematical Science, Faculty of Science, Universiti Tunku Abdul Rahman, Kampar Campus, Jalan Universiti, Bandar Barat, Kampar, Perak  31900, Malaysia; Centre for Business and Management, Universiti Tunku Abdul Rahman, Kampar Campus, Jalan Universiti, Bandar Barat, Kampar, Perak  31900, Malaysia; Centre for Mathematical Sciences, Universiti Tunku Abdul Rahman, Kampar Campus, Jalan Universiti, Bandar Barat, Kampar, Perak  31900, Malaysia",Rejected
331,Hyper-parameterised dynamic regressions for nowcasting Spanish GDP growth in real time,"Hyrynsalmi, S.M. and Rantanen, M.M. and Holvitie, J. and Hyrynsalmi, S. and Sutinen, E.",Communications in Computer and Information Science,2018,"This conceptual-analytical paper presents and defines the concept of human resource debt (i.e., HR debt). The presented concept draws from the software engineering fields recent work in the technical debt management, yet it departures from the existing conceptualizations by focusing on skills and competences of individual employees as well as emphasizing the need to manage the skill pool with conscious decisions. As with its paragons, this novel concept aims to help to understand, control and utilize better the phenomenon by using a simple metaphor. In addition, the metaphor, borrowed from the economics, also emphasizes the potential price that has to be paid back later. In the discussion, the ever-changing software industry is used as an example industrial domain; however, the concept should be generalizable to other fields. Finally, the paper lays foundations for future work and proposes initial actions needed for forming a proper research agenda. © Springer Nature Switzerland AG 2018.",10.1007/978-3-319-97931-1_3,"University of Turku, Turku, Finland; Turku School of Economics, University of Turku, Turku, Finland; Department of Future Technologies, University of Turku, Turku, Finland; Pervasive Computing, Tampere University of Technology, Pori, Finland",Accepted
332,Multi-Level Protection (MLP) Musharaka Sukuk: Social impact and pricing methodology,"Rosa, P.S. and Ralha, C.G. and Gartner, I.R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,"This article explores the financial systemic risk emergence process using an agent-based simulation model representing the investor attitudes towards risk. The multidisciplinary theoretic base is compound of portfolio selection, sovereign debt securities and agent rationality literature. Following the 2007/8 world financial crisis, the sovereign debt crises in the European countries have been attracting researches, showing a diabolic loop between sovereign debt and the banking credit risk fragility, which can be followed by systemic crises. Modern financial systems rely heavily, mainly at times of political-economic uncertainty, on availability of safe assets (risk-free assets) to choose asset portfolios and also to use them as collateral in markets operations. In order to analyze the relations between financial rationality and investments on bonds of the Brazilian sovereign debt, this article uses a bottom-up approach, based on agent rationality, and simulates portfolio selection by neutrals, risk-seeking and risk-averse investors, all of them concrete classes of an investor abstract class. The main findings confirm that rational choices of investments are likely to be at the base of the doom loop that involves sovereign debt and institutional investors. The findings have important implications to policy makers regarding systemic risk issues, among others public policies. © Springer International Publishing AG, part of Springer Nature 2018.",10.1007/978-3-319-91587-6_14,"Department of Management, University of Brasília (UnB), Brasília, DF, Brazil; Computer Science Department, Institute of Exact Sciences, University of Brasília (UnB), Brasília, DF, Brazil",Rejected
333,Game Theoretic Modeling of Economic Systems and the European Debt Crisis,"Besker, T. and Martini, A. and Bosch, J.",Journal of Systems and Software,2018,"Large Software Companies need to support the continuous and fast delivery of customer value in both the short and long term. However, this can be impeded if the evolution and maintenance of existing systems is hampered by what has been recently termed Technical Debt (TD). Specifically, Architectural TD has received increased attention in the last few years due to its significant impact on system success and, left unchecked, it can cause expensive repercussions. It is therefore important to understand the underlying factors of architectural TD. With this as background, there is a need for a descriptive model to illustrate and explain different architectural TD issues. The aim of this study is to synthesize and compile research efforts with the goal of creating new knowledge with a specific interest in the architectural TD field. The contribution of this paper is the presentation of a novel descriptive model, providing a comprehensive interpretation of the architectural TD phenomenon. This model categorizes the main characteristics of architectural TD and reveals their relations. The results show that, by using this model, different stakeholders could increase the system's success rate, and lower the rate of negative consequences, by raising awareness about architectural TD. © 2017 Elsevier Inc.",10.1016/j.jss.2017.09.025,"Computer Science and Engineering, Software Engineering, Chalmers University of Technology, Gothenburg, Sweden",Accepted
334,Application and comparative study of optimization algorithms in financial investment portfolio problems,"Prabha, R. and Sinitambirivoutin, E. and Passelaigue, F. and Ramesh, M.V.","2018 International Conference on Wireless Communications, Signal Processing and Networking, WiSPNET 2018",2018,"India is an agricultural country and 70% of the people directly or indirectly depends on agriculture for their living. Nowadays, water scarcity is one of the main challenges faced by the farmers. Another major challenge faced by Indian agriculture sector is the increase in rate of farmers suicide because of debt. So, effective measures have to be devised in order to reduce the cost of farming and increase the yield from agriculture. This research work proposes the design of a generic IoT framework for improving agriculture yield by effectively scheduling irrigation and fertilization based on the crops current requirements, environmental conditions and weather forecasts. This work proposes the design of an affordable irrigation and fertilization system. The proposed fertilization system spreads fertilizers to the root directly. This reduces the amount of fertilizers required and thus reduces the cost and improves the soil health. A user friendly mobile application has been designed to deliver this information to the farmers in their regional language. The generic framework has been validated using a case study for chilli farming. © 2018 IEEE.",10.1109/WiSPNET.2018.8538568,"Amrita Center for Wireless Networks Applications (AmritaWNA), Amrita School of Engineering, Amrita Vishwa Vidyapeetham, Amritapuri, India; Phelma Engineering School, Grenoble Institute of Technology (Grenoble INP), 3 Parvis Louis Neel-CS 50257, Grenoble, 38016, France; Amrita Center for Wireless Networks Applications (AmritaWNA), Amrita School of Engineering, Amrita Vishwa Vidyapeetham, Amritapuri, India",Rejected
335,Debt Portfolio Management for an Oil Company Under Oil Price Uncertainty,"Dudin, M.N. and Burkaltseva, D.D. and Blazhevich, O.G. and Betskov, A.V. and Gaponenko, V.F. and Kilyaskhanov, H.S. and Safonova, N.S.",International Journal of Engineering and Technology(UAE),2018,"Subject/theme. SWOT analysis of the financial security of modern Russia is carried out herein to identify the prospects for the improvement of the financial security at the macrolevel. Purpose/objectives. The purpose of the article is to analyze the financial security of the state through the example of Russia. To achieve the purpose hereof, it is required to solve the following tasks: To provide the SWOT analysis matrix of the financial security of the Russian Federation. To determine the influence of the strengths on the opportunities and threats to the financial security of the Russian Federation. To determine the influence of the weaknesses on the opportunities and threats to the financial security of the Russian Federation. To quantify the elements of SWOT analysis. To identify the current threats to the financial security of the Russian Federation. To propose the measures to reduce the threats and to improve the level of financial security of the Russian Federation. Methods. The most common and high-quality strategic planning instrument - the SWOT analysis method - is used herein. Results. The imposition of anti-Russian sanctions made it possible to identify the problematic areas of the state, which are a threat to the financial security of the Russian Federation. The following can be identified as the current threats to the financial security of the Russian Federation: the outflow of domestic capital abroad and offshore; the quantitative restriction of money supply when issuing rubles for the growth of foreign exchange reserves; a high level of external public debt; high tax burden on business; weak investment activity and a slowdown in the rate of foreign investment; the instability of the banking system. Despite the considerable pressure from foreign countries, the Russian Federation is taking measures to neutralize the external threats to national security, reducing the possibility of external influence on its international position. Conclusion/relevance. SWOT analysis of the financial security of the state shows that the strengths prevail in the Russian Federation, but there are many weaknesses and external threats. In the aggregate, the field of strengths and opportunities prevails over the field of weaknesses and threats. Consequently, the Russian Federation has the prospects for development, but for further development the strength should be used to neutralize the threats. © 2018 Authors.",10.14419/ijet.v7i3.2.14422,"Russian Presidential Academy of National Economy and Public Administration, Vernadskogo Ave., 82, Moscow, 119571, Russian Federation; V.I. Vernadsky Crimean Federal University, Vernadskogo Avenue, 4 Simferopol, Republic of Crimea, 295007, Russian Federation; Management Academy of the Ministry of the Interior of Russia, Zoi and Aleksandra Kosmodemyanskikh Street, 8, Moscow, 125993, Russian Federation",Rejected
336,The Blockchain alternative: Rethinking macroeconomic policy and economic theory,"Gorbatkov, S.A. and Rastegaeva, F.S. and Farkhieva, S.A. and Nakonechnaya, T.V. and Shashkova, T.N.",Journal of Advanced Research in Dynamical and Control Systems,2018,"The article deals with the problem of developing an information and mathematical model to support decision-making on the restructuring of corporate debt in the banking technologies of financial management. The aim of the article is to create a model that allows diagnosing the stages of the developing corporate crisis in the complex conditions of incomplete and noise polluted data. The model should serve as a tool to improve the objectivity and quality of decisions made on the restructuring of corporate debt. The study was conducted on the basis of neural network modeling methods and methods of system analysis, methods of decision-making theory, methods of solving inverse problems of interpretation, i.e. extraction of new knowledge from data. The original method of constructing neural network logistic model of bankruptcies (NNLMB) in the difficult conditions of the modeling was developed. New features of the method, increasing the predictive power of the model, are: 1) optimal selection of factors using Bayesian ensemble of auxiliary neural networks, performing compression of factor space; 2) step compression of factors based on the generalized Harrington desirability function; 3) regularization of the main (working) neural network model on Bayesian ensemble of neural networks. NNLMB is tested on real data of construction industry corporations. The number of correctly identified objects on the test set was more than 90% on all neural networks of the ensemble. The proposed method of constructing the model is compared with other known methods. © 2018, Institute of Advanced Scientific Research, Inc. All rights reserved.",,"Mathematics and Computer Science Department, Financial University under the Government of the Russian Federation in Ufimsk, Russian Federation; Accounting, Audit, Statistics Department, Financial University under the Government of the Russian Federation in Ufimsk, Russian Federation",Rejected
337,The analysis of the impact of infotelecommunication factors on the Russian tax administration,"Victorova, N.G. and Yablokov, D.Y. and Yevstigneev, E.N. and Valebnikova, N.V.","Proceedings of the 32nd International Business Information Management Association Conference, IBIMA 2018 - Vision 2020: Sustainable Economic Development and Application of Innovation Management from Regional expansion to Global Growth",2018,"This analyzes the impact of information and communication technologies (ICT), which are the main tools of the information society, on tax administration in Russia. For this purpose, a correlation/regression model was built, reflecting the impact on tax revenues from both the traditional factors (in particular, the debt of taxpayers to the budget, additional tax amounts assessed upon as a result of tax audits, the number of business entities) and the IT factor (the number of active internet users). The inclusion into the model of the factors selected by the authors is supported by the corresponding rationale. The model includes the presentation of the data by Federal Districts and for the Russian Federation as a whole. The findings were analyzed. It was proved that the technological factor has an impact on tax collection and, hence, on the efficiency of tax administration. Copyright © 2018 International Business Information Management Association (IBIMA).",,"Graduate School of Economics and Engineering, Peter the Great Saint-Petersburg Polytechnic University, Polytechnicheskaja str., 29, St. Petersburg, 195251, Russian Federation; Graduate School of Economics and Engineering, Peter the Great Saint-Petersburg Polytechnic University, Polytechnicheskaja str., 29, St. Petersburg, 195251, Russian Federation; Graduate School of Economics and Engineering, Peter the Great Saint-Petersburg Polytechnic University, Polytechnicheskaja str., 29, St. Petersburg, ",Rejected
338,Analysis of manufacturing response to selected macroeconomic indicators in Nigeria,"Okoye, L.U. and Olokoyo, F.O. and Ezeji, F.N. and Achugamonu, U.B.","Proceedings of the 32nd International Business Information Management Association Conference, IBIMA 2018 - Vision 2020: Sustainable Economic Development and Application of Innovation Management from Regional expansion to Global Growth",2018,"Nigeria, like many other developing nations, targets a transition from primary to secondary production to achieve rapid and sustainable economic growth through development of a vibrant industrial sector. Manufacturing is an integral of the industrial sector necessary for rapid growth of an economy. To achieve a vibrant and robust manufacturing sub-sector, strong economic fundamentals are basic requirements. This paper estimates the impact of key macroeconomic indicators on manufacturing performance in Nigeria over the period 1975-2015. Manufacturing capacity utilization is adopted as proxy for manufacturing performance while exchange rate, lending rate, inflation rate, external debt-GDP ratio, terms of trade and trade openness are selected exogenous variables. The vector autoregressive analytical technique is adopted. The variance decomposition result shows that variations in manufacturing capacity utilization in Nigeria are largely driven by shocks to its lagged values. The result further shows strong positive impact of trade openness on manufacturing capacity utilization. The study therefore concludes that manufacturing performance in Nigeria is partly driven by shocks to own innovations and partly by trade policy shocks. The study recommends introduction of trade, economic and industrial development policies that support systematic and sustainable improvement in manufacturing capacity utilization to enhance manufacturing performance. Copyright © 2018 International Business Information Management Association (IBIMA).",,"Department of Banking and Finance, Covenant University, Ota, Nigeria; Department of Banking and Finance, Ebonyi State University, Abakaliki, Nigeria",Rejected
339,A Framework for the Semiotic Quality of User Stories,"Mo, J. and Liu, X.","Proceedings of 2018 IEEE 3rd Advanced Information Technology, Electronic and Automation Control Conference, IAEAC 2018",2018,"The ongoing research establishes the economic evaluation model of the West China Regional Railway projects based on Vensim software, then the simulation analyses concerning the model are conducted. Being the infrastructure of national economy, railway has been playing a vital role in economy and social development. Therefore, the comprehensive economic evaluation comes as a necessity due to the urgent need to guarantee the accuracy and scientificity in decision-making process of railway project investing. The system dynamics as a tool is associated with local railway projects to set up the model, and one of the projects is taken as an example to perform the simulation and analysis via Vinsem platform. The paper mainly focuses on the financial evaluation analysis of the project, through the actual simulation of the project based on the model, a comprehensive and dynamic understanding of the profitability, the debt-paying ability and the economic reasonability of the project can be obtained, additionally, the sensibility of the system is detected to seek the key factors that affecting the feasibility of the model. The result tells that: The results show that: The model is feasible and effective, the most sensitive factor is freight rate and volume. © 2018 IEEE.",10.1109/IAEAC.2018.8577615,"School of Civil Engineering, Lanzhou Jiaotong University, Gansu, China",Rejected
340,Modeling and Simulation of Economic Evaluation of Regional Railway Projects in Western China Based on System Dynamics,,Proceedings - International Conference on Software Engineering,2018,"The proceedings contain 229 papers. The topics discussed include: SATD detector: a text-mining-based self-admitted technical debt detection tool; Aletheia: a failure diagnosis toolchain; when the testing gets tough, the tough get ElasTest; an extensible, regular-expression-based tool for multi-language mutant generation; MDroid+: a mutation testing framework for android; the Palladio-bench for modeling and simulating software architectures; PerformanceHat - augmenting source code with runtime performance traces in the IDE; GuideGen - a tool for keeping requirements and acceptance tests aligned; EVA: a tool for visualizing software architectural evolution; SAFL: increasing and accelerating testing coverage with symbolic execution and guided fuzzing; KernelHaven - an experimentation workbench for analyzing software product lines; Elixir: an automated repair tool for java programs; multi-view editing of software product lines with PEoPL; VisuFlow: a debugging environment for static analyses; MDebugger: a model-level debugger for UML-RT; COMB: computing relevant program behaviors; the gamma statechart composition framework: design, verification and code generation for component-based reactive systems; understanding the role of reporting in work item tracking systems for software development: an industrial case study; a methodology to teaching statistical process control for software engineers; continuous inspection in the classroom: improving students' programming quality with social coding methods; and a multi-year analysis of students' build errors in agile software development educational projects.",,,Duplicated
341,Economic optimization of the oil and gas companies financing,,Proceedings - International Conference on Software Engineering,2018,"The proceedings contain 36 papers. The topics discussed include: adopting autonomic computing capabilities in existing large-scale systems; Java performance troubleshooting and optimization at Alibaba; an exploratory study on faults in web API integration in a large-scale payment company; transparency and contracts: continuous integration and delivery in the automotive ecosystem; cross-language optimizations in big data systems: a case study of SCOPE; smelly relations: measuring and understanding database schema quality; rethink EE architecture in automotive to facilitate automation, connectivity, and electro mobility; exploration of technical debt in start-ups; variant management solution for large scale software product lines; how to design a program repair Bot? insights from the repairnator project; echoes from space: grouping commands with large-scale telemetry data; tool-based interactive software parallelization: a case study; studying pull request merges: a case study of shopify's active merchant; a detailed and real-time performance monitoring framework for blockchain systems; proactive and pervasive combinatorial testing; practical selective regression testing with effective redundancy in interleaved tests; and modern code review: a case study at Google.",,,Duplicated
342,fiScal regUlation of national economieS SUStainaBle growth,,Proceedings - International Conference on Software Engineering,2018,The proceedings contain 38 papers. The topics discussed include: Ares: triggering payload of evasive android malware; Orlis: obfuscation-resilient library detection for Android; identifying architectural technical debt in android applications through automated compliance checking; programming support for data intensive distributed mobile applications at the edge; improving Android permissions models for increased user awareness and security; does source code quality reflect the ratings of apps?; an investigation into Android run-time permissions from the end users' perspective; investigating user perception and comprehension of android permission models; automated detection and repair of incompatible uses of runtime permissions in Android apps; TYDR - track your daily routine. android app for tracking smartphone sensor and usage data; MobiCoMonkey - context testing of Android apps; ICC-Inspect: supporting runtime inspection of Android inter-component communications; analyzing the user interface of Android Apps; HR-Auth: heart rate data authentication using consumer wearables; API for power-aware application design on mobile systems; a performance evaluation of cross-platform mobile application development approaches; intent to share: enhancing android inter-component communication for distributed devices; and programming support for sharing resources across heterogeneous mobile devices.,,,Duplicated
343,Assessing risk of enterprise bankruptcy by indicators of financial and economic activity using bayesian networks,,ACM International Conference Proceeding Series,2018,"The proceedings contain 39 papers. The topics discussed include: a catalogue of bad smells for software process; a quality-oriented approach to recommend move method refactorings; a study on identification of documentation and requirement technical debt through code comment analysis; analysis of Brazilian symposium on software quality (SBQS): retrospective, relevance, and trends in the past 5 years; analysis of code familiarity in module and functionality perspectives; analysis of open-source CASE tools for supporting software modeling process with UML; causal analysis and resolution with theory of constraints - the Cartoc method; comparing SMartySPEM and vSPEM for modeling variability in software processes: a qualitative study; configuring software product line specific products with SMarty and PLUS: an experimental study on use case diagrams; digitization of public services: a systematic literature review; experimental evaluation of the SMartyCheck technique for inspecting defects in UML component diagrams; experimenting with a multi-approach testing strategy for adaptive systems; green and sustainable software engineering - a systematic mapping study; interoperability in systems-of-information systems: a systematic mapping study; knowledge management diagnostics in software development organizations: a systematic literature review; MERCI - a method to evaluate combinatorial interaction testing tools for software product lines; and mobile application development training in mobile software ecosystem: investigating the developer experience.",,,Duplicated
344,"Impacts of socio-economic environments on marigold floriculture in Ranaghat-II, India","Mensah, S. and Keung, J. and Svajlenko, J. and Bennin, K.E. and Mi, Q.",Journal of Systems and Software,2018,"Programmers tend to leave incomplete, temporary workarounds and buggy codes that require rework in software development and such pitfall is referred to as Self-admitted Technical Debt (SATD). Previous studies have shown that SATD negatively affects software project and incurs high maintenance overheads. In this study, we introduce a prioritization scheme comprising mainly of identification, examination and rework effort estimation of prioritized tasks in order to make a final decision prior to software release. Using the proposed prioritization scheme, we perform an exploratory analysis on four open source projects to investigate how SATD can be minimized. Four prominent causes of SATD are identified, namely code smells (23.2%), complicated and complex tasks (22.0%), inadequate code testing (21.2%) and unexpected code performance (17.4%). Results show that, among all the types of SATD, design debts on average are highly prone to software bugs across the four projects analysed. Our findings show that a rework effort of approximately 10 to 25 commented LOC per SATD source file is needed to address the highly prioritized SATD (vital few) tasks. The proposed prioritization scheme is a novel technique that will aid in decision making prior to software release in an attempt to minimize high maintenance overheads. © 2017 Elsevier Inc.",10.1016/j.jss.2017.09.026,"Department of Computer Science, City University of Hong Kong, Hong Kong, Hong Kong; Department of Computer Science, University of Saskatchewan, Saskatoon, Canada",Accepted
345,Research on the Impact of Foreign Exchange Reserves on the Effectiveness of China's Monetary Policy from the Perspective of Marxist Economics,"Martini, A. and Sikander, E. and Madlani, N.",Information and Software Technology,2018,"Context Research and industry's attention has been focusing on developing systems that enable fast time to market in the short term, but would assure a sustainable delivery of business value and maintenance operations in the long run. A related phenomenon has been identified in Architectural Technical Debt: if the system architecture is sub-optimal for long-term business goals, it might need to be refactored. A key property of the system assuring long-term goals is its modularity, or else the degree to which components are decoupled: such property allows the product to be evolved without costly changes pervading the whole system. However, understanding the business benefits of refactoring to achieve modularity is not trivial, especially for large refactorings involving substantial architectural changes. Objective The aim of this study was to develop a technique to identify Architectural Technical Debt in the form of a non-modularized component and to quantify the convenience of its repayment. Method We have conducted a single, embedded case study in a large company, comparing a component before and after it was refactored to achieve modularity. We have developed a holistic framework for the semi-automated identification and estimation of Architectural Technical Debt in the form of non-modularized components. We then evaluate the technique reporting a comparative study of the difference in maintenance and development costs in two coexisting systems, one including the refactored component and one including the non-refactored one. Results The main contributions are a measurement system for the identification of the Architectural Technical Debt according to the stakeholders goals, a mathematical relationship for calculating and quantifying its interest in terms of extra-effort spent in additional development and maintenance, and an overall decision framework to assess the benefit of refactoring. We also report context-specific results that show the estimated benefits of refactoring the specific case of Architectural Technical Debt. Conclusion We found that it is possible to identify this kind of Architectural Technical Debt and to quantify its repayment convenience. Thanks to the developed framework, it was possible to estimate that the Architectural Technical Debt present in the component was causing substantial continuous extra-effort, and that the modularization would be repaid in several months of development and maintenance. © 2017 Elsevier B.V.",10.1016/j.infsof.2017.08.005,"University of Oslo, Department of Informatics Programming and Software Engineering Group, Oslo, Norway; Chalmers University of Technology, Software Engineering Division Gothenburg, Sweden",Accepted
346,Intelligent Data Analytics from the Energy Economics of the Greek Debt Crisis,"Singleton, J.L. and Leavens, G.T.",Advances in Intelligent Systems and Computing,2018,"Compositional reuse of software libraries is important for productivity. To promote reliability and correctness, there must also be a way to compose specifications for reuse. However, specifications cannot be adapted by the use of wrappers in the same ways as code, which leads to specifications being copied and modified. This copying and modification of specifications leads to poor maintainability and technical debt. We propose a system, Spekl, that solves these problems and makes compositional reuse of specifications possible in a way independent of the choice of specification languages and tools. We provide a detailed description of our system as well as provide details on our domain specific language for creating new tools, provide details on how to author new specifications, and demonstrate how Spekl facilitates compositional reuse through specification layering. © 2018, Springer International Publishing AG.",10.1007/978-3-319-56157-8_8,"Department of Computer Science, University of Central Florida, Orlando, United States",Rejected
347,Ensuring the Economic Security of the Countrys Financial System,"Woodcock, J.",TripleC,2018,"Universities have been the site of a variety of shifts and transformations in the previous few decades. Both the composition of students and academics are changing (to a lesser or greater extent), along with the ways in which teaching and research is supported, conducted, and delivered. The effects of neoliberalism, privatisation, precarious employment, debt, and digitalisation have been highlighted as important factors in understanding these changes. However, the ways in which these tendencies are expressed in universities  both in specific and general ways  remain fragmented and under-analysed. In particular, the role of academic labour processes, increasingly mediated through digital technology, remains in the background. There is a risk of viewing these transformations as abstracted, far removed from the day-to-day activities of academic labour on which universities rely. This article will therefore focus on connecting the broader changes in funding, organisation, and digital technology to the labour processes of academics. Rather than seeking a return to a romanticised pre-neoliberal university, this article explores the possibilities of resistance and alternatives to the university as it is now. © 2018, Unified Theory of Information Research Group. All rights reserved.",10.31269/vol16iss1pp129-142,"University of Leeds, University of Manchester, London School of Economics and Political Science Queen Mary, NYU London, Cass Business School, London, United Kingdom",Rejected
348,A Nash Equilibrium for Differential Games with Moving-Horizon Strategies,"Lenarduzzi, V. and Stan, A.C. and Taibi, D. and Venters, G. and Windegger, M.",Lecture Notes in Business Information Processing,2018,"Context: Unhandled code exceptions are often the cause of a drop in the number of users. In the highly competitive market of Android apps, users commonly stop using applications when they find some problem generated by unhandled exceptions. This is often reflected in a negative comment in the Google Play Store and developers are usually not able to reproduce the issue reported by the end users because of a lack of information. Objective: In this work, we present an industrial case study aimed at prioritizing the removal of bugs related to uncaught exceptions. Therefore, we (1) analyzed crash reports of an Android application developed by a public transportation company, (2) classified uncaught exceptions that caused the crashes; (3) prioritized the exceptions according to their impact on users. Results: The analysis of the exceptions showed that seven exceptions generated 70% of the overall errors and that it was possible to solve more than 50% of the exceptions-related issues by fixing just six Java classes. Moreover, as a side result, we discovered that the exceptions were highly correlated with two code smells, namely Spaghetti Code and Swiss Army Knife. The results of this study helped the company understand how to better focus their limited maintenance effort. Additionally, the adopted process can be beneficial for any Android developer in understanding how to prioritize the maintenance effort. © Springer International Publishing AG 2018.",10.1007/978-3-319-71440-0_8,"Free University of Bolzano-Bozen, Bolzano-Bozen, 39100, Italy; Pervasive Computing Department, Tampere University of Technology, Tampere, Finland; SASAbus, Bolzano-Bozen, 39100, Italy",Accepted
349,Normative versus strategic accounts of acknowledgment data: The case of the top-five journals of economics,"Kinyanjui, J. and Ocholla, D.",Communications in Computer and Information Science,2018,"Research shows high correlation between financial literacy skills and economic outcomes. This paper summarizes findings of a study on financial literacy competencies of women entrepreneurs in Kenya and how these skills affect their economic empowerment. The study used positivist/post positivist and constructivist approaches associated with Pragmatic paradigm. Data from 400 respondents were collected through questionnaires. Data analysis was through the Statistics and Data (STATA) package. Cross-tabulation analysis and chi-square test of independence were used to analyse relationships between variables. Willingness to invest in risky businesses (49.62%), not shopping around (48.74%), low numeric skills (66.92%), and taking loans without considering the cost (74.05%) are undermining womens economic empowerment demonstrated by the fact that 79.68% of the respondents felt that their financial status was out of control and 83.59% felt uncomfortable about their current debt status. The study was limited to women entrepreneurs in Chuka Constituency who received Uwezo Funds during the 2013/2014 financial year. © 2018, Springer International Publishing AG.",10.1007/978-3-319-74334-9_37,"University of Zululand, Empangeni, South Africa; Department of Information Studies, Faculty of Arts, University of Zululand, Empangeni, South Africa",Rejected
350,Interpretable deep learning LSTM model for intelligent economic decision-making,"Salinas, D.Z.",CEUR Workshop Proceedings,2018,"Within the public sector, conflicts of interest challenge the objectivity of public officials, threaten the outcome of public decisions, and create opportunities for corruption. Governments worldwide use various types of artifacts to address this problem: laws and regulations, the political market, and more recently, information system artifacts. Even though these types of artifacts have been in place for many years in various countries, the conflict of interest problem has intensified. The problem has recently been recognized as a worldwide governance problem. Disclosure Systems are a mainstream instrument to address the conflict of interest problem. Public officials are obliged by law to disclose information regarding their assets, sources of income, outside activities, participation in firms, debts, gifts, among other interests. This information is collected, registered, and verified by official monitoring bodies. Besides these traditional artifacts, a new wave of Information System Artifacts is arising, triggered by the advancement of IT tools. Our PhD research project regards the use, design, and effectiveness of such Information System artifacts to address the conflict of interest problem. © CEUR-WS. All rights reserved.",,"University of Bologna, Bologna, Italy; University of Turin, Turin, Italy",Rejected
351,Fuzzy Logic to Measure the Legal and Socioeconomic Effect of the Debtors Declared in the Canton of Pastaza,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,The proceedings contain 10 papers. The special focus in this conference is on Model Transformation. The topics include: NMF: A multi-platform modeling framework; virtual network embedding: Reducing the search space by model transformation techniques; schema transformations and query rewriting in ontological databases with a faceted interface; model transformation reuse across metamodels: A classification and comparison of approaches; Systematic recovery of MDE technology usage; technical debt in model transformation specifications; CoqTL: An internal DSL for model transformation in Coq; A formal framework for prototyping executable semantics in ATL; Scalable queries and model transformations with the mogwaï tool.,,,Rejected
352,CEUR Workshop Proceedings,"Lano, K. and Kolahdouz-Rahimi, S. and Sharbaf, M. and Alfraihi, H.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,"Model transformations (MT), as with any other software artifact, may contain quality flaws. Even if a transformation is functionally correct, such flaws will impair maintenance activities such as enhancement and porting. The concept of technical debt (TD) models the impact of such flaws as a burden carried by the software which must either be settled in a lump sum to eradicate the flaw, or paid in the ongoing additional costs of maintaining the software with the flaw. In this paper we investigate the characteristics of technical debt in model transformations, analysing a range of MT cases in different MT languages, and using measures of quality flaws or bad smells for MT, adapted from code measures. Based on these measures we identify significant differences in the level and kinds of technical debt in different MT languages, and we propose ways in which TD can be reduced. © Springer International Publishing AG, part of Springer Nature 2018.",10.1007/978-3-319-93317-7_6,"Department of Informatics, Kings College London, London, United Kingdom; Department of Software Engineering, University of Isfahan, Isfahan, Iran",Rejected
353,CEUR Workshop Proceedings,"Sullivan, D. and Colbert, E. and Kott, A. and Osterritter, L. and Dobson, G.","Proceedings of the 13th International Conference on Cyber Warfare and Security, ICCWS 2018",2018,"Cyber wargames have been shown to be useful for a broad range of purposes. The design method for each type of wargame can be custom tailored to the goals of the wargame activity. In this paper, we describe two specific methods for conducting wargames in the domain of cyber-physical systems (CPSs), review general methods for conducting wargames, and illustrate best practices to assist researchers and practitioners in planning their own wargames. The paper reflects the experiences, research, and insights of two organizations: the US Army Research Laboratory (ARL) and Carnegie Mellon Universitys Software Engineering Institute (SEI). ARL has conducted realistic CPS wargames. The wargames are designed to realistically simulate a corporate CPS network and are unique in that a variety of attack vectors (cyber, physical, and insider) are allowed. ARL developed best practices for such wargames by including realistic hardware, software, and labor costs in the game design, utilizing pre-wargame table-top simulations to predict attack vectors and mitigations, and embedding cost utility as an important aspect of gameplay. The cost of tools and labor is factored in when setting the starting cost utility for the opposing teams. ARLs wargames pit comparably skilled attackers and defenders who have cost incentives to choose strategies while not incurring substantial debt to earn utility. SEI designs CPS wargames for the US military. The wargames are designed to meet time-on-task skill requirements for cyber warriors. The wargame network is realistic, and the game scenarios demonstrate how mission success is dependent on cyber assets. The results of cyber attacks on physical systems are modeled in a completely virtual environment. The defenders then apply their skills to restore services needed for the mission. We discuss the design processes of these realistic wargames and the challenges to be considered when planning the actual exercises. © 2017 Academic Conferences and Publishing International Limited. All rights reserved.",,"US Army Research Laboratory, Adelphi, United States; Carnegie Mellon University Software Engineering Institute, Pittsburgh, United States",Rejected
354,Proceedings - International Conference on Software Engineering,,JIISIC 2018 - Jornadas Iberoamericanas de Ingenieria de Software e Ingenieria del Conocimiento,2018,"The proceedings contain 21 papers. The topics discussed include: PSP: how well it matches the skill set sought by the software industry in Latin America? a proposal to incorporate PSP into undergraduate SE education; the scientific landscape of agile software development and methodologies: a social network analysis perspective; methodology for the development of VR immersive virtual reality applications that comply with universal design principles. case study: uniagustiniana immersive virtual tour; determination and prioritization of requirements for software projects: simeer case study; enhancing spherical photography with videogame visual effects in virtual reality experiences for users with limited mobility; factors influencing the adoption of agile practices in very small software development companies; helping novice architects to manage architectural technical debt in microservices architecture; SMMicro: a methodological proposal for migrating from monolithic architecture to microservices; MoProPEI-MP an adaptation in the selection of process mining tools for software processes; cyberbullying in developing countries: uncovering the profiles of the aggressors, victims, manifestations and dynamics; guide for the selection of software development methodologies for small projects and small equipment; and gaps regarding requirements engineering protocol: a preliminary empirical study.",,,Rejected
355,Proceedings - International Conference on Software Engineering,"Gralha, C. and Damian, D. and Wasserman, A.I.T. and Goulão, M. and Araújo, J.",Proceedings - International Conference on Software Engineering,2018,"We use Grounded Theory to study the evolution of requirements practices of 16 software startups as they grow and introduce new products and services. These startups operate in a dynamic environment, with significant time and market pressure, and rarely have time for systematic requirements analysis. Our theory describes the evolution of practice along six dimensions that emerged as relevant to their requirements activities: requirements artefacts, knowledge management, requirements-related roles, planning, technical debt and product quality. Beyond the relationships among the dimensions, our theory also explains the turning points that drove the evolution along these dimensions. These changes are reactive, rather than planned, suggesting an overall pragmatic lightness, i.e., flexibility, in the startups' evolution towards engineering practices for requirements. Our theory organises knowledge about evolving requirements practice in maturing startups, and provides practical insights for startups' assessing their own evolution as they face challenges to their growth. Our research also suggests that a startup's evolution along the six dimensions is not fundamental to its success, but has significant effects on their product, their employees and the company. © 2018 ACM.",10.1145/3180155.3180158,"NOVA LINCS, DI, FCT, Universidade NOVA de Lisboa, Portugal; Department of Computer Science, University of Victoria, Canada; Carnegie Mellon University, Silicon Valley, United States",Rejected
356,Proceedings - International Conference on Software Engineering,"Da Silva, V.M. and Junior, H.J. and Travassos, G.H.","Avances en Ingenieria de Software a Nivel Iberoamericano, CIbSE 2018",2018,"Technical debt (TD) is receiving more and more attention in software engineering. Although it was initially used as a communication tool for technical and non-technical stakeholders, nowadays this concept supports the improvement of softwares internal quality. Despite the increasing number of studies regarding TD and its management, only a few are concerned with the industry. Therefore, this primary study aims to characterize TD and its management under the perspective of Brazilian software organizations using their practitioners as proxies. A survey was performed with 58 practitioners, representing about 12 organizations and 30 software projects. The analysis of 37 valid questionnaires indicates that TD is still unknown to a considerable fraction of the participants, and only a small group of organizations adopt TD management activities in their projects. The survey package is available and can be used to support further investigations on TD management in Brazilian and other software organizations. © 2018 Conferencia Iberoamericana de Software Engineering - CIbSE. All Rights Reserved.",,"Universidade Federal do Rio de Janeiro/UFRJ, COPPE, Rio de Janeiro, Brazil",Rejected
357,Proceedings - International Conference on Software Engineering,,Lecture Notes in Business Information Processing,2018,The proceedings contain 12 papers. The special focus in this conference is on Research and Practical Issues of Enterprise Information Systems. The topics include: A new schema for securing data warehouse hosted in the cloud; business process-based legitimacy of data access framework for enterprise information systems protection; designing a technical debt visualization tool to improve stakeholder communication in the decision-making process: A case study; facebook posts engagement analysis  Case study of the leading e-shop in the Czech Republic; a cost-effective data replica placement strategy based on hybrid genetic algorithm for cloud services; analysis of industry 4.0 readiness indexes and maturity models and proposal of the dimension for enterprise information systems; The penetration of ICT into the economytechnical infrastructure in the V4 countries; raising students cognitive engagement intention in a preliminary is course using gamification; understanding enterprise architects: Different enterprise architect behavioral styles; equity crowdfunding: Quality signals for online-platform projects and supporters motivations.,,,Rejected
358,ACM International Conference Proceeding Series,"Martini, A. and Fontana, F.A. and Biaggi, A. and Roveda, R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,"Architectural technical debt can have a huge impact on software maintainability and evolution. Hence, different architectural violations, detected as architectural smells, need to be identified and refactored. In this paper, we conducted a multiple case-study on several architectural smells detected in four industrial projects. We conducted an in-depth investigation with a questionnaire, interviews and thorough inspection of the code with the practitioners. We evaluated the negative impact of the technical debt detected by the architectural smells, their difficulty to be refactored and the usefulness of the detection tool. The results show that practitioners appreciated the help of automatic detection, and that they prioritize refactoring architectural debt that causes more negative impact despite the higher refactoring effort. © Springer Nature Switzerland AG 2018.",10.1007/978-3-030-00761-4_21,"CA Technologies, Barcelona, Spain; Università degli Studi di Milano-Bicocca, Milan, Italy; University of Oslo, Oslo, Norway; Alten Italia, Milano, Italy",Accepted
359,Is using deep learning frameworks free? characterizing technical debt in deep learning frameworks,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,The proceedings contain 24 papers. The special focus in this conference is on Software Architecture. The topics include: A quantitative approach for the assessment of microservice architecture deployment alternatives by automated performance testing; crunch: Automated assessment of microservice architecture assignments with formative feedback; beethoven: An event-driven lightweight platform for microservice orchestration; a platform for the automated provisioning of architecture information for large-scale service-oriented software systems; providing context as a service using service-oriented mobile indie fog and opportunistic computing; spotlighting use case specific architectures; empirical insights into the evolving role of architects in decision-making in an agile context; using informal knowledge for improving software quality trade-off decisions; understanding architecture decisions in context: An industry case study of architects decision-making context; formally describing self-organizing architectures for systems-of-systems on the internet-of-things; software architecture measurementExperiences from a multinational company; identifying and prioritizing architectural debt through architectural smells: A case study in a large software company; software migration and architecture evolution with industrial platforms: A multi-case study; two architectural threat analysis techniques compared; executing architectural models for big data analytics; guidance of architectural changes in technical systems with varying operational modes; applying architecture-based adaptation to automate the management of internet-of-things; ioT architectural styles: A systematic mapping study; eco-IoT: An architectural approach for realizing emergent configurations in the internet of things; A catalogue of architectural decisions for designing IIoT systems; enabling continuous software engineering for embedded systems architectures with virtual prototypes; abstraction layered architecture: Writing maintainable embedded code.,,,Rejected
360,A composed technical debt identification methodology to predict software vulnerabilities,"Lautenschlager, F. and Ciolkowski, M.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2018,"Important and critical aspects of technical debt often surface at runtime only and are difficult to measure statically. This is a particular challenge for cloud applications because of their highly distributed nature. Fortunately, mature frameworks for collecting runtime data exist but need to be integrated. In this paper, we report an experience from a project that implements a cloud application within Kubernetes on Azure. To analyze the runtime data of this software system, we instrumented our services with Zipkin for distributed tracing; with Prometheus and Grafana for analyzing metrics; and with fluentd, Elasticsearch and Kibana for collecting, storing and exploring log files. However, project team members did not utilize these runtime data until we created a unified and simple access using a chat bot. We argue that even though your project collects runtime data, this is not sufficient to guarantee its usage: In order to be useful, a simple, unified access to different data sources is required that should be integrated into tools that are commonly used by team members. © Springer Nature Switzerland AG 2018.",10.1007/978-3-030-03673-7_33,"QAware GmbH, Aschauer Str. 32, Munich, 81549, Germany",Accepted
361,Towards better technical debt detection with NLP and machine learning methods,"Newman, N. and Fréchette, A. and Leyton-Brown, K.",Communications of the ACM,2018,"Over 13 months in 2016-17 the U.S. Federal Communications Commission conducted an ""incentive auction"" to repurpose radio spectrum from broadcast television to wireless internet. In the end, the auction yielded $19.8 bn, $10.05 bn of which was paid to 175 broadcasters for voluntarily relinquishing their licenses across 14 Ultra High Frequency (UHF) channels. Stations that continued broadcasting were assigned potentially new channels to fit as densely as possible into the channels that remained. The government netted more than $7 bn (used to pay down the national debt) after covering costs (including retuning). A crucial element of the auction design was the construction of a solver, dubbed SAT-based Feasibility Checker (SATFC), that determined whether sets of stations could be ""repacked"" in this way; it needed to run every time a station was given a price quote. This paper describes the process by which we built SATFC. We adopted an approach we dub ""deep optimization,"" taking a data-driven, highly parametric, and computationally intensive approach to solver design. More specifically, to build SATFC we designed software that could pair both complete and local-search SAT-encoded feasibility checking with a wide range of domain-specific techniques, such as constraint graph decomposition and novel caching mechanisms that allow for reuse of partial solutions from related, solved problems. We then used automatic algorithm configuration techniques to construct a portfolio of 8 complementary algorithms to be run in parallel, aiming to achieve good performance on instances that arose in proprietary auction simulations. To evaluate the impact of our solver in this paper, we built an open-source reverse auction simulator. We found that within the short time budget required in practice, SATFC solved more than 95% of the problems it encountered. Furthermore, the incentive auction paired with SATFC produced nearly optimal allocations in a restricted setting and substantially outperformed other alternatives at national scale.",10.1145/3107548,"Department of Computer Science, University of British Columbia, Canada",Rejected
362,An Evolutionary Analysis of Software-Architecture Smells,"Sulaiman, Y. and Nik Mat, N.K. and Abd Ghani, N.H. and Arif, A.",International Journal of Engineering and Technology(UAE),2018,"The consumption pattern of Malaysian consumers has changed markedly since 2005 as shown by several indicators such as consumer price index, per capita income and inflation rate. Instability of economy, increased in food prices, political stability, employment, debt, work life balance, increased in utility bills and fuel prices, health and crimes become major concerns for Malaysian consumers especially in urban areas to be more cautious in their spending. This study attempts to examines the factors contributing to consumption model for Malaysian consumers in rural and urban areas. From the literature, eight antecedents of Malaysian consumption pattern were identified. Consumer lifestyle, consumer value, consumer motive, consumer preference, and marketing mix of price, product, place, and advertising were measured using 7-point Likert scales. From 1400 questionnaires distributed to households, 851 were returned representing 61 percent response rate. The findings indicate support for validity of measurement models of all variables utilized for both model rural and urban. Using Structural Equation Modeling (SEM) of SMARTPLS 2.0 technique, it was found that advertising is not a predictor for consumer motive for both model, rural and urban. Apart of that, the reason of price hikes has been discussed. On the other hand, rural model postulates better R2 than the other model. The finding implies that Malaysian government need to continuously campaign for consumers about the implementation of GST and its consequences for consumers. In addition, the instability of economic changed the consumption pattern throughout their lifestyle, value, motive and preferences. © 2018 Authors.",10.14419/ijet.v7i4.28.22586,"School of Business Management, College of Business, Universiti Utara Malaysia, Kedah, Sintok, 06010, Malaysia; Fakulti Keusahawanan dan Perniagaan, Universiti Malaysia Kelantan, Karung Berkunci 36, Taman Bendahara, Pengkalan Chepa, Kelantan, 16100, Malaysia; School of Computing, College of Arts and Sciences, Universiti Utara Malaysia, Kedah,Sintok, 06010, Malaysia",Rejected
363,"13th Symposium on Programming Languages and Software Tools, SPLST 2013 - Proceedings","Grigoriu, M. and Bica, R.D. and Popescu, M.C.",Procedia Manufacturing,2018,"Presently, the exploitation of renewable energy sources has exceeded the stage of unconditioned completion of as many plants as possible to provide. The amount of the electrical energy produced using renewable sources becomes notable and it is the time of economic investments in this field, which should be self-sustainable. The paper presents an effective method for small hydro-power plants (SPPs) exploitation and equipping optimization. If the installed power of the plants is P?10MW it is considered as renewable energy source systems utilizations, and the greater, are not. Presently, there are many solutions for efficiency growth of the SPPs, but without making a consistent adaptation of the working regimes, to the affluent debts regimes, offered by the rivers on which the plants are built. Generally, it is accepted to be installed an ensemble of two turbines, of the same type, identical or of different sizes, in a current SPP. The turbine could be of classical types (Francis or Kaplan), with high efficiency near the nominal exploitation regime, or other types, with a more flexible efficiency characteristic, but with a much lower efficiency. The paper proposes an algorithm for an automatically flow distributor, which will split the affluent flow between the turbines, in order to obtain a maximum of output power of the plant. According to this solution, the plants can be equipped with classical efficient turbines (Francis or Kaplan), which have higher efficiencies but a sharp feature of efficiency, then the special types of turbines (example, Banki), recommended by flat efficiency characteristics. These last types of turbines are suitable for SPPs because they are working at acceptable efficiencies for a large range of affluent debts. Another important advantage of the proposed solution is the low level of the investment in the distributor mechanism and its accessories, and the opportunity to equip with this distributor small hydropower plants already built and equipped with two turbines, even they are identical or of different sizes. © 2018 The Authors. Published by Elsevier B.V.",10.1016/j.promfg.2018.03.113,"University Politehnica Bucharest, 313, Splaiul Independen?ei, Bucharest, 060042, Romania; University Petru Maior of Tirgu Mures, 1, Str.N.Iorga, Tirgu Mures, 540088, Romania; Vasile Goldis Western University of Arad, 94-96 Revolutiei Blvd., Arad, 310025, Romania",Rejected
364,The role of dependency propagation in the accumulation of technical debt for software implementations,"Bouidi, Y. and Idrissi, M.A. and Rais, N.",Lecture Notes in Networks and Systems,2018,"The information system (IS) was becoming an indispensable management tool in various fields of human activity. In the health sector, it has an important role in improving patient management and quality of healthcare services, in optimizing resources and in effectiveness of biomedical research. The hospital information system (HIS) began to emerge in recent decades in many developing countries. Our study aims at first for examining many different open source applications and, then, selecting the most appropriate applications to use and adapt for healthcare structures in countries where the public management allocated budgets, in the different healthcare structures, does not allow the purchase of a commercial solution and a necessary after-sales services. A bibliographical study does not allow us to discover related works. From were, the great interest of our comparative study. We have studied nine open-source hospital information systems: OpenMRS, OpenEMR, MediBoard, HospitalOs, HOSxP, PatientOS, Care2x, MedinTux and OpenHospital. We have used the SQALE method to evaluate the quality of these applications. We have got the source code using the sourceforge.net website. We have used the Sonar platform to measure the source codes quality, and the OpenHub.net website to get the evaluation of the activity of Open-Source communities of each HIS. The obtained results allowed us to select MediBoard and OpenEMR as a basis to develop an application for the healthcare institutions needs, in particular for the first and second levels, in Morocco. © 2018, Springer International Publishing AG.",10.1007/978-3-319-74500-8_74,"Laboratory of Informatics, Modeling and Systems (LIMS), Sidi Mohamed Ben Abdallah University (USMBA), Fez, Morocco",Rejected
365,Comparison of stamp classification using SVM and random ferns,"Swathi Pai, M. and Shalini, H. and Aravinda, C.V.",International Journal of Engineering and Technology(UAE),2018,"Most of the Indian population rely on agriculture forthe living. Its prosperity depends mainly on the weather parameters. Water assumes a noteworthy part in the growth of a crop. Occurrences of unpredictable weather are beyond human control. Due to which there are crop loss. Farmers fall into debts as they have to face a scarce crops productivity due to inadequate water supply and other climate conditions which increment the danger of their benefit and the high cost of living. Often, agriculturists may see the suicide as the main answer for their families. This paper presents an overview of the research on Estimation of Critical Virtual Water for Irrigation to Avoid Crop Loss. It is an endeavour to build up a prediction model to estimate the water utilized for irrigation with the ""critical virtual water estimation"" which would ensure the economic utilization of water in the state or the country. The Critical Virtual Water is the water estimation for the production of the particular crop. It takes into consideration the climate in the locality, measure of the water accessible in the region for farming and other agriculture factors. The analysis will be done for all the districts of the state Karnataka, India. Prediction model will advise the farmer about the best crop choice to be grown. © 2018 Authors.",,"Department of Computer Science and Engineering, NMAM Institute of Technology, Nitte Karkala Taluk, Karnataka, India",Rejected
366,Dynamic analysis of the effects of mortgage-lending policies in a real estate market,,"Actas de las 23rd Jornadas de Ingenieria del Software y Bases de Datos, JISBD 2018",2018,The proceedings contain 59 papers. The topics discussed include: smart bound selection for the verification of UML/OCL class diagrams; IoT-TEG: test event generator system; practical update management in ontology-based data access (summary); metamorphic testing of RESTful Web APIs; identification and analysis of the elements required to manage technical debt by means of a systematic mapping study; improving feature location in long-living model-based product families designed with sustainability goals; reverse engineering language product lines from existing DSL variants; a tool to support the definition and enactment of model-driven migration processes; and incremental test data generation for database queries.,,,Rejected
367,Visualizing and managing technical debt in agile development: An experience report,"Nai, W. and Liu, L. and Wang, S. and Dong, D.",Algorithms,2018,"Credit card holders from different age groups have different usage behaviors, so deeply investigating the credit card usage condition and properly modeling the usage trend of all customers in different age groups from time series data is meaningful for financial institutions as well as banks. Until now, related research in trend analysis of credit card usage has mostly been focused on specific group of people, such as the behavioral tendencies of the elderly or college students, or certain behaviors, such as the increasing number of cards owned and the rise in personal card debt or bankruptcy, in which the only analysis methods employed are simply enumerating or classifying raw data; thus, there is a lack of support in specific mathematical models based on usage behavioral time series data. Considering that few systematic modeling methods have been introduced, in this paper, a novel usage trend analysis method for credit card holders in different age groups based on singular spectrum analysis (SSA) has been proposed, using the time series data from the Survey of Consumer Payment Choice (SCPC). The decomposition and reconstruction process in the method is proposed. The results show that the credit card usage frequency falls down from the age of 26 to the lowest point at around the age of 58 and then begins to increase again. At last, future work is discussed. © 2019 by the authors.",10.3390/A11020015,"Department of Electronic and Information Engineering, Tongji Zhejiang College, Jiaxing, 314051, China; Whitman School of Management, Syracuse University, Syracuse, NY  13244, United States; Key Laboratory of Road and Traffic Engineering, Ministry of Education, Tongji University, Shanghai, 201804, China",Rejected
368,An exploration of technical debt,"Huang, Q. and Shihab, E. and Xia, X. and Lo, D. and Li, S.",Empirical Software Engineering,2018,"Technical debt is a metaphor to describe the situation in which long-term code quality is traded for short-term goals in software projects. Recently, the concept of self-admitted technical debt (SATD) was proposed, which considers debt that is intentionally introduced, e.g., in the form of quick or temporary fixes. Prior work on SATD has shown that source code comments can be used to successfully detect SATD, however, most current state-of-the-art classification approaches of SATD rely on manual inspection of the source code comments. In this paper, we proposed an automated approach to detect SATD in source code comments using text mining. In our approach, we utilize feature selection to select useful features for classifier training, and we combine multiple classifiers from different source projects to build a composite classifier that identifies SATD comments in a target project. We investigate the performance of our approach on 8 open source projects that contain 212,413 comments. Our experimental results show that, on every target project, our approach outperforms the state-of-the-art and the baselines approaches in terms of F1-score. The F1-score achieved by our approach ranges between 0.518 - 0.841, with an average of 0.737, which improves over the state-of-the-art approach proposed by Potdar and Shihab by 499.19%. When compared with the text mining-based baseline approaches, our approach significantly improves the average F1-score by at least 58.49%. When compared with a natural language processing-based baseline, our approach also significantly improves its F1-score by 27.95%. Our proposed approach can be used by project personnel to effectively identify SATD with minimal manual effort. © 2017, Springer Science+Business Media New York.",10.1007/s10664-017-9522-4,"College of Computer Science and Technology, Zhejiang University, Hangzhou, China; Data-driven Analysis of Software (DAS) Lab at the Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; Department of Computer Science, University of British Columbia, Vancouver, Canada; School of Information Systems, Singapore Management University, Singapore, Singapore",Accepted
369,EASE 2013 - Proceedings of the 17th International Conference on Evaluation and Assessment in Software Engineering,"Carver, J.C. and Serebrenik, A.",IEEE Software,2018,"This issue's column reports on the 33rd International Conference on Software Maintenance and Evolution and 32nd International Conference on Automated Software Engineering. Topics include flaky tests, technical debt, QA bots, and regular expressions. © 1984-2012 IEEE.",10.1109/MS.2018.1661318,"University of Alabama, United States; Eindhoven University of Technology, Netherlands",Rejected
370,A case study on effectively identifying technical debt,"Argyropoulos, C. and Panopoulou, E.",Journal of Forecasting,2018,"This paper addresses the issue of freight rate risk measurement via value at risk (VaR) and forecast combination methodologies while focusing on detailed performance evaluation. We contribute to the literature in three ways: First, we reevaluate the performance of popular VaR estimation methods on freight rates amid the adverse economic consequences of the recent financial and sovereign debt crisis. Second, we provide a detailed and extensive backtesting and evaluation methodology. Last, we propose a forecast combination approach for estimating VaR. Our findings suggest that our combination methods produce more accurate estimates for all the sectors under scrutiny, while in some cases they may be viewed as conservative since they tend to overestimate nominal VaR. Copyright © 2017 John Wiley & Sons, Ltd.",10.1002/for.2485,"Kent Business School, University of Kent, Canterbury, United Kingdom",Rejected
371,Design capital and design moves: The logic of digital business strategy,"Mrázová, I. and Zvirinský, P.",ACM International Conference Proceeding Series,2018,"The Czech Insolvency Register launched in 2008 covers recently about 200000 insolvency proceedings. A lot of information it stores about the debtors is provided in structured form and is easily accessible. Further information, e.g., about the amount of debt or the reasons for it, is, however, contained only in scanned document copies attached to the insolvency proceedings. Altogether, there are cca 1500000 of such pdf-documents in the Insolvency Register. As this data is crucial to grasp the real impact of indebtedness across the Czech society, our study is focused on efficient extraction of information on the amount of debt from the scanned documents. Based on the found values of debt and their creditors, individual debtors can be grouped together to form clusters of individuals with a similar structure of debt. Finally, the overall value of debt can be assessed both for the creditors and for the entire country. © 2018 Association for Computing Machinery.",10.1145/3195106.3195176,"Faculty of Mathematics and Physics, Department of Theoretical Computer Science and Mathematical Logic, Charles University, Prague, Czech Republic",Rejected
372,On the uncertainty of technical debt measurements,"Venters, C.C. and Capilla, R. and Betz, S. and Penzenstadler, B. and Crick, T. and Crouch, S. and Nakagawa, E.Y. and Becker, C. and Carrillo, C.",Journal of Systems and Software,2018,"Context Modern societies are highly dependent on complex, large-scale, software-intensive systems that increasingly operate within an environment of continuous availability, which is challenging to maintain and evolve in response to the inevitable changes in stakeholder goals and requirements of the system. Software architectures are the foundation of any software system and provide a mechanism for reasoning about core software quality requirements. Their sustainability  the capacity to endure in changing environments  is a critical concern for software architecture research and practice. Problem Accidental software complexity accrues both naturally and gradually over time as part of the overall software design and development process. From a software architecture perspective, this allows several issues to overlap including, but not limited to: the accumulation of technical debt design decisions of individual components and systems leading to coupling and cohesion issues; the application of tacit architectural knowledge resulting in unsystematic and undocumented design decisions; architectural knowledge vaporisation of design choices and the continued ability of the organization to understand the architecture of its systems; sustainability debt and the broader cumulative effects of flawed architectural design choices over time resulting in code smells, architectural brittleness, erosion, and drift, which ultimately lead to decay and software death. Sustainable software architectures are required to evolve over the entire lifecycle of the system from initial design inception to end-of-life to achieve efficient and effective maintenance and evolutionary change. Method This article outlines general principles and perspectives on sustainability with regards to software systems to provide a context and terminology for framing the discourse on software architectures and sustainability. Focusing on the capacity of software architectures and architectural design choices to endure over time, it highlights some of the recent research trends and approaches with regards to explicitly addressing sustainability in the context of software architectures. Contribution The principal aim of this article is to provide a foundation and roadmap of emerging research themes in the area of sustainable software architectures highlighting recent trends, and open issues and research challenges. © 2017 Elsevier Inc.",10.1016/j.jss.2017.12.026,"University of Huddersfield, United Kingdom; University Rey Juan Carlos, Spain; Karlsruhe Institute of Technology, Germany; California State University Long Beach, United States; Cardiff Metropolitan University, United Kingdom; University of Southampton, United Kingdom; University of São Paulo, Brazil; University of Toronto, Canada; Technical University of Madrid, Spain",Rejected
373,Finding problem specific shannon information in high dimensional input space for artificial neural networks,"Holvitie, J. and Licorish, S.A. and Spínola, R.O. and Hyrynsalmi, S. and MacDonell, S.G. and Mendes, T.S. and Buchan, J. and Leppänen, V.",Information and Software Technology,2018,"Context: Contemporary software development is typically conducted in dynamic, resource-scarce environments that are prone to the accumulation of technical debt. While this general phenomenon is acknowledged, what remains unknown is how technical debt specifically manifests in and affects software processes, and how the software development techniques employed accommodate or mitigate the presence of this debt. Objectives: We sought to draw on practitioner insights and experiences in order to classify the effects of agile method use on technical debt management, given the popularity and perceived success of agile methods. We explore the breadth of practitioners knowledge about technical debt; how technical debt is manifested across the software process; and the perceived effects of common agile software development practices and processes on technical debt. In doing so, we address a research gap in technical debt knowledge and provide novel and actionable managerial recommendations. Method: We designed, tested and executed a multi-national survey questionnaire to address our objectives, receiving 184 responses from practitioners in Brazil, Finland, and New Zealand. Results: Our findings indicate that: 1) Practitioners are aware of technical debt, although, there was under utilization of the concept, 2) Technical debt commonly resides in legacy systems, however, concrete instances of technical debt are hard to conceptualize which makes it problematic to manage, 3) Queried agile practices and processes help to reduce technical debt; in particular, techniques that verify and maintain the structure and clarity of implemented artifacts (e.g., Coding standards and Refactoring) positively affect technical debt management. Conclusions: The fact that technical debt instances tend to have characteristics in common means that a systematic approach to its management is feasible. However, notwithstanding the positive effects of some agile practices on technical debt management, competing stakeholders interests remain a concern. © 2017 The Authors",10.1016/j.infsof.2017.11.015,"Turku Centre for Computer Science, Software Development Laboratory, Turku, Finland; University of Turku, Department of Information Technology, Turku, Finland; University of Otago, Department of Information Science, Dunedin, Otago, New Zealand; Salvador University, Graduate Program in Systems and Computer, Salvador, Bahia, Brazil; Federal University of Bahia, Fraunhofer Project Center for Software and System Engineering, Salvador, Brazil; Tampere University of Technology, Pori Campus, Pori, Finla",Rejected
374,Technical debt: Showing the way for better transfer of empirical results,"Jia, Z. and Deng, L. and Xu, R.",Journal of Systems Science and Complexity,2018,"This paper uses the financial data of Chinese listed firms to explore the relationship between the debt structure, which is measured as the ratio of trade credit to bank loan, and future stock price crash risk. The empirical results show that the ratio of trade credit to bank loan is positively associated with the firm-specific crash risk while a good institutional environment reduces this positive relationship. In addition, considering the firms ownership type, the authors find that the positive relationship between the debt structure and crash risk is more significant in the SOEs. © 2016, Institute of Systems Science, Academy of Mathematics and Systems Science, CAS and Springer-Verlag GmbH Germany, part of Springer Nature.",10.1007/s11424-016-6105-1,"School of Economics and Management, BeiHang University, Beijing, 100091, China",Rejected
375,Solvency Markov decision processes with interest,"Klotins, E. and Unterkalmsteiner, M. and Chatzipetrou, P. and Gorschek, T. and Prikladnicki, R. and Tripathi, N. and Pompermaier, L.B.",Proceedings - International Conference on Software Engineering,2018,"Context: Software start-ups are young companies aiming to build and market software-intensive products fast with little resources. Aiming to accelerate time-to-market, start-ups often opt for ad-hoc engineering practices, make shortcuts in product engineering, and accumulate technical debt. Objective: In this paper we explore to what extent precedents, dimensions and outcomes associated with technical debt are prevalent in start-ups. Method: We apply a case survey method to identify aspects of technical debt and contextual information characterizing the engineering context in start-ups. Results: By analyzing responses from 86 start-up cases we found that start-ups accumulate most technical debt in the testing dimension, despite attempts to automate testing. Furthermore, we found that start-up team size and experience is a leading precedent for accumulating technical debt: larger teams face more challenges in keeping the debt under control. Conclusions: This study highlights the necessity to monitor levels of technical debt and to preemptively introduce practices to keep the debt under control. Adding more people to an already difficult to maintain product could amplify other precedents, such as resource shortages, communication issues and negatively affect decisions pertaining to the use of good engineering practices. © 2018 ACM.",10.1145/3183519.3183539,"Blekinge Institute of Technology, Karlskrona, Sweden; Pontifical Catholic University of Rio, Grande Do sul, Porto Alegre, Brazil; University of Oulu, Oulu, Finland",Accepted
376,Addressing the EU sovereign ratings using an ordinal regression approach,"Sharma, T. and Fragkoulis, M. and Rizou, S. and Bruntink, M. and Spinellis, D.",Proceedings - International Conference on Software Engineering,2018,"Context: Databases are an integral element of enterprise applications. Similarly to code, database schemas are also prone to smells - best practice violations. Objective: We aim to explore database schema quality, associated characteristics and their relationships with other software artifacts. Method: We present a catalog of 13 database schema smells and elicit developers' perspective through a survey. We extract embedded sql statements and identify database schema smells by employing the DbDeo tool which we developed. We analyze 2925 production-quality systems (357 industrial and 2568 well-engineered open-source projects) and empirically study quality characteristics of their database schemas. In total, we analyze 629 million lines of code containing more than 393 thousand sql statements. Results: We find that the index abuse smell occurs most frequently in database code, that the use of an orm framework doesn't immune the application from database smells, and that some database smells, such as adjacency list, are more prone to occur in industrial projects compared to open-source projects. Our co-occurrence analysis shows that whenever the clone table smell in industrial projects and the values in attribute definition smell in open-source projects get spotted, it is very likely to find other database smells in the project. Conclusion: The awareness and knowledge of database smells are crucial for developing high-quality software systems and can be enhanced by the adoption of better tools helping developers to identify database smells early. © 2018 ACM.",10.1145/3183519.3183529,"Athens University of Economics and Business, Athens, Greece; Singular Logic, Athens, Greece; Software Improvement Group, Amsterdam, Netherlands",Accepted
377,Dynamics of public debt management,"Liu, Z. and Huang, Q. and Xia, X. and Shihab, E. and Lo, D. and Li, S.",Proceedings - International Conference on Software Engineering,2018,"In software projects, technical debt metaphor is used to describe the situation where developers and managers have to accept compromises in long-Term software quality to achieve short-Term goals. There are many types of technical debt, and self-Admitted technical debt (SATD) was proposed recently to consider debt that is introduced intentionally (e.g., through temporaryfi x) and admitted by developers themselves. Previous work has shown that SATD can be successfully detected using source code comments. However, most current state-of-The-Art approaches identify SATD comments through pattern matching, which achieve high precision but very low recall. That means they may miss many SATD comments and are not practical enough. In this paper, we propose SATD Detector, a tool that is able to (i) automatically detect SATD comments using text mining and (ii) highlight, list and manage detected comments in an integrated development environment (IDE). This tool consists of a Java library and an Eclipse plug-in. The Java library is the back-end, which provides command-line interfaces and Java APIs to re-Train the text mining model using users' data and automatically detect SATD comments using either the build-in model or a user-specified model. The Eclipse plug-in, which is the front-end, first leverages our pre-Trained composite classifier to detect SATD comments, and then highlights and marks these detected comments in the source code editor of Eclipse. In addition, the Eclipse plug-in provides a view in IDE which collects all detected comments for management. Demo URL: https://youtu.be/sn4gU2qhGm0 Java library download: https://git.io/vNdnY Eclipse plug-in download: https://goo.gl/ZzjBzp. © 2018 Authors.",10.1145/3183440.3183478,"Zhejiang University, China; Monash University, Australia; Concordia University, Canada; Singapore Management University, Singapore",Accepted
378,The essential nature of product traceability and its relation to Agile approaches,"Bogner, J. and Fritzsch, J. and Wagner, S. and Zimmermann, A.",Proceedings - International Conference on Software Engineering,2018,"Maintainability assurance techniques are used to control this quality attribute and limit the accumulation of potentially unknown technical debt. Since the industry state of practice and especially the handling of Service- and Microservice-Based Systems in this regard are not well covered in scientific literature, we created a survey to gather evidence for a) used processes, tools, and metrics in the industry, b) maintainability-related treatment of systems based on service-orientation, and c) influences on developer satisfaction w.r.t. maintainability. 60 software professionals responded to our online questionnaire. The results indicate that using explicit and systematic techniques has benefits for maintainability. The more sophisticated the applied methods the more satisfied participants were with the maintainability of their software while no link to a hindrance in productivity could be established. Other important findings were the absence of architecture-level evolvability control mechanisms as well as a significant neglect of service-oriented particularities for quality assurance. The results suggest that industry has to improve its quality control in these regards to avoid problems with long-living service-based software systems. © 2018 ACM.",10.1145/3194164.3194166,"University of Applied Sciences Reutlingen, Germany; University of Stuttgart, Germany",Accepted
379,Application of fuzzy AHP approach for financial performance evaluation of iranian petrochemical sector,"Olsson, T. and Ericsson, M. and Wingkvist, A.",Proceedings - International Conference on Software Engineering,2018,"We are in the pursuit of establishing a method for continuous data driven software architecture. We describe the problem with current methods for measuring the impact of refactoring long lived systems at the architectural level and architecture compliance checking. We summarize our studies of code churn, productivity and an automatic tool for compliance checking. We conclude that architecture violations seem to play an important role, but current methods are infeasible for industry practice. Finally we propose to use repository data mining to improve current methods for architecture compliance checking. © 2018 Authors.",10.1145/3183440.3195094,"Department of Computer Science, Kalmar, Sweden; Department of Computer Science, Växjö, Sweden",Rejected
380,Software implementation knowledge management with technical debt and network analysis,"Sharma, T.",Proceedings - International Conference on Software Engineering,2018,"Code smells indicate the presence of quality problems that make the software hard to maintain and evolve. A software development team can keep their software maintainable by identifying smells and refactor them. In the first part of the session, we present a comprehensive overview of the literature concerning smells covering various dimensions of the metaphor including defining characteristics, classification, types, as well as causes and impacts of smells. In the second part, we delve into the details of smell detection methods prevailed currently both in research prototypes and industrial tools. The final part present actionable and pragmatic strategies for practitioners to avoid, detect, and eradicate smells from their codebase. © 2018 ACM.",10.1145/3183440.3183460,"Dept. of Management Science and Technology, Athens University of Economics and Business, Athens, Greece",Accepted
381,Technology debt: Toward a new theory of technology heritage,"Ponsard, C. and Deprez, J.-C.",Proceedings - International Conference on Software Engineering,2018,"Small and medium-sized enterprises (SMEs) play a key role in the worldwide economy and are increasingly dependent on software as part of their products/services or to support their operation (e.g. e-commerce, smart manufacturing). Over the past 15 years, as a research and technology transfer centre, CETIC has been busy helping Belgian SMEs to increase their maturity in software development. We have also contributed specific methods and tools for the SME target, including the OWPL framework and now the ISO29110 standard. This talk aims at sharing what we learned from different types of SMEs (from startups to grownups, both IT and non IT) about common problems gathered in a long term survey. We then focus on key issues like requirements, technical debt, test/release and (agile/lean) project management. Finally, we share our thoughts on new challenges ahead raised by the ever increasing connectivity like cybersecurity and privacy regulation (GDPR). © 2018 Authors.",10.1145/3183519.3183553,"CETIC Research Centre, Belgium",Rejected
382,QoSA 2014 - Proceedings of the 10th International ACM SIGSOFT Conference on Quality of Software Architectures (Part of CompArch 2014),"Verdecchia, R. and Malavolta, I. and Lago, P.",Proceedings - International Conference on Software Engineering,2018,"Architectural Technical Debt (ATD) regards sub-optimal design decisions that bring short-term benefits to the cost of long-term gradual deterioration of the quality of the architecture of a software system. The identification of ATD strongly influences the technical and economic sustainability of software systems and is attracting growing interest in the scientific community. During the years several approaches for ATD identification have been conceived, each of them addressing ATD from different perspectives and with heterogeneous characteristics. In this paper we apply the systematic mapping study methodology for identifying, classifying, and evaluating the state of the art on ATD identification from the following three perspectives: publication trends, characteristics, and potential for industrial adoption. Specifically, starting from a set of 509 potentially relevant studies, we systematically selected 47 primary studies and analyzed them according to a rigorously-defined classification framework. The analysis of the obtained results supports both researchers and practitioners by providing (i) an assessment of current research trends and gaps in ATD identification, (ii) a solid foundation for understanding existing (and future) research on ATD identification, and (iii) a rigorous evaluation of its potential for industrial adoption. © 2018 ACM.",10.1145/3194164.3194176,"Gran Sasso Science Institute, L'Aquila, Italy; Vrije Universiteit Amsterdam, Netherlands",Accepted
383,"11th International Symposium on Distributed Computing and Artificial Intelligence 2014, DCAI 2014","Amanatidis, T. and Mittas, N. and Chatzigeorgiou, A. and Ampatzoglou, A. and Angelis, L.",Proceedings - International Conference on Software Engineering,2018,"The set of concepts collectively known as Technical Debt (TD) assume that software liabilities set up a context that can make a future change more costly or impossible; and therefore repaying the debt should be pursued. However, software developers often disagree with an automatically generated list of improvement suggestions, which they consider not fitting or important for their own code. To shed light into the reasons that drive developers to adopt or reject refactoring opportunities (i.e. TD repayment), we have performed an empirical study on the potential factors that affect the developers' decision to agree with the removal of a specific TD liability. The study has been addressed to the developers of four well-known open-source applications. To increase the response rate, a personalized assessment has first been sent to each developer, summarizing his/her own contribution to the TD of the corresponding project. Responds have been collected through a custom built web application that presented code fragments suffering from violations as identified by SonarQube along with information that could possibly affect their level of agreement to the importance of resolving an issue. These factors include data such as the frequency of past changes in the module under study, the number of bugs, the type and intensity of the violation, the level of involvement of the developer and whether he/she is a contributor in the corresponding project. Multivariate statistical analysis methods have been used to understand the importance and the underlying relationships among these factors and the results are expected to be useful for researchers and practitioners in TD Management. © 2018 ACM.",10.1145/3194164.3194174,"Department of Applied Informatics, University of Macedonia, Greece; Department of Computer Science, Aristotle University of Thessaloniki, Greece",Rejected
384,Design of business process and message interface for self-service terminal system,"Mori, A. and Vale, G. and Viggiato, M. and Oliveira, J. and Figueiredo, E. and Cirilo, E. and Jamshidi, P. and Kastner, C.",Proceedings - International Conference on Software Engineering,2018,"Software metrics and thresholds provide means to quantify several quality attributes of software systems. Indeed, they have been used in a wide variety of methods and tools for detecting different sorts of technical debts, such as code smells. Unfortunately, these methods and tools do not take into account characteristics of software domains, as the intrinsic complexity of geo-localization and scientific software systems or the simple protocols employed by messaging applications. Instead, they rely on generic thresholds that are derived from heterogeneous systems. Although derivation of reliable thresholds has long been a concern, we still lack empirical evidence about threshold variation across distinct software domains. To tackle this limitation, this paper investigates whether and how thresholds vary across domains by presenting a large-scale study on 3,107 software systems from 15 domains. We analyzed the derivation and distribution of thresholds based on 8 well-known source code metrics. As a result, we observed that software domain and size are relevant factors to be considered when building benchmarks for threshold derivation. Moreover, we also observed that domain-specific metric thresholds are more appropriated than generic ones for code smell detection. © 2018 ACM.",10.1145/3194164.3194173,"Computer Science Department, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Department of Informatics and Mathematics, University of Passau, Passau, Germany; Computer Science Department, Pontifical Catholic University of Minas Gerais (PUC-Minas), Belo Horizonte, Brazil; Computer Science Department, Federal University of Sao Joao Del-Rei (UFSJ), Sao Joao del-Rei, Brazil; Institute for Software Research, Carnegie Mellon University (CMU), Pittsburgh, United States",Accepted
385,Integrating technical debt into MDE,"Arvedahl, S.",Proceedings - International Conference on Software Engineering,2018,"One of the biggest challenges in a large software development project is to manage technical debt. For example, if an API is replaced by a newer version and the old one is deprecated, there is a big risk that a substantial technical debt is incurred. The time where two versions of an API can co-exist can be quite long, and in a big organization like Ericsson 4G5G Baseband there can be a big challenge to prevent developers from continuing to use deprecated API's. At Ericsson 4G5G Baseband we invented the tool debtgrep to be incorporated in our Continuous Integration machinery. The tool will prevent any new code to be added using deprecated API's, or other configured keywords. The tool has proven very useful in the development of a new product based on a new software architecture. Debtgrep is used for deprecated API's, enforcing design rules, and enforcing architecture rules. The paper describes the behavior and configuration possibilities of the tool, and how it is used at Ericsson 4G5G Baseband. © 2018 Author.",10.1145/3194164.3194183,"Ericsson AB BNEW DNEP 4G5G, Stockholm, Sweden",Accepted
386,A study on effect evaluation of payment method change in the mail-order industry,"Ludwig, J. and Xu, S. and Webber, F.",Proceedings - International Conference on Software Engineering,2018,"This paper identifies a small, essential set of static software code metrics linked to the software product quality characteristics of reliability and maintainability and to the most commonly identified sources of technical debt. An open-source plug-in is created for the Understand code analysis tool that calculates and visualizes these metrics. The plug-in was developed as a first step in an ongoing project aimed at applying case-based reasoning to the issue of software product quality.1 © 2018 Authors.",10.1145/3194164.3194184,"Stottler Henke Ass., Inc., San Mateo, CA, United States; Air Force Research Laboratory, 711th HPW/RHAS, WPAFBOH, United States",Accepted
387,Developing ontology-based data management for the Italian public debt,"Albarak, M. and Bahsoon, R.",Proceedings - International Conference on Software Engineering,2018,"Database normalization is the one of main principles for designing relational databases. The benefits of normalization can be observed through improving data quality and performance, among the other qualities. We explore a new context of technical debt manifestation, which is linked to ill-normalized databases. This debt can have long-term impact causing systematic degradation of database qualities. Such degradation can be liken to accumulated interest on a debt. We claim that debts are likely to materialize for tables below the fourth normal form. Practically, achieving fourth normal form for all the tables in the database is a costly and idealistic exercise. Therefore, we propose a pragmatic approach to prioritize tables that should be normalized to the fourth normal form based on the metaphoric debt and interest of the ill-normalized tables, observed on data quality and performance. For data quality, tables are prioritized using the risk of data inconsistency metric. Unlike data quality, a suitable metric to estimate the impact of weakly or un-normalized tables on performance is not available. We estimate performance degradation and its costs using Input/Output (I/O) cost of the operations performed on the tables and we propose a model to estimate this cost for each table. We make use of Modern Portfolio Theory to prioritize tables that should be normalized based on the estimated I/O cost and the likely risk of cost accumulation in the future. To evaluate our methods, we use a case study from Microsoft, AdventureWorks. The results show that our methods can be effective in reducing normalization debt and improving the quality of the database. © 2018 ACM.",10.1145/3194164.3194170,"University of Birmingham, United Kingdom; King Saud University, Saudi Arabia",Accepted
388,Predicting and quantifying the technical debt in cloud software engineering,"Zampetti, F. and Serebrenik, A. and Di Penta, M.",Proceedings - International Conference on Software Engineering,2018,"Technical Debt (TD) has been defined as ""code being not quite right yet"", and its presence is often self-admitted by developers through comments. The purpose of such comments is to keep track of TD and appropriately address it when possible. Building on a previous quantitative investigation by Maldonado et al. on the removal of self-admitted technical debt (SATD), in this paper we perform an in-depth quantitative and qualitative study of how SATD is addressed in five Java open source projects. On the one hand, we look at whether SATD is ""accidentally"" removed, and the extent to which the SATD removal is being documented. We found that that (i) between 20% and 50% of SATD comments are accidentally removed while entire classes or methods are dropped, (ii) 8% of the SATD removal is acknowledged in commit messages, and (iii) while most of the changes addressing SATD require complex source code changes, very often SATD is addressed by specific changes to method calls or conditionals. Our results can be used to better plan TD management or learn patterns for addressing certain kinds of TD and provide recommendations to developers. © 2018 ACM.",10.1145/3196398.3196423,"University of Sannio, Italy; Eindhoven University of Technology, Netherlands",Accepted
389,Board game as a tool to teach software engineering concept - Technical debt,"Verdecchia, R.",Proceedings - International Conference on Software Engineering,2018,"By considering the fast pace at which mobile applications need to evolve, Architectural Technical Debt results to be a crucial yet implicit factor of success. In this research we present an approach to automatically identify Architectural Technical Debt in Android applications. The approach takes advantage of architectural guidelines extraction and modeling, architecture reverse engineering, and compliance checking. As future work, we plan to fully automate the process and empirically evaluate it via large-scale experiments. © 2018 ACM.",10.1145/3197231.3198442,"Gran Sasso Science Institute, L'Aquila, Italy; Vrije Universiteit Amsterdam, Netherlands",Accepted
390,Systematic elaboration of compliance requirements using compliance debt and portfolio theory,"Tornhill, A.",Proceedings - International Conference on Software Engineering,2018,"Large-scale systems often contain considerable amounts of code that is overly complicated, hard to understand, and hence expensive to change. An organization cannot address and refactor all of that code at once, nor should they. Ideally, actionable refactoring targets should be prioritized based on the technical debt interest rate to balance the trade-offs between improvements, risk, and new features. This paper examines how CodeScene, a tool for predictive analyses and visualizations, can be used to prioritize technical debt in a large-scale codebase like the Linux Kernel based on the most likely return on code improvements. © 2018 Author.",10.1145/3194164.3194187,"Empear AB, Malmö, Sweden",Accepted
391,A Decision-Support System Approach to Economics-Driven Modularity Evaluation,"Plösch, R. and Bräuer, J. and Saft, M. and Körner, C.",Proceedings - International Conference on Software Engineering,2018,"Technical debt (TD) in a software system is a metaphor that tries to illustrate the remediation effort of the already introduced quality deficit and the impact thereof to the business value of the system. To address TD, various management activities are proposed, each addressing a particular purpose. Whereas the activities of debt identification and measurement are broadly considered in literature, the activities of debt prioritization and communication lack appropriate approaches with an economic perspective. This work proposes a TD prioritization approach. Therefore, it narrows down the focus of TD to design debt and relies on the quantification of design best practices. Further, the non-conformance of these practices is assessed by applying a benchmarking technique. As a result, the gained information is transferred into a portfolio-matrix to support the prioritization and communication of design remediation actions. The applicability and suitability of the approach are demonstrated by using the source code of the open source project GeoGebra. © 2018 ACM.",10.1145/3194164.3194172,"Johannes Kepler University Linz, Linz, Austria; Corporate Technology Siemens AG, Munich, Germany",Accepted
392,Paratexts and documentary practices: Text mining authorship and acknowledgment from a bioinformatics corpus,"Rolland, K.H. and Mathiassen, L. and Rai, A.",Information Systems Research,2018,"As organizations increasingly use digital platforms to facilitate innovation, researchers are seeking to understand how platforms shape business practices. Although extant literature offers important insights into platform management from a platformowner perspective, we know little about how organizations manage industry platforms provided by external parties to generate opportunities and overcome challenges in relation to their infrastructure and work processes. As part of larger ecosystems, these digital platforms offer organizations bundles of digital options that they can selectively invest in over time. At the same time, organizations' previous investments in digital infrastructure and work processes produce a legacy of digital debt that conditions how they manage their digital platforms over time. Against this backdrop, we investigate how digital options and digital debt were implicated in a large Scandinavian media organization's management of a news production platform over nearly 17 years. Drawing on extant literature and the findings from this case, we theorize the progression of and interactions between digital options and digital debt during an organization's digital platform management in relation to its infrastructure and work processes. The theory reveals the complex choices that organizations face in such efforts: While they may have to resolve digital debt to make a platform's digital options actionable, hesitancy to plant digital debt may equally well prevent them from realizing otherwise attractive digital options. Similarly, while identified digital options may offer organizations new opportunities to resolve digital debt, eagerness to realize digital options may just as easily lead to unwise planting of digital debt. © 2018 INFORMS.",10.1287/isre.2018.0788,"Department of Informatics, University of Oslo, Oslo, 0316, Norway; Center for Process Innovation, Department of Computer Information Systems, Robinson College of Business, Georgia State University, Atlanta, GA  30303, United States",Rejected
393,CyNEST: A maintainable cython-based interface for the NEST simulator,"Rigatos, G. and Siano, P.",IEEE Systems Journal,2018,"This paper proposes a systematic method for forecasting default probabilities for financial firms with particular interest in electric power corporations. According to the credit risk theory, a company's closeness to default is determined by the distance of its assets' value from its debts. The assets' value depends primarily on the company's market (option) value through a complex nonlinear relation. By forecasting with accuracy the enterprize's option value, it becomes also possible to estimate the future value of the enterprize's asset value and the associated probability of default. This paper proposes a systematic method for forecasting the probability to default for companies (option/asset value forecasting methods) using a new nonlinear Kalman filtering method under the name derivative-free nonlinear Kalman filter. The firm's option value is considered to be described by the Black-Scholes nonlinear partial differential equation (PDE). Using a differential flatness theory, the PDE is transformed into an equivalent state-space model in the so-called canonical form. Using the latter model and by redesigning the derivative-free nonlinear Kalman filter as a m-step-ahead predictor, estimates are obtained of the company's future option values. By forecasting the company's market (option) values, it becomes also possible to forecast the associated asset value and volatility, and finally, to estimate the company's future default risk. © 2007-2012 IEEE.",10.1109/JSYST.2016.2610320,"Unit of Industrial Automation, Industrial Systems Institute, Rion-Patras, 26504, Greece; Department of Industrial Engineering, University of Salerno, Fisciano, 84084, Italy",Rejected
394,A multistage linear stochastic programming model for optimal corporate debt management,"Conejero, J.M. and Rodríguez-Echeverría, R. and Hernández, J. and Clemente, P.J. and Ortiz-Caraballo, C. and Jurado, E. and Sánchez-Figueroa, F.",Journal of Systems and Software,2018,"It is widely claimed that Technical Debt is related to quality problems being often produced by poor processes, lack of verification or basic incompetence. Several techniques have been proposed to detect Technical Debt in source code, as identification of modularity violations, code smells or grime buildups. These approaches have been used to empirically demonstrate the relation among Technical Debt indicators and quality harms. However, these works are mainly focused on programming level, when the system has already been implemented. There may also be sources of Technical Debt in non-code artifacts, e.g. requirements, and its identification may provide important information to move refactoring efforts to previous stages and reduce future Technical Debt interest. This paper presents an empirical study to evaluate whether modularity anomalies at requirements level are directly related to maintainability attributes affecting systems quality and increasing, thus, system's interest. The study relies on a framework that allows the identification of modularity anomalies and its quantification by using modularity metrics. Maintainability metrics are also used to assess dynamic maintainability properties. The results obtained by both sets of metrics are pairwise compared to check whether the more modularity anomalies the system presents, the less stable and more difficult to maintain it is. © 2018 Elsevier Inc.",10.1016/j.jss.2018.04.035,"Quercus Software Engineering Group, University of Extremadura, Avda. de la Universidad, s/n10071, Spain; Escola d'Enginyeria d'Igualada, Universitat Politècnica de Catalunya, Av. Pla de la Massa, n° 8, Igualada, 08700, Spain",Accepted
395,The effect of ISO 14001 on equity structure,"Tornhill, A.","Proceedings - 2018 IEEE 11th International Conference on Software Testing, Verification and Validation Workshops, ICSTW 2018",2018,"Test automation promises several advantages such as shorter lead times, higher code quality, and an executable documentation of the system's behavior. However, test automation won't deliver on those promises unless the quality of the automated test code itself is maintained, and to manually inspect the evolution of thousands of tests that change on a daily basis is impractical at best. This paper investigates how CodeScene - a tool for predictive analyses and visualizations - could be used to identify technical debt in automated test code. CodeScene combines repository mining, static code analysis, and machine learning to prioritize potential code improvements based on the most likely return on investment. © 2018 IEEE.",10.1109/ICSTW.2018.00039,"Empear AB, Malmö, Sweden",Accepted
396,Intrusion prevention in asterisk-based telephony system,"Kersten, M.",IEEE Software,2018,"Most enterprise IT organizations don't have a well-defined productivity measure for what flows through their software production process. No clear consensus exists from academia or industry thought leaders on what constitutes software development productivity. Organizations know it when they see it - for example, through products that drive market adoption faster than others. But correlating development activities to those results has been more of an opaque art than a disciplined activity. To define productivity in a value stream, we must first define what flows. © 2018 IEEE.",10.1109/MS.2018.2801538,"Tasktop, United States",Rejected
397,Comparison of wrapper and filtering approaches for corporate failure prediction,"Sion, L. and Van Landuyt, D. and Yskout, K. and Joosen, W.","Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018",2018,"The development of secure and privacy-preserving software systems entails the continuous consideration of the security and privacy aspects of the system under development. While contemporary software development practices do support such a continuous approach towards software development, existing threat modeling activities are commonly executed as single-shot efforts leading to a single, historic, and quickly obsolete view on the security and privacy of the system. This disconnect leads to undetected new issues and wasted efforts on already resolved problems, effectively accruing technical debt. The presented SPARTA prototype facilitates the consideration of security and privacy by providing support for: (i) capturing security and privacy design decisions in a DFD-based architectural abstraction, (ii) continuous threat elicitation on this knowledge-enriched abstraction, and (iii) risk analysis of the elicited threats for prioritizing security and privacy efforts. By capturing and continuously assessing the impact of security and privacy design decisions on the elicited threats, the progress towards securing the system can be assessed and alternatives can be compared, taking into account past and present design decisions. © 2018 IEEE.",10.1109/ICSA-C.2018.00032,"Imec-DistriNet, KU Leuven, Heverlee, Belgium",Rejected
398,Optimal harvest-use-store strategy for energy harvesting wireless systems,"Chaudhary, D.K. and Srivastava, S. and Kumar, V.","Proceedings of the 2nd International Conference on Green Computing and Internet of Things, ICGCIoT 2018",2018,"In the present situation, Machine Learning provides a very sturdy toolkit for building applicable and useful complex prediction systems by providing new methods for creating high-show software. Unlike traditional software engineering, the collection of training examples is performed, and then the algorithms are applied. It is the hidden agenda behind artificial intelligence. Despite this fact, it is dangerous to think that this fast triumph comes for no cost. Glaring restrictions still exists in the measurements utilized and how much outcomes are imparted back to their radiating areas. We are evident of several ML-specific unpredictable factors to account for in the system design. These include algorithmic inclinations, technical arrears, data dependencies, configuration issues, the problem of authentication, granting-Approval, along with faith, and human bias. We mean to motivate the continuous exchange and concentrate on coordinating the machine learning research. © 2018 IEEE.",10.1109/ICGCIoT.2018.8753081,"Amity University, Noida, Uttar Pradesh, India; G.L. Bajaj Institute of Technology Management, Greater Noida, India",Accepted
399,An exploratory study on self-admitted technical debt,"Cha, S. and Dong, Q.H. and Vogel-Heuser, B.","Proceedings - IEEE 16th International Conference on Industrial Informatics, INDIN 2018",2018,"Technical debt (TD) describes the long-term negative effect of choosing sub-optimal solutions to achieve a short-term benefit (e.g., cost saving). Engineers from various disciplines, such as mechanical, electrical and software, develop and maintain automated production systems (aPS). Over their development and maintenance period, changes in one discipline might have negative or unexpected impact on the other disciplines due to the interwoven dependencies among the disciplines. Manually derived task list might omit some necessary tasks and, therefore, TD is quite often introduced unintentionally. Also, the interest of TD due to insufficient knowledge sometimes exceeds the short-term cost saving. In this paper, a workflow is proposed to assist in the solution selection process for the aPS domain. The workflow includes the systematic change effort estimation tool considering multidiscipline and TD interest estimation. KAMP4aPS is selected as a tool to estimate the change effort by deriving a fine-grained task list for a modification. Based on such detailed estimation and additional cost factors, one can foresee TD and choose appropriate solution, which fits the current business context. An exemplary change scenario in a lab size plant is presented to demonstrate the suggested methodology. © 2018 IEEE.",10.1109/INDIN.2018.8472004,"Institute of Automation and Information Systems, Technical University of Munich, Garching near Munich, Germany",Accepted
400,VisMinerTD: An open source tool to support the monitoring of the technical debt evolution using software visualization,"DRE?EWSKI, R. and KRUK, S. and MAKÓWKA, M.",IEEE Access,2018,"Return on Equity (ROE) is an important factor from the perspective of formulating and implementing a company's financial strategies. It is also one of its evaluation criteria. It presents to investors the effectiveness of using their capital. Increasing profitability may be treated as a symptom of shareholder wealth, while its reduction may be a signal indicating a deterioration of the financial situation of the company. An investment in a company will be attractive to investors if the results obtained by it will enable the benefit from the dividend to be paid and if the share prices will show an upward trend. Therefore, profit and profitability are categories dependent on the company and affect the wealth of its owners. The ROE ratio is synthetic and is linked to, among others with the size of sales, asset use activity, and the size of the company's debt. However, the decisions regarding the capital structure of a company should be made not only by purely economic and financial analyses but also should take into account the social and environmental effects of economic activities. To take into account not only short-term financial goals but also long-term sustainable development goals during the decision-making process, we need intelligent and creative multi-criteria decision support tools. Bio-inspired artificial intelligence techniques - such as evolutionary algorithms, deep neural networks, or swarm algorithms, to give only a few examples - are gaining more and more popularity in the recent years. Evolutionary algorithms are optimization techniques that are modeled on the processes of evolution that are taking place in natural populations. They can find approximate solutions to the NP-hard global, multi-modal, and multi-objective optimization problems. In this paper, we propose an innovative approach - an agent-based bio-inspired system supporting decisions in the area of corporate finance, which takes into account not only financial goals but also the sustainable development goals. The system will allow for multi-objective optimization with the use of bio-inspired algorithms. In this paper, we will concentrate on one module of the proposed system - the evolutionary algorithm optimizing the ROE factor. During the experiments, we will verify the ability of the proposed algorithm to provide decision makers with reasonable, useful, and, at the same time, also innovative and non-obvious solutions concerning the desired capital structure of a given company, which usually operates in a rapidly changing environment. The proposed system will allow for taking into account more than one criteria and perform multi-objective optimization with the use of an evolutionary algorithm or an agent-based co-evolutionary algorithm, so it will be possible to include also the long-term goals of sustainable development in the future. © 2018 IEEE.",10.1109/ACCESS.2018.2870201,"AGH University of Science and Technology, Department of Computer Science, 30-059 Cracow, Poland; Cracow University of Economics, Department of Economics and Organization of Enterprises, 31-510 Cracow, 71005, Poland",Rejected
401,The benefits and consequences of workarounds in software development projects,"Mo, R. and Ramaswamy, S. and Snipes, W. and Kazman, R. and Cai, Y. and Naedele, M.",ASE 2018 - Proceedings of the 33rd ACM/IEEE International Conference on Automated Software Engineering,2018,"In this paper, we report our experiences of applying three complementary automated software architecture analysis techniques, supported by a tool suite, called DV8, to 8 industrial projects within a large company. DV8 includes two state-of-the-art architecture-level maintainability metrics-Decoupling Level and Propagation Cost, an architecture flaw detection tool, and an architecture root detection tool. We collected development process data from the project teams as input to these tools, reported the results back to the practitioners, and followed up with telephone conferences and interviews. Our experiences revealed that the metrics scores, quantitative debt analysis, and architecture flaw visualization can effectively bridge the gap between management and development, help them decide if, when, and where to refactor. In particular, the metrics scores, compared against industrial benchmarks, faithfully reflected the practitioners' intuitions about the maintainability of their projects, and enabled them to better understand the maintainability relative to other projects internal to their company, and to other industrial products. The automatically detected architecture flaws and roots enabled the practitioners to precisely pinpoint, visualize, and quantify the hotspots"" within the systems that are responsible for high maintenance costs. Except for the two smallest projects for which both architecture metrics indicated high maintainability, all other projects are planning or have already begun refactorings to address the problems detected by our analyses. We are working on further automating the tool chain, and transforming the analysis suite into deployable services accessible by all projects within the company. © 2018 Association for Computing Machinery.",10.1145/3238147.3240467,"Central China Normal University, Wuhan, China; ABB Inc., Cleveland, OH, United States; ABB Corporate Research, Raleigh, NC, United States; SEU, CMU and U. of Hawaii HonoluluHI, United States; Drexel University, Philadelphia, PA, United States; ABB Inc., Baden, Switzerland",Accepted
402,Conciliating model-driven engineering with technical debt using a quality framework,"Kallel, S. and Tibermacine, C. and Kallel, S. and Kacem, A.H. and Dony, C.",Information and Software Technology,2018,"Context: Architecture constraints are specifications of conditions to which an architecture model must adhere in order to satisfy an architecture decision imposed by a given design principle. These constraints can be specified with predicate languages like OCL at design time and checked on design artifacts. Objective: Many works in the literature studied the importance of checking these constraints to guarantee quality on design models, and to prevent technical debt and maintenance difficulties. In this paper, we propose a process whose ultimate goal is to enable the checking of these constraints in the implementation stage. Method: The proposed process takes as input a textual specification of an architecture constraint specified at design stage. It translates this specification into meta-programs and then it uses them with aspect-oriented programming to check constraints at the implementation stage and at run-time on object-oriented programs. Results: We experimented an implementation of this process on a set of 12 architecture constraints. The results of this experimentation showed that our process is able to statically and dynamically detect architecture constraint violations on toy object-oriented applications, but also on real-world ones. Conclusion: The automatic checking of architecture constraints is important at source code level and at runtime. It avoids the disappearance of architecture decision knowledge in implementation artifacts, and facilitates later their maintenance. © 2018",10.1016/j.infsof.2018.05.002,"ReDCAD, University of Sfax, Tunisia; LIRMM, CNRS and University of Montpellier, France",Accepted
403,A study on deliberate presumptions of customer payments with reminder in the absence of face-to-face contact transactions,"Ullah, M.A. and Alam, M.M. and Sultana, S. and Toma, R.S.","2018 International Conference on Innovations in Science, Engineering and Technology, ICISET 2018",2018,"Over the years, credit card debt crisis is the main issue in share market and card-issuing banks. Most card users, regardless of their payment capability, overused credit cards and cash-card debts. This catastrophe is the biggest challenge for both card holders and banks. The study aimed at predicting the accuracy of default payment of credit card users using data mining techniques. In this study total of six data mining techniques were applied to the data set of 30,000 individual records collected from the UCI data repository. Then we have compared our regression results with target value of the dataset. According to our test results, linear regression shows the best performance with 80% accuracy and Random Forest regression shows the lowest performance with 63% accuracy. Finally, we have evaluated the performance of each algorithm on overall dataset which was randomly sampled and found the Adaboost showing highest performance with 88% accuracy and Random Forest shows lowest performance with 70% accuracy. The study was implemented using data mining tools such as SPSS and Orange. © 2018 IEEE.",10.1109/ICISET.2018.8745571,"Dept. of Computer Science and Engineering, International Islamic University Chittagong, Chittagong, 4203, Bangladesh",Rejected
404,Toward measuring defect debt and developing a recommender system for their prioritization,"Garkavtsev, M. and Lamonova, N. and Gostev, A.","Proceedings of the 2018 IEEE 2nd International Conference on Data Stream Mining and Processing, DSMP 2018",2018,"Those just starting a new project, let alone setting up a business of their own, often find themselves facing quite a few problems. The first one, more often than not, is choosing the best technology to do it. With this article, we will try to help those who have taken the first decisive step to make the right choice. We are going to analyze various aspects of programming languages and draw conclusions on their applicability, which will be of use to small teams and startups creating their software business from scratch. Our defectiveness forecast can help to adjust timeline of a product (project) delivery. As well as helping to estimate costs for fixing non-functional issues in the code. This information helps to address product (project) delivery risks at different levels like financial, project, software development. With the article we are only giving an additional angle for analysis, not a full-scale framework for choosing a programming language. © 2018 IEEE.",10.1109/DSMP.2018.8478454,"QArea, Switzerland; Diligences Inc., Kharkiv, Ukraine",Rejected
405,(Automated) software modularization using community detection,"Silva, V. and Jeronimo, H. and Travassos, G.H.",ACM International Conference Proceeding Series,2018,"Maintenance is often the most expensive and time-consuming of all software system lifecycle phases. Technical Debt (TD) refers to technical decisions on shortcuts and workarounds taken during the software development. It affects the internal quality of software. Therefore, software maintenance can be difficult when the TD is not perceived or managed in the projects. Despite the increasing attention of practitioners and researchers, TD studies indicate its management (TDM) is still incipient. Particularly in Brazilian Software Organizations (BSOs), there is still a lack of information on how practitioners perceive and manage the TD in software projects. This paper reports the results of two studies aiming to investigate the current knowledge level of practitioners from BSOs regarding TD and TDM, and to produce a summary of the available technologies to manage TD. To achieve these objectives, we surveyed practitioners from BSOs and undertook a quasi-Systematic Literature Review (qSLR) to gather specific TDM technologies. The survey results indicated that the general BSOs practitioners knowledge regarding TD and TDM is still low. Few participants from the survey reported managing TD. The qSLR results provide evidence-based information about a set of TDM technologies, synthesized in evidence briefings to facilitate their use by software practitioners in the industry. Moreover, this paper offers links to a research package to aid in the replication process and support future investigations. © 2018 Association for Computing Machinery.",10.1145/3275245.3275267,"PESC/COPPE UFRJ, Rio de Janeiro, Brazil",Rejected
406,Establishing a framework for managing interest in technical debt,"Behnamghader, P. and Meemeng, P. and Fostiropoulos, I. and Huang, D. and Srisopha, K. and Boehm, B.",International Symposium on Empirical Software Engineering and Measurement,2018,"Background: Researchers oftentimes measure quality metrics only in the changed files when analyzing software evolution over commit-history. This approach is not suitable for compilation and using program analysis techniques that require byte-code. At the same time, compiling the whole software not only is costly but may also leave us with many uncompilable and unanalyzed revisions. Aims: We intend to demonstrate if analyzing changes in a module results in achieving a high compilation ratio and a better understanding of software quality evolution. Method: We conduct a large-scale multi-perspective empirical study on 37838 distinct revisions of the core module of 68 systems across Apache, Google, and Netflix to assess their compilability and identify when the software is uncompilable as a result of a developer's fault. We study the characteristics of uncompilable revisions and analyze compilable ones to understand the impact of developers on software quality. Results: We achieve high compilation ratios: 98.4% for Apache, 99.0% for Google, and 94.3% for Netflix. We identify 303 sequences of uncompile commits and create a model to predict uncompilability based on commit metadata with an F1-score of 0.89 and an AUC of 0.96. We identify statistical differences between the impact of affiliated and external developers of organizations. Conclusions: Focusing on a module results in a more complete and accurate software evolution analysis, reduces the cost and complexity, and facilitates manual inspection. © 2018 ACM.",10.1145/3239235.3239237,"University of Southern Califronia, United States",Accepted
407,Adaptive enterprise architecture drivenagiledevelopment,"Snipes, W. and Karlekar, S.L. and Mo, R.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"In large-scale software systems, the majority of defective files are architecturally connected, and the architecture connections usually exhibit design flaws, which are associated with higher change-proneness among files and higher maintenance costs. As software evolves with bug fixes, new features, or improvements, unresolved architecture design flaws can contribute to maintenance difficulties. The impact on effort due to architecture design flaws has been difficult to quantify and justify. In this paper, we conducted a case study where we identified flawed architecture relations and quantified their effects on maintenance activities. Using data from this project's source code and revision history, we identified file groups where files are architecturally connected and participated in flawed architecture designs, quantified the maintenance activities in the detected files, and assessed the penalty related to these files. © 2018 IEEE.",10.1109/SEAA.2018.00071,"ABB Corporate Research, United States; ABB GISPL, India",Accepted
408,Hidden technical debt in machine learning systems,"Flisar, J. and Podgorelec, V.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Technical debt (TD) is a term used to describe a trade off between code quality and timely software release. Since technical debt has negative impact on software development, identification of such debt is an important task in the software engineering domain. Sometimes, technical debt is annotated in source code comments. This kind of debt is referred to as self-admitted technical debt (SATD). Recently, some studies have focused on automated detection and classification of SATD using natural language processing methods. However, these methods have only used manually annotated data to train their classifiers. In this paper, we present the results of a performed exploratory study for using large corpus of unlabeled code comments, extracted from open source projects on git-hub, to train word embeddings, in order to improve detection of SATD. Our approach aims to enhance the feature selection method by taking advantage of the pre-trained word embeddings to detect similar features in source code comments. The experimental results show a significant improvement in SATD classification. With achieved 82% of correct predictions of SATD, the method seems to be a good candidate to be adopted in practice. © 2018 IEEE.",10.1109/SEAA.2018.00045,"UM FERI, Maribor, Slovenia",Accepted
409,Manufacturing execution systems: A vision for managing software development,"Paul, C.C. and Cristian, M. and Elisabeta, S. and Gillich, N.","2018 International Symposium on Fundamentals of Electrical Engineering, ISFEE 2018",2018,"The present paper determines the electric power for a wind power system, according to the time varying wind speed, v. The wind power system (WPS) consists of a wind turbine, WT and a synchronous generator with permanent magnets, SGPM. The electrical power becomes a prescribed value, P, of the control system, ensuring stable operation and maximum captured wind power. Operation at the maximum power point (MPP) at the optimal mechanical angular speed (MAS), ?OPTIM, in the conditions in those the wind speed decreases over time causes transition to an unstable area, MAS decreasing over time. For this reason, in present, at stable operation of the wind power system, the MAS values are higher than ?OPTIM. The prescribed power values, P, are calculated in such a way that the WPS should operate stable and the captured wind power is as high as possible. To determine the prescribed power value, an algorithm is proposed that considers rapid wind speed variations. Measuring the basic functional sizes, MAS and the electric debt energy by the SGPM, we determine the dependence of optimal MAS to the wind speed and bring the WPS in the optimal operation area by modifying the generators load. © 2018 IEEE.",10.1109/ISFEE.2018.8742416,"Department of Electrical Engineering and Informatics, Eftimie Murgu, University of Resita, Resita, Romania; Department of Automation and Computers, Politehnica University Timisoara, Timisoara, Romania",Rejected
410,A systematic mapping study on technical debt and its management,"Charalampidou, S. and Ampatzoglou, A. and Chatzigeorgiou, A. and Tsiridis, N.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Documentation issues in software projects have been recently classified as a type of technical debt (TD), a concept that express-es how shortcuts during software development result in additional maintenance and evolution effort. The specific type of TD is termed documentation debt, and is among the most prevalent ones in practice and research. In this study we propose a tool-based approach for preventing documentation TD during requirements engineering, by: (a) integrating requirements specifications into the IDE, and (b) enabling the real-time creation of traces between requirements and code. To this end, we collaborated with a small/medium software company and conducted a qualitative case study to: (a) analyze the current process and identify existing TD types, (b) collect the requirements and implement a tool that aims at preventing the accumulation of documentation TD, and (c) investigate whether the tool successfully meets its goal. The results of the study suggest that the developers are motivated to use the developed tool, since they feel that they can develop, maintain and utilize requirements specifications and traces as part of their daily routine. © 2018 IEEE.",10.1109/SEAA.2018.00075,"University of Groningen, Netherlands; University of Macedonia, Thessaloniki, Greece; Open Technology Services, Thessaloniki, Greece",Accepted
411,A simulation study of practical methods for technical debt management in agile software development,"Barabucci, G. and Eschweiler, M. and Speer, A.","Proceedings - IEEE 14th International Conference on eScience, e-Science 2018",2018,"When it comes to managing their digital data, researchers are often left to their own devices, with little guidance from their hosting institution. These problems are exacerbated in the humanities, in which each project is seen as a separate world that needs special solutions, leading to data losses and an accumulation of technical debt. This paper presents our vision and progress on TI-One: a department-wide system that guides the management of the data of the whole Thomas-Institut, part of the Philosophy Faculty of the University of Cologne. The novel features of TI-One are 1) a department-wide set of guidelines and conventions, 2) the materialization of live data from non-file sources (e.g., DBs), 3) a versioning system with extended metadata that creates an almost effortless path from automated backups to proper long-term archival of research data. © 2018 IEEE.",10.1109/eScience.2018.00070,"Cologne Center for EHumanities, University of Cologne, Cologne, Germany; Thomas-Institut, Faculty of Philosophy, University of Cologne, Cologne, Germany",Rejected
412,Preemptive management of model driven technical debt for improving software quality,"Roveda, R. and Fontana, F.A. and Pigazzini, I. and Zanoni, M.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Different indexes have been proposed to evaluate software quality and technical debt. Usually these indexes take into account different code level issues and several metrics, well known software metrics or new ones defined ad hoc for a specific purpose. In this paper we propose and define a new index, more oriented to the evaluation of architectural violations. We describe in detail the index, called Architectural Debt Index, that we integrated in a tool developed for architectural smell detection. The index is based on the detection of architectural smells, their criticality and their history. Currently only dependency architectural smells have been considered, but other architectural debt indicators can be considered and integrated in the index computation. © 2018 IEEE.",10.1109/SEAA.2018.00073,"Alten Italia, Milano, Italy; Department of Informatics, Systems and Communication, Università of Milano-Bicocca, Italy",Accepted
413,Cluster Analysis of Listed Company Solvency Based on the SOM,"Perillo, C. and Battiston, S.",Applied Network Science,2018,"Over the last decades, both advanced and emerging economies have experienced a striking increase in the intra-financial activity across different asset classes and increasingly complex contract types, leading to a far more complex financial system. Until the 2007-2008 crisis, the increased financial intensity and complexity was believed beneficial in making the financial system more resilient and less vulnerable to shocks. However, in 2007-2008, the advanced economies suffered the biggest financial crisis since the 1930s, followed by a severe post-crisis recession, questioning the adequacy of traditional tools in predicting, explaining, and responding to periods of financial distress. In particular, the effect of complex interconnections among financial actors on financial stability has been widely acknowledged. A recent debate focused on the effects of unconventional policies aimed at achieving both price and financial stability. Among these unconventional policies, Quantitative Easing (QE, i.e., the large-scale asset purchase programme conducted by a central bank upon the creation of new money) has been recently implemented by the European Central Bank (ECB). In this context, two questions deserve more attention in the literature. First, to what extent, the resources provided to the banking system through QE are transmitted to the real economy. Second, to what extent, the QE may also alter the pattern of intra-financial exposures and what are the implications in terms of financial stability. Here, we address these two questions by developing a methodology to map the multilayer macro-network of financial exposures among institutional sectors across financial instruments (i.e., loans and deposits, debt securities, and equity), and we illustrate our approach on recently available data. We then test the effect of the implementation of ECBs QE on the time evolution of the financial linkages in the multilayer macro-network of the euro area, as well as the effect on macroeconomic variables, such as consumption, investment, unemployment, growth, and inflation. © 2018, The Author(s).",10.1007/s41109-018-0098-8,"FINEXUS Center for Financial Networks and Sustainability, Department of Banking and Finance, University of Zurich, Zurich, Switzerland",Rejected
414,Investigating modern release engineering practices,"Martini, A.",Proceedings - International Conference on Software Engineering,2018,"It is challenging to assess and manage Technical Debt. Technical Debt is avoided or refactored if the long-term benefits, such as preventing extra-costs, exceed the cost of repaying the debt. Some tools have been recently proposed for the identification of Technical Debt, but most of them do not help in assessing the cost-benefits of repaying the Debt. Besides, it is challenging to track, visualize and plan Technical Debt refactoring systematically. Although practitioners might use simple tracking tools, calculating and communicating Technical Debt is currently not supported. Based on the results of previous research, combined with several practical experiences in collaboration with large software companies, we have developed and evaluated a lightweight tool, AnaConDebt, to track and assess Technical Debt. © 2018 Author.",10.1145/3194164.3194185,"University of Oslo, Oslo, Norway",Accepted
415,Will the Bail-in Break the Vicious Circle Between Banks and their Sovereign?,"Elagamy, M.N. and Stanier, C. and Sharp, B.",Advances in Intelligent Systems and Computing,2018,"Stock Market (SM) is a significant sector of countries economy and represents a crucial role in the growth of their commerce and industry. Hence, discovering efficient ways to analyse and visualise stock market data is considered a significant issue in modern finance. The use of Data Mining (DM) techniques to predict stock market has been extensively studied using historical market prices but such approaches are constrained to make assessments within the scope of existing information, and thus they are not able to model any random behaviour of stock market or provide causes behind events. One area of limited success in stock market prediction comes from textual data, which is a rich source of information and analysing it may provide better understanding of random behaviours of the market. Text Mining (TM) combined with Random Forest (RF) algorithm offers a novel approach to study critical indicators, which contribute to the prediction of stock market abnormal movements. A Stock Market Random Forest-Text Mining system (SMRF-TM) is developed to mine the critical indicators related to the 2009 Dubai stock market debt standstill. Random forest is applied to classify the extracted features into a set of semantic classes, thus extending current approaches from three to eight classes: critical down, down, neutral, up, critical up, economic, social and political. The study demonstrates that Random Forest has outperformed the other classifiers and has achieved the best accuracy in classifying the bigram features extracted from the corpus. © 2018, Springer International Publishing AG.",10.1007/978-3-319-74690-6_65,"Staffordshire University, Staffordshire, Stoke-on-Trent, ST4 2DE, United Kingdom; Arab Academy for Science and Technology, Abo Keer, Alexandria, 1029, Egypt",Rejected
416,"Austerity discourses in der spiegel journal, 2009-2014","Kurashige, K. and Tsuruta, S. and Sakurai, E. and Sakurai, Y. and Knauf, R. and Damiani, E.","Proceedings - 13th International Conference on Signal-Image Technology and Internet-Based Systems, SITIS 2017",2018,"Nowadays, a lot of IT personnel have psychological distress. Meanwhile, counselors to help them are lack in number. To solve the problem, we proposed a counseling agent (CA) called CRECA (context respectful counseling agent). CRECA listens to clients and promotes their reflection context respectfully namely in a context preserving way. This agent can be enhanced using a body language called 'unazuki' in Japanese, a kind of 'nodding' to greatly promote dialogue, often accompanying 'un-un' (meaning 'exactly') of Japanese onomatopoeia. This body language is expected to significantly help represent empathy or entire approval. In this paper, the agent is integrated with such a 'unazuki' or 'dialog promotion nodding' robot to continue the conversation naturally or context respectfully towards clients' further reflection. To realize such 'unazuki', the robot nods twice at each end of dialog sentence input by clients. Here, we introduce our newly developed robot that behaves human-like by an appropriate nodding behavior. The main motivation for developing a more human-like robot was the extension of application fields from IT workers' counselling to people, who suffers from more social problems such as financial debt, or anxiety of victory or defeat. For such applications, it is often very important that the agent behaves as much as possible human-like. Finally, we present the experimental evaluation results that proves such nodding is effective in counseling. © 2017 IEEE.",10.1109/SITIS.2017.20,"Dept. of Information and Electronic Engineering, Muroran Institute of Technology, Muroran, Japan; School of Information Environment, Tokyo Denki University, Inzai, Japan; Faculty of Service Management, Bunri University of Hospitality, Sayama, Japan; School of Interdisciplinary Mathematical Sciences, Meiji University, Nakano, Japan; Dept. of Computer Science and Automation, Ilmenau University of Technology, Ilmenau, Germany; Universita' degli Studi di Milano, Department of Computer Science, Milan",Rejected
417,Investigating the Link between User Stories and Documentation Debt on Software Projects,,"25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings",2018,"The proceedings contain 76 papers. The topics discussed include: a decade of software quality analysis in practice surprises, anecdotes, and lessons learned; towards a new digital business operating system speed, data, ecosystems, and empowerment; ten years of JDeodorant: lessons learned from the hunt for smells; design patterns impact on software quality: where are the theories?; benchmarks for software clone detection: a ten-year retrospective; context is king: the developer perspective on the usage of static analysis tools; micro-clones in evolving software; SMARTLOG: place error log statement by deep understanding of log intention; exploring the integration of user feedback in automated testing of android applications; structured random differential testing of instruction decoders; clustering support for inadequate test suite reduction; automatically repairing dependency-related build breakage; dissection of a bug dataset: anatomy of 395 patches from Defects4J; mining stackoverflow for program repair; detecting third-party libraries in android applications with high precision and recall; how do developers fix issues and pay back technical debt in the apache ecosystem?; and how good is your puppet? an empirically defined and validated quality model for puppet.",,,Rejected
418,When Software Architecture Leads to Social Debt,"De Lima Justino, Y. and Da Silva, C.E.",Proceedings - International Conference on Software Engineering,2018,"The migration of legacy systems to a service-oriented architecture (SOA) allows to deal with the demand for interoperability and the need to provide a robust high-Available service interface. However, such migration presents a considerable risk, as it often involves the use of different techniques on systems with elevated technical debt and high maintenance costs. For this purpose, a process is instantiated to provide an appropriate set of techniques that will minimize risks and at the same time ensure quality improvement of the systems throughout the migration process. In this sense, this work reports on a case study of the application of a process for the reengineering of legacy systems to support the implementation of SOA project. This study has been applied to the evolution of legacy systems of the Secretariat of State for Taxation of Rio Grande do Norte (SET/RN), Brazil, providing significant results regarding the achievement of important quality goals. © 2018 Authors.",10.1145/3183440.3195067,"Metropole Digital Institute-UFRN, Natal, Brazil",Rejected
419,Architectural Technical Debt Identification Based on Architecture Decisions and Change Scenarios,"Biaggi, A. and Fontana, F.A. and Roveda, R.","Proceedings - 44th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2018",2018,"Architectural smells gained great attention in the past few years since they directly affect software quality and increase architectural technical debt. However, while it is straightforward to understand why they are important, it is more difficult to find techniques and tools to detect and remove architectural smells. The purpose of this paper is to introduce an open-source tool for automatic architectural smells detection for C/C++ projects, by creating an abstraction of the project and defining the concept of dependency between elements belonging to the project in order to identify architectural smells. The tool has been validated on some open-source projects with promising results. © 2018 IEEE.",10.1109/SEAA.2018.00074,"Università degli Studi di Milano - Bicocca, Milan, Italy",Accepted
420,When and why your code starts to smell bad,"Aldaeej, A. and Seaman, C.",Proceedings - International Conference on Software Engineering,2018,"In this paper, we propose a model that formalizes the role of software evolution in characterizing Technical Debt (TD) by defining a series of software product states, where each successive state represents an increased level of maintenance code churn, and thus presumably an increased level of change difficulty. We also propose a way to use these states to estimate TD principal and interest and use this information in decision making during release planning. In addition, we illustrate our model using bug report data from the Eclipse-Birt project. © 2018 ACM.",10.1145/3194164.3194177,"University of Maryland Baltimore County, Department of Information Systems, United States",Accepted
421,An Analysis of Techniques and Methods for Technical Debt Management: A Reflection from the Architecture Perspective,"Verdecchia, R.","Proceedings - 2018 IEEE 15th International Conference on Software Architecture Companion, ICSA-C 2018",2018,"Architectural technical debt is a metaphor used to describe sub-optimal architectural design and implementation choices that bring short-term benefits to the cost of the long-term gradual deterioration of the quality of software. Architectural technical debt is an active field of research. Nevertheless, how to accurately identify architectural technical debt is still an open question. Our research aims to fill this gap. We strive to: (i) consolidate the existing knowledge of architectural technical debt identification in practice, (ii) conceive novel identification approaches built upon the existing state of the art techniques and industrial needs, and (iii) provide empirical evidence of architectural technical debt phenomena and assess the viability of the conceived approaches. © 2018 IEEE.",10.1109/ICSA-C.2018.00018,"Gran Sasso Science Institute, L'Aquila, Italy; Vrije Universiteit Amsterdam, Netherlands",Accepted
422,Definitions and technical debt trends: A systematic mapping of the literature [Definiciones y tendencia de deuda técnica: Un mapeo sistemático de la literatura],"Tan, J. and Lungu, M. and Avgeriou, P.",CEUR Workshop Proceedings,2018,The topic of technical debt has gained significant attention from researchers in recent years since its management has significant impact of software development. Several studies that analyze technical debt evolution from different perspectives; however since most of these studies are done for Java very little is known about the evolution of technical debt in software ecosystems consisting of projects written in other languages. In this paper we run a study across nine Python open-source software projects belonging to the Apache Software Foundation to investigate the amount of technical debt that is paid back. To measure technical debt we use one of the standard tools in industry: SonarQube. We investigate the impact of using the 28 default rules of SonarQube for Python versus using an extended set of 208 rules to detect instances of technical debt. © 2018 CEUR-WS. All rights reserved.,,"University of Groningen, Groningen, Netherlands; IT University of Copenhagen, Copenhagen, Denmark",Accepted
423,Assessing the Effectiveness of Static Analysis through Defect Correlation Analysis,"Borrego, G. and Salazar-Lugo, G. and Parra, M. and Palacio, R.","Proceedings - 6th Annual Conference on Computational Science and Computational Intelligence, CSCI 2019",2019,"Agile methods adoption in global software development (GSD) has revealed architectural knowledge (AK) management as a challenge, since documentation debt prevails in these environments. Thus, knowledge dissemination/acquisition becomes difficult because of the four inherent distances in GSD, which, in turn causes AK vaporization. One way to reduce this loss of knowledge is to take advantage of the AK traces that different unstructured and textual electronic means (UTEM) leave (e.g. instant messengers and email), which developers prefer on AGSD environments. These traces are valuable, but their access is difficult because these means have no tools adapted to search AK and because this knowledge is scattered in different UTEM. The AK condensation concept proposes that trough a mechanism of classification and collection of messages contained in UTEM, AK could become available for the stakeholders. This article presents a Slack complement, which implements an AK classification mechanism based on social tagging. We evaluated this mechanism with undergraduate students through a replica of a previous study. We obtained positive results in regards to usefulness and ease of use, but with tagging behavior results that differ (not statistically significant) from those obtained previously. These evidences encourage us to evaluate the AK condensation concept in its whole, in real scenarios. © 2019 IEEE.",10.1109/CSCI49370.2019.00212,"Computation and Design Department, Technologic Institute of Sonora, Cd. Obregon, Mexico; Navojoa Unit, Technologic Institute of Sonora, Cd. Obregon, Mexico",Rejected
424,A large-scale survey on the effects of selected development practices on software correctness,"Idris, M.K. and Boukar, M.M. and Adeshina, S.A.","2019 15th International Conference on Electronics, Computer and Computation, ICECCO 2019",2019,"Developing nations are faced with a lot of bad roads with potholes of different debt ranges, the maintenance and rehabilitation process by government agencies is an ongoing effort that requires periodic bad road inventory to guarantee safety. Bad roads are either identified by government agency's survey teams or individual who volunteer to report these conditions to the authorities. Our research provided a simple but effective solution to aid in automatically reporting bad roads using smart-phones through measuring the pavement profile based on the vibration of a moving vehicle. In this article, we will explain how we used some a smart-phone in reading the vibration pattern, GPS location, speed and direction of a vehicle that drives through a pothole, these parameters are periodically streamed to a cloud application. We used standard deviation to measure the level of dispersion around a segmented set of streamed vehicle vibration to identify potholes of different sizes, we also used Artificial Intelligence - supervised learning algorithm (classification) to reduce the false positive error rates due to human behaviors. The final results show a distinct vibration levels between small pot-holes, speed bumps and big pot-holes, these values are displayed on map application to visualize the geographical locations of these pot-holes (Google maps) © 2019 IEEE.",10.1109/ICECCO48375.2019.9043286,"Nile University of Nigeria, Department of Computer Science, Abuja, Nigeria",Rejected
425,Relevance of MOOCs for training of public sector employees,"Andelic, N. and Feeney, A. and McKeown, G.",ICMI 2019 - Proceedings of the 2019 International Conference on Multimodal Interaction,2019,"Research has found that professional advice with empathy displays and signs of listening lead to more successful outcomes. These skills are typically displayed through visual nonverbal signals, whereas reduced multimodal contexts have to use other strategies to compensate for the lack of visual nonverbal information. Debt advice is often a highly emotional scenario but to date there has been no research comparing fully multimodal with reduced multimodal debt advice. The aim of the current study was to compare explicit emotional content (as expressed verbally) and implicit emotional content (as expressed through paralinguistic cues) in face to face (FTF) and telephone debt advice recordings. Twenty-two debt advice recordings were coded as emotional or functional and processed through emotion recognition software. The analysis found that FTF recordings included more explicit emotion than telephone recordings did. However, linear mixed effects modelling found substantially higher levels of arousal and slightly lower levels of valence in telephone advice. Interaction analyses found that emotional speech in FTF advice was characterised by lower levels of arousal than during functional speech, whereas emotional speech in telephone advice had higher levels of arousal than in functional speech. We can conclude that there are differences in emotional content when comparing full and reduced multimodal debt advice. Furthermore, as telephone advice cannot avail of visual nonverbal signals, it seems to compensate by using nonverbal cues present in the voice. © 2019 Association for Computing Machinery.",10.1145/3340555.3353757,"School of Psychology Queen's, University Belfast, Belfast, United Kingdom",Rejected
426,"2015 10th Joint Meeting of the European Software Engineering Conference and the ACM SIGSOFT Symposium on the Foundations of Software Engineering, ESEC/FSE 2015 - Proceedings","Aragão, B.S. and Andrade, R.M.C. and Santos, I.S. and Castro, R.N.S. and Lelli, V. and Darin, T.G.R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,"When deadlines and resources of software projects become scarce, testing is usually in the first row to have its activities aborted or reduced. If defects cannot be found, products quality can be affected. In a software development process, aborted or reduced activities that can bring short-term benefits, but can be harmful to the project in a long run, are considered Technical Debt (TD). When TDs impact testing activities, they are called Test Debt. There are several studies dealing with Test Debt, however, current solutions often deal with specific types of tests (e.g., exploratory and automated tests) and do not address the whole software testing process. Aiming to fill these gaps, this paper proposes a Test Debt Catalog with subtypes of Test Debts and technical debt management activities. This catalog was built based on semi-structured interviews conducted with practitioners who perform testing activities in five projects from industry. With our catalog, we intend to help the management of test debts during the execution of software testing processes. © 2019, IFIP International Federation for Information Processing.",10.1007/978-3-030-31280-0_18,"Group of Computer Networks, Software Engineering, and Systems (GREat), Federal University of Ceará (UFC), Fortaleza, Ceará, Brazil",Accepted
427,Quantifying architectural debts,"Ismoilova, G.F and Qizi, N.D.A.",International Journal of Innovative Technology and Exploring Engineering,2019,"The article is devoted to the discussion of the recent trends and reformation of housing and communal services in Uzbekistan introducing ICT to the sphere. The object of the research is the sector of housing and communal services of the Republic of Uzbekistan. The actuality of the research consists of increasing number of scholars of several developing countries who are interested in how to use the ICT and by this to achieve economic effectiveness both in the scope of country and company. For example, regardless of the reformations and development in this sphere, a row of problems is unsolved. Nowadays population is not satisfied with the supply of communal services; hence the number of complaints on the work of service providers is increasing. In addition, the problems of expenses and debts above normal and not correctly calculated are remain open. Besides, the problems in the sphere of housing and communal services also arise from the lack of the mechanism of monthly taking measurements from the counters and absence of central database of consumers. The analysis of the main approaches determining the contribution of ICT to the housing and communal sphere, formulation of recommendations relating to the prior directions to achieve the step-by-step informatization of the sphere of housing and communal services makes up the scientific novelty of the research. The research consists of four parts. Firstly, the role of ICT in the sphere of housing and communal services is explored. Secondly, application of billing system to the sphere of housing and communal services is investigated. Thirdly, reformation of housing and communal services by introducing CRM system is examined. Lastly, introduction of ICT to the sphere of housing and communal services for integration with e-government is discussed. © BEIESP.",,"Tashkent university of Information Technologies named after Muhammad al-Khwarizmi, Tashkent, Uzbekistan",Rejected
428,Measure it? Manage it? Ignore it? Software practitioners and technical debt,"Pavli?, L. and Hli, T.",CEUR Workshop Proceedings,2019,"This paper focuses on the technical debt metaphor and its management practices. We present an overview of the currently available tools for managing technical debt. We also present leading tools, that enable technical debt measurement. We demonstrate the noticeable deficit in the number of tools that are intended and specialized for management activities only. Even existing tools do not support all technical debt management activities. This observation became a guide in the development of our own solution for managing technical debt. In this paper we also present our tool for managing technical debt (TD Tool). Copyright © 2019 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"University of Maribor, Faculty of Electrical Engineering and Computer Science, Koroka cesta 46, Maribor, SI-2000, Slovenia",Accepted
429,Managing Technical Debt in Software Projects Using Scrum: An Action Research,"Ma, H. and Cheng, H.-F. and Yu, B. and Zhu, H.",Proceedings of the ACM on Human-Computer Interaction,2019,"Online platforms provide new channels for people in need to seek help from friends and strangers. However, individuals often encounter psychological barriers that deter them from asking for help. For example, people might have different concerns about asking for help, including acknowledging incompetence, bothering others, and accruing social debt. These perceived social costs limit the potential benefits of help solicitations. In this study, we attempt to investigate whether anonymity (posting a question anonymously), ephemerality (allowing questions to be visible for only a short period), and system routing (having the system handle the question routing) could reduce social costs in a typical online help-seeking behavior - question asking. We built a platform to support these three features and conducted a controlled within-subjects experiment to test their effects on the social costs of posting questions. Results suggest that the presence of anonymity, ephemerality, and system routing reduce social costs. Further, we find that employing anonymity and system routing features did not lower the quality and quantity of answers to the questions in our system. © 2019 Copyright held by the owner/author(s). Publication rights licensed to ACM.",10.1145/3361119,"University of Minnesota, 200 Union Street SE, Minneapolis, MN  55455, United States; Carnegie Mellon University, 5000 Forbes Ave., Pittsburgh, PA  15213, United States",Rejected
430,Power corporations' default probability forecasting using the Derivative-free nonlinear Kalman Filter,"Feng, Q. and Cai, Y. and Kazman, R. and Cui, D. and Liu, T. and Fang, H.","Proceedings - 2019 34th IEEE/ACM International Conference on Automated Software Engineering, ASE 2019",2019,"Architecture degradation has a strong negative impact on software quality and can result in significant losses. Severe software degradation does not happen overnight. Software evolves continuously, through numerous issues, fixing bugs and adding new features, and architecture flaws emerge quietly and largely unnoticed until they grow in scope and significance when the system becomes difficult to maintain. Developers are largely unaware of these flaws or the accumulating debt as they are focused on their immediate tasks of address individual issues. As a consequence, the cumulative impacts of their activities, as they affect the architecture, go unnoticed. To detect these problems early and prevent them from accumulating into severe ones we propose to monitor software evolution by tracking the interactions among files revised to address issues. In particular, we propose and show how we can automatically detect active hotspots, to reveal architecture problems. We have studied hundreds of hotspots along the evolution timelines of 21 open source projects and showed that there exist just a few dominating active hotspots per project at any given time. Moreover, these dominating active hotspots persist over long time periods, and thus deserve special attention. Compared with state-of-the-art design and code smell detection tools we report that, using active hotspots, it is possible to detect signs of software degradation both earlier and more precisely. © 2019 IEEE.",10.1109/ASE.2019.00095,"Drexel University, Philadelphia, PA, United States; University of Hawaii &sEI/CMU, Honolulu, HI, United States; Xi'an Jiaotong University, Xi'an, China",Rejected
431,Five reasons for including technical debt in the software engineering curriculum,"Handoko, B.L. and Hendra, E. and Anandita, B.",International Journal of Innovative Technology and Exploring Engineering,2019,"Nowadays the awareness of loss from fraud has been shifted from blue collared employee theft to white collared management fraudulent statement. Forensic accounting becomes one of the solutions to detect this fraudulent statement. On the basic of our premise, the purpose of research to explore empirical evidence regarding financial statement fraud detection factors with net worth method as control variable. Our independent variables were debt to equity ratio, change in net assets, and return on asset. The research was quantitatively on food and beverage manufacturing companies listed on the Indonesia Stock Exchange. We use financial statement year end audited from 2013-2017. We used purposive sample, when selecting the samples. Total of 55 company reports samples were used in this research. We analyzed the data using statistical multiple linear regression analysis. We used statistical software to do the regression, in order to answer the research questions and test the hypothesis. Fraudulent reporting fraud was examined using proxies Beneish M-score. After the statistical test, this research concludes that financial distress factor proxy Debt to Equity Ratio (DER) has no significant effect on fraud detection. Other factor that is financial stability was proxies by changes in total assets (ACHANGE), and financial targets in the proxy of Return on Assets (ROA) both have significant impact on the detection of financial statement fraud. © BEIESP.",10.35940/ijitee.A3889.119119,"Accounting Department, Faculty of Economics and Communication, Bina Nusantara University, Jakarta, 11480, Indonesia",Rejected
432,Cost-Sensitive Learning for Imbalanced Bad Debt Datasets in Healthcare Industry,"Hacks, S. and Hofert, H. and Salentin, J. and Yeong, Y.C. and Lichter, H.","Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOCW",2019,"In the software development industry, Technical Debt is regarded as a critical issue in terms of the negative consequences such as increased software development cost, low product quality, decreased maintainability, and slowed progress to the long-term success of developing software. However, despite the vast research contributions in Technical Debt management for software engineering, the idea of Technical Debt fails to provide a holistic consideration to include both IT and business aspects. Further, implementing an enterprise architecture (EA) project might not always be a success due to uncertainty and unavailability of resources. Therefore, we relate the consequences of EA implementation failure with a new metaphor-Enterprise Architecture Debt (EA Debt). We anticipate that the accumulation of EA Debt will negatively influence EA quality, and expose the business to risk. © 2019 IEEE.",10.1109/EDOCW.2019.00016,"Research Group Software Construction, RWTH Aachen University, Aachen, Germany; Universiti Teknologi Petronas, Perak Darul Ridzuan, Malaysia",Accepted
433,Using real options to manage Technical Debt in Requirements Engineering,"Belle, A.B. and Lethbridge, T.C. and Kpodjedo, S. and Adesina, O.O. and Garzon, M.A.","Proceedings - 2019 IEEE 27th International Requirements Engineering Conference Workshops, REW 2019",2019,"Assurance cases are a well-established structured technique used to document a reasoned, auditable argument supporting that a system meets desirable properties (e.g., safety or security). Assurance cases are increasingly becoming popular, and are being used to make safety and cyber-security arguments about medical, automotive and aviation systems. Current methods usually assess confidence in assurance cases, but only with evidence available at design-time. However, real-world situations demand considerations of evidence that are also available at run-time. In this paper, we introduce a novel confidence measure called INCIDENCE (weIghted assuraNCe confIDENCE). The measure considers evidence available both at design and run times, and is suitable for the assessment of assurance cases represented using Goal Structuring Notation (GSN) - being a popular notation for representing assurance cases. We rely on the confidence measure to derive an uncertainty measure that can be used to measure technical debt (requirement debt) for software systems. We illustrate our work through an example focusing on feature identification. © 2019 IEEE.",10.1109/REW.2019.00011,"Software Engineering Department, Thompson Rivers University, Kamloops, Canada; Electrical Engineering and Computer Science, University of Ottawa, Ottawa, Canada; IT and Software Engineering Department, Ecole de Technologie Supérieure, Montreal, Canada; Computer Information Systems, University of the Fraser Valley, Abbotsford, Canada",Rejected
434,Investigating Architectural Technical Debt accumulation and refactoring over time: A multiple-case study,"Sas, D. and Avgeriou, P. and Arcelli Fontana, F.","Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",2019,"Architectural smells may substantially increase maintenance effort and thus require extra attention for potential refactoring. While we currently understand this concept and have identified different types of such smells, we have not yet studied their evolution in depth. This is necessary to inform their prioritisation and refactoring. This study analyses the evolution of individual architectural smell instances over time, and the characteristics that define these instances. Three different types of architectural smells are taken into consideration and mined from a total of 524 versions across 14 different projects. The results show how different smell types differ in multiple aspects, such as their growth rate, the importance of the affected elements over time in the dependency network of the system, and the time each instance affects the system. They also cast valuable insights on what aspects are the most important to consider during prioritisation and refactoring activities. © 2019 IEEE.",10.1109/ICSME.2019.00090,"Bernoulli Institute for Mathematics, Computer Science and Artificial Intelligence, University of Groningen, Groningen, Netherlands; Dipartimento di Informatica, Sistemistica e Comunicazione, University of Milano-Bicocca, Milan, Italy",Accepted
435,Benefits of open source software in defense environments,"Iammarino, M. and Zampetti, F. and Aversano, L. and Di Penta, M.","Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",2019,"Technical Debt (TD) concerns the lack of an adequate solution in a software project, from its design to the source code. Its admittance through comments or commit messages is referred to as Self-Admitted Technical Debt (SATD). Previous research has studied SATD from different perspectives, including its distribution, impact on software quality, and removal. In this paper, we investigate the relationship between refactorings and SATD removal. By leveraging a dataset of SATD and their removals in four open-source projects and by using an automated refactoring detection tool, we study the co-occurrence of refactorings and SATD removals. Results of the study indicate that refactorings are more likely to co-occur with SATD removals than with other commits, however, in most cases, they belong to different quality improvement activities performed at the same time. © 2019 IEEE.",10.1109/ICSME.2019.00029,"Department of Engineering, University of Sannio, Piazza Roma 21, Benevento, 82100, Italy",Accepted
436,Identification and management of technical debt: A systematic mapping study,"Ahmad, M.O. and Raulamo-Jurvanen, P.","Proceedings of the 2019 Federated Conference on Computer Science and Information Systems, FedCSIS 2019",2019,"This study utilizes citation analysis and automated topic analysis of papers published in International Conference on Agile Software Development (XP) from 2002 to 2018. We collected data from Scopus database, finding 789 XP papers. We performed topic and trend analysis with R/RStudio utilizing the text mining approach, and used MS Excel for the quantitative analysis of the data. The results show that the first five years of XP conference cover nearly 40% of papers published until now and almost 62% of the XP papers are cited at least once. Mining of XP conference paper titles and abstracts result in these hot research topics: 'Coordination', 'Technical Debt', 'Teamwork', 'Startups' and 'Agile Practices', thus strongly focusing on practical issues. The results also highlight the most influential researchers and institutions. The approach applied in this study can be extended to other software engineering venues and applied to large-scale studies. © 2019 Polish Information Processing Society - as since.",10.15439/2019F114,"Faculty of Electronics Telecommunications and Informatics, Gdansk University of Technology, Poland; M3S Research Unit, University of Oulu, Finland; Department of Mathematics and Computer Science, Karlstad University, Sweden",Rejected
437,Industrial software rejuvenation using open-source parsers,"Naz, F. and Popowich, F.","2019 IEEE Pacific Rim Conference on Communications, Computers and Signal Processing, PACRIM 2019 - Proceedings",2019,"Small or early-stage businesses often require sources of equity, loans, and/or debt funding to support their growth. An important part of the documentation accompanying funding requests can be derived from analytical data associated with the business. There are numerous commercial business intelligence (BI) tools to monitor data and generate business insights. However, most of the retail entrepreneurs still use manual and/or simple techniques, having little time to dedicate to sophisticated BI tools. In this work, we consider how supervised learning models can be used for retail telecommunications businesses. Specifically, we examine how nearest neighbour techniques, feed forward artificial neural networks, Bayesian classifiers, and support vector machines can be used with retail telecommunication data. As indicated by our initial results we have been able to achieve precision of 95.5%, recall of 94.7%, and f-measure of 95.1% which demonstrates that we can categorize retail telecommunication data based on the profitability. © 2019 IEEE.",10.1109/PACRIM47961.2019.8985083,"Simon Fraser University, School of Computing Science, Burnaby, BC, Canada",Rejected
438,"5th International Symposium on Business Modeling and Software Design, BMSD 2015","Digkas, G. and Nikolaidis, N. and Ampatzoglou, A. and Chatzigeorgiou, A.","Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019",2019,"Software reuse is a well-established software engineering process that aims at improving development productivity. Although reuse can be performed in a systematic way (e.g., through product lines), in practice, reuse is performed in many cases opportunistically, i.e., copying small code chunks either from the web or in-house developed projects. Knowledge sharing communities and especially StackOverflow constitute the primary source of code-related information for amateur and professional software developers. Despite the obvious benefit of increased productivity, reuse can have a mixed effect on the quality of the resulting code depending on the properties of the reused solutions. An efficient concept for capturing a wide-range of internal software qualities is the metaphor of Technical Debt which expresses the impact of shortcuts in software development on its maintenance costs. In this paper, we present the results of an empirical study on the relation between the existence of reusing code retrieved from StackOverflow on the technical debt of the target system. In particular, we study several open-source projects and identify non-trivial pieces of code that exhibit a perfect or near-perfect match with code provided in the context of answers in StackOverflow. Then, we compare the technical debt density of the reused fragments, obtained as the ratio of inefficiencies identified by SonarQube over the lines of reused code, to the technical debt density of the target codebase. The results provide insights to the potential impact of small-scale code reuse on technical debt and highlight the benefits of assessing code quality before committing changes to a repository. © 2019 IEEE.",10.1109/SEAA.2019.00022,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
439,Towards Assessing Software Architecture Quality by Exploiting Code Smell Relations,"Nayebi, M. and Cai, Y. and Kazman, R. and Ruhe, G. and Feng, Q. and Carlson, C. and Chew, F.","Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2019",2019,"Architecture debt is a form of technical debt that derives from the gap between the intended and the actual architecture design. In this study we measured architecture debt in two ways: 1) in terms of system-wide coupling measures, and 2) in terms of the number and severity of architecture flaws. In recent research it was shown that the amount of architecture debt has a huge impact on software maintainability and evolution. Consequently, reducing debt is expected to make software less costly and more amenable to change. This paper reports on a longitudinal study of a healthcare communications product created by BrightSquid Secure Communications Corp. This young company is facing the typical trade-off problem of desiring responsiveness to change requests, but wanting to avoid the ever-increasing effort that the accumulation of quick-And-dirty changes eventually incurs. In the first stage of the study, we analyzed the status of the 'before' system, which showed the impacts of change requests. This initial study motivated a more in-depth analysis of architecture debt. The results of this debt analysis were used in the second stage of the work to motivate a comprehensive refactoring of the software system. The third stage was a follow-on architecture debt analysis which quantified the improvements realized. Using this quantitative evidence, augmented by qualitative evidence gathered from in-depth interviews with BrightSquid's architects, we present lessons learned about the costs and benefits of paying down architecture debt in practice. © 2019 IEEE.",10.1109/ICSE-SEIP.2019.00026,"Ecole Polytechnique of Montreal, Canada; Drexel University, United States; University of Hawaii, United States; BrightSquid",Rejected
440,Developing processes to increase technical debt visibility and manageability  An action research study in industry,"Biffl, S. and Luder, A. and Rinker, F. and Waltersdorfer, L. and Winkler, D.",IEEE International Conference on Industrial Informatics (INDIN),2019,"The realization of a cyber-physical production system (CPPS) requires suitable methods and tools for the exchange and integration of engineering data between collaborating disciplines. Unfortunately, the description languages used in a CPPS Engineering (CPPSE) organization to describe discipline-specific views are not necessarily well suited for high-quality data exchange between workgroups. In this paper, we identify technical debt and risks regarding CPPSE description languages for data exchange using the VDI 3695 guideline as best practice. We report on effects and likely causes of the quality risks identified in a case study at a large CPPSE company. Based on data from workshops and semi-structured interviews with 28 domain experts from 12 workgroups, we propose a preliminary model relating causes and effects as foundation for analyzing and managing risks in the CPPSE data exchange process. © 2019 IEEE.",10.1109/INDIN41052.2019.8972322,"TU Wien, Inst. of Information Sys. Eng. Faculty of Informatics, Vienna, Austria; Manufacturing Systems and Automation OvG U., Institute of Ergonomics, Magdeburg, Germany; TU Wien, Christian Doppler Laboratory SQI Inst. of Information Sys. Eng., Vienna, Austria",Rejected
441,"Epistemic opacity, confirmation holism and technical debt: Computer simulation in the light of empirical software engineering","Dambanemuya, H.K. and Horvát, E.-Á.",WebSci 2019 - Proceedings of the 11th ACM Conference on Web Science,2019,"Crowd financing is a burgeoning phenomenon that promises to improve access to capital by enabling borrowers with limited financial opportunities to receive small contributions from individual lenders towards unsecured loan requests. Faced with information asymmetry about borrowers' credibility, individual lenders bear the entire loss in case of loan default. Predicting loan payment is therefore crucial for lenders and for the sustainability of these platforms. To this end, we examine whether the ""wisdom"" of the lending crowd can provide reliable decision support with respect to projects' long-Term success. Using data from Prosper.com, we investigate the association between the dynamics of lending behaviour and successful loan payment through interpretable classification models. We find evidence for collective intelligence signals in lending behaviour and observe variability in crowd wisdom across loan categories. We find that the wisdom of the lending crowd is most prominent in the auto loan category, but it is statistically significant for all other categories except student debt. Our study contributes new insights on how signals deduced from lending behaviour can improve the efficiency of crowd financing thereby contributing to economic growth and societal development. © 2019 Association for Computing Machinery.",10.1145/3292522.3326040,"Northwestern University, Evanston, IL, United States",Rejected
442,The potentials of a code generator which faces the stress ratio of requirements engineering processes in agile development projects,"Eposhi, A. and Oizumi, W. and Garcia, A. and Sousa, L. and Oliveira, R. and Oliveira, A.",IEEE International Conference on Program Comprehension,2019,"A design problem is the result of design decisions that negatively impact quality attributes. For example, a stakeholder introduces a design problem when he decides to addresses multiple unrelated responsibilities in a single class, impacting the modifiability and reusability of the system. Given their negative consequences, design problems should be identified and refactored. The literature still lacks evidence on which symptoms' characteristics can be used as strong indicators of design problems. For example, it is unknown if the density and diversity of certain symptoms (e.g., violations of object-oriented principles) are correlated with the occurrence of design problems. Thus, in this paper, we report a case study involving two C# systems. We evaluated the impact of refactoring, focused on removing design problems, on the density and diversity of symptoms. Results indicate that refactored classes usually present higher density and diversity of symptoms. However, the density and diversity of some symptoms, such as the violation of object-oriented principles, was not predominantly higher in refactored classes. Moreover, contrary to our expectations, refactorings caused almost no positive impact on the density and diversity of symptoms. © 2019 IEEE.",10.1109/ICPC.2019.00032,"Campus Paranavai-IFPR, Paranavai, Brazil",Accepted
443,Perspectives on managing technical debt: A transition point and roadmap from Dagstuhl,"Stahl, D. and Martini, A. and Martensson, T.","Proceedings - 2019 IEEE/ACM 41st International Conference on Software Engineering: Software Engineering in Practice, ICSE-SEIP 2019",2019,"Continuous integration is believed by many to improve software quality, including cyclomatic complexity. In this paper an exploratory study investigates the relationship between continuous integration behavior among developers and the cyclomatic complexity-particularly at critical levels-of the source code they commit, as a correct understanding of the consequences of a software development practice, particularly one as popular as continuous integration, is of crucial importance to industry professionals when deciding on improvement efforts. It is found that developer behavior differs significantly, as does their knowledge and awareness of cyclomatic complexity as a concept. We find that even though large commits ('big bangs') contribute proportionately slightly more to cyclomatic complexity, the effect is much less pronounced for critical cyclomatic complexity. It is also found that complex code tends to overlap with high levels of change activity, and that some developers deliberately change their integration behavior in the face of such hotspots, as a strategy to avoid merge conflicts. © 2019 IEEE.",10.1109/ICSE-SEIP.2019.00017,"Ericsson AB, Linkoping, Sweden; Department of Informatics, University of Oslo, Oslo, Norway; Saab AB, Linkoping, Sweden",Rejected
444,Modelling e-government development through the years using cluster analysis,"Rios, N. and Spinola, R.O. and De Mendonça Neto, M.G. and Seaman, C.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Understanding TD causes can support development teams in defining actions that could be taken to prevent the occurrence of debt items. Understanding the effects of TD could aid in prioritization of TD items to pay off to minimize possible negative consequences for the project. Existing work has revealed 105 causes and 85 effects of TD, and this high number can make it difficult to make practical use of this information. Without a consolidated representation, we would need to rely on a set of tables and isolated pieces of data. In this work, we propose the use of cross-company probabilistic cause-effect diagrams to represent information about TD causes and effects. We hypothesize that such diagrams can be useful to support TD cause/effect analysis sessions and empirically investigate this issue. Results from a case study performed with 72 participants indicate that the diagrams are able to positively support the management of TD, making it easier to identify its causes and the effects of its presence. Most of the participants also agreed that, by using the proposed diagrams, they gain agility, productivity, performance, and effectiveness. Finally, 89% of the participants stated that the use of the diagrams helped them to identify causes and effects of TD that they would not have identified without their support. © 2019 IEEE.",10.1109/TechDebt.2019.00009,"Federal University of Bahia, Department of Computer Science, Salvador, Brazil; Salvador University and State University of Bahia, Graduate Program in Systems and Computer, Salvador, Brazil; Department of Information Systems, University of Maryland, Baltimore County, Baltimore, MD, United States",Rejected
445,Trends in software testing,"Anderson, P. and Kot, L. and Gilmore, N. and Vitek, D.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"SARIF is an emerging standard for representing the results of program analysis tools. This tool demo shows how it can enable integration between static analysis tools and version control systems such as GitHub, and by doing so, encourage developers to reduce technical debt in a gradual non-invasive fashion. © 2019 IEEE.",10.1109/TechDebt.2019.00024,"GrammaTech Inc., 531 Esty St., Ithaca, NY  14850, United States",Accepted
446,An approach to structure determination and estimation of hierarchical Archimedean Copulas and its application to Bayesian classification,"Siva Nageswararao, K. and Venkataramanaiah, M. and Latha, C.M.",International Journal of Innovative Technology and Exploring Engineering,2019,"The present paper investigates the effect of profitability for the securities listed on S&P BSE Sensex index. The considered parameters for this analysis are size of the firm, return on assets, inventory turnover ratio, asset turnover ratio, liquidity and retained earnings. The time serioes data of 30 companies registred on the S&P BSE Sensex has been used for the period of 10 years starting from March 2007 to March 2017. The Hausman test and Wald test has been used to find the most suitable type of panel data model. Moreover, the fixed effect panel data model is also used for the purpose. Discriptive statistics like Karl Pearsons coefficient of correlation, Regression Analysis have been applied as statistical tools. The results have confirmed that the profitability has positive effect on liquidity and return on assets. The size, inventory turnover ratio, debt equity ratio, asset turnover ratio, retained earnings ratio and return on assets are found to be negative effect with dependent vaitable, i.e profitability. © BEIESP.",,"School of Management Studies, VFSTR(Deemed to be university), Guntur, Andhra Pradesh, India; Govt. Degree & PG CollegeAndhra Pradesh, India; Dept. Of Information Technology, Faculty of Informatics, University of Gondar, Gondar, Ethiopia",Rejected
447,Applicability of Technical Debt as a Concept to Understand Obstacles for Evolution of Automated Production Systems,,ACM International Conference Proceeding Series,2019,The proceedings contain 41 papers. The topics discussed include: open tools for software engineering: validation of a theory of openness in the automotive industry; an analysis of inheritance hierarchy evolution; model-integrated queries for the analysis of runtime events: a controlled experiment; practitioner evaluations on software testing tools; automated classification of class role-stereotypes via machine learning; preliminary evaluation of an ontology-based contextualized learning system for software security; features that predict the acceptability of java and JavaScript answers on stack overflow; comparing the effectiveness of using design and code measures in software faultiness estimation; monitoring technical debt in an industrial setting; and problems with statistical practice in software engineering research.,,,Rejected
448,"Dynamics of Information Flow Before Major Crises: Lessons from the Collapse of Enron, the Subprime Mortgage Crisis and Other High Impact Disasters in the Industrial Sector","Jendele, L. and Schwenk, M. and Cremarenco, D. and Janicijevic, I. and Rybalkin, M.","Proceedings - 2019 IEEE 12th International Conference on Software Testing, Verification and Validation, ICST 2019",2019,"Large monolithic codebases, such as those used at Google and Facebook, enable engineers to easily share code and allow cross-team collaboration. Such codebases are partitioned into a huge number of libraries, binaries, and tests. However, engineers currently usually have to state the build dependencies between those blocks of functionality manually. One of the possible inefficiencies introduced that way are underutilized libraries, i.e. libraries that provide more functionality than required by the dependent code. This results in slow builds and an increased load on the Continuous Integration System. In this paper, we propose a way to automatically find and decompose underutilized libraries into a set of smaller components, where each component is a standalone library. Our work focuses on decompositions at source file level. While prior work already proposed decompositions when the final number of components was given as an input, we introduce an algorithm, AutoDecomposer, that finds the number of components automatically. In contrast to existing work, we analyze how a decomposition would lower the number of tests triggered by the Continuous Integration System in order to select only those decompositions that provide an impact. We evaluate AutoDecomposer's efficiency by comparing its potential impact to the maximum theoretical impact achievable by applying the most granular decomposition. We conclude that applying AutoDecomposer's decompositions generates 95% of the theoretical maximum test triggering frequency reduction, while only generating 4% as many components for large targets and 30% as many components on average compared to the theoretically most efficient approach. © 2019 IEEE.",10.1109/ICST.2019.00055,"Google Inc., United States",Rejected
449,AutoScaling of VM in Private And Public Cloud Environment with Debt Assessment,"Skourletopoulos, G. and Mavromoustakis, C.X. and Mastorakis, G. and Batalla, J.M. and Song, H. and Sahalos, J.N. and Pallis, E.",IEEE Transactions on Green Communications and Networking,2019,"Mobile cloud computing is the model to ubiquitously access a shared pool of cloud computing resources, data, and services on-demand. This paper introduces the elasticity debt analytics paradigm as a solution concept for the resource provisioning problem in mobile cloud computing environments, guaranteeing the quality of service requirements. A novel green-centric, game theoretic approach to minimizing the elasticity debt on mobile cloud-based service level is proposed, investigating the mobile cloud offloading case. The decision to offload a mobile device user's task on cloud affects the level of elasticity debt minimization for the provided services. The modeling for the computation of the processing time, energy, and overhead in mobile opportunistic offloading is presented. A utility-driven elasticity debt and profit quantification approach is also examined for maximization of resource utilization, exploiting the hidden Markov model. The problem is formulated as an elasticity debt quantification game, elaborating on an incentive mechanism to predict elasticity debt, mitigate the risk of service over-utilization, achieve scalability, and optimize cloud resource provisioning. The experimental results prove the effectiveness of the equilibrium model, which allocates the mobile device user requests to high elasticity debt-level services and facilitates the elasticity debt minimization for green mobile cloud computing environments. © 2017 IEEE.",10.1109/TGCN.2018.2890034,"Department of Computer Science, Mobile Systems Laboratory, University of Nicosia, Nicosia, 1700, Cyprus; Department of Informatics Engineering, Technological Educational Institute of Crete, Heraklion, 71500, Greece; Department of Internet Architectures and Applications, National Institute of Telecommunications, Warsaw, 04-894, Poland; Architectures and Applications for the Internet Laboratory, Institute of Telecommunications, Warsaw University of Technology, Warsaw, 00-665, Poland; Department of",Rejected
450,Modeling Design Flaw Evolution Using Complex Systems,"Ludwig, J. and Cline, D.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"A critical aspect of software development is creating high-quality source code that is reliable, maintainable, and has limited technical debt. Software development teams generally employ a variety of design techniques, processes, and tools to continually work towards quality code while balancing the overall time and budget demands of the project. The goal of CBR Insight (CBRI) is to provide an objective and understandable measure of software quality that can help guide decisions and direct limited resources during software acquisition, development, and sustainment. CBRI supports the ability of technical and non-technical decision makers to verify that a project's software implementation follows through on promises around developing and sustaining reliable and maintainable software while managing technical debt. © 2019 IEEE.",10.1109/TechDebt.2019.00017,"Stottler Henke Associates Inc., San Mateo, CA, United States",Accepted
451,The psychology and politics of technical debt: How we incur technical debt and why retiring it is so difficult,"Tamburri, D.A.",IEEE Transactions on Computational Social Systems,2019,"Architectural technical debt is the additional project cost connected to technical issues nested in software architectures. Similarly, many practitioners have already experienced that there exists within software architectures a form of social debt, that is, the additional project cost connected to sociotechnical and organizational issues evident in or related to software architectures. This paper illustrates four recurrent antipatterns or community smells connected to such architectural social debt and outlines a means to measure the additional project cost connected to their underlying cause: decision incommunicability. Evaluating the results in multiple focus groups, this paper concludes that studying social debt and community smells at the architecture level may prove vital to rid software development communities of critical organizational flaws incurring considerable additional cost. © 2014 IEEE.",10.1109/TCSS.2018.2886433,"Jheronimus Academy of Data Science, Technische Universiteit Eindhoven, Eindhoven, 5612 AZ, Netherlands",Accepted
452,Modelling repayment patterns in the collections process for unsecured consumer debt: A case study,"Mera-Gomez, C. and Ramirez, F. and Bahsoon, R. and Buyya, R.","International Conference on Self-Adaptive and Self-Organizing Systems, SASO",2019,"A multi-tenant Software as a Service (SaaS) application is a highly configurable software that allows its owner to serve multiple tenants, each with their own workflows, workloads and Service Level Objectives (SLOs). Tenants are usually organizations that serve several users and the application appears to be a different one for each tenant. However, in practice, multi-tenant SaaS applications limit the diversity of tenants by clustering them in a few categories (e.g. premium, standard) with predefined SLOs. Additionally, this coarse-grained clustering reduces the advantage of these multi-tenant ecosystems over single tenant architectures to share dynamically virtual resources between tenants based on their own workload profile and elasticity adaptation decisions. To address this limitation, we propose a multi-agent elasticity management where each tenant is represented by a reinforcement learning agent that performs elasticity adaptations based on a new technical debt perspective, and make use of debt attributes (i.e. amnesty, interest) to form autonomous coalitions that minimise the effect of the unavoidable imperfections in any elasticity management approach. We extended CloudSim and Burlap to evaluate our approach. The simulation results indicate that our debt-aware multi-agent elasticity management preserves the diversity of tenants and reduces SLO violations without affecting the aggregate utility of the application owner. © 2018 IEEE.",10.1109/SASO.2018.00014,"School of Computer Science, University of Birmingham, Edgbaston, B152TT, United Kingdom; ESPOL Polythecnic University, Escuela Superior Politecnica Del Litoral, ESPOL, Facultad de Ingenieria en Electricidad y Computacion, P.O. Box 09-01-5863, Guayaquil, Ecuador; Cloud Computing and Distributed Systems (CLOUDS) Lab, School of Computing and Information Systems, University of Melbourne, Australia",Rejected
453,Late payment prediction models for fair allocation of customer contact lists to call center agents,"Teomete Yalab?k, F. and Yalab?k, ?.","International Review of Law, Computers and Technology",2019,"Bitcoin is the most prominent cryptocurrency that is frequently debated nowadays, basically defined as decentralised currency, payment system and investment tool which is an opportunity offered by today's digital age. In this article, we aim to fulfil the analysis of the legal basis of the matter from both technical and legal point of view. Despite there are many legal issues related to Bitcoin, we will particularly draw attention to some of the fundamental legal problems caused by the anonymity feature of the Bitcoin. Among these problems that may arise, only the disputes that may fall within the scope of the cases relating to debt and asset which have an impact on enforcement law will be examined. We will discuss the anonymity feature, considering the possibility of accessing an anonymous Bitcoin wallet. The article examines the situation where a debtor or one of the parties in a lawsuit may conceal their assets unfairly via Bitcoin (with the anonymity feature) in civil disputes relating to debt and assets. Has Bitcoin turned into a tool that malevolent debtors can hide their wealth while at the same time, a secret place where they can invest their money? In this study, we will offer solutions on overcoming the anonymity feature in practice and how to reveal and reach the wealth that are stored via Bitcoin wallet. Likewise, it will be underlined what malevolent debtors or parties in a lawsuit who want to obscure their wealth via Bitcoin wallet can do to strengthen their anonymity. Finally, we provide a specific and practical guideline for judges and especially creditor's lawyers in order to reduce the potential adverse situation that Bitcoin's anonymity feature can cause. © 2019, © 2019 Informa UK Limited, trading as Taylor & Francis Group.",10.1080/13600869.2019.1565105,,Rejected
454,Tool support for evaluating architectural debt of an existing system: An experience report,"Mobidin, H.S. and Sulaiman, R. and Shukur, Z. and Ali, N.M.",Journal of Computer Science,2019,"There is an alarming amount of frozen and unclaimed assets in Malaysia. Among the factors that contribute to this situation is the failure of the decedent to leave a will to the heirs of the estate or to leave the important documents necessary to initiate the distribution of the estate. This lack of preparation will inimitably put the heirs in a difficult position because they will have to spend their time and money to search and collect all related information and documentation related to the estate to assist them in liquefying and distributing the assets. With the advancement of information technology, there are information systems that had been built to manage and plan the estate of individuals. However, these systems have limitations and are unsuitable to be implemented in Malaysia because of different laws and procedures. Therefore, this paper proposes a personal legacy information system that will allow the owner to manage information such as assets, debts, wills and personal secrets, in a single platform. In addition, the owner can keep related documents to the information that are required for asset planning and distribution, especially in the Malaysian context. The owner can appoint a trustee(s) through the system and all information will be released by the system to the trustee when the owner dies. By applying encrypted communication, the legacy data will be kept secure. Static analysis is described at the requirement level for specifying the functional requirements of the system, using Z Specification. We hope that the proposed system will help mitigate the issues surrounding the problem of frozen and unclaimed assets. © 2019 Hanis Salwan Mobidin, Rossilawati Sulaiman, Zarina Shukur and Noorazean Mohd Ali.",10.3844/JCSSP.2019.1721.1733,"Center for Cyber Security, Faculty of Information Science and Technology, Universiti Kebangsaan Malaysia, UKM Bangi, Selangor, 43600, Malaysia",Rejected
455,"Proceedings - 3rd International Workshop on Software Engineering Research and Industrial Practice, SER and IP 2016","Robiolo, G. and Scott, E. and Matalonga, S. and Felderer, M.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,"Background: To adequately attend to non-functional requirements (NFRs), they must be documented; otherwise, developers would not know about their existence. However, the documentation of NFRs may be subject to Technical Debt and Waste, as any other software artefact. Aims: The goal is to explore indicators of potential Technical Debt and Waste in NFRs documentation. Method: Based on a subset of data acquired from the most recent NaPiRE (Naming the Pain in Requirements Engineering) survey, we calculate, for a standard set of NFR types, how often respondents state they document a specific type of NFR when they also state that it is important. This allows us to quantify the occurrence of potential Technical Debt and Waste. Results: Based on 398 survey responses, four NFR types (Maintainability, Reliability, Usability, and Performance) are labelled as important but they are not documented by more than 22% of the respondents. We interpret that these NFR types have a higher risk of Technical Debt than other NFR types. Regarding Waste, 15% of the respondents state they document NFRs related to Security and they do not consider it important. Conclusions: There is a clear indication that there is a risk of Technical Debt for a fixed set of NFRs since there is a lack of documentation of important NFRs. The potential risk of incurring Waste is also present but to a lesser extent. © Springer Nature Switzerland AG 2019.",10.1007/978-3-030-35333-9_16,"LIDTUA (CIC), Facultad de Ingeniería, Universidad Austral, Buenos Aires, Argentina; Institute of Computer Science, Tartu Unviersity, Tartu, Estonia; School of Computing, Engineering and Physical Sciences, University of the West of Scotland, Paisley, United Kingdom; Department of Computer Science, University of Innsbruck, Innsbruck, Austria",Accepted
456,Feature toggles: Practitioner practices and a case study,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,The proceedings contain 57 papers. The special focus in this conference is on Product-Focused Software Process Improvement. The topics include: When NFR Templates Pay Back? A Study on Evolution of Catalog of NFR Templates; improving Quality of Data Exchange Files. An Industrial Case Study; containers in Software Development: A Systematic Mapping Study; empirical Analysis of Hidden Technical Debt Patterns in Machine Learning Software; constraining the Implementation Through Architectural Security Rules: An Expert Study; technical Debt and Waste in Non-functional Requirements Documentation: An Exploratory Study; Technical Debt in Costa Rica: An InsighTD Survey Replication; exploring Preference of Chronological and Relevancy Filtering in Effort Estimation; automated Functional Size Measurement: A Multiple Case Study in the Industry; applying Surveys and Interviews in Software Test Tool Evaluation; can Expert Opinion Improve Effort Predictions When Exploiting Cross-Company Datasets? - A Case Study in a Small/Medium Company; excellence in Exploratory Testing: Success Factors in Large-Scale Industry Projects; comparison Framework for Team-Based Communication Channels; devOps in Practice  A Preliminary Analysis of Two Multinational Companies; Implementing Ethics in AI: Initial Results of an Industrial Multiple Case Study; How Agile Is Hybrid Agile? An Analysis of the HELENA Data; challenges of Scaled Agile for Safety-Critical Systems; on the Benefits of Corporate Hackathons for Software Ecosystems  A Systematic Mapping Study; agile in the Era of Digitalization: A Finnish Survey Study; whats Hot in Product Roadmapping? Key Practices and Success Factors; test-Case Quality  Understanding Practitioners Perspectives; integrating Data Protection into the Software Life Cycle.,,,Rejected
457,Understanding the impact of technical debt in coding and testing: An exploratory case study,"Haendler, T. and Neumann, G.","Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)",2019,"This summary refers to the paper Serious Refactoring Games published as a full research paper in the proceedings of the 52nd Hawaü International Conference on System Sciences (HICSS 2019) [HN19]. Software design issues can severely impede software development and maintenance. Thus, it is important for the success of software projects that developers are aware of bad smells in code artifacts and improve their skills to reduce these issues via refactoring. However, software refactoring is a complex activity and involves multiple tasks and aspects. Therefore, imparting competences for identifying bad smells and refactoring code efficiently is challenging for software engineering education and training. The approaches proposed for teaching software refactoring in recent years mostly concentrate on small and artificial tasks and fall short in terms of higher level competences, such as analysis and evaluation. In this paper, we investigate the possibilities and challenges of designing serious games for software refactoring on real-world code artifacts. In particular, we propose a game design, where students can compete either against a predefined benchmark (technical debt) or against each other. In addition, we describe a lightweight architecture as the technical foundation for the game design that integrates pre-existing analysis tools such as test frameworks and software-quality analyzers. Finally, we provide an exemplary game scenario to illustrate the application of serious games in a learning setting. © 2019 Gesellschaft fur Informatik (GI). All rights reserved.",10.18420/se2019-58,"Institute for Information Systems and New Media, Vienna University of Economics and Business (WU), Austria",Rejected
458,Does your configuration code smell?,"Gubareva, M. and Silva, T.C.",Complexity,2019,"The current expected loss calculations have recently attracted considerable attention in the research on credit risk modeling, impairment provisioning, and financial networks' stability. A new CDS-based approach to estimate current expected credit loss is proposed for low default portfolios, containing credit exposures to corporate issuers covered by publicly traded CDS contracts. First, a fraction of CDS spread related to a pure default compensation for different CDS maturities is assessed. Our results contrast with previous research. Second, based on the obtained historical weights of the default risk premium, a forward-looking term structure of the probabilities of default implied by the current CDS quotes is derived. The proposed approach covers both investment and noninvestment grade debt. The resulting framework is applied to a sample of corporate bonds. The developed methodology provides a useful tool, on one hand, for credit risk managers and balance-sheet preparers and, on the other hand, for regulators of financial markets as it sheds light on how procyclicality could be avoided in provisions. © 2019 Mariya Gubareva.",10.1155/2019/7820618,"ISCAL-Lisbon Accounting and Business School, Instituto Politécnico de Lisboa, Av. Miguel Bombarda, 20, Lisbon, 1069-035, Portugal; SOCIUS-Research Centre in Economic and Organizational Sociology, CSG-Research in Social Sciences and Management, Rua Miguel Lupi, 20, Lisbon, 1249-078, Portugal",Rejected
459,Software architecture health monitor,"Thuong, C.V. and Thanh, N.C. and Khang, T.L.",Studies in Computational Intelligence,2019,"Previous studies suggested that the characteristics of an industry may play a significant role in the relationship between financial decisions and firm performance through the degree of concentration or competition. Therefore, this research aims to evaluate such a role in order to clarify the effect of industry competition on the relationship between debt and performance. Moreover, overinvestment is recently considered to be one of the causes leading to bad performance because it tends to worsen agency problems in enterprises. As a consequence, the paper is the first one to examine the different impacts of industry competition on the debt-performance relationship in companies with and without overinvestment. Collected from the financial statements of all listed firms on Vietnams stock exchange, the dataset covers a wide range of 21 various industries over a seven-year period. The research methodology goes through two steps. Firstly, it calculates two alternative variables as the representatives of competition and overinvestment through different subequations. Secondly, it adds them to the main regression to estimate the results with the help of System-GMM estimator together with two instrumental variables, tangibility and non-debt tax shield, to deal with the endogenous problem. The findings show that debt ratio is positively related to firm performance and that the relationship might become stronger at the high level of industry competition. Nevertheless, the research indicates that the positive interaction between debt and competition gets weaker under overinvestment. © Springer Nature Switzerland AG 2019.",10.1007/978-3-030-04200-4_80,"School of Accounting  Banking  Finance, Ho Chi Minh City University of Technology, Ho Chi Minh City, Viet Nam; School of Economics, Erasmus University Rotterdam, The Hague, Netherlands",Rejected
460,Designite - A software design quality assessment tool,"Rajaguru, S. and Kalidasan, T. and Kavaskar, M. and Vengatesan, D. and Ramesh, P.",International Journal of Innovative Technology and Exploring Engineering,2019,"Groundnut is called as the king of oil seed. It plays an important role in oil seed economy of India. Groundnut oil is mainly used as cooking purpose and also used for manufacturing soaps, cosmetics, shaving creams and lubricants. Groundnut was cultivated both as rainfed and irrigated crop. Increased productivity greatly depends on available technologies and extent of adoption by farmers. With poor productivity, the economy of major groundnut district of Tamil Nadu like Ariyalur has been shattered as evidences with debt ridden farmers and migrating agricultural labourers of the region. Even through considerable changes with regard to knowledge and skills among the groundnut farmers were brought by the scientists and extension personnel, still there is a wide gap to be filled in by effective training programmes. If the training programmes are need based, a definite improvement in the knowledge level of groundnut farmers would occur leading to increased productivity and there is a possibility to make the predominant small and marginal farming systems more sustainable. Keeping these in view, the research study was taken in Ariyalur district of Tamil Nadu with the following objectives. Analyze the training needs of groundnut farmers on production technologies through the use of objective techniques. It would be of great use to find out the relationship between the selected independent variables and dependent variable. Identification of problems faced by groundnut farmers in adopting the recommended practices and their perceived solutions will be of immediate use in removing the existing deficiencies and to plan a sound future strategy of training the groundnut farmers. Proportionate random sampling procedure was applied to select 120 respondents from the district. The data were collected by using a well-structured interview schedule, and analyzed with statistical tools like percentage analysis, cumulative frequency method, and correlation and regression analysis. It could be observed that out of the eleven major subject areas, only four areas viz., plant protection measures, fertilizer application, micronutrient application and weed management were the most needed areas on which trainings were demanded. Lack of suitable weed control measures was the fifth most important constraint expressed by (90.83 per cent) of the respondents in groundnut cultivation. © BEIESP.",10.35940/ijitee.L3366.1081219,"Faculty of Agriculture, Annamalai University, Chidambaram, Tamil Nadu, India; Dept. of Agrl.Extension, Faculty of Agriculture, Annamalai University, Chidambaram, Tamil Nadu, India",Rejected
461,Elasticity debt: A debt-aware approach to reason about elasticity decisions in the cloud,"Abdou, H.A. and Mitra, S. and Fry, J. and Elamer, A.A.",Expert Systems with Applications,2019,"The main aim of this paper is to investigate how far applying suitably conceived and designed credit scoring models can properly account for the incidence of default and help improve the decision-making process. Four statistical modelling techniques, namely, discriminant analysis, logistic regression, multi-layer feed-forward neural network and probabilistic neural network are used in building credit scoring models for the Indian banking sector. Notably actual misclassification costs are analysed in preference to estimated misclassification costs. Our first-stage scoring models show that sophisticated credit scoring models, in particular probabilistic neural networks, can help to strengthen the decision-making processes by reducing default rates by over 14%. The second-stage of our analysis focuses upon the default cases and substantiates the significance of the timing of default. Moreover, our results reveal that State of residence, equated monthly instalment, net annual income, marital status and loan amount, are the most important predictive variables. The practical implications of this study are that our scoring models could help banks avoid high default rates, rising bad debts, shrinking cash flows and punitive cost-cutting measures. © 2019",10.1016/j.eswa.2019.03.028,"Lancashire School of Business and Enterprise, University of Central Lancashire, Preston, PR1 2HE, United Kingdom; The University of Salford Business School, University of Salford, Greater Manchester, M5 4WT, United Kingdom; School of Computing, Mathematics and Digital Technology, Manchester Metropolitan University, Manchester, M15 6BH, United Kingdom; School of Management, University of Bradford, Bradford, BD9 4JL, United Kingdom; Faculty of Commerce, Mansoura University, Mansoura, Egypt",Rejected
462,Examining the impact of self-admitted technical debt on software quality,"Sai Sravanth, K.R. and Sundaram, N.",International Journal of Innovative Technology and Exploring Engineering,2019,"Agricultural sector is the main income for the rural people in India. It plays a significant role in their life. In India, small and marginal farmers account for 70%, according to the 2011 census of the Government of India. These small and marginal farmers took credit from banks and private money lenders. The non-repayment of credit led to an agricultural crisis and farmers suicide. This study focused on the reasons that caused such a disaster. The study rests on a review of the literature which was extracted from journals, reports, and newspapers from 2004 to 2019. The review identified the following reasons for the agricultural crisis and farmers suicides-poverty, indebtedness, crop failures, distress, lack of awareness on new technologies, inadequate debt, marketing of produce, the high interest of non-institutional credit, and depletion of water levels. The article concluded noting that-the government had to shift its focus from industries to agriculture and shift its agricultural policies from short-term to long-term ones. © BEIESP.",10.35940/ijitee.K1855.0981119,"Department of Commerce, Vellore Institute of Technology, Vellore, India",Rejected
463,An experience report on detecting and repairing software architecture erosion,"Vats, P. and Samdani, K.","2019 IEEE International Conference on System, Computation, Automation and Networking, ICSCAN 2019",2019,"Portfolios, securities, stock market forecasting, risk management, debt management are all important pillars of the financial world. These pillars rely heavily on adequate and accurate prediction. These are problems that, on the small scale, affect individuals and their financial conditions and, on the larger scale, can be detrimental to a country's financial well-being. This paper, is an attempt at understanding the various algorithms and platforms involving Machine Learning in Financial Markets and reaching informed conclusions on parameters like accuracy, efficiency, speed and usability. In this paper, primarily, different trading techniques are introduced and their effectiveness in quantitative trading and, in general, finance to generate alphas is observed. These techniques, as observed, are categorised by their reliance on Neural Networks, Support Vector Machines and other quantitative variables in finance. Classifications on the basis of supervised and unsupervised techniques and K-Mean clustering are also made. Further, this paper also delves into the hitherto unpredictable and unmovable phenomena in market and public psychology and attempts to suggest a viable solution to it. © 2019 IEEE.",10.1109/ICSCAN.2019.8878741,"Computer Engineering Department, MPSTME, NMIMS University, India",Rejected
464,Quantifying and evaluating the technical debt on mobile cloud-based service level,"Sumathy, S. and Venkatachalam, S.",International Journal of Innovative Technology and Exploring Engineering,2019,"The core of the monetary position of a country is Banks. They are the backbone of a sound economy which helps the nation as a whole in the growth path. After globalisation, many foreign and private sector banks have been set up in India and it has given rise to a tough competition among public sector, private sector and foreign banks. So, it is vital to analyse the performance of the banks, which may throw light on their strengths and weaknesses relating to an overall improvement. In this study, the performance is analysed using ratios like Profitability Ratio, Management Efficiency Ratio, Debt Coverage Ratio and Balance Sheet Ratio. The top five Nationalised banks (based on their Market Capitalisation in June 2018) have been selected for the study. They are Bank of Baroda, IDBI Bank, Punjab National bank, Central Bank of India and Canara Bank. The study has been done for a term of five fiscal years from 2013-14 to 2017-18. For this purpose, secondary data have been sourced from RBI and the individual banks annual reports and statistical tools like Mean and ANOVA used. © BEIESP.",,"Karpagam Academy of Higher Education, Coimbatore, India",Rejected
465,IEEE International Conference on Program Comprehension,"Takhumova, O. and Danilova, I. and Reusova, T. and Bodryakova, N. and Bobyleva, O.",International Journal of Engineering and Advanced Technology,2019,"Financial stability and solvency of the company is a guarantee of effective development and the basis for making effective management decisions by management. This approach to business planning makes it possible to conduct a qualitative assessment of operating and investment activities and reflects the ability to timely repay its debt obligations. In Russian and world practice, there are many approaches to assessing the financial condition, however, the peculiarity of our study is the use of methodological tools that allow us to assess the profile of the organization when assessing the external and internal environment of the company. The paper identifies the elements of the macroenvironment, types of financial stability of the organization. Based on the system of expert assessments for PEST-metod, environmental factors are determined, including the probability of an event, the impact on the organization, the direction of influence, and the degree of importance. The assessment is based on conditions of an economic, political, socio-cultural and technological nature. This technique is a systematic approach to the study of the influence of conditions that form the external and internal environment of the company, market and production factors on the quantity and quality of products, services rendered. The results of the study indicate possible prospects for the development of further economic activities of the organization in the selected functioning environment. © BEIESP.",10.35940/ijeat.A2050.109119,"Department of Economic Analysis, Kuban State Agrarian University named after I.T. Trubilina, Russian Federation; Department of Commodity Science, Technology of Raw Materials and Products of Animal and Plant Origin named after S.A. Kasparyants, Moscow State Academy of Veterinary Medicine and Biotechnology named after. K.I. Scriabin, Moscow, Russian Federation",Rejected
466,Introduction to the special issue on technical debt in software systems,"Gupta, S.K. and Sinha, A.K.",Journal of Advanced Research in Dynamical and Control Systems,2019,"The purpose of this study is to analyze the impact on national and international political and economic events on performance of selected mutual funds. For this two categories of mutual fund, ICICI Prudential Focused Blue chip Fund-Growth (Equity diversified mutual fund) and ICICI Prudential Income Fund-Growth (Debt Fund) are considered. We have considered four latest events happen in 2016. Out of these events, two are National events (Demonetization and GST) and two are International events (BREXIT and wining US election by Donald Trump. Event study has been taken as analytical tool to assess the impact on of events on mutual funds in terms of their return, and for the event study the event window of 21 days (i.e. 10 days before and 10 days after the event day including event day) will consider for abnormal return and estimation window of 21 days consider for normal return. The time gap between event window and estimation window is 90 days. Expected results of this study suggest that these events either National or Global affect the mutual fund performance in terms of volatility in NAV of mutual funds. © 2019, Institute of Advanced Scientific Research, Inc.. All rights reserved.",,"SRMS International Business School, Lucknow, Uttar Pradesh, India; Amity Business School, Amity University, Lucknow Campus, Lucknow, Uttar Pradesh, India",Rejected
467,Costs and obstacles encountered in technical debt management  A case study,"Shaker, I.E. and Shaker, N.S.",Lecture Notes in Networks and Systems,2019,"In 2016-2017, the conjuncture of the corporate securities market is relatively favorable. In the context of declining borrowing costs, issuance activity in the primary market of corporate bonds is increasing. Debt securities rise against the backdrop of slowing inflation, lowering the key rate of the Bank of Russia, restoring world oil prices, increasing investor risk appetite, and reducing the volatility of the ruble. All the conditions for the placement of bonds were formed in order to invest them in the real economy. Corporate bonds of various companies receive a significant share in the total portfolio of investors, and this affects the development of investment potential and economic growth. © Springer Nature Switzerland AG 2019.",10.1007/978-3-030-00102-5_88,"Financial University Under the Government of the Russian Federation, Moscow, Russian Federation",Rejected
468,Technical debt reduction using search based automated refactoring,"Cai, Y. and Kazman, R.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"This paper present our tool suite called DV8. The objective of DV8 is to measure software modularity, detect architecture anti-patterns as technical debts, quantify the maintenance cost of each instance of an anti-pattern, and enable return on investment analyses of architectural debts. Different from other tools, DV8 integrates data from both source code and revision history. We now elaborate on each of DV8's capabilities. © 2019 IEEE.",10.1109/TechDebt.2019.00015,"Department of Computer Science, Drexel University, Philadelphia, United States; Dept. of Information Technology Management, University of Hawaii, Honolulu, United States",Accepted
469,Modelling Propagation of Technical Debt,"Rodríguez, P. and Mäntylä, M. and Oivo, M. and Lwakatare, L.E. and Seppänen, P. and Kuvaja, P.",Advances in Computers,2019,"Software development processes have evolved according to market needs. Fast changing conditions that characterize current software markets have favored methods advocating speed and flexibility. Agile and Lean software development are in the forefront of these methods. This chapter presents a unified view of Agile software development, Lean software development, and most recent advances toward rapid releases. First, we introduce the area and explain the reasons why the software development industry begun to move into this direction in the late 1990s. Section 2 characterizes the research trends on Agile software development. This section helps understand the relevance of Agile software development in the research literature. Section 3 provides a walk through the roots of Agile and Lean thinking, as they originally emerged in manufacturing. Section 4 develops into Agile and Lean for software development. Main characteristics and most popular methods and practices of Agile and Lean software development are developed in this section. Section 5 centers on rapid releases, continuous delivery, and continuous deployment, the latest advances in the area to get speed. The concepts of DevOps, as a means to take full (end-to-end) advantage of Agile and Lean, and Lean start-up, as an approach to foster innovation, are the focus of the two following Sections 6 and 7. Finally, Section 8 focuses on two important aspects of Agile and Lean software development: (1) metrics to guide decision making and (2) technical debt as a mechanism to gain business advantage. To wrap up the chapter, we peer into future directions in the area. © 2019 Elsevier Inc.",10.1016/bs.adcom.2018.03.014,"Faculty of Information Technology and Electrical Engineering, University of Oulu, Finland",Rejected
470,"Proceedings - 42nd Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2016","Wang, Y. and Choi, J. and Chen, Y. and Huang, Q. and Li, S. and Lee, M.-S. and Kuo, C.-C.J.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,"One major technique debt in video object segmentation is to label the object masks for training instances. As a result, we propose to prepare inexpensive, yet high quality pseudo ground truth corrected with motion cue for video object segmentation training. Our method conducts semantic segmentation using instance segmentation networks and, then, selects the segmented object of interest as the pseudo ground truth based on the motion information. Afterwards, the pseudo ground truth is exploited to finetune the pretrained objectness network to facilitate object segmentation in the remaining frames of the video. We show that the pseudo ground truth could effectively improve the segmentation performance. This straightforward unsupervised video object segmentation method is more efficient than existing methods. Experimental results on DAVIS and FBMS show that the proposed method outperforms state-of-the-art unsupervised segmentation methods on various benchmark datasets. And the category-agnostic pseudo ground truth has great potential to extend to multiple arbitrary object tracking. © 2019, Springer Nature Switzerland AG.",10.1007/978-3-030-20870-7_32,"University of Southern California, Los Angeles, CA  91754, United States; National Taiwan University, Taipei, 10617, Taiwan",Rejected
471,A Systematic Literature Review and a Unified Model of ATD,"Zulfahmi Toh, M. and Sahibuddin, S. and Mahrin, M.N.",ACM International Conference Proceeding Series,2019,"DevOps and Continuous Delivery (CD) are the terms that are always related to each other in Software Delivery and Operation Process area. DevOps introduces a significant agile perspective to deliver the software product in short cycle time that will reduce technical debt that is caused by delay. Continuous Delivery is one of the DevOpspractices that enables software organization to release new features and new products rapidly. However, the correct practices are still in ambiguity to the current CD process. This paper investigates the advantages and limitation of DevOps adoption to improve the CD process. A qualitative web survey has been conducted to identify the DevOps and Continuous Delivery advantages and adoption problems. 13 respondentsfeedbacks have been collected and analyzed. Based on the survey, there are four significant DevOpspractices that need to be considered and developed as a proper guideline to introduce to practitioners. © 2019 Association for Computing Machinery.",10.1145/3316615.3316619,"Advanced Informatic Department, Razak Faculty of Technology and Informatics, Universiti Teknologi Malaysia, Kuala Lumpur, 54100, Malaysia; Faculty of Computer System and Software Engineering, Universiti Malaysia Pahang, Kuantan, Pahang, 26300, Malaysia",Rejected
472,Corporations default probability forecasting using the derivative-free nonlinear kalman filter,"Kouros, P. and Chaikalis, T. and Arvanitou, E.-M. and Chatzigeorgiou, A. and Ampatzoglou, A. and Amanatidis, T.",Proceedings of the ACM Symposium on Applied Computing,2019,"Technical Debt (TD) reflects problems in software maintainability along evolution. TD principal is defined as the effort required for refactoring an existing system to an ideal one (a.k.a. optimal) that suffers from no maintainability problems. One of the open problems in the TD community is that ideal versions of systems do not exist, and there are no methods in the literature for approaching them, even theoretically. To alleviate this problem, in this paper we propose an efficient TD management strategy, by applying Search-Based Software Engineering techniques. In particular, we focus on one specific aspect of TD, namely inefficient software modularity, by properly assigning behavior and state to classes through search space exploration. At the same time, in the context of TD, we: (a) investigate the use of local search algorithms to obtain a near-optimum solution and propose TD repayment actions (i.e., refactorings), and (b) calculate the distance of a design to the corresponding optimal (i.e., a proxy of TD principal). The approach has been implemented in the JCaliper Eclipse plugin enabling a case study, which validates the approach and contrasts it to existing measure of software evolution. © 2019 Association for Computing Machinery.",10.1145/3297280.3297448,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
473,Towards Assessing the Technical Debt of Undesired Software Behaviors in Design Patterns,"Khomyakov, I. and Makhmutov, Z. and Mirgalimova, R. and Sillitti, A.",ICEIS 2019 - Proceedings of the 21st International Conference on Enterprise Information Systems,2019,"Background: Technical Debt (TD) is a quite complex concept that includes several aspect of software development. Often, people talk about TD as the amount of postponed work but this is just a basic approximation of the concept that includes many aspects that are technical and managerial. If TD is managed properly, it can provide a huge advantage but it can also make projects unmaintainable, if not. Therefore, being able of measuring TD is a very important aspect for a proper management of the development process. However, due to the complexity of the concept and the different aspects that are involved, such measurement it not easy and there are several different approaches in literature. Goals: This work aims at investigating the existing approaches to the measurement and the analysis of TD focusing on quantitative methods that could also be automated. Method: The Systematic Literature Review (SLR) approach was applied to 331 studies obtained from the three largest digital libraries and databases. Results: After applying all filtering stages, 21 papers out of 331 were selected and deeply analyzed. The majority of them suggested new approaches to measure TD using different criteria not built on top of existing ones. Conclusions: Existing studies related to the measurement of TD were observed and analyzed. The findings have shown that the field is not mature and there are several models that have almost no independent validation. Moreover few tools for helping to automate the evaluation process exist. Copyright © 2019 by SCITEPRESS  Science and Technology Publications, Lda. All rights reserved.",10.5220/0007675900950106,"Innopolis University, Russian Federation",Rejected
474,CIbSE 2017 - XX Ibero-American Conference on Software Engineering,"Haendler, T. and Frysak, J.",ICSOFT 2018 - Proceedings of the 13th International Conference on Software Technologies,2019,"Refactoring is the process of improving a software system's internal technical quality by modifying and restructuring a system's source code without changing its external behavior. Manual identification and assessment of refactoring candidates as well as planning and performing the refactoring steps are complex and tedious tasks, for which several tools and techniques for automation and decision support have been proposed in recent years. Despite these advances, refactoring is still a neglected part of software engineering in practice, which is attributed to several barriers that prevent software practitioners from refactoring. In this paper, we present an approach for deconstructing the refactoring process into decision-problems and corresponding decision-making sub-processes. Within this, we pursue the question of whether and how a theoretical perspective can contribute to better understand the difficulties in the refactoring process (barriers) and to help improving the refactoring support techniques (enablers). For this purpose, we follow a deductive reasoning approach by applying concepts from decision-making research to deconstruct the refactoring process. As a result, we present a process model, which integrates primary decision problems and corresponding decision-making sub-processes in refactoring. Based on this process model, software companies can gain a better understanding of decision-making in the refactoring process. We finally discuss the applied procedure and reflect on limitations and potential of applying such a theoretical perspective. Copyright © 2018 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved",10.5220/0006915903630372,"Institute for Information Systems and New Media, WU, Vienna, Austria; Institute of Business Informatics - Communications Engineering, JKU, Linz, Austria",Rejected
475,Toward technical debt aware software modeling,"Haendler, T.",ICSOFT 2018 - Proceedings of the 13th International Conference on Software Technologies,2019,"Deficiencies in software design or architecture can severely impede and slow down the software development and maintenance progress. Bad smells and anti-patterns can be an indicator for poor software design and suggest for refactoring the affected source code fragment. In recent years, multiple techniques and tools have been proposed to assist software engineers in identifying smells and guiding them through corresponding refactoring steps. However, these detection tools only cover a modest amount of smells so far and also tend to produce false positives which represent conscious constructs with symptoms similar or identical to actual bad smells (e.g., design patterns). These and other issues in the detection process demand for a code or design review in order to identify (missed) design smells and/or re-assess detected smell candidates. UML diagrams are the quasi-standard for documenting software design and are often available in software projects. In this position paper, we investigate whether (and to which extend) UML diagrams can be used for identifying and assessing design smells. Based on a description of difficulties in the smell detection process, we discuss the importance of design reviews. We then investigate to which extend design documentation in terms of UML2 diagrams allows for representing and identifying software design smells. In particular, 14 kinds of design smells and their representability in UML class and sequence diagrams are analyzed. In addition, we discuss further challenges for UML-based identification and assessment of bad smells. Copyright © 2018 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved",10.5220/0006938504130421,"Institute for Information Systems and New Media, Vienna University of Economics and Business, Vienna, Austria",Accepted
476,An intelligent decision support system for assessing the default risk in small and medium-sized enterprises,"Biffl, S. and Kathrein, L. and Lüder, A. and Meixner, K. and Sabou, M. and Waltersdorfer, L. and Winkler, D.","Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",2019,"In the multi-disciplinary production systems engineering (PSE) process, software engineers depend on requirements and design rationales coming from product and production process planning, summarized as product/ion knowledge. Unfortunately, the engineering artifacts coming from product/ion planning often represent important product/ion knowledge incompletely and not well integrated, leading to risks regarding software engineering quality. In this paper, we report on a case study at a large industrial PSE organization, investigating Technical Debt (TD) effects, items, and causes in PSE process documentation and configuration management according to the VDI guideline 3695 Part 2. We focus on requirements for and issues in the representation of product/ion knowledge in the engineering data provided to software engineers. Based on data elicited from PSE domain experts, we model TD concepts based on the Quality Function Deployment method as foundation for TD analysis and risk management. The initial validation with domain experts revealed how software engineers could benefit from improved product/ion knowledge modeling as foundation for better understanding the rationale of engineering design decisions. © 2019 Knowledge Systems Institute Graduate School. All rights reserved.",10.18293/SEKE2019-037,"Inst. for Information Systems Eng., Faculty of Informatics, TU Wien, Vienna, Austria; Inst. of Ergonomics Manufacturing Sys. and Automation, OvG U. Magdeburg, Germany; Christian Doppler Lab SQI (sqi.at), TU Wien, Vienna, Austria",Accepted
477,"11th European Conference on Software Architecture, ECSA 2017","Flisar, J. and Podgorelec, V.",IEEE Access,2019,"Self-admitted technical debt (SATD) is annotated in source code comments by developers and has been recognized as a great source of discovering flawed software. To reduce manual effort, some recent studies have focused on automated detection of SATD using text classification methods. To train their classifier, these methods need labeled samples, which also require a lot of effort to obtain. We developed a new SATD identification method, which takes advantage of a large corpus of unlabeled code comments, extracted from open source projects, to train a word embedding model. After applying feature selection, the pre-trained word embedding is used for discovering semantically similar features in source code comments to enhance the original feature set. By using such enhanced feature set for classification, our goal was to improve the identification of SATD when compared to existing methods. The proposed feature enhancement method was used with the three most common feature selection methods (CHI, IG, and MI), and three well-known text classification algorithms (NB, SVM, and ME) and was tested on ten open source projects. The experimental results show a significant improvement in SATD identification over the compared methods. With an achieved 82% of correct predictions of SATD, the proposed method seems to be a good candidate to be adopted in practice. © 2013 IEEE.",10.1109/ACCESS.2019.2933318,"Faculty of Electrical Engineering and Computer Science, University of Maribor, Maribor, SI-2000, Slovenia",Accepted
478,SonarQube as a tool to identify software metrics and technical debt in the source code through static analysis,"Beulen, E.",Lecture Notes in Business Information Processing,2019,"Digital transformations facilitate the need for speed. Continuous deployment is becoming the norm. Organizations need to change their service delivery and are increasingly adopting agile software development and DevOps. This requires different capabilities in IT delivery as well as in the business. A lot of organizations struggle in identifying, retaining and recruiting accountable executives, product owners and scrum masters. Organizations operating in dynamic markets have started earlier with the implementation of agile and DevOps and the delivery percentage of agile and DevOps is higher than for organizations operating in less dynamic markets. Furthermore, the market is anticipating on a decrease of the onshore percentage in delivering agile and DevOps in 2020. The market is also anticipating on an increase of output based contracting for agile and DevOps in 2020. In the current contracts, there are hardly clauses protecting organization for poor service provisioning. Technical debt is predominantly not a service provider risk. Also, most service providers are fully compensated for contracted but cancelled sprints and releases. Both technical debt and cancelled sprints and releases impact the cost efficiency of agile and DevOps significantly. Finally, organizations struggle with renegotiating their infrastructure contracts to facilitate the agile and DevOps delivery. This all requires attention of Chief Information Officers and procurement departures. They must anticipate on delivery and contracting issues and promote and orchestrate agile and DevOps. © Springer Nature Switzerland AG 2019.",10.1007/978-3-030-15850-7_7,"TIAS School for Business and Society, Warandelaan 2, PO Box 90153, Tilburg, 5000 LE, Netherlands",Rejected
479,Smart city governance in the geo-resources planning paradigm in the metropolitan city of Cagliari (Italy),"Yang, Y. and Michel, R. and Wade, J. and Verma, D. and Törngren, M. and Alelyani, T.",Procedia Computer Science,2019,"Most existing studies addressing COTS obsolescence issues in Cyber-Physical Systems (CPSs) have strong emphasis on the sustainment phases. We have identified a gap on methods, processes, and tools for effective COTS risk analysis in the early systems acquisition phases. To fill the gap, this study proposes a taxonomy of COTS-related technical debt in order to support early identification, communication, and assessment of obsolescence risks in CPS system engineering life cycles. The taxonomy contributes to the identification of seven key types of COTS technical debt according to systematic signs discoverable during early COTS activities, which may contribute to obsolescence in later phases. These seven types of COTS technical debt include COTS functionality mismatch, performance mismatch, interoperability difficulty, versioning frequency, documentation and support readiness, and limitation on system evolution. It is expected that such notions will help to increase the efficiency of COTS-based CPS development, readiness, and sustainment, through more informed COTS decision-making to avoid expensive and unaffordable obsolescence issues in the envisioned systems sustainment phases. © 2019 The Author(s).",10.1016/j.procs.2019.05.061,"School of Systems and Enterprises, Stevens Institute of Technology, 1 Castle Point, Hoboken, NJ  07030, United States; U.S. Army Futures Command, RDECOM CERDEC, Aberdeen Proving Ground, MD, United States; Mechatronics/Machine Design, KTH Royal Institute of Technology, Brinellv. 83, Stockholm, 10044, Sweden",Accepted
480,"36th International Conference on Conceptual Modeling, ER 2017 held in Conjuction with the 3rd International Workshop on Modeling for Ambient Assistance and Healthy Ageing, AHA 2017, 6th International Workshop on Modeling and Management of Big Data, MoBiD 2017, 4th International Workshop on Conceptual Modeling in Requirements and Business Analysis, MREBA 2017, 5th International Workshop on Ontologies and Conceptual Modeling, OntoCom 2017 and 4th Workshop on Quality of Models and Models of Quality, QMMQ 2017","Mamun, M.A.A. and Martini, A. and Staron, M. and Berger, C. and Hansson, J.",CEUR Workshop Proceedings,2019,"Context: Technical debt is known to impact maintainability of software. As source code files grow in size, maintainability becomes more challenging. Therefore, it is expected that the density of technical debt in larger files would be reduced for the sake of maintainability. Objective: This exploratory study investigates whether a newly introduced metric technical debt density trend helps to better understand and explain the evolution of technical debt. The technical debt density trend metric is the slope of the line of two successive technical debt density measures corresponding to the lines of code values of two consecutive revisions of a source code file. Method: This study has used 11,822 commits or revisions of 4,013 Java source files from 21 open source projects. For the technical debt measure, SonarQube tool is used with 138 code smells. Results: This study finds that technical debt density trend metric has interesting characteristics that make it particularly attractive to understand the pattern of accrual and repayment of technical debt by breaking down a technical debt measure into multiple components, e.g., technical debt density can be broken down into two components showing mean density corresponding to revisions that accrue technical debt and mean density corresponding to revisions that repay technical debt. The use of technical debt density trend metric helps us understand the evolution of technical debt with greater insights. Copyright © 2019 for this paper by its authors.",,"Department of Computer Science and Engineering, Chalmers, University of Gothenburg, Gothenburg, Sweden; Department of Informatics, University of Oslo, Norway; School of Informatics, University of Skövde, Sweden",Accepted
481,A debt-aware learning approach for resource adaptations in cloud elasticity management,"Wang, X. and Djehiche, B. and Hu, X.",Journal of Network Theory in Finance,2019,"In this paper, we investigate a credit rating problem based on the network of trading information (NoTI). First, several popular tools, such as assortativity analysis, community detection and centrality measurement, are introduced for analyzing the topology structures and properties of the NoTI. Then, the correlation between the characteristics of the network and the credit ratings is investigated to illustrate the feasibility of credit risk analysis based on the NoTI. Sovereign rating based on the world trade network is analyzed as a case study. The correlation between the centrality metrics and the sovereign ratings conducted by Standard & Poors clearly shows that highly ranked economies with vigorous economic trading links usually have higher credit ratings. Finally, a simulation is conducted to illustrate the degree of improvement in credit rating prediction accuracy if the NoTI is considered as an additional attribute. © 2019 Infopro Digital Risk (IP) Limited.",10.21314/JNTF.2019.050,"Department of Mathematics, KTH Royal Institute of Technology, Stockholm, SE-100 44, Sweden",Rejected
482,DV8: Automated architecture analysis tool suites,"Abdullayeva, F. and Imamverdiyev, Y.","Statistics, Optimization and Information Computing",2019,"Identification of the quick declines of the desirable production fluids and rapid increases of the undesirable fluids are the production problems of oil wells. The main purpose of this work is to develop a method that can forecast oil production with high accuracy, using Deep neural networks based on the debt data of wells. In this paper, a hybrid modelbased on a combination of the CNN (Convolutional Neural Network) and LSTM (Long Short-Term Memory) networks,called CNN-LSTM is proposed for the forecasting of oil production time series. The architecture of the proposed CNNLST Mmodel is hierarchical. Here, at first the CNN layer of the model is applied to the current time window, then there lationship between the time windows is predicted by applying the LSTM. The challenges of time series prediction often come from the continuity duration of every state. In order to overcome this problem, we try to predict temporal dependency inthe certain time window. This issue is solved by the application of the CNN algorithm. Evaluation efficiency of the proposed model is performed on the QRI dataset. The prediction accuracy of the method is tested by RMSLE loss function and the best results are obtained using our proposed in the testing process. © 2019 International Academic Press.",10.19139/soic-2310-5070-651,"Institute of Information Technology, Azerbaijan National Academy of Sciences, Baku, Azerbaijan",Rejected
483,Detecting technical debt through issue trackers,"Yeong, Y.C. and Hacks, S. and Lichter, H.",CEUR Workshop Proceedings,2019,"Implementing an enterprise architecture (EA) project might not always be a success due to uncertainty and unavailability of resources. Hitherto, we have proposed a new metaphor -Enterprise Architecture Debt (EAD)-, which makes bad habits within EAs explicit. We anticipate that the accumulation of EAD will negatively influence EA quality, also expose the business into risk. Recognizing the importance of business-IT alignment in enterprise architecture context, this paper proposes an application of portfolio-based thinking and utility theory for EAD prioritization. For proof-of-concept purpose, we develop synthetic data using coarse-grained estimates to demonstrate the application of the proposed portfolio-based approach which helps to determine the optimum selection of EAD to be resolved. The results show that our approach can help EA practitioners and management to reason their EA investment decisions based on the EAD concept, with adjustable enterprises risk tolerance level. Copyright © 2019 for this paper by its authors.",,"Universiti Teknologi Petronas, Perak Darul Ridzuan, Malaysia; Division of Network and Systems Engineering, KTH Royal Institute of Technology, Stockholm, Sweden; Research Group Software Construction, RWTH Aachen University, Aachen, Germany",Rejected
484,Lessons learned from the ProDebt research project on planning technical debt strategically,"Baars, S.",CEUR Workshop Proceedings,2019,"Duplication in source code is often seen as one of the most harmful types of technical debt as it increases the size of the codebase and creates implicit dependencies between fragments of code. Detecting such problems can provide valuable insight into the quality of systems and help to improve the source code. To correctly identify cloned code, contextual information should be considered, such as the type of variables and called methods. Comparing code fragments including their contextual information introduces an optimization problem, as this information may be hard to retrieve. It can be ambiguous where contextual information resides and tracking it down may require to follow cross-file references. For large codebases, it could become time-consuming due to the sheer number of referenced symbols. We propose a method to efficiently detect clones taking into account contextual information. We introduce a tool that uses an AST-parsing library named JavaParser to detect clones and retrieve contextual information. Our method parses the Abstract Syntax Tree retrieved from JavaParser into a graph structure, which is used to find clones. This graph maps the following relations for each statement in the codebase: the next statement, the previous statement, and the previous cloned statement. We find that, when taking into account contextual information in our clone detection, 11% fewer clones are found. Manually inspecting a sample of the difference, we find that they are less relevant for refactoring. Copyright © by the paper's authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"University of Amsterdam, Amsterdam, Netherlands",Rejected
485,Evolution of Software Product Development in Startup Companies,"Parameshwari, V. and Sathishkumar, V.S. and Premkumar, P. and Srinevasan, M.",Journal of Advanced Research in Dynamical and Control Systems,2019,"Agriculture is the backbone of all the developing countries. The economy of a developing country mainly depends on agriculture and farms in rural areas and applying traditional approaches is not sufficient in todays scenario. Now a day, water scarcity is one of the main challenges faced by the farmers. Another major challenge featured by Indian agriculture sector is that the increase in rate of farmers suicide due to debt. Monitoring environmental conditions is the major factor to reduce the cost of farming and improve yield of the efficient crops. Focusing on encouraging innovative challenges in agriculture, smart farming is the solution for the problems that the industry is currently facing. Use of modern technologies like Internet of Things (IoT) gives a new dimension in the area of smart farming in agriculture domain with low cost and scalable solutions. Smart irrigation system not only overcomes this problem but also provide clean source of energy. The IoT technology has realized the smart wearable's, connected devices, automated machines, and driverless cars that contain electronics, software, sensors and connectivity which allows these things to connect, interact and exchange data. However, in agriculture, the IoT has brought the best impact. This paper includes development of a smart irrigation system which can monitor temperature, humidity, moisture in agricultural field through sensors using PIC Microcontroller and in case of any discrepancy send a SMS notification as well as a notification on the application developed for the same to the farmers smart phone using Wi-Fi/3G/4G. The proposed system gets Live Data feeds, various devices like Smart Phones, Tablets are used. The data generated via sensors can be easily shared and viewed by agriculture field owner (farmer) anywhere remotely via Cloud Computing technology integration. The farmers can see the field data (moisture, temperature, humidity) using Thingspeak website through their unique login id and password from database with cloud computing. Unauthorized person cant view or access that field data without getting permission from the owners. © 2019, Institute of Advanced Scientific Research, Inc.. All rights reserved.",,"Department of Electronics and Communication Engineering, Nandha Engineering College (Autonomous), Erode, Tamilnadu, India",Rejected
486,Social Debt Analytics for Improving the Management of Software Evolution Tasks,"Ramasubbu, N. and Kemerer, C.F.",IEEE Transactions on Software Engineering,2019,"Despite the increasing awareness of the importance of managing technical debt in software product development, systematic processes for implementing technical debt management in software production have not been readily available. In this paper we report on the development and field tests of a normative process framework that systematically incorporates steps for managing technical debt in commercial software production. The framework integrates processes required for technical debt management with existing software quality management processes prescribed by the project management body of knowledge (PMBOK), and it contributes to the further development of software-specific extensions to the PMBOK. We partnered with three commercial software product development organizations to implement the framework in real-world software production settings. All three organizations, irrespective of their varying software process maturity levels, were able to adopt the proposed framework and integrate the prescribed technical debt management processes with their existing software quality management processes. Our longitudinal observations and case-study interviews indicate that the organizations were able to accrue economic benefits from the adoption and use of the integrated framework. © 1976-2012 IEEE.",10.1109/TSE.2017.2774832,"University of Pittsburgh, PA, Pittsburgh, PA  15260, United States",Accepted
487,"Comparing technical debt in student exercises using test driven development, test last and ad hoc programming","Kurashige, K. and Tsuruta, S. and Sakurai, E. and Sakurai, Y. and Knauf, R. and Damiani, E. and Kutics, A.","Proceedings - 2018 IEEE International Conference on Systems, Man, and Cybernetics, SMC 2018",2019,"A lot of IT personnel have psychological distress and counselors to help them are lack in number. Therefore, we proposed a counseling agent (CA) called CRECA (context respectful counseling agent), which listens to clients and promotes their reflection context respectfully namely in a context preserving way. This agent is now enhanced using a body language called 'unazuki' in Japanese, a kind of nodding to greatly promote dialogue, often accompanying 'un-un' (meaning 'exactly') of Japanese onomatopoeia. This body language significantly helps represent empathy or entire approval. Our agent is enhanced with such dialog promotion nodding robot to continue the conversation naturally or context respectfully towards clients' further reflection. To realize it, the robot nods twice at each end of dialog sentence input by clients. Here, we introduce a robot that behaves human-like by an appropriate nodding behavior. The motivation for such a more human-like robot was the extension of application fields from IT workers' counselling to people, who suffer from more social problems such as financial debt, or anxiety of victory or defeat. For such applications, it is important that the agent behaves as much as possible human-like. Here, we present an enhanced experimental evaluation. The quantitative evaluation is based on the utterance amounts of a test group of individuals. These amount with and without the nodding feature are compared. Additionally, the robots with and without nodding are compared. © 2018 IEEE.",10.1109/SMC.2018.00297,"Dept. of Information and Electronic Engineering, Muroran Institute of Technology, Muroran, Japan; School of Information Environment, Tokyo Denki University, Inzai, Japan; Faculty of Service Management, Bunri University of Hospitality, Sayama, Japan; School of Interdisciplinary Mathematical Sciences, Meiji University, Nakano, Japan; Dept. of Computer Science and Automation, Technische Universität Ilmenau, Ilmenau, Germany; Dept. of Computer Science, Universita' degli Studi di Milano, Milan, Italy",Rejected
488,Towards a flexible cloud architectural decision framework for diverse application architectures,"Sierra, G. and Tahmid, A. and Shihab, E. and Tsantalis, N.","SANER 2019 - Proceedings of the 2019 IEEE 26th International Conference on Software Analysis, Evolution, and Reengineering",2019,"Large software systems tend to be highly complex and often contain unaddressed issues that evolve from bad design practices or architectural implementations that drift from definition. These design flaws can originate from quick fixes, hacks or shortcuts to a solution, hence they can be seen as Technical Debt. Recently, new work has focused on studying source code comments that indicate Technical Debt, i.e., Self-Admitted Technical Debt (SATD). However, it is not known if addressing information left by developers in the form source code comments can give insight about the design flaws in a system and have the potential to provide fixes for bad architectural implementations. This paper investigates the possibility of using SATD comments to resolve architectural divergences. We leverage a data set of previously classified SATD comments to trace them to the architectural divergences of a large open source system, namely ArgoUML. We extract its conceptual and concrete architectures based on available design documentation and source code, and contrast both to expose divergences, trace them to SATD comments, and investigate their resolution. We found 7 high-level divergences in ArgoUML and 22 others among its subsystems, observing that merely 4 out of 29 (14%) divergences can be directly traced to SATD. Although using SATD as an indicator of architectural divergences is viable, the effort of doing so is time-intensive, and in general, will not lend to a significant reduction of architectural flaws in a software system. © 2019 IEEE.",10.1109/SANER.2019.8667999,"Department of Computer Science and Software Engineering, Canada; Data-driven Analysis of Software (DAS) Lab, Concordia University, Montreal, Canada",Accepted
489,Identification and analysis of the elements required to manage technical debt by means of a systematic mapping study,"Wattanakriengkrai, S. and Maipradit, R. and Hata, H. and Choetkiertikul, M. and Sunetnanta, T. and Matsumoto, K.","Proceedings - 2018 9th International Workshop on Empirical Software Engineering in Practice, IWESEP 2018",2019,"In software projects, technical debt takes place when a developer adopting a trivial solution containing quick and easy shortcuts to implement over a suitable solution that can take a longer time to solve a problem. This can cause major additional costs leading to negative impacts for software maintenance since those shortcuts might need to be reworked in the future. Detecting technical debt early can help a team cope with those risks. In this paper, we focus on Self-Admitted Technical Debt (SATD) that is a debt intentionally produced by developers. We propose an automated model to identify two most common types of self-admitted technical debt, requirement and design debt, from source code comments. We combine N-gram IDF and auto-sklearn machine learning to build the model. With the empirical evaluation on ten projects, our approach outperform the baseline method by improving the performance over 20% when identifying requirement self-admitted technical debt and achieving an average F1-score of 64% when identifying design self-admitted technical debt. © 2018 IEEE.",10.1109/IWESEP.2018.00010,"Mahidol University, Thailand; Nara Institute of Science and Technology, Japan",Accepted
490,Developing an Adaptive Fuzzy Controller for Risk Management of Company Cash Flow,"Kong, H. and Lin, S. and Wu, J. and Shi, H.","Proceedings of 2019 IEEE 3rd Information Technology, Networking, Electronic and Automation Control Conference, ITNEC 2019",2019,"Tricking account overdraft fee refers to the behavior of the users who utilize the overdraft limit to purchase goods but no longer recharge the account. In order to solve the problem that some mobile communication users have a tricking account overdraft fee behavior which lead to bad debts of telecom operators, a risk prediction model based on the combination of Logistic and GBDT is proposed. The fusion model uses Logistic Regression transformation to map the function value to the interval from 0 to 1, and the mapped value was used as the risk probability value for prediction; GBDT is used to discover features with multiple degrees of differentiation and combine effective features to enhance the feature dimension. The combination features were extracted from the original data, which made up for Logistic Regression's poor capture of feature combinations and improved the predictive ability of this model. The experiment based on real mobile communication user data of an operator shows that the proposed fusion model has a good prediction effect. © 2019 IEEE.",10.1109/ITNEC.2019.8729173,"Faculty of Information Technology, Beijing University of Technology, Beijing, China; Beijing Institute of Smart City, Beijing University of Technology, Beijing, China; Beijing Advanced Innovation Center for Future Internet Technology, Beijing University of Technology, Beijing, China",Rejected
491,European Exchange Trading Funds Trading with Locally Weighted Support Vector Regression,"Lenarduzzi, V. and Saarimaki, N. and Taibi, D.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Background. Companies commonly invest majorBackground. Companies commonly invest major effort into removing, respectively not introducing, technical debt issues detected by static analysis tools such as SonarQube, Cast, or Coverity. These tools classify technical debt issues into categories according to severity, and developers commonly pay attention to not introducing issues with a high level of severity that could generate bugs or make software maintenance more difficult. Objective. In this work, we aim to understand the diffuseness of Technical Debt (TD) issues and the speed with which developers remove them from the code if they introduced such an issue. The goal is to understand which type of TD is more diffused and how much attention is paid by the developers, as well as to investigate whether TD issues with a higher level of severity are resolved faster than those with a lower level of severity. We conducted a case study across 78K commits of 33 Java projects from the Apache Software Foundation Ecosystem to investigate the distribution of 1.4M TD items. Results. TD items introduced into the code are mostly related to code smells (issues that can increase the maintenance effort). Moreover, developers commonly remove the most severe issues faster than less severe ones. However, the time needed to resolve issues increases when the level of severity increases (minor issues are removed faster that blocker ones). Conclusion. One possible answer to the unexpected issue of resolution time might be that severity is not correctly defined by the tools. Another possible answer is that the rules at an intermediate severity level could be the ones that technically require more time to be removed. The classification of TD items, including their severity and type, require thorough investigation from a research point of view.effort into removing, respectively not introducing, technical debtissues detected by static analysis tools such as SonarQube, Cast, or Coverity. These tools classify technical debt issues intocategories according to severity, and developers commonly payattention to not introducing issues with a high level of severitythat could generate bugs or make software maintenance moredifficult. Objective. In this work, we aim to understand the diffuseness ofTechnical Debt (TD) issues and the speed with which developersremove them from the code if they introduced such an issue. The goal is to understand which type of TD is more diffusedand how much attention is paid by the developers, as well asto investigate whether TD issues with a higher level of severityare resolved faster than those with a lower level of severity. Weconducted a case study across 78K commits of 33 Java projectsfrom the Apache Software Foundation Ecosystem to investigatethe distribution of 1.4M TD items. Results. TD items introduced into the code are mostly relatedto code smells (issues that can increase the maintenance effort). Moreover, developers commonly remove the most severe issuesfaster than less severe ones. However, the time needed to resolveissues increases when the level of severity increases (minor issuesare removed faster that blocker ones). Conclusion. One possible answer to the unexpected issue ofresolution time might be that severity is not correctly definedby the tools. Another possible answer is that the rules at anintermediate severity level could be the ones that technicallyrequire more time to be removed. The classification of TD items, including their severity and type, require thorough investigationfrom a research point of view. © 2019 IEEE.",10.1109/TechDebt.2019.00028,"Tampere University, Tampere, Finland",Accepted
492,CodeCritics applied to database schema: Challenges and first results,"Arvanitou, E.-M. and Ampatzoglou, A. and Bibi, S. and Chatzigeorgiou, A. and Stamelos, I.",ACM International Conference Proceeding Series,2019,"Context: Technical Debt (TD) quantification has been studied in the literature and is supported by various tools; however, there is no common ground on what information shall be presented to stakeholders. Similarly to other quality monitoring processes, it is desirable to provide several views of quality through a dashboard, in which metrics concerning the phenomenon of interest are displayed. Objective: The aim of this study is to investigate the indicators that shall be presented in such a dashboard, so as to: (a) be meaningful for industrial stakeholders, (b) present all necessary information, and (c) be simple enough so that stakeholders can use them. Method: We explore TD Management (TDM) activities (i.e., measurement, prioritization, repayment) and choose the main concepts that need to be visualized, based on existing literature and tool-support. Next, we perform a survey with 60 software engineers (i.e., architects, developers, etc.) working for 11 software development companies located in 9 countries, to understand their needs for TDM. Results/Conclusions: The results of the study suggest that different stakeholders need a different view of the quality dashboard, but also some commonalities can be identified. For example, on the one hand, managers are mostly interested in financial concepts, whereas on the other hand developers are more interested in the nature of the problems that exist in the code. The outcomes of this study can be useful to both researchers and practitioners, in the sense that the former can focus their efforts on aspects that are meaningful to industry, whereas the latter to develop meaningful dashboards, with multiple views. © 2019 Association for Computing Machinery.",10.1145/3319008.3319019,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Computer Science Department, Aristotle University of Thessaloniki, Greece; Department of Informatics and Telecommunications, University of Western Macedonia, Kozani, Greece",Accepted
493,Assessing code smell interest probability: A case study,"Perez, B. and Correal, D. and Astudillo, H.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Architectural Technical Debt (ATD) is a metaphor used to describe consciously decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, difficulties arise when repayment strategies are defined because software architects need to be aware of the consequences of these strategies over others decisions in the software architecture. This article proposes REBEL, a semi-automated model-driven approach that exploits natural language processing, machine learning and model checking techniques on heterogeneous project artifacts to build a model that allows to locate and visualize the impact produced by the consciously injected ATD and its repayment strategy on the other architectural decisions. The technique is illustrated with a data analytics project in Colombia where software architects are unaware of the consequences of the repayment strategies. This proposal seeks to support teams of architects to make explicit the current and future impact of the ATD injected as a result of decisions taken, focusing on the architectural level rather than code level. © 2019 IEEE.",10.1109/TechDebt.2019.00025,"Systems Engineering Department, Universidad de Los Andes, Bogota, Colombia; Informatics Department, Univ. Tecnica Federico Santa Maria, Valparaiso, Chile",Accepted
494,The magnificent seven: Towards a systematic estimation of technical debt interest,"Azadi, U. and Fontana, F.A. and Taibi, D.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Architectural smells can negatively impact on different software qualities and can represent a relevant source of architectural debt. Several architectural smells have been defined by different researchers. Moreover, both academia and industry proposed several tools for software quality analysis, but it is not always clear to understand which tools provide also support for architectural smells detection and if the tools developed for this specific purpose are effectively available or not. In this paper we propose a catalogue of architectural smells for which, at least one tool able to detect the smell exists. We outline the main differences in the detection techniques exploited by the tools and we propose a classification of these architectural smells according to the violation of three design principles. © 2019 IEEE.",10.1109/TechDebt.2019.00027,"Università degli Studi di Milano, Milan, Italy; Tampere University, Bicocca, Italy",Accepted
495,Ninth international workshop on managing technical debt report on the MTD 2017 workshop,"Di Biase, M. and Rastogi, A. and Bruntink, M. and Van Deursen, A.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Existing maintainability models are used to identify technical debt of software systems. Targeting entire codebases, such models lack the ability to determine shortcomings of smaller, fine-grained changes. This paper proposes a new maintainability model-the Delta Maintainability Model (DMM)-to measure fine-grained code changes, such as commits, by adapting and extending the SIG Maintainability Model. DMM categorizes changed lines of code into low and high risk, and then uses the proportion of low risk change to calculate a delta score. The goal of the DMM is twofold: first, producing meaningful and actionable scores; second, compare and rank the maintainability of fine-grained modifications. We report on an initial study of the model, with the goal of understanding if the adapted measurements from the SIG Maintainability Model suit the fine-grained scope of the DMM. In a manual inspection process for 100 commits, 67 cases matched the expert judgment. Furthermore, we report an exploratory empirical study on a data set of DMM scores on 3,017 issue-fixing commits of four open source and four closed source systems. Results show that the scores of DMM can be used to compare and rank commits, providing developers with a means to do root cause analysis on activities that impacted maintainability and, thus, address technical debt at a finer granularity. © 2019 IEEE.",10.1109/TechDebt.2019.00030,"Software Improvement Group, Amsterdam, Netherlands; Delft University of Technology, Delft, Netherlands",Accepted
496,Who is producing more technical debt? A personalized assessment of TD principal,"Guerlesquin, V.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"All software systems, from new developments to legacy systems, suffer from test automation backlogs, i.e., manual tests that stagnate the rate of development and innovation. I argue that such backlogs are really technical debt. I expose here six behavior that may ruin your goal to remove test automation technical debt. © 2019 IEEE.",10.1109/TechDebt.2019.00008,"DevOps Squad National Bank of Canada, Montreal, Canada",Rejected
497,Towards triaging code-smell candidates via runtime scenarios and method-call dependencies,"Kontsevoi, B. and Soroka, E. and Terekhov, S.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"The paper covers the company's proprietary approach to the assessment of software product quality and measurement of technical debt. In the paper, the authors state that the software product quality is the amount of various technical debts embedded into the product and delivered to end-users. Similar to the fact that any debt can be paid, the software product quality can be efficiently managed and measured by a set of techniques, parameters, and dimensions. The authors share the details of the company proprietary approach to technical debt management done with the help of the Technical DebT Reduction plAtform, TETRA. They share the measurement parameters, tools and major dimension for the assessment. © 2019 IEEE.",10.1109/TechDebt.2019.00021,"Intetics Inc, Naples, FL, United States; Intetics Inc, Minsk, Belarus",Accepted
498,An Exploratory Study on the Relationship between Changes and Refactoring,,"Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,The proceedings contain 23 papers. The topics discussed include: architectural smells detected by tools: a catalogue proposal; teamscale: tackle technical; supporting analysis of technical debt causes and effects with cross-company probabilistic cause-effect diagrams; temporal discounting in technical debt: how do software practitioners discount the future?; TDMentions: a dataset of technical debt mentions in online posts; balancing resources and load: eleven nontechnical phenomena that contribute to formation or persistence of technical debt; CodeArena: inspecting and improving code quality metrics using minecraft; and how deep is the mud: fathoming architecture technical debt using designite.,,,Rejected
499,A method for assessing class change proneness,"Haas, R. and Niedermayr, R. and Juergens, E.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Teamscale is a software intelligence platform, that is, it creates transparency on code quality and the underlying software development process. This makes it possible for developers, testers and managers to better understand and control technical debt of their systems. In this paper, we give an overview of Teamscale and how this tool can be used in practice to control and lower technical debt in the long run. We explain which code analyses can be used to identify and address technical debt. Teamscale is available for free for research and teaching purposes at www.teamscale.io. © 2019 IEEE.",10.1109/TechDebt.2019.00016,"CQSE GmbH, University of Stuttgart, Germany",Accepted
500,A game theoretic formulation of the technical debt management problem in cloud systems,"Baars, S. and Meester, S.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"To minimize technical debt and increase the maintainability of software, it is essential to make developers aware of what factors influence the maintainability of a codebase. To make the field of code quality and maintenance intuitive to developers, we propose CodeArena, which is an extension to the popular 3D sandbox game called Minecraft. CodeArena converts patterns in a codebase that are considered harmful to monsters in Minecraft, which can then be fought to improve the codebase. This way, the developer can gradually improve the quality of the code, while learning about code quality in an engaging way. © 2019 IEEE.",10.1109/TechDebt.2019.00023,"Master Software Engineering, University of Amsterdam, Puiflijk, Netherlands; Master Software Engineering, University of Amsterdam, Amsterdam, Netherlands",Accepted
501,An industry experience report on managing product quality requirements in a large organization,"Sharma, T.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"The quality of software architecture is an important concern for any software development team. Architecture smells represent quality issues at architecture granularity. Identifying and refactoring them periodically is a necessity to keep architecture quality high. We present Designite, a software design quality assessment tool, that identifies seven well-known architecture smells. Along with the identification, the tool provides supplementary information such as cause and responsible classes for each identified smell instance to help developers understand and refactor the smell. The tool is relevant and useful in both research and practice context. Software developers may use it to identify technical debt instances and to refactor them. On the other hand, software engineering researchers may use the tool to carry out large-scale empirical studies concerning code smells. © 2019 IEEE.",10.1109/TechDebt.2019.00018,"Dept of Management Science and Technology, Athens University of Economics and Business, Athens, Greece",Accepted
502,"Technical efficiency, unions and decentralized labor contracts","Ericsson, M. and Wingkvist, A.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"The term technical debt is easy to understand as a metaphor, but can quickly grow complex in practice. We contribute with a dataset, TDMentions, that enables researchers to study how developers and end users use the term technical debt in online posts and discussions. The dataset consists of posts from news aggregators and Q&A-sites, blog posts, and issues and commits on GitHub. © 2019 IEEE.",10.1109/TechDebt.2019.00031,"Linnaeus University, Computer Science and Media Technology, Vaxjo, Sweden",Accepted
503,Robust open-loop Nash equilibria in the noncooperative LQ game revisited,"Brenner, R.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Technical approaches to effective technical debt management-metrics, descriptors, transformation tools, and the like-are necessary but insufficient. We must also address drivers of technical debt that lie in the realm of psychology, politics, finance, and policy. The open question is: Will organizations exploit the impressive technology-based advancements in technical debt management to make engineers more effective? Or will they do something else with the cost savings those technologies generate? Psychology, politics, finance, and policy play critical roles in determining whether we gain control of technical debt. For example, if engineering groups become more adept at managing and preventing technical debt, while marketing and sales groups do not improve their own processes, the demands of marketing and sales groups for new products and capabilities might be associated with even shorter timelines than they now are. Schedule pressure usually results. Consequently, enterprise agility and engineering productivity might not benefit from the new technology-based technical debt management capabilities, even though the burden of technical debt might be reduced. Absent a significant change in the behavior of non-technologists, we can expect the effects of nontechnical causes of technical debt to persist, and possibly even to increase in significance. In this paper we explore eleven nontechnical phenomena that contribute to technical debt formation and persistence. We describe each one, and recommend lines of inquiry that can suggest (a) the significance of the phenomenon's effects on technical debt, from an organizational behavior perspective; (b) technologies that could aid in assessing that significance, and which could eventually aid in mitigating the phenomenon's deleterious effects; or (c) changes to phenomenon-related policy or accounting methods that could reduce the rate of formation or the persistence of technical debt. © 2019 IEEE.",10.1109/TechDebt.2019.00013,"Chaco Canyon Consulting, University HeightsOH, United States",Rejected
504,TFX: A TensorFlow-based production-scale machine learning platform,"Sierra, G. and Shihab, E. and Kamei, Y.",Journal of Systems and Software,2019,"Technical Debt is a metaphor used to express sub-optimal source code implementations that are introduced for short-term benefits that often need to be paid back later, at an increased cost. In recent years, various empirical studies have focused on investigating source code comments that indicate Technical Debt often referred to as Self-Admitted Technical Debt (SATD). Since the introduction of SATD as a concept, an increasing number of studies have examined various aspects pertaining to SATD. Therefore, in this paper we survey research work on SATD, analyzing the characteristics of current approaches and techniques for SATD detection, comprehension, and repayment. To motivate the submission of novel and improved work, we compile tools, resources, and data sets made available to replicate or extend current SATD research. To set the stage for future work, we identify open challenges in the study of SATD, areas that are missing investigation, and discuss potential future research avenues. © 2019 Elsevier Inc.",10.1016/j.jss.2019.02.056,"Data-Driven Analysis of Software (DAS) Lab, Department of Computer Science and Software Engineering, Concordia University, Canada; Principles of Software Languages Group (POSL), Kyushu University, Japan",Rejected
505,Impact of architectural technical debt on daily software development work - A survey of software practitioners,"Cano, J.-R. and Gutiérrez, P.A. and Krawczyk, B. and Wo?niak, M. and García, S.",Neurocomputing,2019,"Currently, knowledge discovery in databases is an essential first step when identifying valid, novel and useful patterns for decision making. There are many real-world scenarios, such as bankruptcy prediction, option pricing or medical diagnosis, where the classification models to be learned need to fulfill restrictions of monotonicity (i.e. the target class label should not decrease when input attributes values increase). For instance, it is rational to assume that a higher debt ratio of a company should never result in a lower level of bankruptcy risk. Consequently, there is a growing interest from the data mining research community concerning monotonic predictive models. This paper aims to present an overview of the literature in the field, analyzing existing techniques and proposing a taxonomy of the algorithms based on the type of model generated. For each method, we review the quality metrics considered in the evaluation and the different data sets and monotonic problems used in the analysis. In this way, this paper serves as an overview of monotonic classification research in specialized literature and can be used as a functional guide for the field. © 2019 Elsevier B.V.",10.1016/j.neucom.2019.02.024,"Department of Computer Science, University of Jaén, EPS of Linares, Avenida de la Universidad S/N, Linares, Jaén  23700, Spain; Department of Computer Science and Numerical Analysis, University of Córdoba, Córdoba, Spain; Department of Computer Science, Virginia Commonwealth University, Richmond, VA  23284, United States; Department of Computer Science, Wroc?aw University of Technology, Wyb. Wyspia?skiego 27, Wroc?aw, 50-370, Poland; Department of Computer Science and Artificial Intelligence, Un",Rejected
506,Understanding Technical Debt at the Code Level from the Perspective of Software Developers,"Wyrich, M. and Bogner, J.","Proceedings - 2019 IEEE/ACM 1st International Workshop on Bots in Software Engineering, BotSE 2019",2019,"Continuous refactoring is necessary to maintain source code quality and to cope with technical debt. Since manual refactoring is inefficient and error-prone, various solutions for automated refactoring have been proposed in the past. However, empirical studies have shown that these solutions are not widely accepted by software developers and most refactorings are still performed manually. For example, developers reported that refactoring tools should support functionality for reviewing changes. They also criticized that introducing such tools would require substantial effort for configuration and integration into the current development environment. In this paper, we present our work towards the Refactoring-Bot, an autonomous bot that integrates into the team like a human developer via the existing version control platform. The bot automatically performs refactorings to resolve code smells and presents the changes to a developer for asynchronous review via pull requests. This way, developers are not interrupted in their workflow and can review the changes at any time with familiar tools. Proposed refactorings can then be integrated into the code base via the push of a button. We elaborate on our vision, discuss design decisions, describe the current state of development, and give an outlook on planned development and research activities. © 2019 IEEE.",10.1109/BotSE.2019.00015,"University of Stuttgart, Stuttgart, Germany; University of Applied Sciences Reutlingen, Germany; University of Stuttgart, Germany",Accepted
507,An open tool for assisting in technical debt management,"Hirsch, T. and Schindler, C. and Muller, M. and Schranz, T. and Slany, W.","Proceedings - Companion of the 19th IEEE International Conference on Software Quality, Reliability and Security, QRS-C 2019",2019,"This paper intends to shed some light on how to approach challenges on automated test strategies and architecture that arise in big Android applications. The Android documentation and Google testing recommendations are overly simplistic and showcase only trivial and small examples, while the real challenges in testing big Android applications stay untouched. We discuss testing partitioning, classification of tests, and the application of the test pyramid on the Android platform. Besides a small exploratory study on the testing situation in a limited sample of open source Android applications, we show the consequences of a bad test strategy and technical debt in a big and long running Android project in the case of Catrobat. By Identifying anti patterns and smells, we establish general guidelines and patterns for testing big Android applications, as well as metrics for test code quality which have been applied and found useful in the Catrobat project. © 2019 IEEE.",10.1109/QRS-C.2019.00064,"Institute of Software Technology, Graz University of Technology, Graz, Austria",Rejected
508,A strategy based on multiple decision criteria to support technical debt management,"Qiu, W. and Li, S. and Cao, Y. and Li, H.","Proceedings - 2019 5th International Conference on Big Data and Information Analytics, BigDIA 2019",2019,"In the actual loan scenario, the proportion of 'good' and 'bad' samples is usually extremely imbalanced. Therefore, this paper constructs an ensemble model with a pre-judging mechanism for the imbalanced datasets of small enterprise. It can learn the structure of data set independently and adjust the structure spontaneously through the 'data shunt', which can improve the efficiency of model, simplify the complexity of model and optimize the indicators to achieve the goal of reducing bank operating costs and bad debt rates.(1) Supervised data splitter: In this paper, we select the density-based outlier test algorithm Local Outlier Factor (LOF) as the main algorithm of the shunt and the raw data will be reduced and clustered by Principal Component Analysis (PCA) and K-Means++ clustering algorithm, and the outlier test pipeline will be constructed for each cluster data. Finally, the samples identified as abnormal in each cluster will be sent to the 'strict channel' to simplify the whole model, speed up the calculation and improve the recall rate and other indicators, whereas the samples identified as normal will be sent to the 'loose channel' to speed up the approval of loans to normal customers.(2) Construction of the two-channel model: It has been verified that the 'strict channel' has the best performance when using the Bagging model as the main model based on eXtreme Gradient Boosting (XGBoost), and the 'loose channel' has the best performance when using the Gradient Boosting Decision Tree (GBDT) single model. In general, the empirical results show that the dual-channel credit evaluation model with shunt could achieve the effect of simplifying the whole model, speeding up the calculation, and optimizing the model indicators. In particular, it is possible to control the loan pass rate under different loan policies (loose or tighten) automatically by setting multiple sets of parameters for the 'shunt'. © 2019 IEEE.",10.1109/BigDIA.2019.8802679,"Henan Key Laboratory of Financial Engineering, Zhengzhou University, Zhengzhou, China",Rejected
509,A short-term projection for Japanese central government debt via WASD neuronet,"Cai, Y. and Xiao, L. and Kazman, R. and Mo, R. and Feng, Q.",IEEE Transactions on Software Engineering,2019,"In this paper, we propose an architecture model called Design Rule Space (DRSpace). We model the architecture of a software system as multiple overlapping DRSpaces, reflecting the fact that any complex software system must contain multiple aspects, features, patterns, etc. We show that this model provides new ways to analyze software quality. In particular, we introduce an Architecture Root detection algorithm that captures DRSpaces containing large numbers of a project's bug-prone files, which are called Architecture Roots (ArchRoots). After investigating ArchRoots calculated from 15 open source projects, the following observations become clear: from 35 to 91 percent of a project's most bug-prone files can be captured by just 5 ArchRoots, meaning that bug-prone files are likely to be architecturally connected. Furthermore, these ArchRoots tend to live in the system for significant periods of time, serving as the major source of bug-proneness and high maintainability costs. Moreover, each ArchRoot reveals multiple architectural flaws that propagate bugs among files and this will incur high maintenance costs over time. The implication of our study is that the quality, in terms of bug-proneness, of a large, complex software project cannot be fundamentally improved without first fixing its architectural flaws. © 1976-2012 IEEE.",10.1109/TSE.2018.2797899,"Department of Computer Science, Drexel University, Philadelphia, PA  19104, United States; Stevens Institute of Technology, Hoboken, NJ  07030, United States; Department of Information Technology Management, University of Hawaii, Honolulu, HI  96822, United States",Rejected
510,Correlations of software code metrics: An empirical study,"Arcelli Fontana, F. and Lenarduzzi, V. and Roveda, R. and Taibi, D.",Journal of Systems and Software,2019,"Background. Architectural smells and code smells are symptoms of bad code or design that can cause different quality problems, such as faults, technical debt, or difficulties with maintenance and evolution. Some studies show that code smells and architectural smells often appear together in the same file. The correlation between code smells and architectural smells, however, is not clear yet; some studies on a limited set of projects have claimed that architectural smells can be derived from code smells, while other studies claim the opposite. Objective. The goal of this work is to understand whether architectural smells are independent from code smells or can be derived from a code smell or from one category of them. Method. We conducted a case study analyzing the correlations among 19 code smells, six categories of code smells, and four architectural smells. Results. The results show that architectural smells are correlated with code smells only in a very low number of occurrences and therefore cannot be derived from code smells. Conclusion. Architectural smells are independent from code smells, and therefore deserve special attention by researchers, who should investigate their actual harmfulness, and practitioners, who should consider whether and when to remove them. © 2019 Elsevier Inc.",10.1016/j.jss.2019.04.066,"University of Milano-Bicocca, Milan, Italy; Tampere University, Tampere, Finland; Alten Italia, Milano, Italy",Accepted
511,Improving object-oriented design quality: A portfolio- and measurement-based approach,"Amu, C.U. and Nwezeaku, N.C. and Akujuobi, L.E. and Ozurunba, B.A. and Njie, S.N. and Wogu, I.A.P. and Misra, S.",International Journal of Electronic Government Research,2019,"While scholars like Wogu and Misra unanimously affirmed the beneficial roles of adopting AI powered ICT systems in various sectors of government and endeavours, most countries in OECD and the Commonwealth - for reasons described as a political reckless attitude - have shied away from fully adopting and implementing intelligent debt management systems for their countrys financial sectors, hence, the looming debt crisis hanging over them. Premised on the Public Choice theory, the study adopts Marilyns Ex-post facto research design and Creswells mix-method research approaches to interrogate the arguments proffered for and against the public debt management and the benefits of ICT, with a view to identifying the nexus that exists between the politics of debt management crisis and the role of ICT for 21st-century polities. The article identified a high degree of political rascality amongst political elites and a lackadaisical will towards the full implementation of intelligent debt management systems in the countries with looming debt crisis. Viable recommendations were proffered. Copyright © 2019, IGI Global.",10.4018/IJEGR.2019070105,"Federal University of Technology, Owerri, Nigeria; Department of Financial Management Technology, Federal University of Technology, Owerri, Nigeria; Southern University, A and M College, Baton Rouge, United States; Rhema University Nigera, Aba, Nigeria; Covenant University, Ota, Nigeria",Rejected
512,Recommending when design technical debt should be self-admitted,"Ocker, F. and Seitz, M. and Oligschlager, M. and Zou, M. and Vogel-Heuser, B.",IEEE International Conference on Industrial Informatics (INDIN),2019,"Engineers from the production systems domain have to cope with various challenges. These include interdisciplinarity, an ever increasing complexity, and time pressure. Due to these factors, engineers oftentimes choose suboptimal solutions, thus causing so-called Technical Debt (TD). No matter whether this TD is taken consciously or unconsciously, engineers need to become aware of their decisions' potential repercussions as early as possible. This paper presents a conceptual framework that helps engineers to identify conformance violations and inconsistencies based on formal knowledge bases. This increases awareness for potential TD. We hereby emphasize the importance of interdisciplinary inconsistencies, which are especially hard to keep track of. The framework also aims to assess the criticality of TD and thus supports decision making in the engineering of production systems. © 2019 IEEE.",10.1109/INDIN41052.2019.8972268,"Technical University of Munich, Institute of Automation and Information Systems, Munich, Germany; SMS Group GmbH, Düsseldorf, Germany",Accepted
513,An empirical study on the removal of Self-Admitted Technical Debt,"Biffl, S. and Ekaputra, F. and Luder, A. and Pauly, J. and Rinker, F. and Waltersdorfer, L. and Winkler, D.","Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019",2019,"Similar to advanced software engineering, multi-disciplinary systems engineering, such as industrial production systems engineering (PSE), has to integrate partial results from workgroups that design in parallel. Due to the heterogeneity of data sources and the divergence of local data models the exchanged engineering artefacts between PSE workgroups are complex, making the automation of the data exchange process in PSE difficult and prone to technical debt (TD). In this paper, we report on a case study at a large PSE company to analyze TD effects, items, and causes in PSE, focusing on the engineering data exchange process. We identified key use cases and TD types, i.e., TD in data models and TD in data instances, which have adverse effects on project effort, cost and duration as well as data quality. © 2019 IEEE.",10.1109/SEAA.2019.00059,"Inst. of Information Sys. Eng., Faculty of Informatics, TU Wien, Vienna, Austria; Institute of Ergonomics, Manufacturing Systems and Automation, OvG U., Magdeburg, Germany; Christian Doppler Laboratory SQI, Inst. of Information Sys. Eng., TU Wien, Vienna, Austria",Accepted
514,When and Why Your Code Starts to Smell Bad (and Whether the Smells Go Away),"Saarimaki, N. and Baldassarre, M.T. and Lenarduzzi, V. and Romano, S.","Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019",2019,"[Context] The popularity of tools for software quality analysis has increased over the years, with special attention to tools that calculate technical debt based on violations of a set of rules. SonarQube is one of the most used tools and provides an estimation of the time needed to remediate technical debt. However, practitioners are still skeptical about the accuracy of its remediation time estimation. [Objective] In this paper, we analyze the accuracy of SonarQube remediation time on a set of 15 open source Java projects. [Method] We designed and conducted a case study where we asked 65 novice developers to remove rule violations and reduce the technical debt of 15 projects. [Results] The results point out that SonarQube remediation time, compared to the actual time for reducing technical debt, is generally overestimated, and that the most accurate estimation relates to code smells, while the least accurate concerns bugs. [Conclusions] Practitioners and researchers could benefit from the results of this work to understand up to which extent technical debt is overestimated and have a more accurate estimation of the remediation time.? © 2019 IEEE.",10.1109/SEAA.2019.00055,"Tampere University, Tampere, Finland; University of Bari, Bari, Italy",Accepted
515,Managing the requirements flow from strategy to release in large-scale agile development: a case study at Ericsson,,ACM International Conference Proceeding Series,2019,"Context: Security work in software development is generally under-prioritized. Software developers are not aware of security engineering practices, or find them external to the software development process. To the management, security work presents itself in the form of reactive testing performed out of necessity, incurring only costs in terms of time and resources. The long-term benefits of the security work are more difficult to demonstrate and the security investment harder to justify. Objectives: The concept of technical debt is widely used, but its benefits for software security improvement and security risk management have not been fully realized. To make the direct and indirect benefits of security work in software development more visible and therefore more justifiable, the security risk in software is expressed in the terms of technical debt. Correspondingly, the security engineering techniques are utilized to recognize a technical debt containing a security risk: security debt. Method: The concept of managing security risk as technical debt in software development is constructed. It is then analysed using an evaluation framework drawn from literature. Result: Four central types of technical debt are considered for sources of security debt: requirements, architecture, code, and testing. Each type of security technical debt is analyzed from the aspect of three activities: identification, measurability and management, and repayment. The technical and organizational effects of applying this concept are examined. The evaluation framework increases the ability to identify technical debt through security practices, and to effectively mitigate security risk using technical debt management practices and tools. The framework deals with security issues in software architecture, code, and testing (ACT-S). Conclusion: Security engineering techniques provide an effective method to recognize internal quality issues in software requirements, architecture, coding, and testing. When expressed as technical debt, the management of security risk and addressing the underlying quality issues can gain increased visibility and can be more communicated between developers, security experts, and the management. © 2019 Association for Computing Machinery.",10.1145/3339252.3340338,,Accepted
516,Compiling static software metrics for reliability and maintainability from GitHub repositories,"Ying, J.-C. and Wang, Y.-B. and Chang, C.-K. and Chang, C.-W. and Chen, Y.-H. and Liou, Y.-S.","Proceedings - 2019 12th International Conference on Ubi-Media Computing, Ubi-Media 2019",2019,"United State Treasury Bonds are government bonds issued by the United State Treasury through the Public Debt Bureau. The trades of U.S. Treasury Bonds have a huge influence on global economy. To analysis the trend of global economy, many economists believe U.S. Treasury Yield has the ability to predict the fluence of other financial markets such as stock market, futures market, Option market, etc. However, However, most financial prediction models focus only on predicting stock price, which is a sort of multidimensional time-series prediction. Although U.S. Treasury Yield could be viewed as a multidimensional time-series, the prediction models for predicting stock price are not able to completely satisfy the requirements for predicting U.S. Treasury Yield. Besides, most traditional machine learning methods focus only on estimation of short-term cash flow. As the result, the loss of traditional machine learning methods would significantly be increased while the period of prediction target is fluctuated. In this paper, we propose a Deep-Learning framework, DeepBonds, to build a prediction model to predict U.S. Treasury Yield with different issue period. Meanwhile, the Recurrent Neural Network with Long Short Term Memory (LSTM) architecture is utilized for effectively summarizing U.S. Treasury Yield as characteristic vectors. Based on the produced characteristic vectors, we can precisely predict future U.S. Treasury Yield with different issue period. We conduct a comprehensive experimental study based on a real dataset collected from the website of Resource Center of U.S. Department of The Treasury. The results demonstrate a significantly improved accuracy of our Deep Learning approach compared with the existing works. © 2019 IEEE.",10.1109/Ubi-Media.2019.00055,"Department of Management Information Systems, National Chung Hsing University, Taichung, Taiwan; Department of Marketing, Feng Chia University, Taichung, Taiwan; Department of Risk Management and Incurance, Feng Chia University, Taichung, Taiwan; Department of Computer Science and Engineering, Feng Chia University, Taichung, Taiwan",Rejected
517,"Proceedings - 2017 IEEE International Conference on Software Maintenance and Evolution, ICSME 2017","Boehm, B. and Behnamghader, P.",Systems Engineering,2019,"Many systems and software processes overfocus on getting a project and product from an initial set of requirements to an Initial Operational Capability (IOC). Examples are most waterfall and V models. Projects following such processes may pass acceptance tests for functionality and performance, but may leave the product with serious maintainability shortfalls. Many agile processes focus on users' initial usage priorities, but often make development commitments for earlier needs that are incompatible with achieving later critical needs (eg, security, safety). Incremental development process models can do better, but often later increments may find that the earlier increments have not prepared them for ease of modification and repair. Besides increasing Total Ownership Costs (TOCs), long mean times to repair result in long downtimes, which can be critical to an organization's income and reputation. Furthermore, many of these shortfalls take the form of Technical Debt (TD), in that the later they are fixed, the more slow and expensive will be the fixes. This paper summarizes three process frameworks and tools providing more anticipatory ways to improve systems and software maintainability and life-cycle cost-effectiveness. The first framework is an Opportunity Tree for identifying and anticipating such ways. The second framework, Software Quality Understanding by Analysis of Abundant Data (SQUAAD), is a toolset for tracking a software project's incremental code commits, and analyzing and visualizing each commit's incremental and cumulative TD. The third framework is a Software/Systems Maintenance Readiness Framework (SMRF), that identifies needed maintenance readiness levels at development decision reviews, similar to the Technology Readiness Levels (TRLs) framework. © 2019 Wiley Periodicals, Inc.",10.1002/sys.21490,"Department of Computer Science, University of Southern California, Los Angeles, CA, United States",Rejected
518,Analyzing technological spillover effects between technology classes: The case of korea technology finance corporation,"Pecorelli, F. and Di Nucci, D. and De Roover, C. and De Lucia, A.","MaLTeSQuE 2019 - Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with ESEC/FSE 2019",2019,"Code smells can compromise software quality in the long term by inducing technical debt. For this reason, many approaches aimed at identifying these design flaws have been proposed in the last decade. Most of them are based on heuristics in which a set of metrics (e.g., code metrics, process metrics) is used to detect smelly code components. However, these techniques suffer of subjective interpretation, low agreement between detectors, and threshold dependability. To overcome these limitations, previouswork applied Machine Learning techniques that can learn from previous datasets without needing any threshold definition. However, more recent work has shown that Machine Learning is not always suitable for code smell detection due to the highly unbalanced nature of the problem. In this study we investigate several approaches able to mitigate data unbalancing issues to understand their impact on MLbased approaches for code smell detection. Our findings highlight a number of limitations and open issues with respect to the usage of data balancing in ML-based code smell detection. © 2019 Association for Computing Machinery.",10.1145/3340482.3342744,"University of Salerno, Salerno, Italy; Vrije Universiteit Brussel, Brussel, Belgium",Accepted
519,KeptAom: Savings management system to increase long term savings behavior of children,"Lenarduzzi, V. and Martini, A. and Taibi, D. and Tamburri, D.A.","MaLTeSQuE 2019 - Proceedings of the 3rd ACM SIGSOFT International Workshop on Machine Learning Techniques for Software Quality Evaluation, co-located with ESEC/FSE 2019",2019,"The concept of technical debt has been explored from many perspectives but its precise estimation is still under heavy empirical and experimental inquiry. We aim to understand whether, by harnessing approximate, data-driven, machine-learning approaches it is possible to improve the current techniques for technical debt estimation, as represented by a top industry quality analysis tool such as SonarQube. For the sake of simplicity, we focus on relatively simple regression modelling techniques and apply them to modelling the additional project cost connected to the sub-optimal conditions existing in the projects under study. Our results shows that current techniques can be improved towards a more precise estimation of technical debt and the case study shows promising results towards the identification of more accurate estimation of technical debt. © 2019 Association for Computing Machinery.",10.1145/3340482.3342747,"Tampere University, Tampere, Finland; University of Oslo, Oslo, Norway; Technical University of Eindhoven, JADS 'S, Hertogenbosch, Netherlands",Accepted
520,What if i Had No Smells?,"Bogner, J. and Fritzsch, J. and Wagner, S. and Zimmermann, A.","Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",2019,"While Microservices promise several beneficial characteristics for sustainable long-term software evolution, little empirical research covers what concrete activities industry applies for the evolvability assurance of Microservices and how technical debt is handled in such systems. Since insights into the current state of practice are very important for researchers, we performed a qualitative interview study to explore applied evolvability assurance processes, the usage of tools, metrics, and patterns, as well as participants' reflections on the topic. In 17 semi-structured interviews, we discussed 14 different Microservice-based systems with software professionals from 10 companies and how the sustainable evolution of these systems was ensured. Interview transcripts were analyzed with a detailed coding system and the constant comparison method. We found that especially systems for external customers relied on central governance for the assurance. Participants saw guidelines like architectural principles as important to ensure a base consistency for evolvability. Interviewees also valued manual activities like code review, even though automation and tool support was described as very important. Source code quality was the primary target for the usage of tools and metrics. Despite most reported issues being related to Architectural Technical Debt (ATD), our participants did not apply any architectural or service-oriented tools and metrics. While participants generally saw their Microservices as evolvable, service cutting and finding an appropriate service granularity with low coupling and high cohesion were reported as challenging. Future Microservices research in the areas of evolution and technical debt should take these findings and industry sentiments into account. © 2019 IEEE.",10.1109/ICSME.2019.00089,"University of Applied Sciences, Reutlingen, Germany; University of Stuttgart, Germany",Rejected
521,High yield groundnut agronomy: An IoT based precision farming framework,"Lenarduzzi, V. and Orava, T. and Saarimäki, N. and Systä, K. and Taibi, D.",International Symposium on Empirical Software Engineering and Measurement,2019,"Background. The need to release our products under tough time constraints has required us to take shortcuts during the implementation of our products and to postpone the correct implementation, thereby accumulating Technical Debt. Objective. In this work, we report the experience of a Finnish SME in managing Technical Debt (TD), investigating the most common types of TD they faced in the past, their causes, and their effects. Method. We set up a focus group in the case-company, involving different roles. Results. The results showed that the most significant TD in the company stems from disagreements with the supplier and lack of test automation. Specification and test TD are the most significant types of TD. Budget and time constraints were identified as the most important root causes of TD. Conclusion. TD occurs when time or budget is limited or the amount of work are not understood properly. However, not all postponed activities generated 'debt'. Sometimes the accumulation of TD helped meet deadlines without a major impact, while in other cases the cost for repaying the TD was much higher than the benefits. From this study, we learned that learning, careful estimations, and continuous improvement could be good strategies to mitigate TD These strategies include iterative validation with customers, efficient communication with stakeholders, meta-cognition in estimations, and value orientation in budgeting and scheduling. © 2019 IEEE.",10.1109/ESEM.2019.8870169,"Tampere University, Tampere, Finland",Accepted
522,On the value of a prioritization scheme for resolving Self-admitted technical debt,"Fagerholm, F. and Becker, C. and Chatzigeorgiou, A. and Betz, S. and Duboc, L. and Penzenstadler, B. and Mohanani, R. and Venters, C.C.",International Symposium on Empirical Software Engineering and Measurement,2019,"Background: Many decisions made in Software Engineering practices are intertemporal choices: trade-offs in time between closer options with potential short-term benefit and future options with potential long-term benefit. However, how software professionals make intertemporal decisions is not well understood. Aim: This paper investigates how shifting time frames influence preferences in software projects in relation to purposefully selected background factors. Method: We investigate temporal discounting by replicating a questionnaire-based observational study. The replication uses a changed-population and -experimenter design to increase the internal and external validity of the original results. Results: The results of this study confirm the occurrence of temporal discounting in samples of both professional and student participants from different countries and demonstrate strong variance in discounting between study participants. We found that professional experience influenced discounting. Participants with broader professional experience exhibited less discounting than those with narrower experience. Conclusions: The results provide strong empirical support for the relevance and importance of temporal discounting in SE and the urgency of targeted interdisciplinary research to explore the underlying mechanisms and their theoretical and practical implications. The results suggest that technical debt management could be improved by increasing the breadth of experience available for critical decisions with long-term impact. In addition, the present study provides a methodological basis for replicating temporal discounting studies in software engineering. © 2019 IEEE.",10.1109/ESEM.2019.8870161,"University of Helsinki, Finland; Blekinge Inst. of Tech., Sweden; Univ. of Toronto, Canada; Faculty of Information, University of Toronto, Canada; Dept. of Applied Informatics, Univ. of Macedonia, Greece; Furtwangen Univ., Germany; La Salle Univ., Spain; CSULB, Long Beach, United States; LUT, Lappeenranta, Finland; Dept. of CSE and HCD, IIIT Delhi, India; University of Huddersfield, United Kingdom",Rejected
523,A semi-automated framework for the identification and estimation of Architectural Technical Debt: A comparative case-study on the modularization of a software component,"Fontana, F.A. and Pigazzini, I. and Raibulet, C. and Basciano, S. and Roveda, R.",ACM International Conference Proceeding Series,2019,"Architectural smells represent symptoms of problems at architectural level that can negatively impact internal software qualities and lead to architectural debt. Detecting architectural smells and identifying the most critical ones is the key to prioritize refactoring efforts and prevent software architecture erosion. In this paper we focus our attention on three architectural smells based on dependency issues, called Cyclic Dependency, Unstable Dependency, and Hub-Like Dependency. Moreover, we evaluate the PageRank and Criticality of these smells through the analysis of six projects. PageRank is a measure that estimates whether an architectural smell is located in an important part of the project, where the importance is evaluated according to how many parts of a project depend on the one involved in the architectural smell. We describe a case study on the analysis of the possible relation existing between the PageRank and Criticality of the smells. The results show how the two measures can be both used to locate the architectural smells that need particular inspections and attention. © 2019 ACM.",10.1145/3344948.3344982,"Department of Informatics, Systems and Communication, University of Milano-Bicocca, Milano, Italy; Alten Italia, Milano, Italy",Accepted
524,"A layered approach to specification authoring, sharing, and usage","Imran, A.","Proceedings - 2019 IEEE International Conference on Software Maintenance and Evolution, ICSME 2019",2019,"Software design smells have gained significant importance in recent years since those directly lead to the increase of design debts and drastically affect software quality. Although the impact of design smells is manifold, techniques to detect design smells using both rule based and data mining approaches have been explored to a limited extent. This research aims to provide a tool which uses software metrics as a guide to detect smells and also deploys Spectral Clustering to mine the software repositories and group similar smells. The tool has been partially implemented till now and initial experiments on 2,59,509 Lines of Code (LoC) covering 3,306 classes of real life open source Java software show 2,220 occurrences of four types of design smells. © 2019 IEEE.",10.1109/ICSME.2019.00104,"Computer Science and Engineering, University of Buffalo, Buffalo, NY  14214, United States",Accepted
525,Digital labour in the university: Understanding the transformations of academic work in the UK,"Liu, K. and Chen, W. and Zheng, Z. and Li, Z. and Liang, W.",IEEE Internet of Things Journal,2019,"With the advancement and emergence of diverse network services in Internet of Vehicles (IoV), large volume of data are collected and stored, making data important properties. Data will be one of the most important commodities in the future blockchain-based IoV systems. However, efficiency challenges have been commonly found in blockchain-based data markets, which is mainly caused by transaction confirmation delays and the cold-start problems for new users. To address the efficiency challenges, we propose a secure, decentralized IoV data-trading system by exploiting the blockchain technology, and design an efficient debt-credit mechamism to support efficient data-trading in IoV. In the debt-credit mechanism, a vehicle with loan demand could loan from multivehicles by promising to pay interest and reward. In particular, we encourage loaning among vehicles by a motivation-based investing and pricing mechanism. We formulate a two-stage Stackelberg game to maximize the profits of borrower vehicle and lender vehicles jointly. In the first stage, the borrower vehicle set the interest rate and reward for the loan as its pricing strategies. In the second stage, the lender vehicles decide on their investing strategies. We apply backward induction to analyze the subgame perfect equilibrium at each stage for both independent and uniform pricing schemes. We also validate the existence and uniqueness of Stackelberg equilibrium. The numerical results illustrate the efficiency of the proposed pricing schemes. © 2014 IEEE.",10.1109/JIOT.2019.2927682,"School of Data and Computer Science, Sun Yat-sen University, Guangzhou, 510275, China; School of Automation, Guangdong Key Laboratory of IoT Information Technology, Guangdong University of Technology, Guangzhou, 510006, China; College of Software Engineering, Xiamen University of Technology, Xiamen, 361024, China",Rejected
526,Prioritizing corrective maintenance activities for android applications: An industrial case study on android crash reports,"Besker, T. and Martini, A. and Bosch, J.",Journal of Systems and Software,2019,"Software companies need to deliver customer value continuously, both from a short- and long-term perspective. However, software development can be impeded by technical debt (TD). Although significant theoretical work has been undertaken to describe the negative effects of TD, little empirical evidence exists on how much wasted time and additional activities TD causes. The study aims to explore the consequences of TD in terms of wastage of development time. This study investigates on which activities this wasted time is spent and whether different TD types impact the wasted time differently. This study reports the results of a longitudinal study surveying 43 developers and including16 interviews followed by validation by an additional study using a different and independent dataset and focused on replicating the findings addressing the findings. The analysis of the reported wasted time revealed that developers waste, on average, 23% of their time due to TD and that developers are frequently forced to introduce new TD. The most common activity on which additional time is spent is performing additional testing. The study provides evidence that TD hinders developers by causing an excessive waste of working time, where the wasted time negatively affects productivity. © 2019",10.1016/j.jss.2019.06.004,"Computer Science and Engineering, Software Engineering, Chalmers University of Technology, Göteborg, Sweden; University of Oslo, Programming and Software Engineering, Oslo, Norway",Accepted
527,Financial Literacy Competencies of Women Entrepreneurs in Kenya,,ACM International Conference Proceeding Series,2019,The proceedings contain 11 papers. The topics discussed include: the technical debt dataset; which refactoring reduces bug rate?; on usefulness of the deep-learning-based bug localization models to practitioners; an evaluation of parameter pruning approaches for software estimation; patterns of effort contribution and demand and user classiï¬cation based on participation patterns in NPM ecosystem; leveraging change intents for characterizing and identifying large-review-effort changes; prioritizing automated user interface tests using reinforcement learning; reviewer recommendation using software artifact traceability graphs; applying cross project defect prediction approaches to cross-company effort estimation; and from reports to bug-fix commits: a 10 years dataset of bug-fixing activity from 55 apacheâs open source projects.,,,Rejected
528,Towards integrity machines: Design theory for information systems addressing conflicts of interest in the public sector,"Jain, N. and Agrawal, T. and Goyal, P. and Hassija, V.","Proceedings of IEEE International Conference on Signal Processing,Computing and Control",2019,"Credit scoring is a method that is used by banks to estimate the risk of lending money to an individual. It determines the ability of that person to repay the debts. Higher the credit score, higher is the probability of getting the loan. Before approving the loan, in addition to calculating the credit score, banks also need to digitally verify the client's credentials. This is a very tedious task involving a lot of paperwork. It becomes even more cumbersome when the person is underprivileged i.e. from rural areas or does not hold any bank account. This paper presents a solution to the above problem by introducing a framework that will create a secure digital identity and store the past transactions made to calculate the credit score using blockchain. Blockchain is a digital ledger that is resistant to modifications. It creates a distributed network of users where details of each transaction are transparent, thereby enhancing the level of trust in the network. The aim of this paper is twofold: (1) providing fair and unbiased access to credit to people who are deprived of the basic financial amenities and (2) efficient digital verification. © 2019 IEEE.",10.1109/ISPCC48220.2019.8988510,"JIIT, Department of Computer Science and Engineering, Noida Campus, India",Rejected
529,"11th International Conference on Model Transformation, ICMT 2018 Held as Part of STAF 2018",,"Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOCW",2019,The proceedings contain 30 papers. The topics discussed include: towards the de?nition of enterprise architecture debts; towards an assessment method for social transparency in enterprise information systems; verifying Petri net-based process models using automated planning; investigating the challenges of European public service media companies from an enterprise architecture point of view; a preliminary framework for strategic and compliance monitoring; and dynamic service binding for time-aware service compositions.,,,Rejected
530,Technical debt in model transformation specifications,"Subrahmanyam, K.S.L.N.S. and Murthy, A.V.N.",International Journal of Innovative Technology and Exploring Engineering,2019,"The growth of Indian Economy is a combination of contribution of different sectors. The banking industry is the back bone of Indian Economy and its growing role in the Global Economy. Since, nationalization banking industry has witnessed many ups and downs in its sustainability. Though the banking industry is regulated by the Reserve Bank of India and policies of the Government from time to time towards its sustainability it needs to bring reforms in the strict implementation of Banking Regulation Act. During last two decades, banking industry has been reeling under financial crisis, losses and debts due to liberal loan sanction policies and poor recovery rate. This was due to frauds and corrupt practices due to some or other reason. This leads to financial burden not only on the Government but also on the people of the country. The present research paper examines the reasons for financial frauds and necessary suggestions are being made to mitigate the frauds and to develop strong and efficient control mechanism. © BEIESP.",10.35940/ijitee.L3958.1081219,"Department of Commerce, Koneru Lakshmaiah Education Foundation, Vaddeswaram, India",Rejected
531,Best practices for designing and conducting cyber-physical system wargames,"Perez, B. and Brito, J.P. and Astudillo, H. and Correal, D. and Rios, N. and Spinola, R.O. and Mendonca, M. and Seaman, C.","Proceedings - International Conference of the Chilean Computer Science Society, SCCC",2019,"Decisions made to accomplish short-term goals but affecting negatively the maintainability of the system is called Technical Debt (TD). In Chile, where software industry is rising 11% every year, it becomes crucial to understand how TD is perceived in software teams, its causes and how they are dealing with it. To accomplish this task we ran a TD survey, as a part of InsighTD. Results showed that almost two thirds of the respondents had some level of familiarity with the concept of TD. Among them, lack of qualified professionals is the most cited cause in general and, also, by software architects and developers. Conversely, planning and management is the most cited category of causes of TD. Results indicated that the concept of TD is well understood by software practitioners and that most efforts need to be invested by researchers on offering strategies and tools to support TD management. © 2019 IEEE.",10.1109/SCCC49216.2019.8966424,"Dept. of Systems Engineering, University of Los Andes, Bogotá, Colombia; Informatics Department, Technical University Federico Santa María, Valparaíso, Chile; Dept. of Computer Science, Federal University of Bahia, Salvador, Brazil; Grad. Program in Systems and Computer, Salvador University, Salvador, Brazil; Dept. of Information Systems, University of Maryland, Baltimore, MD, United States; Dept. of Systems, Francisco de Paula Santander University, Cúcuta, Colombia",Accepted
532,JIISIC 2018 - Jornadas Iberoamericanas de Ingenieria de Software e Ingenieria del Conocimiento,"Muhlbauer, S. and Apel, S. and Siegmund, N.","Proceedings - 2019 34th IEEE/ACM International Conference on Automated Software Engineering, ASE 2019",2019,"Learning from the history of a software system's performance behavior does not only help discovering and locating performance bugs, but also identifying evolutionary performance patterns and general trends, such as when technical debt accumulates. Exhaustive regression testing is usually impractical, because rigorous performance benchmarking requires executing a realistic workload per revision, which results in large execution times. In this paper, we propose a novel active revision sampling approach, which aims at tracking and understanding a system's performance history by approximating the performance behavior of a software system across all of its revisions. In a nutshell, we iteratively sample and measure the performance of specific revisions that help us building an exact performance-evolution model, and we use Gaussian Process models to assess in which revision ranges our model is most uncertain with the goal to sample further revisions for measurement. We have conducted an empirical analysis of the evolutionary performance behavior modeled as a time series of the histories of six real-world software systems. Our evaluation demonstrates that Gaussian Process models are able to accurately estimate the performance-evolution history of real-world software systems with only few measurements and to reveal interesting behaviors and trends. © 2019 IEEE.",10.1109/ASE.2019.00065,"Bauhaus-University Weimar, Germany; Saarland University, Germany",Rejected
533,The evolution of requirements practices in software startups,"Wattanakriengkrai, S. and Srisermphoak, N. and Sintoplertchaikul, S. and Choetkiertikul, M. and Ragkhitwetsagul, C. and Sunetnanta, T. and Hata, H. and Matsumoto, K.","Proceedings - Asia-Pacific Software Engineering Conference, APSEC",2019,"Technical Debt (TD) introduces a quality problem and increases maintenance cost since it may require improvements in the future. Several studies show that it is possible to automatically detect TD from source code comments that developers intentionally created, so-called self-admitted technical debt (SATD). Those studies proposed to use binary classification technique to predict whether a comment shows SATD. However, SATD has different types (e.g. design SATD and requirement SATD). In this paper, we therefore propose an approach using N-gram Inverse Document Frequency (IDF) and employ a multi-class classification technique to build a model that can identify different types of SATD. From the empirical evaluation on 10 open-source projects, our approach outperforms alternative methods (e.g. using BOW and TF-IDF). Our approach also improves the prediction performance over the baseline benchmark by 33%. © 2019 IEEE.",10.1109/APSEC48747.2019.00050,"Mahidol University, Thailand; Nara Institute of Science and Technology, Japan",Accepted
534,A taste of the software industry perception of technical debt and its management in Brazil,"Spínola, R.O. and Zazworka, N. and Vetro, A. and Shull, F. and Seaman, C.",Journal of the Brazilian Computer Society,2019,"Context: The technical debt (TD) concept inspires the development of useful methods and tools that support TD identification and management. However, there is a lack of evidence on how different TD identification tools could be complementary and, also, how human-based identification compares with them. Objective: To understand how to effectively elicit TD from humans, to investigate several types of tools for TD identification, and to understand the developers point of view about TD indicators and items reported by tools. Method: We asked developers to identify TD items from a real software project. We also collected the output of three tools to automatically identify TD and compared the results in terms of their locations in the source code. Then, we collected developers opinions on the identification process through a focus group. Results: Aggregation seems to be an appropriate way to combine TD reported by developers. The tools used cannot help in identifying many important TD types, so involving humans is necessary. Developers reported that the tools would help them to identify TD faster or more accurately and that project priorities and current development activities are important to be considered together, along with the values of principal and interest, when deciding to pay off a debt. Conclusion: This work contributes to the TD landscape, which depicts an understanding between different TD types and how they are best discovered. © 2019, The Author(s).",10.1186/s13173-019-0087-5,"Graduate Program in Systems and Computer, Salvador University, State University of Bahia, Salvador, Bahia, Brazil; Elsevier, Frankfurt, Germany; Nexa Center for Internet & Society, DAUIN, Politecnico di Torino, Torino, Italy; Carnegie Mellon University, Software Engineering Institute, Arlington, VA, United States; Department of Information Systems, University of Maryland Baltimore County, Baltimore, MD, United States",Accepted
535,"12th IFIP WG 8.9 Working Conference on Research and Practical Issues of Enterprise Information Systems, CONFENIS 2018 Held at the 24th IFIP World Computer Congress, WCC 2018","Junior, L.S.",Journal of Network Theory in Finance,2019,"In this paper, we build dynamic networks based on correlation and transfer entropy (TE), using both the log returns and the volatilities (here associated with absolute values) of ninety-seven stock market indexes from various parts of the world between 2000 and 2016. The topologies of these networks are analyzed using node strength for networks based on correlation, and in and out node strengths for networks based on TE. Our results indicate that node strengths peak in times of crisis, such as the global financial crisis of 2008 and the European sovereign debt crisis, as well as in the years after 2010. Our results for volatilities also indicate strong relations between the indexes of Arab countries. © 2017 Infopro Digital Risk (IP) Limited.",10.21314/JNTF.2017.033,"INSPER, Rua Quatá 300, São Paulo, SP  04546042, Brazil",Rejected
536,Identifying and prioritizing architectural debt through architectural smells: A case study in a large software company,"Lu, C.",CEUR Workshop Proceedings,2019,"An empirical analysis is conducted to investigate the association of the content of commit messages and technical debt. The analysis is based on 33 open-source Apache JAVA projects. Structural Topic Modelling, a recently developed text mining technique is employed for sophisticated analysis. The result shows that the certain content of commit messages such as empty messages are potentially associated with Technical Debt. Copyright © 2019 for this paper by its authors.",,"Tampere University, Finland",Accepted
537,"12th European Conference on Software Architecture, ECSA 2018","Zhang, B.",CEUR Workshop Proceedings,2019,"The understanding of code smells have exerted profound influence in the quality and the performance of programming codes. There are various type of code smells require various solutions. In order to interpret the solutions available in code smells, this research uses NLP (natural language programming) techniques to comprehend contents of messages from Technical Debt Dataset. Based on phrase structure rules, semantic patterns were extracted from the Dataset to build connection between trigger words and dependency tree. Verb Phrases are considered as the actions taken by programmers encountering code smells. Copyright © 2019 for this paper by its authors.",,"University of Tampere, Finland",Accepted
538,Making runtime data useful for incident diagnosis: An experience report,,"Smart Innovation, Systems and Technologies",2019,"The proceedings contain 153 papers. The special focus in this conference is on New Metropolitan Perspectives. The topics include: Multi-stage strategic approach in spatial innovation: How innovation district matter?; arco latino: A model of European resilience; the role of spatial models in tourism planning; scenarios for a sustainable valorisation of cultural landscape as driver of local development; the impact of users lifestyle in zero-energy and emission buildings: An application of cost-benefit analysis; EUSALP, a model region for smart energy transition: Setting the baseline; geographically weighted regression for the post carbon city and real estate market analysis: A case study; the challenge of augmented city: New opportunities of common spaces; multiple-benefits from buildings refurbishment: Evidence from smart city projects in Europe; spatial data infrastructures in santiago de compostela: From the heritage information system to the city councils geoportal; the Portuguese coastal way and maritime heritage: An outstanding debt with the new technologies; geospatial analysis to assess natural park biomass resources for energy uses in the context of the rome metropolitan area; Promoting cultural resources integration using GIS. The case study of pozzuoli; investigating local economic trends for shaping supportive tools to manage economic development: San Diego as a case study; integrated system of training and orientation: Towards a measurement of outcomes; post carbon city and real estate market: Testing the dataset of reggio calabria market using spline smoothing semiparametric method; the life cycle of clusters: A new perspective on the implementation of S3; urban abusiveness, planning and redevelopment; the supportive city.",,,Duplicated
539,Deep optimization for spectrum repacking,,ACM International Conference Proceeding Series,2019,The proceedings contain 35 papers. The topics discussed include: a systematic mapping of the literature about tools for data validation in business rules tests; analysis of the utilization of scrum framework effort estimation metrics in federal public administration; effects of visualizing technical debts on a software maintenance project; how well do you know this library? mining experts from source code analysis; improving urban mobility for the visually impaired using the awareness quality; measuring developer work to support the software project manager: an exploratory study; multiobjective optimization using evolutionary algorithms in agile teams allocation; and using auxiliary artifacts during code inspection activity: findings from an exploratory study.,,,Duplicated
540,Understanding consumption pattern of rural and urban consumers in Malaysia,,"Smart Innovation, Systems and Technologies",2019,"The proceedings contain 153 papers. The special focus in this conference is on New Metropolitan Perspectives. The topics include: Multi-stage strategic approach in spatial innovation: How innovation district matter?; arco latino: A model of European resilience; the role of spatial models in tourism planning; scenarios for a sustainable valorisation of cultural landscape as driver of local development; the impact of users lifestyle in zero-energy and emission buildings: An application of cost-benefit analysis; EUSALP, a model region for smart energy transition: Setting the baseline; geographically weighted regression for the post carbon city and real estate market analysis: A case study; the challenge of augmented city: New opportunities of common spaces; multiple-benefits from buildings refurbishment: Evidence from smart city projects in Europe; spatial data infrastructures in santiago de compostela: From the heritage information system to the city councils geoportal; the Portuguese coastal way and maritime heritage: An outstanding debt with the new technologies; geospatial analysis to assess natural park biomass resources for energy uses in the context of the rome metropolitan area; Promoting cultural resources integration using GIS. The case study of pozzuoli; investigating local economic trends for shaping supportive tools to manage economic development: San Diego as a case study; integrated system of training and orientation: Towards a measurement of outcomes; post carbon city and real estate market: Testing the dataset of reggio calabria market using spline smoothing semiparametric method; the life cycle of clusters: A new perspective on the implementation of S3; urban abusiveness, planning and redevelopment; the supportive city.",,,Rejected
541,Small hydropower plants optimization for equipping and exploitation software application,"Lopez, L. and Antelo, M.Á.P. and Gusman, I.","Smart Innovation, Systems and Technologies",2019,"This diagnostic study explores the use of Information and Communications Technologies (ICTs) to highlight the visibility of the maritime heritage as a complementary product of The Way of St. James. In order to achieve this objective, a case study was carried out on two stages of The Portuguese Coastal Way, Baiona and Combarro, in the province of Pontevedra (Galicia, Spain). Three types of sources were used to analyse the suitability of the ICTs and their content to promote the maritime cultural heritage. The identified problems were synthesized into three diagnostics. The results show that despite the progress made by the responsible institutions towards using ICTs to promote heritage, there are dysfunctions that hinder the potential of these tools for economic and cultural valorisation of Galician maritime cultural heritage. © Springer International Publishing AG, part of Springer Nature 2019.",10.1007/978-3-319-92099-3_20,"University of Santiago de Compostela, Santiago de Compostela, 15782, Spain",Rejected
542,Comparative Study of Different Open-Source Hospital Information Systems in Order to Develop an Application for the Healthcare Institutions Needs in Morocco,"Huertas, T. and Quesada-López, C. and Martínez, A.",Advances in Intelligent Systems and Computing,2019,"Technical debt is the metaphor used to describe the effect of incomplete or immature software artifacts that bring short-term benefits to projects, but may have to be paid later with interest. Software testing cost is proven to be high due to the time (and resource)-consuming activities involved. Test automation is a strategy that can potentially reduce this cost and provide savings to the software development process. The lack or poor implementation of a test automation approach derives in test automation debt. The goal of this paper is to report our experience using a model-based testing (MBT) approach on two industrial legacy applications and assess its impact on test automation debt reduction. We selected two legacy systems exhibiting high test automation debt, then used a MBT tool to model the systems and automatically generate test cases. We finally assessed the impact of this approach on the test automation technical debt by analyzing the code coverage attained by the tests and by surveying development team perceptions. Our results show that test automation debt was reduced by adding a suite of automated tests and reaching more than 75% of code coverage. Moreover, the development team agrees in that MBT could help reduce other types of technical debt present in legacy systems, such as documentation debt and design debt. Although our results are promising, more studies are needed to validate our findings. © 2019, Springer Nature Switzerland AG.",10.1007/978-3-030-11890-7_22,"Universidad de Costa Rica, San José, Costa Rica",Accepted
543,Estimation of critical virtual water for irrigation to avoid crop loss,,Advances in Intelligent Systems and Computing,2019,"The proceedings contain 90 papers. The special focus in this conference is on Information Technology and Systems. The topics include: PSP-CI: A Tool for Collecting Developers Data with Continuous Integration; data Management Infrastructure from Initiatives on Photovoltaic Solar Energy; fuzzy Knowledge Discovery and Decision-Making Through Clustering and Dynamic Tables: Application in Medicine; A Guide for Cascading and Scaling up Green IT Governance Indicators Through Balanced Scorecards: The Case of Datacenter Consolidation; Conceptual Model for Software as a Service (SaaS) Enterprise Resource Planning (ERP) Systems Adoption in Small and Medium Sized Enterprises (SMEs) Using the Technology-Organization-Environment (T-O-E) Framework; Sharing Device Resources in Heterogeneous CPS Using Unique Identifiers with Multi-site Systems Environments; digitalization Changing Work: Employees View on the Benefits and Hindrances; autonomous Cycles of Collaborative Processes for Integration Based on Industry 4.0; customer Experience Analytics in Insurance: Trajectory, Service Interaction and Contextual Data; E-Government and the Quality of Information in Web Portals of the GADM of Ecuador; ITSIM: Methodology for Improving It Services. Case Study CNEL EP-Manabi; Automation of the Barter Exchange Management in Ecuador Applying Google V3 API for Geolocation; using Model-Based Testing to Reduce Test Automation Technical Debt: An Industrial Experience Report; a Software Platform for Processes-Based Cost Analysis in the Assembly Industry; cloud-Oriented Packaging and Delivery; IoTV: Merging DTV and MDE Technologies on the Internet of Things; usability Quality Aspects Embedded in the Business Model; self-configuring Intelligent Water Drops Algorithm for Software Project Scheduling Problem; evaluating Model-Based Testing in an Industrial Project: An Experience Report.",,,Rejected
544,"Actas de las 23rd Jornadas de Ingenieria del Software y Bases de Datos, JISBD 2018","De Luca, F. and Fensore, S. and Meschieri, E.",Advances in Intelligent Systems and Computing,2019,"The recent reform of Italian Insolvency Law introduced new instruments aimed to restore companies in financial distress and potential in bankruptcy. In particular, the Article 182-bis restructuring agreements has been introduced by the Italian Civil Code to manage company crisis. The objective of this study is to underline the ability of seven specific accounting ratios and coefficients to predict the status of financial distress of the firms. We introduce a new formula that we call M-Index indicator, and then provide an empirical analysis through a sample of Italian listed companies collected from the Milan Stock Exchange in the period 20032012. The results of the empirical analysis validate the predictive accuracy power of our indicator. © 2019, Springer Nature Switzerland AG.",10.1007/978-3-319-99698-1_9,"DEA, University G. dAnnunzio of Chieti-Pescara, Viale Pindaro 42, Pescara, 65127, Italy; DSFPEQ, University G. dAnnunzio of Chieti-Pescara, Viale Pindaro 42, Pescara, 65127, Italy",Rejected
545,Modeling the trend of credit card usage behavior for different age groups based on singular spectrum analysis,"Zadeh, S.H.H.",International Journal of Supply Chain Management,2019,"This study examines the relationship between financial leverage deviations and supply chain management rewards on investment diversions in companies admitted to Tehran Stock Exchange during the period of 1387-1395. Therefore, information and statistics of 70 Tehran Stock Exchange members were analyzed using panel data approach and tested by hypothesis testing of three models. The results of this research show that there is a greater gap in the remuneration leverage of the management and the company, which leads to further gaps in investment diversions. The difference between the remuneration leverage and the company's leverage is also a negative relationship with the firm's firm's investment intensity. Ultimately, when the remuneration levy is lower than (more than) the company's financial leverage, it is likely that much investment will increase the value of equity and the value of debt reduces. © ExcelingTech Pub, UK.",,"Department of Business Administration, Faculty of Economics and Management of Urmia University, Iran",Rejected
546,Identifying self-admitted technical debt in open source projects using text mining,"Qiang, Q.",Journal of Intelligent and Fuzzy Systems,2019,"Currently, there is a certain fluctuation in the real estate industry, so it is particularly important to analyze the solvency of real estate enterprises. In order to find a reliable model suitable for studying the difference in house prices, this study collects the research data through data collection, and uses the K-means clustering method to construct the corresponding model as a basic research in combination with the machine learning research method. At the same time, this paper compares the analysis effects of several common machine learning models and finds the advantages and disadvantages of these methods through mathematical statistics. In addition, combined with practice, this paper constructs a nonlinear generalized additive model, and based on machine learning technology, validates the validity of the model based on data analysis, the collected predictors. In view of the improvement of the solvency of real estate enterprises, diversified operation of real estate enterprises can maintain reasonable cash flow and make up for the defect of poor liquidity of real estate. Furthermore, this paper uses the stability method to find the optimal model. In addition, the generalized additive model effectively reveals the complex nonlinear relationship between continuous predictors and house prices. Through research, it can be seen that the nonlinear generalized additive model based on machine learning can play an important role in real estate industry forecasting and has certain theoretical reference significance for subsequent related research. © 2019-IOS Press and the authors. All rights reserved.",10.3233/JIFS-179219,"School of Economics and Management, Anhui Jianzhu University, Hefei, China",Rejected
547,Software maintenance and evolution and automated software engineering,"Ebert, C. and Heidrich, J. and Martinez-Fernandez, S. and Trendowicz, A.",IEEE Software,2019,"Data science is mandatory in today's business to capitalize on achievements and assets. This specifically holds for modern software development, where data science facilitates analyzing product, process, and usage and thus managing evolution and performance. With the convergence of embedded and IT domains, such as the Internet of Things (IoT) and automotive systems, software systems are becoming more complex. Complexity has two faces. On one hand it means more functionality and fluid delivery models, thus offering markets more value, such as the ability to deliver a single-customer focus. Complexity, however, also means the growth of technical debt, which slows productivity and lowers quality. As software engineering generates ever larger and more varied data sets, such as feature usage, code analysis, test coverage, error logs, and maintenance data, companies face the challenge of unlocking the value of that data. © 1984-2012 IEEE.",10.1109/MS.2019.2933681,"Vector Consulting Services; Fraunhofer Institute for Experimental Software Engineering, Kaiserslautern, Germany",Rejected
548,Measuring the market risk of freight rates: A forecast combination approach,"Salamea, M.J. and Farre, C.","Proceedings - Companion of the 19th IEEE International Conference on Software Quality, Reliability and Security, QRS-C 2019",2019,"Automatic source-code inspection tools help to assess, monitor and improve code quality. Since these tools only examine the software project's codebase, they overlook other possible factors that may impact code quality and the assessment of the technical debt (TD). Our initial hypothesis is that human factors associated with the software developers, like coding expertise, communication skills, and experience in the project have some measurable impact on the code quality. In this exploratory study, we test this hypothesis on two large open source repositories, using TD as a code quality metric and the data that may be inferred from the version control systems. The preliminary results of our statistical analysis suggest that the level of participation of the developers and their experience in the project have a positive correlation with the amount of TD that they introduce. On the contrary, communication skills have barely any impact on TD. © 2019 IEEE.",10.1109/QRS-C.2019.00035,"ESSI Department, Universitat Politecnica de Catalunya, Barcelona, Spain",Accepted
549,Czech insolvency proceedings: Extraction of numerical information and its analysis,"Taufik, R. and Kurniawati, R.",International Journal of Supply Chain Management,2019,"The main objective of this study is to examine the effect of intellectual capital, debt policy, company size, supply chain and liquidity on earnings per share and dividends per share as intervening variables in companies registered in the LQ 45 stock market index that consists of 45 companies for the 2014-2016 period in Indonesia. Using a purposive sampling method obtained data (panels) of 60 observation data from 20 companies. Multiple regression analysis is used to analyze two models. Model 1 analyzes the influence of intellectual capital, debt policy, company size and liquidity on dividends per share and model 2 analyzes the effect of intellectual capital, debt policy, company size and liquidity on supply chain and consequently earnings per share by including dividend per share as an interprening variable. The first Analysis regression Model 1 found that supply chain, human capital efficiency, debt policy, company size, and liquidity, statistically significant affected dividend policy, other variables did not influence. The second analysis regression of Model 2 based on the operational mamnagement (through variable intervening) found that only dividends per share were statistically significantly affecting earnings per share (EPS). In model 1 the adjusted R square value is very low, this means that the independent variable cannot explain changes in the dependent variable whereas in model 2 it is very high, this means that the independent variable is able to explain changes in the dependent variable. © ExcelingTech Pub, UK.",,"Universitas Islam Syekh Yusuf, Tangerang, Indonesia",Rejected
550,Software sustainability: Research and practice from a software architecture viewpoint,"Bennouna, G. and Tkiouat, M.",Procedia Computer Science,2019,"The aim of this research lies in the development of a credit-scoring model using logistic regression and multivariate discriminant analysis applied to 1500 individual loans from Moroccan MFIs. This model combines both behavioral and descriptive data related to the borrowers (age, activity, level of education, number of unpaid debts, number of loans, etc.) and others related to the institution (amount of credit, duration of credit, number of concluded loans per portfolio manager etc.). The results showed the importance of having a larger sample, a deep enough history on the behavior of the customer, and also more information about variables related to the client's activity and its performance to better predict the default. © 2019 The Authors.",10.1016/j.procs.2019.01.025,"Laboratory of Research in Applied Mathematics, Mohammed v School of Engineers, University, Rabat, Morocco; Industrial Economics and Game Theory, Mohammed v School of Engineers, University, Rabat, Morocco",Rejected
551,Technical debt and agile software development practices and processes: An industry practitioner survey,"Jiménez, M. and Castaneda, L. and Villegas, N.M. and Tamura, G. and Müller, H.A. and Wigglesworth, J.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,"DevOps engineers follow an iterative and incremental process to develop Deployment and Configuration (D&C) specifications. Such a process likely involves manual bug discovery, inspection, and modifications to the running environment. Failing to update the specifications appropriately leads to technical debt, including configuration drift, snowflake configurations, and erosion across environments. Despite the efforts that DevOps teams put into automating operations work, there is a lack of tools to support the development and maintenance of D&C specifications. In this paper, we propose Tornado, a two-way Continuous Integration (CI) framework (i.e., Dev Ops and Dev Ops) that automatically updates D&C specifications when the corresponding system changes, enabling bi-directional traceability of the modifications. Tornado extends the concept of CI, integrating operations work into development by committing code corresponding to manual modifications. We evaluated Tornado by implementing a proof of concept using Terraform templates, OpenStack and CircleCI, demonstrating its feasibility and soundness. © 2019, Springer Nature Switzerland AG.",10.1007/978-3-030-06019-0_6,"University of Victoria, Victoria, BC, Canada; Universidad Icesi, Cali, Valle del Cauca, Colombia; IBM Toronto Laboratory, Toronto, Canada",Rejected
552,How Does Debt Structure Influence Stock Price Crash Risk?,"Eessaar, E. and Käosaar, E.",Advances in Intelligent Systems and Computing,2019,"A smell in an artifact is a sign that the artifact may have a technical debt, meaning that it may contain the results of one or more sub-optimal design decisions. The debt makes it more difficult to understand, maintain, extend, and reuse the artifact. Technical debt could appear in any technical artifact. Currently the debt in source code is in the center of attention. Modeling is an important system development activity. Models can have technical debt and a sign of it is the presence of one or more model smells. This paper introduces a catalog of 46 model smells (https://github.com/erki77/model-smells ) that has been created based on a set of code smells. The cataloged smells are general but their examples are given based on system analysis models. The main takeaway is that most of the considered code smells are instances of generic problems that can also occur in models. © 2019, Springer International Publishing AG, part of Springer Nature.",10.1007/978-3-319-91186-1_28,"Department of Software Science, Tallinn University of Technology, Tallinn, Estonia",Accepted
553,Exploration of technical debt in start-ups,"Ren, X. and Xing, Z. and Xia, X. and Lo, D. and Wang, X. and Grundy, J.",ACM Transactions on Software Engineering and Methodology,2019,"Technical debt is a metaphor to reflect the tradeoff software engineers make between short-Term benefits and long-Term stability. Self-Admitted technical debt (SATD), a variant of technical debt, has been proposed to identify debt that is intentionally introduced during software development, e.g., temporary fixes and workarounds. Previous studies have leveraged human-summarized patterns (which represent n-gram phrases that can be used to identify SATD) or text-mining techniques to detect SATD in source code comments. However, several characteristics of SATD features in code comments, such as vocabulary diversity, project uniqueness, length, and semantic variations, pose a big challenge to the accuracy of pattern or traditional text-mining-based SATD detection, especially for cross-project deployment. Furthermore, although traditional text-mining-based method outperforms pattern-based method in prediction accuracy, the text features it uses are less intuitive than human-summarized patterns, which makes the prediction results hard to explain. To improve the accuracy of SATD prediction, especially for cross-project prediction, we propose a Convolutional Neural Network (CNN) based approach for classifying code comments as SATD or non-SATD. To improve the explainability of our model's prediction results, we exploit the computational structure of CNNs to identify key phrases and patterns in code comments that are most relevant to SATD. We have conducted an extensive set of experiments with 62,566 code comments from 10 open-source projects and a user study with 150 comments of another three projects. Our evaluation confirms the effectiveness of different aspects of our approach and its superior performance, generalizability, adaptability, and explainability over current state-of-The-Art traditional text-mining-based methods for SATD classification. © 2019 Association for Computing Machinery. All rights reserved.",10.1145/3324916,"Zhejiang University, College of Computer Science and Technology, Hangzhou, Zhejiang, 31000, China; Australian National University, College of Engineering and Computer Science, Canberra, Australia; Monash University, Faculty of Information Technology, Melbourne, VIC, Australia; Singapore Management University, School of Information Systems, Singapore, Singapore",Accepted
554,Smelly relations: Measuring and understanding database schema quality,"Borrego, G. and Morán, A.L. and Palacio, R.R. and Vizcaíno, A. and García, F.O.",Information and Software Technology,2019,"Context: The adoption of agile methods is a trend in global software development (GSD), but may result in many challenges. One important challenge is architectural knowledge (AK) management, since agile developers prefer sharing knowledge through face-to-face interactions, while in GSD the preferred manner is documents. Agile knowledge-sharing practices tend to predominate in GSD companies that practice agile development (AGSD), leading to a lack of documents, such as architectural designs, data models, deployment specifications, etc., resulting in the loss of AK over time, i.e., it vaporizes. Objective: In a previous study, we found that there is important AK in the log files of unstructured textual electronic media (UTEM), such as instant messengers, emails, forums, etc., which are the preferred means employed in AGSD to contact remote teammates. The objective of this paper is to present and evaluate a proposal with which to recover AK from UTEM logs. We developed and evaluated a prototype that implements our proposal in order to determine its feasibility. Method: The evaluation was performed by conducting a study with agile/global developers and students, who used the prototype and different UTEM to execute tasks that emulate common situations concerning AGSD teams lack of documentation during development phases. Results: Our prototype was considered a useful, usable and unobtrusive tool when retrieving AK from UTEM logs. The participants also preferred our prototype when searching for AK and found AK faster with the prototype than with UTEM when the origin of the AK required was unknown. Conclusion: The participants performance and perceptions when using our prototype provided evidence that our proposal could reduce AK vaporization in AGSD environments. These results encourage us to evaluate our proposal in a long-term test as future work. © 2019 Elsevier B.V.",10.1016/j.infsof.2019.04.008,"Universidad Autónoma de Baja California, Mexico; Instituto Tecnológico de Sonora, Mexico; Universidad Castilla-La Mancha, Spain",Rejected
555,SATD detector: A text-mining-based self-Admitted technical debt detection tool,"Link, D. and Behnamghader, P. and Moazeni, R. and Boehm, B.","Proceedings - 2019 IEEE/ACM International Conference on Software and System Processes, ICSSP 2019",2019,"The stakeholders of a system are legitimately interested in whether and how its architecture reflects their respective concerns at each point of its development and maintenance processes. Having such knowledge available at all times would enable them to continually adjust their systems structure at each juncture and reduce the buildup of technical debt that can be hard to reduce once it has persisted over many iterations. Unfortunately, software systems often lack reliable and current documentation about their architecture. In order to remedy this situation, researchers have conceived a number of architectural recovery methods, some of them concern-oriented. However, the design choices forming the bases of most existing recovery methods make it so none of them have a complete set of desirable qualities for the purpose stated above. Tailoring a recovery to a system is either not possible or only through iterative experiments with numeric parameters. Furthermore, limitations in the scalability of the employed recovery algorithms make it prohibitive to apply the existing techniques to large systems. Finally, since several current recovery methods employ non-deterministic sampling, their inconsistent results do not lend themselves well to tracking a systems course over several versions, as needed by its stakeholders. RELAX (RELiable Architecture EXtraction), a new concern-based recovery method that uses text classification, addresses these issues efficiently (1) by assembling the overall recovery result from smaller, independent parts, (2) basing it on an algorithm with linear time complexity and (3) being tailorable to the recovery of a single system or a sequence thereof through the selection of meaningfully named, semantic topics. An intuitive and informative architectural visualization rounds out RELAX's contributions. RELAX is illustrated on a number of existing open-source systems and compared to other recovery methods. © 2019 IEEE.",10.1109/ICSSP.2019.00018,"Center for Systems and Software Engineering, University of Southern California, Los Angeles, United States; Computer Engineering Department, Santa Clara University, Santa Clara, United States",Rejected
556,Limiting technical debt with maintainability assurance: An industry survey on used techniques and differences with service- and microservice-based systems,"Marcilio, D. and Bonifacio, R. and Monteiro, E. and Canedo, E. and Luz, W. and Pinto, G.",IEEE International Conference on Program Comprehension,2019,"The use of automatic static analysis tools (ASATs) has gained increasing attention in the last few years. Even though available research have already explored ASATs issues and how they are fixed, these studies rely on revisions of the software, instead of mining real usage of these tools and real issue reports. In this paper we contribute with a comprehensive, multi-method study about the usage of SonarQube (a popular static analysis tool), mining 421,976 issues from 246 projects in four different instance of SonarQube: two hosted in open-source communities (Eclipse and Apache) and two hosted in Brazilian government institutions (Brazilian Court of Account (TCU) and Brazilian Federal Police (PF)). We first surveyed team leaders of the analyzed projects and found that they mostly consider ASATs warning messages as relevant for overall software improvement. Second, we found that both Eclipse and TCU employ highly customized instance of SonarQube, with more than one thousand distinct checkers-though just a subset of these checkers actually led to issues' reports. Surprisingly, we found a low resolution rate per project in all organizations-on average, 13% of the issues have been solved in the systems. We conjecture that just a subset of the checkers reveal real design and coding flaws, and this might artificially increase the technical debt of the systems. Nevertheless, considering all systems, there is a central tendency(median) of fixing issues after 18.99 days they had been reported, faster than the period for fixing bugs as reported in previous studies. © 2019 IEEE.",10.1109/ICPC.2019.00040,"Computer Science Department, University of Bra?ilia, Bra?ilia, Brazil; Paderborn University, Paderborn, Germany; Department of Statistics, University of Bra?ilia, Bra?ilia, Brazil; Faculty of Computing, Federal University of Para, Be?em, Brazil",Accepted
557,Poster: Using repository data for driving software architecture,"Li, X.",CEUR Workshop Proceedings,2019,"Research on technical debt and community smell have drawn increasing attention in the academia of software engineering in the latest decade. Furthermore, data mining methods have been widely applied in the very domain as well. However, limited studies have contribute to the understanding of software project community using data mining methods, especially regarding the analysis of developer behaviors. Using K-means clustering, this study provides a preliminary analysis on the classification of open source software project developers based on the statistics of their behaviors related to technical debts. The results show that developers can be categorized into three different behavior groups, including, Veterans, Vulnerability Creators, and Fault Inducers/ Commoners. Copyright © 2019 for this paper by its authors.",,"Tampere University, Kalevantie 4, Tampere, 33100, Finland",Rejected
558,Detecting and managing code smells: Research and practice,"Savchenko, V. and Sorokin, K. and Pankratenko, G. and Markov, S. and Spiridonov, A. and Alexandrov, I. and Volkov, A. and Sun, K.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2019,"Refactoring is a standard part of any modern development cycle. It helps to reduce technical debt and keep software projects healthy. However, in many cases refactoring requires that transformations are applied globally across multiple files. Applying them manually involves large amounts of monotonous work. Nevertheless, automatic tools are severely underused because users find them unreliable, difficult to adopt, and not customizable enough. This paper presents a new code transformation framework. It delivers an intuitive way to specify the expected outcome of a transformation applied within the whole project. The user provides simple C/C++ code snippets that serve as examples of what the code should look like before and after the transformation. Due to the absence of any additional abstractions (such as domain-specific languages), we believe this approach flattens the learning curve, making adoption easier. Besides using the source code of the provided snippets, the framework also operates at the AST level. This gives it a deeper understanding of the program, which allows it to validate the correctness of the transformation and match the exact cases required by the user. © Springer Nature Switzerland AG 2019.",10.1007/978-3-030-37487-7_12,"Ivannikov Institute for System Programming of the Russian Academy of Sciences, 25, Alexander Solzhenitsyn st., Moscow, 109004, Russian Federation; Lomonosov Moscow State University, GSP-1, Leninskie Gory, Moscow, 119991, Russian Federation; Samsung Electronics, Samsung GEC, 26, Sangil-ro 6-gil, Gangdong-gu, Seoul, South Korea",Rejected
559,Helping SMEs to better develop software: Experience report and challenges ahead,"Mendes, T.S. and Gomes, F.G.S. and Gonçalves, D.P. and Mendonça, M.G. and Novais, R.L. and Spínola, R.O.",Journal of the Brazilian Computer Society,2019,"Technical debt (TD) contextualizes problems faced during software evolution considering the tasks that are not carried out adequately during software development. Software TD is a type of debt that brings a short-term benefit, but which may have to be paid with interest later on in the software development life cycle. Its presence brings risks to the project and can reduce its quality. It is worthwhile to have automatic mechanisms to monitor it, as TD monitoring requires the analysis of large amounts of complex data. Therefore, the combination of software metrics and code comment analysis, in the identification, and information visualization techniques, in monitoring, present themselves as a promising strategy to manage TD. This work presents VisminerTD, a tool that allows the automatic identification and interactive monitoring of the evolution of TD items by combining software metrics, code comment analysis, and information visualization. To evaluate its applicability, a feasibility study was carried out considering JUnit 4 and Apache Ant software projects. The results indicated that VisminerTD can support software development teams in monitoring TD items. In addition, a second case study was performed to assess the feasibility of the proposed tool regarding its usefulness, ease of use, and self-predicted future use. The results provided positive evidence on the use of the proposed tool, indicating (i) that it can be useful in supporting TD Identification and TD monitoring activities and (ii) that it can bring gains in terms of comprehensiveness and efficacy when evaluating the desirable time to identify and monitor different types of debt. Given the current scenario characterized by limited options of tools that combine different information to support automatic identification and monitoring of the evolution of TD items in software projects, VisminerTD can approximate the state-of-the-art and the state-of-the-practice in the TD area, contributing to a wider dissemination of the concept. © 2019, The Author(s).",10.1186/s13173-018-0083-1,"Federal University of Bahia, UFBA, Av Adhemar de Barros, s/n, Instituto de Matemática, Salvador, 40170-110, Brazil; Salvador University, Av Tancredo Neves, 2131, Caminho das Árvores, Salvador, Brazil; Federal Institute of Bahia, R. Emídio dos Santos, s/n, Sala A303 - Barbalho, Salvador, 40301-015, Brazil; Federal Institute of Bahia-Santo Amaro, Tv. São José, s/n - Bomfim, Santo Amaro, 44200-000, Brazil; Fraunhofer Project Center at UFBA, Av. Luiz Viana Filho - Loteamento Colinas do Jaguaribe, Lo",Accepted
560,Architectural technical debt identification: The research landscape,"Yan, M. and Xia, X. and Shihab, E. and Lo, D. and Yin, J. and Yang, X.",IEEE Transactions on Software Engineering,2019,"Technical debt (TD) is a metaphor to describe the situation where developers introduce suboptimal solutions during software development to achieve short-term goals that may affect the long-term software quality. Prior studies proposed different techniques to identify TD, such as identifying TD through code smells or by analyzing source code comments. Technical debt identified using comments is known as Self-Admitted Technical Debt (SATD) and refers to TD that is introduced intentionally. Compared with TD identified by code metrics or code smells, SATD is more reliable since it is admitted by developers using comments. Thus far, all of the state-of-the-art approaches identify SATD at the file-level. In essence, they identify whether a file has SATD or not. However, all of the SATD is introduced through software changes. Previous studies that identify SATD at the file-level in isolation cannot describe the TD context related to multiple files. Therefore, it is beneficial to identify the SATD once a change is being made. We refer to this type of TD identification as 'Change-level SATD Determination', which determines whether or not a change introduces SATD. Identifying SATD at the change-level can help to manage and control TD by understanding the TD context through tracing the introducing changes. To build a change-level SATD Determination model, we first identify TD from source code comments in source code files of all versions. Second, we label the changes that first introduce the SATD comments as TD-introducing changes. Third, we build the determination model by extracting 25 features from software changes that are divided into three dimensions, namely diffusion, history and message, respectively. To evaluate the effectiveness of our proposed model, we perform an empirical study on 7 open source projects containing a total of 100,011 software changes. The experimental results show that our model achieves a promising and better performance than four baselines in terms of AUC and cost-effectiveness (i.e., percentage of TD-introducing changes identified when inspecting 20 percent of changed LOC). On average across the 7 experimental projects, our model achieves AUC of 0.82, cost-effectiveness of 0.80, which is a significant improvement over the comparison baselines used. In addition, we found that 'Diffusion' is the most discriminative dimension among the three dimensions of features for determining TD-introducing changes. © 1976-2012 IEEE.",10.1109/TSE.2018.2831232,"Zhejiang University, College of Computer Science and Technology, Hangzhou, China; Faculty of Information Technology, Monash University, Melbourne, VIC, Australia; Data-driven Analysis of Software (DAS) Lab, Department of Computer Science and Software Engineering, Concordia University, Montreal, QC, Canada; Singapore Management University, Singapore, Singapore",Accepted
561,The developer's dilemma: Factors affecting the decision to repay code debt,"Lenarduzzi, V. and Saarimäki, N. and Taibi, D.",ACM International Conference Proceeding Series,2019,"Technical Debt analysis is increasing in popularity as nowadays researchers and industry are adopting various tools for static code analysis to evaluate the quality of their code. Despite this, empirical studies on software projects are expensive because of the time needed to analyze the projects. In addition, the results are dificult to compare as studies commonly consider different projects. In this work, we propose the Technical Debt Dataset, a curated set of project measurement data from 33 Java projects from the Apache Software Foundation. In the Technical Debt Dataset, we analyzed all commits from separately defined time frames with SonarQube to collect Technical Debt information and with Ptidej to detect code smells. Moreover, we extracted all available commit information from the git logs, the refactoring applied with Refactoring Miner, and fault information reported in the issue trackers (Jira). Using this information, we executed the SZZ algorithm to identify the fault-inducing and - fixing commits. We analyzed 78K commits from the selected 33 projects, detecting 1.8M SonarQube issues, 62K code smells, 28K faults and 57K refactorings. The project analysis took more than 200 days. In this paper, we describe the data retrieval pipeline together with the tools used for the analysis. The dataset is made available through CSV files and an SQLite database to facilitate queries on the data. The Technical Debt Dataset aims to open up diverse opportunities for Technical Debt research, enabling researchers to compare results on common projects. © 2019 Association for Computing Machinery.",10.1145/3345629.3345630,"Tampere University, Finland",Accepted
562,Evaluating domain-specific metric thresholds: An empirical study,"Von Zitzewitz, A.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Sonargraph is a static analyzer with a focus on software architecture and metrics. The motivation to create Sonargraph came from the assumption that architectural debt (aka structural debt) is the most toxic form of technical debt. Repairing a broken architecture requires global and high-risk changes, while fixing other forms of technical debt mostly involves low-risk local changes. Therefore, the tool enables architects and developers to formally describe their architectural blueprint using a custom DSL (domain specific language). Once defined architectural rules can be checked and enforced in an automated way in all stages of the development process. This guarantees that a software system will never end up as the notorious 'big ball of mud'. Sonargraph currently supports Java, C#, C/C++ and Python and is used by hundreds of organizations worldwide. © 2019 IEEE.",10.1109/TechDebt.2019.00022,"hello2morrow Inc., Plymouth, MA, United States",Accepted
563,"Introducing debtgrep, a tool for fighting technical debt in base station software","Arcelli Fontana, F. and Avgeriou, P. and Pigazzini, I. and Roveda, R.","Proceedings - 45th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2019",2019,"Architectural smells can be detrimental to the system maintainability, evolvability and represent a source of architectural debt. Thus, it is very important to be able to understand how they evolved in the past and to predict their future evolution. In this paper, we evaluate if the existence of architectural smells in the past versions of a project can be used to predict their presence in the future. We analyzed four Java projects in 295 Github releases and we applied for the prediction four different supervised learning models in a repeated cross-validation setting. We found that historical architectural smell information can be used to predict the presence of architectural smells in the future. Hence, practitioners should carefully monitor the evolution of architectural smells and take preventative actions to avoid introducing them and stave off their progressive growth. © 2019 IEEE.",10.1109/SEAA.2019.00057,"University of Milano-Bicocca, Milan, Italy; University of Groningen, Groningen, Netherlands; Alten Italia, Milan, Italy",Accepted
564,Static software metrics for reliability and maintainability,"Lerina, A. and Nardi, L.","Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019",2019,"Code reuse by copying a code fragment with or without modification generates duplicate copies of exact or similar code fragments in a software system, known as code clones. The debate about the harmfulness of clone in ongoing in the literature, nevertheless, it is widely recognized that clones needs special considerations during software evolution. In this paper, it is proposed a quantitative analysis of technical debt values to understand if it is higher with cloned code than those without cloned code. Moreover, changes performed on these files have been analyzed by analyzing commit logs. According to our inspection on four subject systems, the technical debt of files with cloned code is significantly higher than those without cloned code. Moreover, as expected, files with cloned code are more impacted by changes. © 2019 IEEE.",10.1109/TechDebt.2019.00029,"Department of Engineering, University of Sannio, Benevento, Italy",Accepted
565,Prioritizing technical debt in database normalization using portfolio theory and data quality metrics,"Razdan, R. and Polanco, R. and Ackerman, Z. and Vidot, X. and Razdan, D.","2019 IEEE Technology and Engineering Management Conference, TEMSCON 2019",2019,"The most expensive college degree is the one that is never used. A great deal of the issues with college debt can be traced to unfinished degrees. Both issues are symptoms of the fact that the current system for career discovery is completely inadequate for the task at hand. It starts in kindergarten and continues through high school, 12 years in which students are segregated from the rest of society. The local support function (teachers and guidance counselors) cannot help much because academics have limited engagement with industry. Thus, for most students, their career choices are often driven by their view of the range of professions from popular media. Unfortunately, only the professions with drama tend to be highlighted in the media, so most professions are invisible to students.Before the internet revolution, it was very difficult to impact this situation. However, with the availability of the internet, it is possible to build an active, engaging, structured information environment that can help students (or even adults) interested in careers explore them in much more detail. Further, it is possible to build connections that humanize this very difficult process. Beyond the functional nature of the platform, the higher-level objective of SAMWISE is to build a mechanism for the transmission of wisdom from professionals to students. For Engineering Management, building the visibility of the possible career choices through outreach efforts is critical to the success of the enterprise. This paper describes a work-in-progress system focused on solving these issues. © 2019 IEEE.",10.1109/TEMSCON.2019.8813548,,Rejected
566,Was self-admitted technical debt removal a real removal?: An in-depth perspective,"Lafi, M. and Botros, J.W. and Kafaween, H. and Al-Dasoqi, A.B. and Al-Tamimi, A.","2019 IEEE Jordan International Joint Conference on Electrical Engineering and Information Technology, JEEIT 2019 - Proceedings",2019,"Software evolution is an inevitable need in most of the modern businesses, software that doesn't accommodate changes is hard to survive the market needs. Also, software changes can affect the overall design of the software and sometimes in a corrupting way, affecting the maintainability and evolvability of the software, which introduces technical debt that needs to be solved by continuous refactoring and restructuring of software. Code smells are useful indicators to identify the parts of the code to be refactored to improve the overall maintainability of the software. We present an overview of software code smells, detection and analysis mechanisms and difficulties. Also, we address the effect of refactoring on software maintainability and error-proneness of software. © 2019 IEEE.",10.1109/JEEIT.2019.8717457,"Department of Software Engineering, AL-Zaytoonah University of Jordan, Amman, Jordan",Accepted
567,Identifying architectural technical debt in Android applications through automated compliance checking,"Tian, F. and Lu, F. and Liang, P. and Babar, M.A.","Proceedings of the International Conference on Software Engineering and Knowledge Engineering, SEKE",2020,"Architecture Smells (ASs), as one source of technical debt, indicate underlying problems at a high level of systems and negatively impact various system qualities, such as maintainability and evolvability. Detecting and refactoring ASs requires the relevant architectural knowledge and experience. Therefore, gathering the knowledge of ASs from various sources can facilitate ASs detecting and refactoring. However, manually identifying AS knowledge is time-consuming. Automatically and correctly identifying AS-related posts from Stack Overflow is a step toward utilizing the AS knowledge to help developers better maintain their systems. In this work, we propose an approach to automatically identify AS-related posts from Stack Overflow (SoF) by using machine learning algorithms. We evaluate the performance of 12 classifiers based on 3 feature extraction techniques and 4 classification algorithms with a created dataset of SoF posts (including 208 AS-related posts and 187 AS-unrelated posts). The results demonstrate that the SVM algorithm with Word2Vec achieved the best overall performance with an accuracy of 0.650, a precision of 0.613, a recall of 0.905, and an F1-score of 0.731. These results imply that the obtained model of the AS-related posts identification can be used to aid developers and researchers in collecting AS discussions from SoF. © 2020 Knowledge Systems Institute Graduate School. All rights reserved.",10.18293/SEKE2020-084,"School of Computer Science, Wuhan University, Wuhan, China; School of Computer Science, University of Adelaide, Adelaide, Australia",Rejected
568,Prioritize technical debt in large-scale systems using codescene,,"Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,The proceedings contain 15 papers. The topics discussed include: detecting bad smells with machine learning algorithms: an empirical study; carrot and stick approaches when managing technical debt; towards collaborative technical debt management in systems of systems; an empirical study on self-fixed technical debt; the prevalence of the technical debt concept in Serbian IT industry: results of a national-wide survey; trade-offs in managing risk and technical debt in industrial research labs: an experience report; how junior developers deal with their technical debt?; towards microservice smells detection; Skuld: a self-learning tool for impact-driven technical debt management; and experiences with technical debt and management strategies in production systems engineering.,,,Rejected
569,Design debt prioritization: A design best practice-based approach,,"Proceedings - 2020 8th Edition of the International Conference in Software Engineering Research and Innovation, CONISOFT 2020",2020,The proceedings contain 32 papers. The topics discussed include: towards the use of a framework to make technical debt visible; context-based model of the progression of information capture in software requirements elicitation; customized diagnostic tool for the security maturity level of the enterprise information based on ISO/IEC 27001; a systematic literature review on machine learning for automated requirements classification; literature based modeling learning: an imaginative assignment to learn software modeling; towards the implementation of an attention-based neural machine translation with artificial pronunciation for Nahuatl as a mobile application; a metadata application profile to structure a scientific database for social network analysis (SNA); and a tool for reducing implementation defects for requirements based on large decision tables: towards a semantic gap reduction.,,,Rejected
570,Managing digital platforms in user organizations: The interactions between digital options and digital debt,"Malm, J. and Causevic, A. and Lisper, B. and Eldh, S.","Proceedings - 2020 IEEE/ACM 1st International Conference on Automation of Software Test, AST 2020",2020,"During testing of parallel systems, which allow asynchronous communication, test flakiness is sometimes avoided by explicitly inserting delays in test code. The choice of delay approach can be a trade-off between short-term gain and long-term robustness. In this work, we present an approach for automatic detection and classification of delay insertions, with the goal of identifying those that could be made more robust. The approach has been implemented using an open-source compiler tooling framework and validated using test code from the telecom industry. © 2020 Association for Computing Machinery.",10.1145/3387903.3389320,"Mälardalen University, Västerås, Sweden; Ericsson Ab, Stockholm, Sweden",Rejected
571,Forecasting of Power Corporations' Default Probability with Nonlinear Kalman Filtering,"Diaz-Pace, J.A. and Tommasel, A. and Pigazzini, I. and Fontana, F.A.","2020 IEEE Congreso Bienal de Argentina, ARGENCON 2020 - 2020 IEEE Biennial Congress of Argentina, ARGENCON 2020",2020,"Technical debt indexes are metrics for assessing the quality of a software system. Both academic and commercial tools have begun to provide computations of such indexes based on design violations and smells (e.g., cycles among system elements). When computing a debt index for a given project, a common use case is that engineers look at the index values for spotting design issues that negatively affect system evolution and quality. In this context, those smells being critical for the system architecture should be promptly identified soastoe valuate proper remediation actions. However, the interpretation of an index value in terms of problematic smells is usually a manual and labor-intensive task for engineers. To help with this task, we propose a tool called Sen4Smells that performs an automated sensitivity analysis for a given debt index based on the evolution of both the index values and the corresponding smells across (past) system versions. The Sen4Smells output is a ranking of smells that, due to their variations or instability, are major contributors to the debt index, and thus, can impact on architecture quality. Sen4Smells is designed as a pipeline that combines information from existing tools for smell detection, predefined d ebt i ndex f ormulas, and the Sobol method for sensitivity analysis. As a demonstration of the tool functionality, we briefly present implementations for the Arcan and Sonargraph tools with their respective debt indexes. ©2020 IEEE",10.1109/ARGENCON49523.2020.9505535,"ISISTAN, CONICET, UNICEN University, Argentina; Department of Informatics, Systems and Communication, Milano-Bicocca University, Italy",Accepted
572,Early evaluation of technical debt impact on maintainability,"Falco, M. and Scott, E. and Robiolo, G.","2020 IEEE Congreso Bienal de Argentina, ARGENCON 2020 - 2020 IEEE Biennial Congress of Argentina, ARGENCON 2020",2020,"Product owners need to comprehend the product quality level, in a synthetic and intuitive way to facilitate the decision of accepting or rejecting the iteration. This article presents the basis of an automated framework to measure and monitor the quality level of a software product, within each iteration. This framework is based on the Product Quality Evaluation Method (PQEM), which was designed by the authors and it allows the evaluation of the quality characteristics of a software product, using the Goal-Question-Metric approach, the ISO/IEC 25010, ISO/IEC 25023, the extension made of test coverage concept to quality coverage applied to each quality characteristic, and technical debt and waste. Within the automated framework, the measurement is semi-automatic which is shown in the illustrative example. The development of the framework will begin shortly, and it is expected to carry on new measurements on new iterations of an application. © 2020 IEEE",10.1109/ARGENCON49523.2020.9505405,"LIDTUA, CONICET, Facultad de Ingeniería, Universidad Austral Pilar, Buenos Aires, Argentina; Institute of Computer Science, University of Tartu, Tartu, Estonia; LIDTUA, Facultad de Ingeniería, Universidad Austral Pilar, Buenos Aires, Argentina",Accepted
573,Assessing technical debt in automated tests with codescene,"Counsell, S. and Swift, S. and Arzoky, M. and Destefnas, G.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"While many OO class features have been explored in detail, little work in the past has explored the characteristics of test classes. In this exploratory paper, we investigate traits of these classes which we believe demonstrate distinct differences between test classes and production classes. We explore differences between the number of clones, the number of comments and the maintainability of each class type. We believe that developers unjustifiably treat test classes as second-class citizens and we would therefore expect test classes to contain a) far more clones, b) a far lower (i.e., poorer) comment density and, c) worse maintainability levels. Six open-source systems were used as a basis of the work. Results showed that all three suppositions were indeed supported; this suggests the need to explore test classes in more detail and to remedy this clear problem that contributes to the level of technical debt. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-64148-1_19,"Department of Computer Science, Brunel University, London, United Kingdom",Rejected
574,What Flows through a Software Value Stream?,"Kachmar, M. and Kaeli, D.","Proceedings - IEEE Computer Society's Annual International Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunications Systems, MASCOTS",2020,"In today's enterprise storage systems, supported data services such as snapshot delete or drive rebuild can result in tremendous performance overhead if executed inline along with heavy foreground IO, often leading to missing Service Level Objectives (SLOs). Typical storage system applications such as Virtual Desktop Infrastructure (VDI) or web services follow a repetitive high/low workload pattern that can be learned and forecasted. We propose a priority-based background scheduler that learns this pattern and allows storage systems to maintain peak performance and meet service level objectives (SLOs) while supporting a number of data services. When foreground IO demand intensifies, system resources are dedicated to service foreground IO requests and any background processing that can be deferred are recorded to be processed in future idle cycles as long as our forecaster predicts that the storage pool has remaining capacity. The smart background scheduler adopts a resource partitioning model that allows both foreground and background IO to execute together as long as foreground IOs are not impacted, harnessing any free cycles to clear background debt. Using traces from VDI and web services applications, we show how our technique can out-perform a static policy that sets fixed limits on the deferred background debt and reduces SLO violations from 54.6% (when using a fixed background debt watermark), to only 6.2 % when dynamically adjusted by our smart background scheduler. © 2020 IEEE.",10.1109/MASCOTS50786.2020.9285967,"Northeastern University, Department of Electrical and Computer Engineering, Boston, MA, United States",Rejected
575,SPARTA: Security & Privacy Architecture Through Risk-Driven Threat Assessment,"Ionescu, T.B. and Schlund, S. and Schmidbauer, C.",Advances in Intelligent Systems and Computing,2020,"This paper introduces the notion of epistemic debt as an analytical tool for understanding and managing the effects of technical ignorance in smart manufacturing. Drawing on the concepts of technical and social debt from software engineering, the metaphor of epistemic debt refers to the implied long-term costs of rework (e.g., redesign, replacement, reconfiguration or systems and/or organizational structures) caused by a lack of understanding and/or means of knowing the internals of complex software-based manufacturing systems essential to the value chain and core business of an organization. After defining the concept, we identify three of its sources and propose strategies for coping with epistemic debt in manufacturing. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-20040-4_8,"Institute of Management Science, Technische Universität Wien, Theresianumgasse 27, Vienna, 1040, Austria",Rejected
576,A Review on Hidden Debts in Machine Learning Systems,"Kovacevic, I. and Shafigh, A.S. and Glisic, S. and Lorenzo, B. and Hossain, E.",IEEE Transactions on Network and Service Management,2020,"With network slicing, physical networks are partitioned into multiple virtual networks tailored to serve different types of service with their specific requirements. In order to optimize the utilization of network resources for delay-critical applications, we propose a new multi-domain network virtualization framework based on a novel multipath multihop delay model. This framework encompasses a novel hierarchical orchestration mechanism for mapping network slices onto physical resources and a mechanism for dynamic slice resizing. The main idea is to locally redefine the delay requirements on each network domain depending on the conditions in the rest of the network. Delays larger than threshold (debt) are allowed in certain domains if there is a possibility to compensate such excessive delays in other segments of the network that can transmit the messages with less latency (credit). This tradeoff or delay threshold redefinition on different segments of the route is referred to as network latency equalization. For performance comparison, minimum cost routing with latency constraints is used as a baseline. We show that our approach enables significantly better utilization of the network resources measured in the number of slices with the same latency requirements that can be accommodated in the network. © 2004-2012 IEEE.",10.1109/TNSM.2020.3008005,"Centre for Wireless Communications, University of Oulu, Oulu, Finland; Department of Electrical and Computer Engineering, University of Massachusetts, Amherst, MA, United States; Department of Electrical and Computer Engineering, University of Manitoba, Winnipeg, MB, Canada; Atlantic Research Center for Information and Communication Technologies, University of Vigo, Vigo, 36310, Spain",Rejected
577,Preventing Technical Debt for Automated Production System Maintenance Using Systematic Change Effort Estimation with Considering Contingent Cost,"Rantala, L. and Mäntylä, M.",Software Quality Journal,2020,"Self-admitted technical debt refers to sub-optimal development solutions that are expressed in written code comments or commits. We reproduce and improve on a prior work by Yan et al. (2018) on detecting commits that introduce self-admitted technical debt. We use multiple natural language processing methods: Bag-of-Words, topic modeling, and word embedding vectors. We study 5 open-source projects. Our NLP approach uses logistic Lasso regression from Glmnet to automatically select best predictor words. A manually labeled dataset from prior work that identified self-admitted technical debt from code level commits serves as ground truth. Our approach achieves + 0.15 better area under the ROC curve performance than a prior work, when comparing only commit message features, and + 0.03 better result overall when replacing manually selected features with automatically selected words. In both cases, the improvement was statistically significant (p < 0.0001). Our work has four main contributions, which are comparing different NLP techniques for SATD detection, improved results over previous work, showing how to generate generalizable predictor words when using multiple repositories, and producing a list of words correlating with SATD. As a concrete result, we release a list of the predictor words that correlate positively with SATD, as well as our used datasets and scripts to enable replication studies and to aid in the creation of future classifiers. © 2020, The Author(s).",10.1007/s11219-020-09520-3,"M3S / ITEE / University of Oulu, P.O.B. 4500, 90014 University of Oulu, Oulu, Finland",Accepted
578,The Evolutionary Optimization of a Company's Return on Equity Factor: Towards the Agent-Based Bio-Inspired System Supporting Corporate Finance Decisions,"Maikantis, T. and Tsintzira, A.-A. and Ampatzoglou, A. and Arvanitou, E.-M. and Chatzigeorgiou, A. and Stamelos, I. and Bibi, S. and Deligiannis, I.",ACM International Conference Proceeding Series,2020,"Modularity is one of the four key principles of software design and architecture. According to this principle, software should be organized into modules that are tightly linked internally (high cohesion), whereas at the same time as independent from other modules as possible (low coupling). However, in practice, this principle is violated due to poor architecting design decisions, lack of time, or coding shortcuts, leading to a phenomenon termed as architectural technical debt (ATD). To alleviate this problem (lack of architectural modularity), the most common solution is the application of a software refactoring, namely Move Class - i.e., moving classes (the core artifact in object-oriented systems) from one module to another. To identify Move Class refactoring opportunities, we employ a search-based optimization process, relying on optimization metrics, through which optimal moves are derived. Given the extensive search space required for applying a brute-force search strategy, in this paper, we propose the use of a genetic algorithm that re-arranges existing software classes into existing or new modules (software packages in Java, or folders in C++). To validate the usefulness of the proposed refactorings, we performed an industrial case study on three projects (from the Aviation, Healthcare, and Manufacturing application domains). The results of the study indicate that the proposed architecture reconstruction is able to improve modularity, improving both coupling and cohesion. The obtained results can be useful to practitioners through an open source tool; whereas at the same point, they open interesting future work directions. © 2020 ACM.",10.1145/3437120.3437292,"Apostolos Ampatzoglou Elvira-Maria Ar-Vanitou, Alexander Chatzigeorgiou Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Informatics, Aristotle University of Thessaloniki, Thessaloniki, Greece; Department of Electrical and Computer Engineering, University of Western Macedonia, Kozani, Greece",Accepted
579,Experiences applying automated architecture analysis tool suites,"De Leon-Sigg, M. and Vazquez-Reyes, S. and Rodriguez-Avila, D.","Proceedings - 2020 8th Edition of the International Conference in Software Engineering Research and Innovation, CONISOFT 2020",2020,"Technical debt concept has been in use since the 90s's decade. Several processes, techniques and tools, such as those related with software maintenance and risk control, are used to manage, prevent, measure and reduce technical debt. Technical debt management includes activities to identify, measure, prioritize, repay, and monitor it, but one of the main issues related with management resides in the complexity to make technical debt visible to organizations. In this paper is presented the application of the Normative Process Framework to make technical debt visible with a large system developed by students of software engineering. The Normative Process Framework is used in conjunction with a process to find technical debt and document it in a simple format. Results show how technical debt was made visible for that system in a simplified way, by using documentation generated during development, and considering not only code, but also other software assets. Once technical debt is made visible is easier to evaluate and prioritize it, to establish a convenient set of actions to control it. © 2020 IEEE.",10.1109/CONISOFT50191.2020.00022,"Universidad Autónoma de Zacatecas, Ingenieriá de Software, Zacatecas, Mexico",Accepted
580,Specification and automatic checking of architecture constraints on object oriented programs,"Lenarduzzi, V. and Lomio, F. and Saarimäki, N. and Taibi, D.",Journal of Systems and Software,2020,"Background: The migration from a monolithic system to microservices requires a deep refactoring of the system. Therefore, such a migration usually has a big economic impact and companies tend to postpone several activities during this process, mainly to speed up the migration itself, but also because of the demand for releasing new features. Objective: We monitored the technical debt of an SME while it migrated from a legacy monolithic system to an ecosystem of microservices. Our goal was to analyze changes in the code technical debt before and after the migration to microservices. Method: We conducted a case study analyzing more than four years of the history of a twelve-year-old project (280K Lines of Code) where two teams extracted five business processes from the monolithic system as microservices. For the study, we first analyzed the technical debt with SonarQube and then performed a qualitative study with company members to understand the perceived quality of the system and the motivation for possibly postponed activities. Results: The migration to microservices helped to reduce the technical debt in the long run. Despite an initial spike in the technical debt due to the development of the new microservice, after a relatively short period of time the technical debt tended to grow slower than in the monolithic system. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110710,"LUT University, Finland; Tampere University, Finland",Accepted
581,Predicting Default Payment of Credit Card Users: Applying Data Mining Techniques,"Feinberg, A.",Proceedings - Annual Reliability and Maintainability Symposium,2020,"In this paper we provide a simple tool for government that can be used by any political committee to do proper government problem solving and faster legislation. We exemplify this for social economic problem solving to help ensure reliability of macroeconomics in political decision making. Today, not just in the United States, but in governments across the globe, policies are predicated on bias rather than problem solving. No greater is the problem than in the USA where partisan politics dominate, along with special interest lobbyist groups. These can badly influence critical decision making and create stumbling blocks in passing legislation. As a result, government has become highly unreliable, for example, the handling of the national debt. © 2020 IEEE.",10.1109/RAMS48030.2020.9153680,"DfRSoftware Company, 9510 Centerwood Drive, Raleigh, NC  27617, United States",Rejected
582,Chosing a Programming Language for a New Project from a Code Quality Perspective,"Kolahdouz-Rahimi, S. and Lano, K. and Sharbaf, M. and Karimi, M. and Alfraihi, H.",Journal of Systems and Software,2020,"The quality of model transformations (MT) has high impact on model-driven engineering (MDE) software development approaches, because of the central role played by transformations in MDE for refining, migrating, refactoring and other operations on models. For programming languages, a popular paradigm for code quality is the concept of technical debt (TD), which uses the analogy that quality flaws in code are a debt burden carried by the software, which must either be redeemed by expending specific effort to remove its flaws, or be tolerated, with ongoing additional costs to maintenance due to the flaws. Whilst the analysis and management of quality flaws and TD in programming languages has been investigated in depth over several years, less research on the topic has been carried out for model transformations. In this paper we investigate the characteristics of quality flaws and technical debt in model transformation languages, based upon systematic analysis of over 100 transformation cases in four leading MT languages. Based on quality flaw indicators for TD, we identify significant differences in the level and kinds of technical debt in different MT languages, and we propose ways in which TD in MT can be reduced and managed. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110684,"MDSE Research Group, Dept. of Software Engineering, University of Isfahan, Iran; Dept. of Informatics, King's College London, London, United Kingdom; Dept. of Information Systems, Princess Nourah bint Abdulrahman University, Saudi Arabia",Accepted
583,"Technical debt management in Brazilian software organizations: A need, an expectation, or a fact?","Vasilieva, E.N. and Zenov, P.E. and Artamonova, Y.S. and Brega, G.V.","2020 International Conference on Engineering Management of Communication and Technology, EMCTECH 2020 - Proceedings",2020,"The article deals with several capacious concepts. Firstly, the article deals with the concept of 'safety' which we understand within the framework of V.N. Kuznetsov's theory of sociology of safety. Secondly, the article deals with the 'phenomenon of trust', which makes it possible to clarify the concept of 'security'. Thirdly, the article deals with the concept of 'emergency situation', which simulates the presence of danger. Finally, the article deals with the concepts of PR (public relations) and GR (government relations), which define the essence of the activity on interaction with society and government authorities, actively used by business actors, SONO (socially-oriented non-profit organizations), as well as other institutions in the processes of social and political representation of interests. The authors describe the process of structuring PR and GR technologies in the Russian Federation through modern communication channels, identify the most effective channels of interaction with the state and society, allowing to increase trust and form a safe space for economic activity. The conclusions presented in the work are based on the data of the empirical study conducted by the method of expert poll of the representatives of SONO, business and authorities in the Volgograd region (number of respondents - 15 experts, the method of sampling 'Debt-snowball method'). © ©2020 IEEE.",10.1109/EMCTECH49634.2020.9261513,"Volgograd State University, Volgograd, Russian Federation; Moscow Technical University of Communications and Informatics, Moscow, Russian Federation; Financial University under the Government of the Russian Federation, Moscow, Russian Federation",Rejected
584,A scalable and efficient approach for compiling and analyzing commit history,"Liu, W.K. and So, M.K.P.",Information (Switzerland),2020,"In this paper, we incorporate a GARCH model into an artificial neural network (ANN) for financial volatility modeling and estimate the parameters in Tensorflow. Our goal was to better predict stock volatility. We evaluate the performance of the models using the mean absolute errors of powers of the out-of-sample returns between 2 March 2018 and 28 February 2020. Our results show that our modeling procedure with an ANN can outperform the standard GARCH(1,1) model with standardized Students t distribution. Our variable importance analysis shows that Net Debt/EBITA is among the six most important predictor variables in all of the neural network models we have examined. The main contribution of this paper is that we propose a Long Short-Term Memory (LSTM) model with a GARCH framework because LSTM can systematically take into consideration potential nonlinearity in volatility structure at different time points. One of the advantages of our research is that the proposed models are easy to implement because our proposed models can be run in Tensorflow, a Python package that enables fast and automatic optimization. Another advantage is that the proposed models enable variable importance analysis. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/info11100489,"Department of Information Systems, Business Statistics and Operations Management, The Hong Kong University of Science and Technology, Clear Water Bay, Hong Kong",Rejected
585,A case study of the effects of architecture debt on software evolution effort,"Almarimi, N. and Ouni, A. and Mkaouer, M.W.",Knowledge-Based Systems,2020,"Community smells are symptoms of organizational and social issues within the software development community that often lead to additional project costs. Recent studies identified a variety of community smells and defined them as sub-optimal patterns connected to organizational-social structures in the software development community. To early detect and discover existence of potential community smells in a software project, we introduce, in this paper, a novel machine learning-based detection approach, named CSDETECTOR, that learns from various existing bad community development practices to provide automated support in detecting such community smells. In particular, our approach learns from a set of organizational-social symptoms that characterize the existence of potential instances of community smells in a software project. We built a detection model using Decision Tree by adopting the C4.5 classifier to identify eight commonly occurring community smells in software projects. To evaluate the performance of our approach, we conduct an empirical study on a benchmark of 74 open source projects from Github. Our statistical results show a high performance of CSDETECTOR, achieving an average accuracy of 96% and AUC of 0.94. Moreover, our results indicate that the CSDETECTOR outperforms two recent state-of-the-art techniques in terms of detection accuracy. Finally, we investigate the most influential community-related metrics to identify each community smell type. We found that the number of commits and developers per time zone, the number of developers per community, and the social network betweenness and closeness centrality are the most influential community characteristics. © 2020",10.1016/j.knosys.2020.106201,"ETS Montreal, University of Quebec, QC, Canada; Rochester Institute of TechnologyNY, United States",Accepted
586,Enhanced feature selection using word embeddings for self-admitted technical debt identification,"Han, D. and Ragkhitwetsagul, C. and Krinke, J. and Paixao, M. and Rosa, G.","Proceedings - 20th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2020",2020,"Many software developers perceive technical debt as the biggest problems in their projects. They also perceive code reviews as the most important process to increase code quality. As inconsistent coding style is one source of technical debt, it is no surprise that coding convention violations can lead to patch rejection during code review. However, as most research has focused on developer's perception, it is not clear whether code reviews actually prevent the introduction of coding convention violations and the corresponding technical debt.Therefore, we investigated how coding convention violations are introduced, addressed, and removed during code review by developers. To do this, we analysed 16, 442 code review requests from four projects of the Eclipse community for the introduction of convention violations. Our result shows that convention violations accumulate as code size increases despite changes being reviewed. We also manually investigated 1, 268 code review requests in which convention violations disappear and observed that only a minority of them have been removed because a convention violation has been flagged in a review comment. The investigation results also highlight that one can speed up the code review process by adopting tools for code convention violation detection. © 2020 IEEE.",10.1109/SCAM51674.2020.00010,"Amazon, Germany; Faculty of Ict Mahidol University, Seru, Thailand; University College London, United Kingdom; University of Fortaleza, Brazil; University of Molise, Italy",Accepted
587,"Prescribing the electric power at wind power systems, based on variable weather conditions","Stefano, M.D. and Pecorelli, F. and Tamburri, D.A. and Palomba, F. and Lucia, A.D.","Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020",2020,"Software development is known to be a social activity that involves developers, project managers, and stakeholders. Recent studies have proved a direct relation between social and technical aspects, e.g., poor coordination among developers may lead to an increase of technical debt in source code. The so-called socio-technical congruence measures the level of coordination existing in an organization at their different levels. In this late-breaking idea paper, we propose a novel way to employ the socio-technical congruence in the context of source code quality improvement: we design a community-based refactoring recommendation approach that aims at optimizing socio-technical congruence while keeping into account the source code dependencies among the components of a software project. A search-based algorithm is employed to this purpose and we envision the novel approach to be suitable for providing Extract Class and Extract Package refactoring recommendations. © 2020 IEEE.",10.1109/ICSME46990.2020.00094,"SeSa Lab University of Salerno, Italy; Jheronimus Academy of Data Science, Netherlands",Rejected
588,Integrating traceability within the IDE to prevent requirements documentation debt,"Rios, N. and Mendes, L. and Cerdeiral, C. and Magalhães, A.P.F. and Perez, B. and Correal, D. and Astudillo, H. and Seaman, C. and Izurieta, C. and Santos, G. and Oliveira Spínola, R.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"[Context and Motivation] It is common for teams to take shortcuts during software development that, in the future, will lead to maintainability issues and affect productivity and development cost. Different types of technical debt may affect software projects, including those associated with software documentation. Although there are many studies on technical debt, few focus on documentation debt in an industrial environment. [Question/Problem] We aimed to identify how software practitioners perceive the occurrence of documentation debt in their projects. We present a combined analysis of the results from two complementary studies: a survey (InsighTD) and an interview-based case study. [Principal Ideas/Results] We provide a list of causes and effects of documentation debt, along with practices that can be used to deal with it during software development projects. [Contribution] We find that documentation debt is strongly related to requirements issues. Moreover, we propose a theoretical framework, which provides a comprehensive depiction of the documentation debt phenomenon. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-44429-7_4,"Federal University of Bahia, Salvador, BA, Brazil; Federal University of the State of Rio de Janeiro, Rio de Janeiro, RJ, Brazil; University of Los Andes, Bogota, Colombia; University Francisco de Paula Santander, Cúcuta, Colombia; Univ. Técnica Federico Santa María, Valparaíso, Chile; University of Maryland Baltimore County, Baltimore, MD, United States; Montana State University, Bozeman, MT, United States; Salvador University, Salvador, BA, Brazil",Accepted
589,Advances in Using Agile and Lean Processes for Software Development,,"Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020",2020,The proceedings contain 106 papers. The topics discussed include: achieving reliable sentiment analysis in the software engineering domain using BERT; CrossASR: efficient differential testing of automatic speech recognition via text-to-speech; newcomer candidate: characterizing contributions of a novice developer to GitHub; failures and fixes: a study of software system incident response; exploring Bluetooth communication protocols in Internet-of-things software development; who (self) admits technical debt?; refactoring recommendations based on the optimization of socio-technical congruence; graph neural network-based vulnerability predication; database-access performance antipatterns in database-backed web applications; and verifying and testing concurrent programs using constraint solver based approaches.,,,Rejected
590,TI-one: Active research data management in a modern philosophy department,"Berg, V. and Birkeland, J. and Nguyen-Duc, A. and Pappas, I.O. and Jaccheri, L.",Journal of Systems and Software,2020,"Context: Startups aim at scaling their business, often by developing innovative products with limited human and financial resources. The development of software products in the startup context is known as opportunistic, agility-driven, and with high tolerance for technical debt. The special context of hardware startups calls for a better understanding of state-of-the-practice of hardware startups activities. Objective: This study aimed to identify whether and how startups can achieve product quality while maintaining focus on agility. Method: We conducted an exploratory study with 13 hardware startups, collecting data through semi-structured interviews and analysis of documentation. We proposed an integrative model of agility and quality in hardware startups. Results: Agility in hardware startups is complex and not achieved through adoption of fast-paced development practices alone. Hardware startups follow a quality-driven approach for development of core components, where frequent user testing is a measure for early debt management. Hardware startups often lack mindset and strategies for achieving long-term quality in early stages. Conclusions: Hardware startups need attention to hardware quality to allow for evolutionary prototyping and speed. Future research should focus on defining quality-driven practices that contribute to agility, and strategies and mindsets to support long-term quality in the hardware startup context. © 2020 The Author(s)",10.1016/j.jss.2020.110599,"Department of Computer Science, Norwegian University of Science and Technology, Sem Sælands vei 9, Trondheim, 7034, Norway; Department of Business and IT, University of South-Eastern Norway, Lærerskoleveien 40, Notodden, 3679, Norway; Department of Information Systems, University of Agder, Universitetsveien 25, Kristiansand, 4630, Norway",Rejected
591,Towards an architectural debt index,"Janes, A. and Lenarduzzi, V.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"Many of today's software systems are maintained over years or even decades. To ensure that software remains useful, new features have to be added or old features have to be adapted to respond to new or changed requirements. As time goes on, some of the features become obsolete, i.e., are not needed anymore. Typically, these features are not removed because of various reasons, e.g., because removing them might be considered too costly, the costs of keeping unused features is considered low, or because of the ""sunk cost fallacy"", i.e., that a feature is considered worth to keep because of the previously invested resources (time, money or effort) to build it. The consequences of keeping unused source code can impact maintainability, technical debt, performance, and extensibility of the system. This can lead to lower development productivity and to a reduced innovation ability, consequently reducing competitiveness on the market. This paper aims to present an approach to identify features based on their value and on costs for keeping or removing them. © 2020 IEEE.",10.1109/SEAA51224.2020.00070,"Free University of Bozen-Bolzano, Bozen-Bolzano, Italy; LUT University, Lahti, Finland",Accepted
592,A multiplex financial network approach to policy evaluation: the case of euro area Quantitative Easing,"Freire, S. and Passos, A. and Mendonca, M. and Sant'Anna, C. and Spinola, R.O.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"Context: System modeling usually precedes coding activities during software development. Addressing model smells in the upfront can avoid their propagation to the source code. Technical debt (TD) affects several software development phases, including design, but little is still known about it at the modeling level. Goal: Investigate whether applying refactoring procedures in UML class diagrams improves the quality of the automatically generated code in terms of TD (code debt) reduction. Method: We perform three replications of an empirical study following the same protocol used in the original study, but with variations on the: (1) round- trip engineering tool, (2) code issue identification tool, and (3) analyzed class diagram. Each study considered two sets of refactoring tasks. The first applied successive model refactoring sessions in a class diagram and analyzed their resulting automatically generated code. The second applied successive code refactoring sessions and analyzed their resulting automatically generated model. Results: There is a weak relationship between the analyzed model smells and code issues. Round-trip engineering tools influence the presence of code issues. Lastly, code issues identification tools mostly consider code formatting problems, in detriment of design issues smells. Conclusion: Results confirm the findings of the original study and motivate further investigation on the correspondence between model smells and code issues to prevent code debt at the model level. © 2020 IEEE.",10.1109/SEAA51224.2020.00064,"Federal University of Bahia, Federal Institute of Ceara, Brazil; Federal Institute of Bahia, Brazil; Salvador University State, University of Bahia, Brazil",Accepted
593,Design Pseudo Ground Truth with Motion Cue for Unsupervised Video Object Segmentation,"Wen, F. and Nagy, C. and Lanza, M. and Bavota, G.",IEEE International Conference on Program Comprehension,2020,"Software systems are continuously modified to implement newfeatures, to fix bugs, and to improve quality attributes. Most of theseactivities are not atomic changes, but rather the result of severalrelated changes affecting different parts of the code. For this reason,it may happen that developers omit some of the needed changesand, as a consequence, leave a task partially unfinished, introducetechnical debt or, in the worst case scenario, inject bugs. Knowingthe changes that are mistakenly omitted by developers can helpin designing recommender systems able to automatically identifyrisky situations in which, for example, the developer is likely to bepushing an incomplete change to the software repository.We present a qualitative study investigating ""quick remedy commits""performed by developers with the goal of implementingchanges omitted in previous commits. With quick remedy commitswe refer to commits that (i) quickly follow a commit performed bythe same developer in the same repository, and (ii) aim at remedying issues introduced as the result of code changes omitted in theprevious commit (e.g., fix references to code components that havebeen broken as a consequence of a rename refactoring). Through amanual analysis of 500 quick remedy commits, we define a taxonomy categorizing the types of changes that developers tend to omit.The defined taxonomy can guide the development of tools aimedat detecting omitted changes, and possibly autocomplete them. © 2020 Copyright held by the owner/author(s). Publication rights licensed to ACM.",10.1145/3387904.3389266,"Software Institute, Usi Università della Svizzera Italiana, Lugano, Switzerland",Rejected
594,Adoption issues in DevOps from the perspective of continuous delivery pipeline,"Arsenopoulos, A. and Marinakis, V. and Koasidis, K. and Stavrakaki, A. and Psarras, J.","11th International Conference on Information, Intelligence, Systems and Applications, IISA 2020",2020,"Energy poverty is broadly understood as the inability of households to maintain adequate levels of energy services at an affordable cost, within an economically developed national context. Under the Energy Efficiency Directive (2012/27/EU), Member States must set up an energy efficiency obligation scheme that requires energy companies to achieve yearly energy savings in terms of annual sales to final consumers (Article 7). As such, energy companies need to design and implement measures that help final consumers improve the energy efficiency of their dwellings. A share of measures is required to be implemented as a priority among vulnerable households, including those affected by energy poverty, and where appropriate, in social housing. In this context, the aim of this paper is to present decision support tools to help utilities and energy suppliers effectively: (a) identify energy poor households; (b) select the most appropriate schemes to include under their Energy Efficiency Obligation and elaborate Energy Poverty Action Plans; (c) monitor their effectiveness and evaluate their impact. In this way, the proposed tools support utilities and energy suppliers to fulfil their energy efficiency obligations, as well as improve public relations, promote Corporate Social Responsibility strategies, reduce debt and overhead in managing debt and enhance their public image. © 2020 IEEE.",10.1109/IISA50023.2020.9284363,"Institute of Communication and Computer Systems, Athens, Greece; Institute for European Energy and Climate Policy, Amsterdam, Netherlands",Rejected
595,JCaliper: Search-based technical debt management,"Aversano, L. and Carpenito, U. and Iammarino, M.",Information (Switzerland),2020,"The evolution of software systems often leads to its architectural degradation due to the presence of design problems. In the literature, design smells have been defined as indicators of such problems. In particular, the presence of design smells could indicate the use of constructs that are harmful to system maintenance activities. In this work, an investigation on the nature and presence of design smells has been performed. An empirical study has been conducted considering the complete history of eight software systems, commit by commit. The detection of instances of multiple design smell types has been performed at each commit, and the analysis of the relationships between the detected smells and the maintenance activities, specifically due to refactoring activities, has been investigated. The proposed study evidenced that classes affected by design smells are more subject to change, especially when multiple smells are detected in the same classes. Moreover, it emerged that in some cases these smells are removed, and this occurs involving more smells at the same time. Finally, results indicate that smells removals are not correlated to the refactoring activities. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/INFO11070348,"Department of Engineering, University of Sannio, Benevento, 82100, Italy",Accepted
596,Automated measurement of technical debt: A systematic literature review,"Cruz, D. and Santana, A. and Figueiredo, E.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Bad smells are symptoms of bad design choices implemented on the source code. They are one of the key indicators of technical debts, specifically, design debt. To manage this kind of debt, it is important to be aware of bad smells and refactor them whenever possible. Therefore, several bad smell detection tools and techniques have been proposed over the years. These tools and techniques present different strategies to perform detections. More recently, machine learning algorithms have also been proposed to support bad smell detection. However, we lack empirical evidence on the accuracy and efficiency of these machine learning based techniques. In this paper, we present an evaluation of seven different machine learning algorithms on the task of detecting four types of bad smells. We also provide an analysis of the impact of software metrics for bad smell detection using a unified approach for interpreting the models' decisions. We found that with the right optimization, machine learning algorithms can achieve good performance (F1 score) for two bad smells: God Class (0.86) and Refused Parent Bequest (0.67). We also uncovered which metrics play fundamental roles for detecting each bad smell. © 2020 ACM.",10.1145/3387906.3388618,"Federal University of Minas Gerais, Belo Horizonte, Brazil",Accepted
597,Deconstructing the refactoring process from a problem-solving and decision-making perspective,"Sundelin, A. and Gonzalez-Huerta, J. and Wnuk, K.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Context The micro-services architectural pattern advocates for the partitioning of functionality into loosely coupled services, which should be backward compatible, to enable independent upgrades. Deprecation is commonly used as a tool to manage multiple versions of methods or services. However, deprecation carries a cost in that tests might be duplicated and might rely on services that have become deprecated over time. Objective Using the terms of the Technical Debt metaphor, we explore the consequences of deprecation, and how it has affected the test base during seven years. Method We take an exploratory approach, reporting on experiences found before and after servicing parts of the incurred Technical Debt. We mine code repositories and validate our findings with experienced developers. Results We found that the growth of deprecation debt varied a lot. Some services experienced substantial growth, but most did not. Unit tests, where deprecation is visible in the developers' tools, were much less affected than integration tests, which lack such visualization mechanisms. While servicing debt of 121 out of 285 deprecated services, we discovered that up to 29% of the spent effort could be attributed to accrued interest. However, this is an upper bound; there could be less impact, depending on whether scripting could be used to service the debt or not. Conclusion This paper illustrates that integration tests can be viewed as a debt from the perspective of deprecated services. While the pattern was that deprecated services (debt principal) experienced no or little accrued interest, some, highly used, services experienced a lot, particularly during stressful times. Java-based tests, where deprecation is visible in the IDE, did not experience a similar pattern of increasing debt. We postulate that deprecation debt should be kept visible, either using developer tools or statistical reports. © 2020 ACM.",10.1145/3387906.3388629,"Blekinge Institute of Technology, Karlskrona, Sweden",Accepted
598,On using UML diagrams to identify and assess software design smells,"Tan, J. and Feitosa, D. and Avgeriou, P.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it is particularly effective, as developers are experts in their own code and are best-suited to fix the corresponding TD issues. To what extent is TD self-fixed, which types of TD are more likely to be self-fixed and is the remediation time of self-fixed TD shorter than non-self-fixed TD? This paper attempts to answer these questions. It reports on an empirical study that analyzes the self-fixed issues of five types of TD (i.e., Code, Defect, Design, Documentation and Test), captured via static analysis, in more than 17,000 commits from 20 Python projects of the Apache Software Foundation. The results show that more than two thirds of the issues are self-fixed and that the self-fixing rate is negatively correlated with the number of commits, developers and project size. Furthermore, the survival time of self-fixed issues is generally shorter than non-self-fixed issues. Moreover, the majority of Defect Debt tends to be self-fixed and has a shorter survival time, while Test Debt and Design Debt are likely to be fixed by other developers. These results can benefit both researchers and practitioners by aiding the prioritization of TD remediation activities within development teams, and by informing the development of TD management tools. © 2020 ACM.",10.1145/3387906.3388621,"University of Groningen, Netherlands",Accepted
599,Software engineering risks from technical debt in the representation of product/ion knowledge,"Alfayez, R. and Alwehaibi, W. and Winn, R. and Venson, E. and Boehm, B.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Repaying all technical debt (TD) present in a system may be unfeasible, as there is typically a shortage in the resources allocated for TD repayment. Therefore, TD prioritization is essential to best allocate such resources to determine which TD items are to be repaid first and which items are to be delayed until later releases. This study conducts a systematic literature review (SLR) to identify and analyze the currently researched TD prioritization approaches. The employed search strategy strove to achieve high completeness through the identification of a quasi-gold standard set, which was used to establish a search string to automatically retrieve papers from select research databases. The application of selection criteria, along with forward and backward snowballing, identified 24 TD prioritization approaches. The analysis of the identified approaches revealed a scarcity of approaches that account for cost, value, and resources constraint and a lack of industry evaluation. Furthermore, this SLR unveils potential gaps in the current TD prioritization research, which future research may explore. © 2020 ACM.",10.1145/3387906.3388630,"King Saud University, Saudi Arabia",Accepted
600,Identification of Self-Admitted Technical Debt Using Enhanced Feature Selection Based on Word Embedding,"Pigazzini, I. and Fontana, F.A. and Lenarduzzi, V. and Taibi, D.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"With the adoption of microservices architectural styles, practitioners started noticing increasing pitfalls in managing and maintaining such architectures, with the risk of introducing architectural debt. Previous studies identified different microservice smells (also named anti-patterns) that harm microservices architectures. However, according to our knowledge, there are no tools that can automatically detect microservice smells, so their identification is left to the experience of the developer. In this paper, we extend an existing tool developed for the detection of architectural smells to explore microservices architecture through the detection of three microservice smells: Cyclic Dependencies, Hard-Coded Endpoints, and Shared Persistence. We detected the smells on five open-source projects implemented with microservices and manually validated the precision of the detection results. This work aims to open new perspectives on facing and studying architectural debt in the field of microservices architectures. © 2020 ACM.",10.1145/3387906.3388625,"University of Milano-Bicocca, Milano, Italy; Lappeenranta-Lahti University, Lappeenranta-Lahti Finland, Finland; Tampere University, Tampere, Finland",Accepted
601,Implementing and contracting agile and devops: A survey in the Netherlands,"Ramanathan, M.K. and Clapp, L. and Barik, R. and Sridharan, M.",Proceedings - International Conference on Software Engineering,2020,"Feature flags are commonly used in mobile app development and can introduce technical debt related to deleting their usage from the codebase. This can adversely affect the overall reliability of the apps and increase their maintenance complexity. Reducing this debt without imposing additional overheads on the developers necessitates the design of novel tools and automated workflows. In this paper, we describe the design and implementation of Piranha, an automated code refactoring tool which is used to automatically generate differential revisions (a.k.a diffs) to delete code corresponding to stale feature flags. Piranha takes as input the name of the flag, expected treatment behavior, and the name of the flag's author. It analyzes the ASTs of the program to generate appropriate refactorings which are packaged into a diff. The diff is assigned to the author of the flag for further processing, who can land it after performing any additional refactorings. We have implemented Piranha to delete code in Objective-C, Java, and Swift programs, and deployed it to handle stale flags in multiple Uber apps. We present our experiences with the deployment of Piranha from Dec 2017 to May 2019, including the following highlights: (a) generated code cleanup diffs for 1381 flags (17% of total flags), (b) 65% of the diffs landed without any changes, (c) over 85% of the generated diffs compile and pass tests successfully, (d) around 80% of the diffs affect more than one file, (e) developers process more than 88% of the generated diffs, (f) 75% of the generated diffs are processed within a week, and (g) Piranha diffs have been interacted with by ?200 developers across Uber. Piranha is available as open source at https://github.com/uber/ piranha. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3377813.3381350,"Uber Technologies, Inc., New York City, NY, United States; Uber Technologies, Inc., San Francisco, CA, United States; University of California, Riverside, CA, United States",Accepted
602,Towards a taxonomy of technical debt for COTS-intensive cyber physical systems,"Egorova, S.E. and Bogdanovich, I.S. and Yudanova, L.A. and Budasova, V.A.",ACM International Conference Proceeding Series,2020,"Business risks growing associated with the probability of losses in a business unit sales process due to possible goods rejection by the consumer identified the problem of current assets management model formation. So the inventory information, the information on debts and money resources is gathered and evaluated with the use of risk-oriented approach. The article proposes two approaches to risk identification and quantification in current assets management. The first approach is based on the use of a system of indicators of marketing analysis, where internal and external parameters are linked together. These parameters characterize current assets turnover by means of use of marketing environment indicators. The second approach is based on linking the added value indicators, focused on the basic parameters of economic activity, and added value, focused on demand and consumer preferences. The authors proved the influence of economic cycle of a country on the current assets turnover and justified the use of financial robustness level as a summarizing indicator of risk level in current assets management. The paper also states that the results of risk level assessment are taken into account in the two important processes for current assets management: budgeting and reservation. © 2020 ACM.",10.1145/3388984.3389070,"Pskov State University, Pskov, Russian Federation",Rejected
603,Evolution of technical debt: An exploratory study,"Barhate, S.M. and Dhore, M.P.","2020 International Conference on Innovative Trends in Information Technology, ICITIIT 2020",2020,A hybrid cloud computing environment is a perfect combination of security features of private cloud and easy and fast access of public clouds. The powerful hybrid cloud can be considered as an effective solution for interoperability issue in cloud computing environment. Interoperability issue remains an understudied area. Interoperability can be implemented with the help of service brokers. This paper deals with hybrid cloud and study the interoperability by taking into consideration the combination of server broker policy and load balancing algorithm. This paper uses combination of either of three broker policies available along with throttled load balancing algorithm and hence study the impact of hybrid cloud on the Memory Usage cost and bandwidth usage cost. Memory usage cost and bandwidth usage cost is collectively called debt value. Cloudsim simulator is used to model a hybrid cloud and it's impact on grand total cost and debt value is studied. The aim of study is to find the cost optimized solution in terms of grand total cost and debt value. © 2020 IEEE.,10.1109/ICITIIT49094.2020.9071563,"Rashtrasant Tukadoji Maharaj Nagpur University, Dept. of Electronics and Computer Science, Nagpur, India; Shri.Shivaji Science College, Rashtrasant Tukadoji Maharaj Nagpur University, Nagpur, India",Rejected
604,Credit rating analysis based on the network of trading information,"Vogelsang, A.",Journal of Systems and Software,2020,"Many automotive companies consider their software development process to be feature-oriented. In the past, features were regarded as isolated system parts developed and tested by developers from different departments. However, in modern vehicles, features are more and more connected and their behavior depends on each other in many situations. In this article, we describe how feature-oriented software development is conducted in automotive companies and which challenges arise from that. We present an empirical analysis of feature dependencies in three real-world automotive systems. The analysis shows that features in modern vehicles are highly interdependent. Furthermore, the study reveals that developers are not aware of these dependencies in most cases. For the three examined cases, we show that less than 12% of the components in the system architecture are responsible for more than 90% of the feature dependencies. Finally, we propose a refactoring approach for implicit communal components, which makes them explicit by moving them to a dedicated platform component layer. © 2019",10.1016/j.jss.2019.110458,"Technische Universität Berlin, Germany",Rejected
605,Development of oil production forecasting method based on deep learning,"Wang, Z. and Liu, J. and Cui, H. and Jin, C. and Yang, M. and Wang, Y. and Li, X. and Mao, R.",IJCAI International Joint Conference on Artificial Intelligence,2020,"With the rapid growth of internet finance and the booming of financial lending, the intelligent calling for debt collection in FinTech companies has driven increasing attention. Nowadays, the widely used intelligent calling system is based on dialogue flow, namely configuring the interaction flow with the finite-state machine. In our scenario of debt collection, the completed dialogue flow contains more than one thousand interactive paths. All the dialogue procedures are artificially specified, with extremely high maintenance costs and error-prone. To solve this problem, we propose the behavior-cloning-based collection robot framework without any dialogue flow configuration, called two-stage behavior cloning (TSBC). In the first stage, we use multi-label classification model to obtain policies that may be able to cope with the current situation according to the dialogue state; in the second stage, we score several scripts under each obtained policy to select the script with the highest score as the reply for the current state. This framework makes full use of the massive manual collection records without labeling and fully absorbs artificial wisdom and experience. We have conducted extensive experiments in both single-round and multi-round scenarios and showed the effectiveness of the proposed system. The accuracy of a single round of dialogue can be improved by 5%, and the accuracy of multiple rounds of dialogue can be increased by 3.1%. © 2020 Inst. Sci. inf., Univ. Defence in Belgrade. All rights reserved.",,"Ant Financial Services Group, Hangzhou, China",Rejected
606,Prioritization of EA debts facilitating portfolio theory,"Stre?anský, P. and Chren, S. and Rossi, B.",Scientific Programming,2020,"There are many definitions of software Technical Debt (TD) that were proposed over time. While many techniques to measure TD emerged in recent times, there is still not a clear understanding about how different techniques compare when applied to software projects. The goal of this paper is to shed some light on this aspect, by comparing three techniques about TD identification that were proposed over time: (i) the Maintainability Index (MI), (ii) SIG TD models, and (iii) SQALE analysis. Considering 20 open source Python libraries, we compare the TD measurements time series in terms of trends and evolution according to different sets of releases (major, minor, and micro), to see if the perception of practitioners about TD evolution could be impacted. While all methods report generally growing trends of TD over time, there are different patterns. SQALE reports more periods of steady states compared to MI and SIG TD. MI is the method that reports more repayments of TD compared to the other methods. SIG TD and MI are the models that show more similarity in the way TD evolves, while SQALE and MI are less similar. The implications are that each method gives slightly a different perception about TD evolution. © 2020 Peter Stre?anský et al.",10.1155/2020/2976564,"Masaryk University, Brno, Czech Republic",Accepted
607,Statement-level AST-based clone detection in Java using resolved symbols,"Alexander, P. and Hacks, S. and Jung, J. and Lichter, H. and Steffens, U. and Uluda?, Ö.",CEUR Workshop Proceedings,2020,"Even though enterprise architecture management (EAM) offers a wide range of methods and tools for aligning business with IT, an architects work is challenged by reality. The evolution of enterprise architecture (EA) and given constraints (e.g. legacy systems and processes) lead to debts which may complicate and hinder opportunities; however, the management of such debts has not been considered in EAM research. This paper presents a framework for strategically managing EA-debt-related issues and propose open questions as well as future research directions in this field. Copyright © 2020 for this paper by its authors.",,"RWTH Aachen University, Research Group Software Construction, Aachen, Germany; KTH Royal Institute of Technology, Network and Systems Engineering, Stockholm, Sweden; Frankfurt University of Applied Sciences, Faculty of Computer Science and Engineering, Frankfurt, Germany; Hamburg University of Applied Sciences, Department of Computer Science, Hamburg, Germany; Technical University of Munich, Department of Informatics, Munich, Germany",Accepted
608,IoT enabled intelligent irrigation system for agriculture fields,"Stadnicki, A. and Pietron, F. and Burek, P.",Procedia Computer Science,2020,"Ontologies provide engineers and developers with an unambiguous, verifiable, and expandable knowledge base related to a certain domain. Every project that requires control over consistent knowledge, which is especially relatable when using artificial intelligence with datasets increasing in size every second, would reap benefits from adding ontologies to the equation. It is a powerful asset enabling the development of a project with integrity between platforms or teams. Unfortunately, the cost of entry for a developer into the ontology engineering area is high, as it has been proven over the last decades that developing an ontology is a complex, collaborative task, which requires the support of an adequate methodology as well as software tools. The current paper's objective is twofold. First, it provides a survey on the methodology and software tools used for the creation of the ontology, its maintenance and collaboration. The paper investigates how the tools evolved over the years and what trends have emerged. Second, as the result of the analysis conducted, we show that current solutions have deficiencies and a technological debt; therefore, we present our plan to build a modern tool that uses state-of-the-art technology. © 2020 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2020.09.070,"Institute of Computer Science, Faculty of Mathematics, Physics and Computer Science, Marii Curie-Sklodowskiej University, pl. Marii Curie-Sklodowskiej 5, Lublin, 20-031, Poland",Rejected
609,Integrating Technical Debt Management and Software Quality Management Processes: A Normative Framework and Field Tests,"Masmali, O. and Badreddin, O.",MODELSWARD 2020 - Proceedings of the 8th International Conference on Model-Driven Engineering and Software Development,2020,"Code smells and Technical debt are two common notions that are often referred to for quantifying codebase quality. Quality metrics based on such notions often reply on rigid thresholds and are insensitive to the project unique context, such as development technologies, team size, and the desired code qualities. This challenge often manifest itself in inadequate quantification of code qualities and potentially numerous false positives cases. This paper presents a novel approach that formulates code quality metrics with thresholds that are derived from software design models. This method results in metrics that, instead of adopting rigid thresholds, formulates unique and evolving thresholds specific to each code module. This paper presents the novel methodology and introduces some novel code quality formulas. To evaluate the proposed formulas, we evaluate them against open source codebase developed by experienced software engineers. The results suggest that the proposed methodology results in code quality quantification that provides more adequate characterization. Copyright © 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.",,"Department of Computer Science, University of Texas, El Paso, TX, United States",Accepted
610,Counseling Robot Implementation and Evaluation,"Cervantes, H. and Kazman, R.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"In this paper we present Software Archinaut-a tool used to help identify technical debt hotspots in an architecture, and manage the evolution of the architecture once these hotspots are discovered. Archinaut is a platform that integrates analyses from different tools. It supports three main usage scenarios: 1) understanding the architecture, 2) identifying technical debt hotspots, and 3) monitoring and controlling the evolution of the architecture. We illustrate these scenarios by using Apache Kafka as an example. © 2020 ACM.",10.1145/3387906.3388633,"Universidad Autónoma Metropolitana, Iztapalapa, Mexico; University of Hawaii at Manoa, United States",Accepted
611,Is Self-Admitted Technical Debt a Good Indicator of Architectural Divergences?,"Farias, M.A.D.F. and Neto, M.G.D.M. and Kalinowski, M. and Spínola, R.O.",Information and Software Technology,2020,"Context: Previous work has shown that one can explore code comments to detect Self-Admitted Technical Debt (SATD) using a contextualized vocabulary. However, current detection strategies still return a large number of false positives items. Moreover, those strategies do not allow the automatic identification of the type of debt of the identified items. Objective: This work applies, evaluates, and improves a set of contextualized patterns we built to detect self-admitted technical debt using code comment analysis. We refer to this set of patterns as the self-admitted technical debt identification vocabulary. Method: We carry out three empirical studies. Firstly, 23 participants analyze the patterns of a previously defined contextualized vocabulary and register their level of importance in identifying SATD items. Secondly, we perform a qualitative analysis to investigate the relation between each pattern and types of debt. Finally, we perform a feasibility study using a new vocabulary, improved based on the results of the previous empirical studies, to automatically identify self-admitted technical debt items, and types of debt, that exist in three open source projects. Results: More than half of the new patterns were considered decisive or very decisive to detect technical debt items. The new vocabulary was able to find items associated to code, design, defect, documentation, and requirement debt. Thus, the result of the work is an improved vocabulary that considers the level of importance of each pattern and the relationship between patterns and debt types to support the identification and classification of SATD items. Conclusion: The studies allowed us to improve a vocabulary to identify self-admitted technical debt items through code comments analysis. The results show that the use of pattern-based code comment analysis can contribute to improve existing methods, or create new ones, for automatically identifying and classifying technical debt items. © 2020",10.1016/j.infsof.2020.106270,"Undergraduate Program in Systems of Information, Federal Institute of Sergipe, Aracaju, Brazil; Department of Computer Science, Federal University of Bahia, Salvador, Brazil; Fraunhofer Project Center for Software and System Engineering, Federal University of Bahia, Salvador, Bahia, Brazil; Department of Informatics, Pontifical Catholic University of Rio de Janeiro (PUC-Rio), Rio de Janeiro, Brazil; Graduate Program in Systems and Computer, Salvador University, Salvador, Brazil; State University",Accepted
612,Identifying design and requirement self-admitted technical debt using N-gram IDF,"W?sowski, A.",ACM International Conference Proceeding Series,2020,"For years, the software reuse community (including the variability community) has used cost reduction as the main argument for software reuse. Software reuse methods are often contrasted with cloning [9]. We commonly hear that already when a piece of code, a subsystem or a product, would be copied three times, it pays off to manage a single generalized reusable artifact [8]. Evolving software from cloned to integrated variants is seen as a maturation [2]. © 2020 Copyright held by the owner/author(s).",10.1145/3377024.3377712,"Software Quality Research (SQUARE), IT University of Copenhagen, Denmark",Rejected
613,The risk prediction of mobile user tricking account overdraft limit based on fusion model of logistic and GBDT,"Strzelecka, A. and KurdyS-Kujawska, A. and Zawadzka, D.",Procedia Computer Science,2020,"The paper presents methodological assumptions regarding the logistic regression model and an example of using this research method to evaluate financial decisions taken by households. The aim of the study was to identify and evaluate socio-economic factors determining the debt of households in Central Pomerania using a logistic regression model. The source of data was the results of a survey conducted among 1,000 households of Central Pomerania (Poland). The obtained results prove that the following factors related to the socio-economic characteristics of households: economic education of the head of the household, developmental phase of the household, socio-economic type of the household had a statistically significant positive impact on the likelihood of Central Pomeranian households using external sources of financing: household income and household income. These factors increase the likelihood of households using external sources of financing. In turn, a statistically significant negative impact on the analyzed phenomenon had the household income diversification and the age of the household head. © 2020 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2020.09.055,"Koszalin University of Technology, Faculty of Economic Science, Department of Finance, Kwiatkowskiego 6e, Koszalin, 75-343, Poland",Rejected
614,On the diffuseness of code technical debt in open source projects,"Hussain, H.I. and Anwar, N.A.M. and Razimi, M.S.A.",Journal of Intelligent and Fuzzy Systems,2020,"The current study looks at the impact of compliance to Shari'ah principles on the capital structure for Malaysian firms. Examination of impact of compliance is based on the classification by the Securities Commission of Malaysia. Given that the literature on adjustment tends to ignore non-linear models, the current study utilises Generalised Regression Neural Network (GRNNs). Results are compared to conventional panel data regression models via performing a hold-out sample. Initial results confirm stability of the data allowing predictive ability. The results indicate that compliant firms tend to finance a greater portion of their financing imbalance via equities relative to non-compliant firms. This provides a strong indication towards compliant firms reducing overall risk taking where the financing pattern incorporates a greater aspect of risk sharing which is in-line with Shari'ah principles. In addition, two more factors are ranked as important in deciding compliant firms issue choice to resolve financial imbalance: profitability and size. The rest of the determinants have low impact on explaining net debt issues. Diagnostics for results provide evidence of lower RMSE and MSE for GRNNs for the training, testing and overall datasets. The potential benefit of this research allows managers and investors of Islamic capital markets to understand potential risk exposure and financing costs of compliant firms. Findings also provide a roadmap for development of a sustainable capital market model which has wider implications on a global scale. © 2020-IOS Press and the authors.",10.3233/JIFS-189023,"Taylor's Business School, Taylor's University, Subang Jaya, Selangor, Malaysia; University of Economics and Human Sciences in Warsaw, Okopowa, Warsaw, Poland; Faculty of Economics and Muamalat, Universiti Sains Islam Malaysia, Malaysia; Islamic Business School, Universiti Utara Malaysia, Sintok, Kedah, Malaysia",Rejected
615,Monitoring technical debt in an industrial setting,"Zhao, X.",Microprocessors and Microsystems,2020,"Comprehensive economic evaluation of investment decision-making process is an urgent need to ensure the accuracy. System dynamics is illustrated as an example of stage performances as a tool artist and is associated with local projects to set up models. Proposed model is mainly based on the model, the simulation of the actual project, focused on the financial evaluation and analysis of the project, the profitability of a comprehensive and dynamic understanding is, get the economic rationality of ability to pay off debt and project it can further the sensitivity of the system is detected to determine the key factors that affect the viability of the model. The most sensitive factor is, in the freight and volume, the model is effective and feasible: it indicates that the result is. An FPGA-based super simulator that is part of the trend of this article, any instrument. This is, Virtex-4 FPGA connected torus 64 Xilinx 2D 32 pieces of the visible CPU set of follows. Our machine is faster more than 100 times, practical Maxwell machine equivalent of the software is than it is possible to make a variety of Monte Carlo imitations. The GARCH (Generalized Autoregressive Conditional Heteroskedasticity) option is, in the context of the price model implementation, has been shown in this paper. To be excellent on the implementation of the equivalent of software that our FPGA-based function is running the same number of workstation clusters of computing terminal according to as the actual hardware features have shown the GARCH model. © 2020 Elsevier B.V.",10.1016/j.micpro.2020.103408,"School of Mathematics, Liaoning Normal University, Dalian, Liaoning  116029, China",Rejected
616,A proposed model-driven approach to manage architectural technical debt life cycle,"Papp, P.A. and Wattenhofer, R.","Leibniz International Proceedings in Informatics, LIPIcs",2020,"We study the incentives of banks in a financial network, where the network consists of debt contracts and credit default swaps (CDSs) between banks. One of the most important questions in such a system is the problem of deciding which of the banks are in default, and how much of their liabilities these banks can pay. We study the payoff and preferences of the banks in the different solutions to this problem. We also introduce a more refined model which allows assigning priorities to payment obligations; this provides a more expressive and realistic model of real-life financial systems, while it always ensures the existence of a solution. The main focus of the paper is an analysis of the actions that a single bank can execute in a financial system in order to influence the outcome to its advantage. We show that removing an incoming debt, or donating funds to another bank can result in a single new solution that is strictly more favorable to the acting bank. We also show that increasing the bank's external funds or modifying the priorities of outgoing payments cannot introduce a more favorable new solution into the system, but may allow the bank to remove some unfavorable solutions, or to increase its recovery rate. Finally, we show how the actions of two banks in a simple financial system can result in classical game theoretic situations like the prisoner's dilemma or the dollar auction, demonstrating the wide expressive capability of the financial system model. © Pál András Papp and Roger Wattenhofer; licensed under Creative Commons License CC-BY 47th International Colloquium on Automata, Languages, and Programming (ICALP 2020).",10.4230/LIPIcs.ICALP.2020.91,"ETH Zürich, Switzerland",Rejected
617,Architectural smells detected by tools: A catalogue proposal,"Mongwe, W.T. and Malan, K.M.","2020 IEEE Symposium Series on Computational Intelligence, SSCI 2020",2020,"In recent times, financial statement fraud has resulted in billions of dollars being lost from the financial system. Financial statement fraud is a problem for both listed and local government entities. The present focus in the literature has been on analysing listed entities, and the analysis is typically framed as a supervised learning problem with the labels being audit opinions. In this paper we assess the efficacy of using financial ratios for detecting fraud in financial statements of local government entities. The problem is framed as an unsupervised learning problem. Self organising maps are used due to their visual nature and the resulting accessibility of information to decision makers. The analysis shows that financial ratios are useful in the detection of fraud in the public sector. Using qualified audit opinions as an indication of fraud, the analysis shows that a high current ratio is associated with entities that have unqualified audits (i.e. non-fraudulent), while entities that are fraudulent have a high debt to revenue ratio. © 2020 IEEE.",10.1109/SSCI47803.2020.9308602,"University of Johannesburg, Electrical and Electronic Engineering, Auckland Park, South Africa; University of South Africa, Department of Decision Sciences, Pretoria, South Africa",Rejected
618,The delta maintainability model: Measuring maintainability of fine-grained code changes,"Yontar, M. and Da?, Ö.H.N. and Yan?k, S.",Advances in Intelligent Systems and Computing,2020,"Customer behavior prediction is gaining more importance in the banking sector like in any other sector recently. This study aims to propose a model to predict whether credit card users will pay their debts or not. Using the proposed model, potential unpaid risks can be predicted with high accuracy and necessary actions can be taken in time. For forecasting the customers payment status of next months, we use support vector machine which is one of the traditional artificial intelligent algorithms. Our dataset includes 30000 customers records obtained from a large bank in Taiwan. These records consist of customer information such as amount of credit, gender, education level, marital status, age, past payment records, invoice amount and amount of credit card payments. We apply cross validation and hold-out method to divide our dataset into two parts as training and test sets. Then, we evaluate prediction accuracy of the algorithm using performance metrics. The evaluation results show that support vector machine provides high accuracy (more than 80%) to forecast the customers payment status for next month. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-23756-1_47,"Istanbul Technical University, Macka, Istanbul, Turkey; Turkish-German University, Beykoz, Istanbul, Turkey",Rejected
619,How (not) to remove technical debt in testing environments,"Onar, S.C. and Oztaysi, B. and Kahraman, C. and Öztürk, E.",Advances in Intelligent Systems and Computing,2020,"The technological developments let people use mobile phones and benefit from mobile phones in many areas of their lives. People benefit from various services of the operator companies. Therefore, operator companies have an extensive customer base. Yet, collecting the fees of their services from customers can be hard. When the customers regret or delay the payments the operator companies, which serve to millions of customers, face difficulties in legal procedures. The operator companies usually make agreements with the law firms to convey the lawsuits. In this study, a leading GSM operator company wants to know the possibility of finalizing the cases and take prevention on it, when transferring the case files to the law firms. Naive Bayes classifier, decision tree algorithms, k nearest neighbor method, support vector machines, random forest algorithm, and artificial neural network algorithms are examined, and Naive Bayes classification algorithm is used to define the collection difficulty level for the files. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-23756-1_23,"Istanbul Technical University, Besiktas, Istanbul, 34367, Turkey; Turkcell Technology, Turkcell Küçükyal? Plaza, Maltepe, Istanbul, Turkey",Rejected
620,"TETRA, as a set of techniques and tools for calculating technical debt principal and interest","Gavidia-Calderon, C. and Sarro, F. and Harman, M. and Barr, E.T.",Journal of Systems and Software,2020,"Developers continuously invent new practices, usually grounded in hard-won experience, not theory. Game theory studies cooperation and conflict; its use will speed the development of effective processes. A survey of game theory in software engineering finds highly idealised models that are rarely based on process data. This is because software processes are hard to analyse using traditional game theory since they generate huge game models. We are the first to show how to use game abstractions, developed in artificial intelligence, to produce tractable game-theoretic models of software practices. We present Game-Theoretic Process Improvement (GTPI), built on top of empirical game-theoretic analysis. Some teams fall into the habit of preferring quick-and-dirty code to slow-to-write, careful code, incurring technical debt. We showcase GTPI's ability to diagnose and improve such a development process. Using GTPI, we discover a lightweight intervention that incentivises developers to write careful code: add a singlecode reviewer who needs to catch only 25% of kludges. This 25% accuracy is key; it means that a reviewer does not need to examine each commit in depth, making this process intervention cost-effective. © 2019",10.1016/j.jss.2019.110424,"Department of Computer Science, University College LondonLondon, United Kingdom",Rejected
621,"Proceedings - 2019 IEEE/ACM International Conference on Technical Debt, TechDebt 2019","Kunytska, S. and Holub, S.",Advances in Intelligent Systems and Computing,2020,"The paper proposes to implement the methodology for the creation of multi-level intelligent monitoring information systems by employing an agent approach with the use of cloud technologies. Information technology of the multilevel intelligent monitoring is implemented in the form of a multi-agent monitoring information system, which is built for the mobile provision of knowledge for each individual decision-making process. Specially created intellectual agents carry out observation and formalization of the emergencies in heterogeneous objects at appropriate levels of monitoring. Functional monitoring aggregation processes carried out in accordance with the global debt arranged by the customer, the genetics of the intelligence agencies of the required classes are studied multiple times for modeling agents and coordination of their interaction, implemented at the upper, server-level management of the multi-agent monitoring information system. The client level contains a multitude of agents and communication tools with them. Using intelligent agents for solving local information retrieval tasks can increase the diversity of the multi-level intelligent monitoring process. It proposed to apply the process of the aggregation of the multi-agent monitoring information system functions at each level of the monitoring and to implement typical units in the form of intellectual agents guided by multi-layered models. Interaction of the intellectual agents has been formed situationally as typical processes of horizontal formation and vertical connections of the method of the ascending synthesis elements of the multilevel structure of the multi-agent monitoring information system. Agents-classifiers, agent-identifiers, predictor agents are identified and described among the agents for data conversion. It is proposed to adopt the method of the synthesis multilayered models to the peculiarities of their use in the structure of the intelligence agents. It was given an example of using one of the methods of the multilayered modeling in the structure of the agent-identifier of the functional dependencies. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-25741-5_17,"Cherkasy State Technological University, Cherkasy, Ukraine",Rejected
622,Teamscale: Tackle technical debt and control the quality of your software,"Akopova, E.S. and Stadnik, S.V. and Roshchina, L.N. and Kulikova, I.V. and Ukraintseva, I.V.",Advances in Intelligent Systems and Computing,2020,"The chapter discusses the phenomenon of neoliberalism, the history of the formation of the term neoliberalism, its connection with modern and classical liberalism. The focus is on the economic aspects of neoliberalism and the practice of the implementation of neoliberal principles in the economy. The chapter shows that the basic principles of the neoliberal economic model (increased competition, which is achieved by opening domestic markets for foreign investment and producers and reducing the role of the state in regulating the economy) lead to ambiguous results. The effect of the implementation of these principles depends on the state of the economy of the reforming country, the state of the relevant institutions and the political situation. There is no one true recipe for neoliberal reform, which should be taken into account by governments wishing to carry out such reforms. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-39319-9_65,"Rostov State University of Economics, Rostov-on-Don, Russian Federation; Armavir Institute of Mechanics and Technology (Branch), Kuban State Technological University, Armavir, Russian Federation",Rejected
623,CodeArena: Inspecting and improving code quality metrics using minecraft,"Zakharova, Z.A. and Kislinsky, V.V. and Bakhur, Z.I.",Lecture Notes in Networks and Systems,2020,"The article emphasizes the relevance of the motivation of entrepreneurial activity to achieve a wide range of motives, including the pleasure of doing business in regions with limited potential for self-development. The aim of the work is to determine the existing motives for entrepreneurial activity in regions with limited potential for self-development, and identify contradictions in the development of entrepreneurial activity of the studied regions. In the course of the work, the authors used general scientific methods: comparisons and analogies, analysis and synthesis, abstract-logical method in describing the qualitative institutional environment that contributes to the expansion of the motives of economic activity of capital. The study determined that the existing regions with limited capacity of self-development of the institutional environment of entrepreneurial activity is not conducive to the expansion of motives of economic activities of capital (gaining new and retaining existing market, increase of sales growth rate, obtaining satisfied the rate of profit, etc.). Also in the work it is revealed that one of the main motives of entrepreneurial activity in the studied regions is the self-preservation of the enterprise (survival in the long term), which with adequate use of various sources (for example, budget, a certain debt economy) contributes to the capacity of self-development of regions. The results obtained can be used by public authorities, both at the Federal and regional levels, as an information base for the development and implementation of the necessary measures of state support for entrepreneurial activity in order to create a quality institutional environment for its implementation in regions with limited potential for self-development, as well as by specialists studying this problem. The subject of further exploratory research may be the identification of underutilized sources of capacity building for self-development of regions and the development of tools to create conditions for its provision. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-39797-5_19,"Vladimir Branch of Russian Presidential Academy of National Economy and Public Administration, Vladimir, Russian Federation",Rejected
624,How deep is the mud: Fathoming architecture technical debt using designite,"Perekrestova, L.V. and Nadtochiy, E.V.",Lecture Notes in Networks and Systems,2020,"Purpose: To analyze the need for scientific understanding of the directions of enhancing the interaction of tax relations subjects through digital technologies application as the priority area for harmonizing tax interests, and overcoming the opportunistic behaviour of taxpayers and the growth of financial losses in the budget system. Design/Methodology/Approach: The study is performed within the systems approach using general scientific methods: analysis and synthesis, induction and deduction, scientific abstractions. Findings: The article clarifies the conceptual apparatus of interaction of tax relations subjects, formulates intermediate purposes and results of enhanced interaction in the digital tax environment; presents the analysis of the automated service maintenance of taxpayers and concludes about its high level and effectiveness trough increasing tax revenues of the budget system. The authors found that the indicator of tax debt growth rate signals the existing problems in the tax behaviour of payers and the insufficient efforts of the state in harmonizing the interests of tax relations subjects. Originality/Value: To eliminate contradictions for tax entities, the authors proposed along with the digitalization of the tax system and the further improvement of state tax control mechanisms to apply positive foreign experience in state support and development of taxpayer advisory tools, disseminate tax monitoring more widely, and stimulate employees of the Federal Tax Service of Russia to professional growth and increasing the quality of tax interactions. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-45913-0_18,"Volgograd State University, Volgograd, Russian Federation; Control and Accounts Chamber of Volgograd, Volgograd, Russian Federation",Rejected
625,TDMentions: A dataset of technical debt mentions in online posts,"Grishchenko, O.V. and Moraux, F. and Pakulyak, O.",Journal of Finance and Data Science,2020,"We construct the French nominal yield curve using Svensson33 methodology and all available public data of French nominal government debt securitiesObligations Assimilables du Trésor (OATs). Our sample period starts in October 1987 and ends in April 2018. We find that the functioning of the French sovereign bond market has improved dramatically following the onset of the euro area and has been functioning reasonably well since then, with the exceptions of the Global Financial Crisis period and the European sovereign crisis period. We also find that, the French nominal on-the-run securities have, on average, a negligible liquidity premium, in sharp contrast to the U.S. nominal Treasury market, where such a premium is sizable. On average, the level and the slope of the French zero-coupon rates have been decreasing since the Global Financial Crisis. © 2020",10.1016/j.jfds.2020.07.001,"Division of Monetary Affairs, Federal Reserve Board, Washington, DC, 20551, United States; Université de Rennes, CNRS, CREM-UMR 6211, Rennes, F-35000, France",Rejected
626,Balancing resources and load: Eleven nontechnical phenomena that contribute to formation or persistence of technical debt,"Nailevich, S.L. and Ildarovna, B.E. and Andreevna, F.R. and Mirgalimovna, S.S.",International Journal of Engineering Research and Technology,2020,"In the current realities of financial technology development, it is necessary to move from traditional ways of financing companies' activities to more transparent, fast and efficient ones. The article reveals the distinctive features of the oil and gas business of the Russian Federation, in particular, the realities of the development of this industry in the face of foreign economic shocks in the form of sanctions. The oil and gas business and companies in this industry are significant not only within the country, but also on the international market as participants in export-import, finance, investment, political and other types of relations. The availability of such fuel and energy resources within the country allows it to be in a certain degree in high positions on the world market, since companies in the industry accumulate a significant amount of capital in their foreign trade and foreign economic activities and, to a certain extent, ensure the movement of foreign currency within the framework of their trade and economic relations. The authors of the article calculated an economic and mathematical model based on the structural-dynamic and coefficient analysis, that allows determining the feasibility of forming a new digital tool for oil and gas projects financing. In the course of the analysis, based on Russian quarterly data for 2015-2018, the connection between the level of overdue debt on oil companies loans and the development indicators of the Russian oil and gas business was determined. The main conclusions presented in the article can be used in scientific and practical activities in order to develop financial and credit technologies used in the oil and gas business. © International Research Publication House",,"Kazan Federal University, Russian Federation; Institute of Management, Economy and Finance, Kazan Federal University, Russian Federation; Kazan Federal University, University of Management TISBI, Kazan, Russian Federation",Rejected
627,A survey of self-admitted technical debt,"Iefymenko, T.",Science and Innovation,2020,"Introduction. Even under the conditions of harsh coronacrisis load, modern fiscal policy in market economy states is aimed at regulation of distribution of resources between private and public sectors with the minimum impact of either inflation or deflation fluctuations on the producers price index. Problem Statement. The states moves that mobilize market potential, should include the elements of tax and budgetary reforms, that are linked to the complex of actions that are aimed to halt the growth of money supply. Purpose. To identify the main directions of a systemic governments fiscal functions strengthening, primarily, in countering the destabilization threats in the presence of dynamic phenomena of globalization, crisisgenity and their further multiplication. ?aterials and ?ethods. The methods of position-time situational analysis and synthesis have been used; the dynamics of statistical macroeconomic indicators (GDP) within the framework of various systematic model assessments of the tax reform impact have been compared. Results. Both the positive and the negative experience of implementing programs for international financial institutions and governments of different countries aim at achieving the goals of full employment and sustainable development with the help of tax and budgetary means of demand management and established monetary leverages have been considered. Recommendations for strengthening of regulatory fiscal tools on Ukraines socioeconomic system (SES) stability growth have been justified in the light of current trends of change management, especially against the background of COVID-19 pandemic. Conclusions. Rational tax policy shall provide for the improvement of legislative mechanisms in combination with the formation and use of costs, stimulating the saving of resources with a view to their best practical use. Mandatory payments shall come from sources of business income rather than from capital, because the use of the latter for paying taxes is contrary to the interests of investors and the goals of sustainable reproduction. © 2020 Normas. All rights reserved.",10.15407/scine16.05.020,"Academy of Financial Management, State Educational and Scientific Establishment 38, Drugby Narodiv Blvd., Kyiv, 01014, Ukraine",Rejected
628,"Monotonic classification: An overview on algorithms, performance measures and data sets","Bidyuk, P. and Petrenko, L. and Savina, N.B. and Ivchenko, T. and Voronenko, M.",CEUR Workshop Proceedings,2020,"Financial problems and business failures can lead to a waste of resources and loss of investment opportunities. Forecasting bankruptcy will alert companies to the problem so they can take appropriate action to prevent bankruptcy. The purpose of this study is to develop a model for predicting the financial problems of enterprises. A Bayesian network has been developed for analyzing and predicting the financial condition of industrial enterprises. Financial statements were used to analyze 3000 industrial enterprises in Ukraine. Five integral financial indicators were identified for building Bayesian networks (maneuvering coefficient, debt-to-equity ratio, the coefficient of autonomy, current liquidity ratio, financial stability ratio). The developed banking network allows for situational analysis What if. The results obtained in the study show the forecast of the quality and the practical application possibility of the developed Bayesian network in the decision support system for an intelligent assessment of forecasting bankruptcy probability of an enterprise. Copyright © 2020 for this paper by its authors.",,"National Technical University of Ukraine Igor Sikorsky Kyiv Polytechnic Institute, Kyiv, Ukraine; National University of Water and Environmental Engineering, Rivne, Ukraine; Kherson State Maritime Academy, Kherson, Ukraine; Kherson National Technical University, Kherson, Ukraine",Rejected
629,Towards an autonomous bot for automatic source code refactoring,"Biswas, D. and Sarkar, R.",ACRS 2020 - 41st Asian Conference on Remote Sensing,2020,"Marigold floriculture is the main source and livelihood for farmers in almost all parts of the rural world. This flower grows in all tropical regions of the countries from temperate regions. This cultivation is widespread in Ranaghat-II block of Nadia district in the Indian state of West Bengal. Flower production is one of the main tools of the farmers here. This is where we want to look at exactly how the socioeconomic indicators affect marigold floriculture. For this, a total of 400 farmers from 105 villages and periphery areas of the census and statutory towns in this entire block have been selected for the questionnaire survey of socioeconomic conditions of farmers during 2019. These indicators are marigold cultivation lands (MCL), average marigold production (AMP), total income (TI), lands under cultivation (LUC), land purchase or lease(LP), family member (FM), education (E), mobile (M), internet (I), expensive goods (EG), electricity (El), food consumption (FC), cloth expenditure (CE), health expenditure (HE), working days (WD), housing (H), toilet (T), furniture (F), and debt (D). All socioeconomic conditions define marigold floriculture or marigold income (MI). Our results of multiple linear regression exhibit that beside MCL (0.888) and AMP (0.733), TI (0.632), LUC (0.659), H (0.612), T (0.612), F (0.607) and EG (0.568) have a strong positive effect on marigold income than other socioeconomic indicators. Although the socioeconomic indicators are auto-correlated, the Residual statistics prove overall indicators have a strong linear positive correlation to marigold floriculture and these are well distributed. Farmers have been practising such input-intensive marigold cultivation to a great degree than traditional cultivation like paddy, jute, etc. because it serves better livelihood. But if this cultivation continues day after day, the balance of both natural and socio-economic environment will be lost. So to preserve sustainable marigold floriculture and society, the relevant policies and future research topics are suggested. © 2020 ACRS 2020 - 41st Asian Conference on Remote Sensing. All rights reserved.",,"Department of Geography, Adamas University, Kolkata.W.B., 700126, India",Rejected
630,An Approach to Test Classification in Big Android Applications,"Liu, G. and Gui, L.","Proceedings - 2020 2nd International Conference on Applied Machine Learning, ICAML 2020",2020,"It is a kind of inertial thinking that academics habitually use the theories and models of western economics to answer the impact of foreign exchange reserves on the effectiveness of China's monetary policy. In fact, any kind of economic phenomenon can be solved by the theory of Western economics or by the theory of Marxist political economy. There is no fixed research paradigm. As a socialist country, China has established a socialist market economy system. Marxist political economy theory can give a new explanation to China's current economic problems and provide new solutions. This study proposes a new research perspective and ideas: (i) using Marx's monetary theory to analyze the impact of foreign exchange reserves on money supply; (ii) using Marx's national debt theory to analyze the effectiveness of sterilization intervention policies in China; (iii) Using Marx's exchange rate theory to analyze the influence of foreign exchange reserves on the transmission mechanism of monetary policy; (iv) using Marx's monetary theory and national debt theory to analyze the impact of foreign exchange reserves on inflation. This new research idea attempts to make a new interpretation of the effectiveness and ineffectiveness of monetary policy and propose actionable policy recommendations. © 2020 IEEE.",10.1109/ICAML51583.2020.00017,"School of Economics and Management, Yunnan Normal University Kunming of Yunnan, China",Rejected
631,Credit Evaluation Ensemble Model with Self-Contained Shunt,"Karasimou, M.D. and Antonenas, V. and Laitsos, V. and Polychronides, V. and Tsoukalas, L.H.","11th International Conference on Information, Intelligence, Systems and Applications, IISA 2020",2020,"Intelligent tools are brought to bear on the analysis of energy data from Greece in the period 2010-20. During this period a paradoxical phenomenon is observed namely, an increase in energy productivity in the midst of unprecedented economic decline as measured by Gross Domestic Product (GDP). Preliminary results identify improvements in the overall efficiency of capital due to the collapse in demand following draconian austerity measures. Background, directions and trends are analyzed, policy alternatives examined, and, a new measure of energy utilization with possible real-time applications is proposed. © 2020 IEEE.",10.1109/IISA50023.2020.9284368,"Purdue University, School of Nuclear Engineering, Department of Electrical and Computer Engineering, West Lafayette, IN, United States; University of Thessally, School of Nuclear Engineering, Department of Electrical and Computer Engineering, West Lafayette, IN, United States; Volos, Greece",Rejected
632,Design Rule Spaces: A New Model for Representing and Analyzing Software Architecture,"Liu, J. and Huang, Q. and Xia, X. and Shihab, E. and Lo, D. and Li, S.",Proceedings - International Conference on Software Engineering,2020,"Developers of deep learning applications (shortened as application developers) commonly use deep learning frameworks in their projects. However, due to time pressure, market competition, and cost reduction, developers of deep learning frameworks (shortened as framework developers) often have to sacrifice software quality to satisfy a shorter completion time. This practice leads to technical debt in deep learning frameworks, which results in the increasing burden to both the application developers and the framework developers in future development. In this paper, we analyze the comments indicating technical debt (self-admitted technical debt) in 7 of the most popular open-source deep learning frameworks. Although framework developers are aware of such technical debt, typically the application developers are not. We find that: 1) there is a significant number of technical debt in all the studied deep learning frameworks. 2) there is design debt, defect debt, documentation debt, test debt, requirement debt, compatibility debt, and algorithm debt in deep learning frameworks. 3) the majority of the technical debt in deep learning framework is design debt (24.07% - 65.27%), followed by requirement debt (7.09% - 31.48%) and algorithm debt (5.62% - 20.67%). In some projects, compatibility debt accounts for more than 10%. These findings illustrate that technical debt is common in deep learning frameworks, and many types of technical debt also impact the deep learning applications. Based on our findings, we highlight future research directions and provide recommendations for practitioners. © 2020 Association for Computing Machinery.",10.1145/3377815.3381377,"Zhejiang University, College of Computer Science and Technology, Hangzhou, Zhejiang, China; Monash University, Faculty of Information Technology, Melbourne, VIC, Australia; Concordia University, Department of Computer Science and Software Engineering, Montreal, Canada; Singapore Management University, School of Information System, Singapore",Duplicated
633,Are architectural smells independent from code smells? An empirical study,"Halepmollasi, R.",Proceedings - International Conference on Software Engineering,2020,"Technical debt (TD), its impact on development and its consequences such as defects and vulnerabilities, are of common interestand great importance to software researchers and practitioners.Although there exist many studies investigating TD, the majorityof them focuses on identifying and detecting TD from a single stageof development. There are also studies that analyze vulnerabilities focusing on some phases of the life cycle. Moreover, severalapproaches have investigated the relationship between TD and vulnerabilities, however, the generalizability and validity of findingsare limited due to small dataset. In this study, we aim to identifyTD through multiple phases of development, and to automaticallymeasure it through data and text mining techniques to form acomprehensive feature model. We plan to utilize neural networkbased classifiers that will incorporate evolutionary changes on TDmeasures into predicting vulnerabilities. Our approach will be empirically assessed on open source and industrial projects. © 2020 Copyright held by the owner/author(s).",10.1145/3377812.3381396,"Faculty of Computer and Informatics Engineering, Istanbul Technical University, Turkey",Duplicated
634,The politics of public debt management among rising hegemonies and the role of ICT: Implications for theory and practice for 21st century polities,"Rantala, L.",Proceedings - International Conference on Software Engineering,2020,"Technical debt (TD) is an economical term used to depict nonoptimal choices made in the software development process. It occursusually when developers take shortcuts instead of following agreedupon development practices, and unchecked growth of technicaldebt can start to incur negative effects for software developmentprocesses.Technical debt detection and management is mainly done manually, and this is both slow and costly way of detecting technical debt.Automatic detection would solve this issue, but even state-of-the-arttools of today do not accurately detect the appearance of technicaldebt. Therefore, increasing the accuracy of automatic classificationis of high importance, so that we could eliminate significant portionfrom the costs relating to technical debt detection.This research aims to solve the problem in detection accuracyby bringing in together static code analysis and natural languageprocessing. This combination of techniques will allow more accurate detection of technical debt, when compared to them beingused separately from each other. Research also aims to discoverthemes and topics from written developer messages that can belinked to technical debt. These can help us to understand technicaldebt from developers' viewpoint. Finally, we will build an opensource tool/plugin that can be used to accurately detect technicaldebt using both static analysis and natural language processingmethods. © 2020 Copyright held by the owner/author(s).",10.1145/3377812.3381404,"University of Oulu, Oulu, Finland",Duplicated
635,Increasing awareness for potential technical debt in the engineering of production systems,"Ahmad, M.O. and Raulamo-Jurvanen, P.",Lecture Notes in Business Information Processing,2020,"The International Conference on Agile Software Development (XP) was established almost sixteen years ago. Based on data from Scopus database, a total of 789 papers have been published in between years of 2002 and 2018. We employed bibliometrics analysis and topic modeling with R/RStudio to analyze these published papers from various dimensions, including the most active authors, collaboration of authorship, most cited papers, used keywords and trends of probable topics from the titles and abstracts of those papers. The results show that the first five years of XP conference cover nearly 40% of the papers published until now and almost 62% of the XP papers have been cited at least once. Mining of XP conference paper titles and abstracts result in these hot research topics: Coordination, Technical Debt, Teamwork, Startups and Agile Practices, thus strongly focusing on practical issues and problems faced by the practitioners in the industry. The results highlight the most influential researchers and institutions, and the collaboration between the authors in the conference papers. The approach applied in this study can be extended to other software engineering venues and can be applied to large-scale studies. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-37534-8_6,"Department of Mathematics and Computer Science, Karlstad University, Karlstad, Sweden; Faculty of Electronics, Telecommunications and Informatics, Gdansk University of Technology, Gda?sk, Poland; M3S Research Unit, University of Oulu, Oulu, Finland",Rejected
636,Technical Debt Analysis in Parallel Multi-Disciplinary Systems Engineering,"Khomyakov, I. and Makhmutov, Z. and Mirgalimova, R. and Sillitti, A.",Lecture Notes in Business Information Processing,2020,"Background: Measuring and understanding Technical Debt (TD) is quite complex since there are a number of different definitions and techniques that have been proposed in the last few years and it is not clear which ones should be used in which conditions. The approaches proposed are almost never based on the existing ones and their validation is often performed in a very limited number of projects. For this reasons, practitioners are confused and find difficult to apply such approaches in their projects. Goals: This paper investigates the available techniques for evaluating TD using automated tools aiming at helping practitioners and researcher in understanding the available options and apply them correctly. Method: The study has been performed as a Systematic Literature Review (SLR) applied to 835 studies obtained from the three largest digital libraries and databases. Results: After applying all filtering stages, 38 papers out of 835 have been selected and analyzed in depth. Almost all of them propose novel approaches to measure TD using different criteria and they do not extend or validate existing approaches. Conclusions: The area is not mature and it lacks independent evaluations of the models proposed. Authors focus on proposing new approaches and no consolidation can be identified. Moreover, almost all the approaches proposed are automated only partially and through prototype tools designed just to support the studies analyzed in the paper in which the approach is proposed and rarely maintained. These facts makes difficult the application of such methods by practitioners. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-40783-4_12,"Innopolis University, Innopolis, Russian Federation",Accepted
637,On the Accuracy of SonarQube Technical Debt Remediation Time,"Achmad, N. and Nasution, M.A.",International Journal of Management,2020,"Elderly is one of the crucial issues faced by many countries in the world today. Composition of elderly population is growing rapidly in both developed and developing countries. The increase in the number of elderly people is important to note, so that they could live long, enjoy their life happily, and improve their quality of life by doing activities. However, sometimes elderly activities tend to worsen their quality of life. Therefore, it is necessary to look for activities that can improve their quality of life with the slogan of living a good quality of life in old age. The research conducted in Babussalam, Dolok Sigompulon District, North Padanglawas Regency, North Sumatera, Indonesia raises the activities carried out by the elderly to keep them busy during their old age. By using a qualitative approach, the research and results of this study are presented in an ethnographic writing form to describe the activities. Participant observation and in-depth interviews with the elderly are two tools used to collect the data. As a qualitative approach, the concept of native point of view is the strength of this research. Informants are selected using purposive sampling, in order to get a broader picture. The results of this study found that the elderly who are part of a group or community of the Naqshbandiyah followers, did the wayfaring and spent their time in the wayfarers gathering places. Their main objective to carry out these activities is to get closer to the almighty in order to get a better quality of life. Furthermore, there are among the elderly who come to wayfarers gathering places because of carrying out a debt called vow or nazar. For the elderly who are not part of the tariqa or order community, wayfaring activity is not an option to fill the old age. © 2020 IAEME Publication.",10.34218/IJM.11.2.2020.023,"Universitas Sumatera Utara, Medan, Indonesia",Rejected
638,Managing security in software or: How I learned to stop worrying and manage the security technical debt,"Namiot, D. and Romanov, V.",Communications in Computer and Information Science,2020,"This article discusses the analysis of software repositories using data analysis methods. A review is made of methods for analyzing programs based on information retrieved from the program code stored in code repositories. A review is made of methods for analyzing programs based on information retrieved from the program code stored in repositories. The article reviews the works that apply methods of classification, clustering and depth learning in software development. For example, for classifying and predicting errors, changing the properties of code in the process of its evolution, detecting design flaws and debts, assist for code refactoring. The main ultimate goal for all models is, of course, an automation of programming. In practice, we are talking about more simple tasks. This includes, for example, information retrieval (program code), error prediction, clone detection, link analysis, evolution analysis, etc. Firstly, we discuss recurrent neural networks and their deployment for the analysis of software repositories. In the simplest case, recurrent networks model a programming language as a sequence of characters. Also, the paper covers clustering and topic modeling. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-37436-5_24,"Lomonosov Moscow State University, Leninskie Gory, 1, GSP-1, Moscow, 119991, Russian Federation",Rejected
639,DeepBonds: A deep learning approach to predicting united states treasury yield,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"The proceedings contain 21 papers. The special focus in this conference is on Requirements Engineering. The topics include: Identifying and Classifying User Requirements in Online Feedback via Crowdsourcing; designing a Virtual Client for Requirements Elicitation Interviews; explicit Alignment of Requirements and Architecture in Agile Development; applying Distributed Cognition Theory to Agile Requirements Engineering; automatic Word Embeddings-Based Glossary Term Extraction from Large-Sized Software Requirements; conceptualizing Requirements Using User Stories and Use Cases: A Controlled Experiment; a Semi-automated Approach to Generate an Adaptive Quality Attribute Relationship Matrix; evaluating the Effects of Different Requirements Representations on Writing Test Cases; vision Meets Visualization: Are Animated Videos an Alternative?; generation of Formal Requirements from Structured Natural Language; requirements Assessment in Smart City Districts: A Motivation Concept for Citizens; visualizing Feature-Level Evolution in Product Lines: A Research Preview; using Eye Tracking Data to Improve Requirements Specification Use; hearing the Voice of Software Practitioners on Causes, Effects, and Practices to Deal with Documentation Debt; innovation Workshop Documentation for Following Software Engineering Activities; industrial Practices on Requirements Reuse: An Interview-Based Study; disambiguating Requirements Through Syntax-Driven Semantic Analysis of Information Types; on Understanding How Developers Perceive and Interpret Privacy Requirements Research Preview; A Methodology for Implementing the Formal Legal-GRL Framework: A Research Preview.",,,Rejected
640,Anticipatory development processes for reducing total ownership costs and schedules,"Klimczyk, P. and Madeyski, L.",E-Informatica Software Engineering Journal,2020,"Context: The Technical Debt metaphor has grown in popularity. More software is being created and has to be maintained. Agile methodologies, in particular Scrum, are widely used by development teams around the world. Estimation is an often practised step in sprint planning. The subject matter of this paper is the impact technical debt has on estimations. Objective: The goal of this research is to identify estimation problems and their solutions due to previously introduced technical debt in software projects. Method: The Systematic mapping study (SMS) method was applied in the research. Papers were selected from the popular digital databases (IEEE, ACM, Scopus, etc.) using defined search criteria. Afterwards, a snowballing procedure was performed and the final publication set was filtered using inclusion/exclusion criteria. Results: 42 studies were selected and evaluated. Five categories of problems and seven proposed solutions to the problems have been extracted from the papers. Problems include items related to business perspective (delivery pressure or lack of technical debt understanding by business decision-makers) and technical perspective (difficulties in forecasting architectural technical debt impact or limits of source code analysis). Solutions were categorized in: more sophisticated decision-making tools for business managers, better tools for estimation support and technical debt management tools on an architectural-level, portfolio approach to technical debt, code audit and technical debt reduction routine conducted every sprint. Conclusion: The results of this mapping study can help taking the appropriate approach in technical debt mitigation in organizations. However, the outcome of the conducted research shows that the problem of measuring technical debt impact on estimations has not yet been solved. We propose several directions for further investigation. In particular, we would focus on more sophisticated decision-making tools. © 2020 Wroclaw University of Science and Technology. All rights reserved.",10.37190/e-Inf200102,"GEMOTIAL, Poland; Faculty of Computer Science and Management, Wroclaw University of Science and Technology, Wyb.Wyspianskiego 27, Wroclaw, 50-370, Poland",Accepted
641,On the role of data balancing for machine learning-based code smell detection,,Lecture Notes in Business Information Processing,2020,"The proceedings contain 26 papers. The special focus in this conference is on Enterprise Information Systems. The topics include: A Canonical Data Model for Records Management in the Portuguese Public Administration; an Analysis of Automated Technical Debt Measurement; evaluating Some Heuristics to Find Hyponyms Between Ontologies; towards Design Principles for Visualizing Business Ecosystems; HCI and SE: Integration Experiences Between Theory and Practice from a SE Program; a Design Process Integrating Human-Data Interaction Guidelines and Semio-Participatory Design; semantic Concept Recommendation for Continuously Evolving Knowledge Graphs; linear Hashing Implementations for Flash Memory; on-Premise or Cloud Enterprise Application Deployment: Fit-Gap Perspective; self-managed Computer Systems: Foundations and Examples; CoRP: A Pattern-Based Anomaly Detection in Time-Series; a Tool for Analyzing Academic Genealogy; improving and Optimizing Verification and Testing Techniques for Distributed Information Systems; systematizing the Relationship Between Business Processes and Web Services Non-functional Requirements; a Graph Pattern Based Approach for Automatic Decomposition of IoT Aware Business Processes; moving from Manufacturing to Software Business: A Business Model Transformation Pattern; an Architecture Principle Measurement Instrument Tested in Real-Life; a Hybrid Algorithm for the Unrelated Parallel Machine Scheduling Problem; An Automatic Text Classification Method Based on Hierarchical Taxonomies, Neural Networks and Document Embedding: The NETHIC Tool; an Iterated Local Search-Based Algorithm to Support Cell Nuclei Detection in Pap Smears Test; a Generic Architectural Framework for Machine Learning on Data Streams; Usage of Smart Contracts with FCG for Dynamic Robot Coalition Formation in Precision Farming; business Layer: An Enterprise Approach for Workflow Engine and Record Management Systems Integration.",,,Rejected
642,Towards surgically-precise technical debt estimation: Early results and research roadmap,"Raghunadha Reddy, P. and Siva Sankara Reddy, V.G.",International Journal of Management,2020,"Purpose of the Study: This study traces the evolution of analytical methods in building Finance Theory with a view to strike an optimal balance between the analytical rigour and the real-world inferential insights. Methodology: The theoretical developments in the latter half of the 20th century, in the field of Finance, have focused, extensively, on the Analytical basis of sound theory building and its Empirical validation using the Statistical tools. The pioneering work of Miller and Modigliani that analytically established the relationship between the firms financial leverage (Debt component) and the Value of the firm, under varying assumptions marked the beginning of analytical approaches to building Finance Theory. The corporate bankruptcy model developed by Altman was also studied. The subsequent empirical studies have also been examined to assess the practical validity and relevance of their findings. Main Findings: a) While the analytical modelling, by virtue of its elegance of logic and causation, has been widely acclaimed as the most efficient tool of theory building, it is beset with certain inherent limitations. More specifically, the field of Social sciences, which includes several functional areas of management, is intrinsically determined by behavioral factors and therefore, the stand-alone mathematical modelling (that overlooks the unpredictability of behavioral parameters) is fraught with the danger of erroneous conclusions. b) The Behavioral parameters are, in turn, determined by the psycho-sociological, ethnic, geographic and other factors; this makes the analytical handling of the behavioral parameters more cumbersome and therefore inefficient. c) The percolation of Statistical analysis into conceptually deterministic models has blurred the researchers distinction between the Stochastic and Deterministic (tautological) models thereby, resulting in proving the obvious. d) Finally, the article concludes with the observation that the utility of mathematical modelling can be enhanced by articulating the broad contours of causal relationships among the various parameter so as to gain tangible insights into the real-life decision situations and also by suitably modifying the rigidities of the model to suit the nuances of the specific situation. In other words, the researcher should stress more on the spirit of the model as opposed to its elegantly framed structure of equations. Applications of this Study: This study is expected to make the Finance researchers to focus on the inferential insights into the quantitative parameters emerging from the analytical models so as to enhance the utility of Analytical methods employed in Finance. © IAEME Publication.",10.34218/IJM.11.3.2020.042,"Department of Management Studies, Sri Venkateswara University, Tirupati, India",Rejected
643,Assuring the Evolvability of Microservices: Insights into Industry Practices and Challenges,"Algraiti, M.M. and Marulkar, K.V.",Journal of Advanced Research in Dynamical and Control Systems,2020,"The fixed and the current assets play a vital role in the success of any company. Managing the working capital is mandatory because, it has a huge significance on profitability and liquidity of the business concern. The increase in working capital helps in improving its liquidity. Thus, a company needs to have a correct balance between the liquidity position and the profits of the company. The various components for measuring the working capital management include the receivable days, Inventory turnover ratio, Payable days, Cash conversion cycle, Current ratio and Quick ratio on the Net operating profitability position of the Indian companies. The various factors like fixed assets on total assets, the Debt ratio and the size of the firm have also been used for measuring of the working capital management. Tata Steel has been managing the various aspect of working capital through continuous efforts over a long period of time. The present study is trying to investigate the different aspects of working capital management at Tata Steel. Working capital is generally the net difference between the total assets and the liabilities of the company. So an attempt to understand as to how the company manages the working capital has been done. In this project work we are trying to identify the various systematic processes in managing the working capital. The study is trying to identify the various liquidity, profitability, solvency and the turnover positions of the company as a tool of performance which will lead us to identify the financial soundness of the company. Hence the goal of working capital management is not just concerned with the management of current assets & current liabilities but also in maintaining a satisfactory level of working capital. Holding of current assets in substantial amount strengthens the liquidity position & reduces the riskiness but only at the expense of profitability. Therefore achieving risk-return tradeoff is significant in holding of current assets. While cash outflows are predictable it runs contrary in case of cash inflows. Sales program of any business concern does not bring back cash immediately. There is a time lag that exists between sale of goods & sales realization. The capital requirement during this time lag is maintained by working capital in the form of current assets. The whole process of this conversion is explained by the operating cycle concept. Working capital managementinvolves the relationship between a firm's short-term assets and its short-term liabilities. The goal of working capital management is to ensure that a firm is able to continue its operations and that it has sufficient ability to satisfy both maturing short-term debt and upcoming operational expenses. The management of working capital involves managing inventories, accounts receivable and payable, and cash. There are many ratios that can be calculated from the financial statements pertaining to a company's performance, activity, financing and liquidity. Some common ratios include the priceearnings ratio, debt-equity ratio, earnings per share, asset turnover and working capital. © 2020, Institute of Advanced Scientific Research, Inc. All rights reserved.",10.5373/JARDCS/V12SP2/SP20201088,"Department of Commerce and Management, Shivaji University, Kolhapur, India",Rejected
644,An Empirical Study on Technical Debt in a Finnish SME,"Verdecchia, R. and Lago, P. and Malavolta, I. and Ozkaya, I.",ENASE 2020 - Proceedings of the 15th International Conference on Evaluation of Novel Approaches to Software Engineering,2020,"Architectural technical debt (ATD) in software-intensive systems refers to the architecture design decisions which work as expedient in the short term, but later negatively impact system evolvability and maintainability. Over the years numerous approaches have been proposed to detect particular types of ATD at a refined level of granularity via source code analysis. Nevertheless, how to gain an encompassing overview of the ATD present in a software-intensive system is still an open question. In this study, we present a multi-step approach designed to build an ATD index (ATDx), which provides insights into a set of ATD dimensions building upon existing architectural rules by leveraging statistical analysis. The ATDx approach can be adopted by researchers and practitioners alike in order to gain a better understanding of the nature of the ATD present in software-intensive systems, and provides a systematic framework to implement concrete instances of ATDx according to specific project and organizational needs. © Copyright 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.",,"Vrije Universiteit Amsterdam, Netherlands; Software Engineering Institute, Carnegie Mellon University, United States",Accepted
645,Temporal Discounting in Software Engineering: A Replication Study,"Santos, R.M. and Junior, M.C.R. and de Mendonça Neto, M.G.",Advances in Intelligent Systems and Computing,2020,"Context: In software development, new functionalities and bug fixes are required to ensure a better user experience. Sometimes developers need to implement quick changes to meet deadlines rather than a better solution that would take longer. These easy choices, known as Technical Debts, can cause long-term negative impacts because they can bring extra effort to the team in the future. One way to detect technical debts is through source code comments. Developers often insert comments in which they admit that there is a need to improve that part of the code later. This is known as Self-Admitted Technical Debt (SATD). Objective: Evaluate a Long short-term memory (LSTM) neural network model to identify design and requirement SATDs from comments in source code. Method: We performed a controlled experiment to evaluate the quality of the model compared with two language models from literature in a labeled dataset. Results: Our model results outperformed the other models in precision, improving average precision in approximately 8% compared to auto-sklearn and 19% compared to maximum entropy approach, however, the LSTM model achieved worse results in recall and f-measure. Conclusion: We found that the LSTM model can classify with better precision but needs a larger training, so it can improve on the detection of negative cases. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-43020-7_93,"Department of Computer Science, Federal University of Bahia, Salvador, Brazil; Department of Information Systems, Federal University of Sergipe, Aracaju, Brazil",Accepted
646,PageRank and criticality of architectural smells,,IFIP Advances in Information and Communication Technology,2020,"The proceedings contain 20 papers. The special focus in this conference is on Open Source Systems. The topics include: Combining Two Modelling Approaches: GQM and KAOS in an Open Source Project; An XQuery Specification for Requests with Preferences on XML Databases; the Strategic Technical Debt Management Model: An Empirical Proposal; how the Cathedral Embraced the Bazaar, and the Bazaar Became a Cathedral; an Open Source Environment for an Agile Development Model; innoMetrics Dashboard: The Design, and Implementation of the Adaptable Dashboard for Energy-Efficient Applications Using Open Source Tools; Using FLOSS for Storing, Processing and Linking Corpus Data; MegaM@Rt2 EU Project: Open Source Tools for Mega-Modelling at Runtime of CPSs; .NET Runtime and Tools for Tizen Operating System; the Development of Data Collectors in Open-Source System for Energy Efficiency Assessment; Energy Efficient Software Development Process Evaluation for MacOS Devices; challenges of Tracking and Documenting Open Source Dependencies in Products: A Case Study; an Empirical Investigation of Sentiment Analysis of the Bug Tracking Process in Libre Office Open Source Software; emotional Contagion in Open Software Collaborations; an Open Source Solution for Smart Contract-Based Parking Management; using Open Source Libraries in the Development of Control Systems Based on Machine Vision; an Empirical Analysis of the Maintainability Evolution of Open Source Systems; development of Cloud-Based Microservices to Decision Support System.",,,Rejected
647,Design Smell Detection and Analysis for Open Source Java Software,"Santhosh, A. and Venugopal, A. and Venugopal, A. and Raj, R. and Sudhakaran, A.K.",Journal of Advanced Research in Dynamical and Control Systems,2020,"Microfinance has emerged as an alternative financial service with a keen focus on poverty alleviation and uplift to the depressed. It gives rise to a silent revolution in financial service by bringing a relevant paradigm shift and trajectory change. The weaker sections of people were able to stabilize their financial health through this concept. So far, it has many success references all over the globe. India too has been very vigilant to make use of their potential in microfinance. There has been a study which tried to assess the capacity of microcredit as one of the services of microfinance, to effect a significant positive change in the personal living standard of poor women who have undertaken agriculture entrepreneurship for livelihood. The study has revealed that among the 25 indicators of personal standard of living, the indicators that polled the highest number of favorable responses are found to be access to health facilities, improvement in job skills, and levels of happiness in family life. Taken together the study has proven that microcredit can be fruitful to poor women agro-entrepreneurs from rural background. Moreover, various financial institutions also play a critical role in providing microcredit to entrepreneurs among the urban sectors through microfinance. The sample randomly selected for the study comprised 100 members belonging to both urban and rural backgrounds and encompassing diverse age groups, educational levels and entrepreneurial fields. The business has arrived at 30 percent of the potential family units in the nation that need microfinance. During the period of 2018-19, microfinance industry shows a growth of 38%. The total number of microfinance debts turned into 9.33 crore on the end of March 2019 which shows a growth of 21.9%. © 2020, Institute of Advanced Scientific Research, Inc.. All rights reserved.",10.5373/JARDCS/V12SP4/20201489,"Department of Commerce and Management, Amrita School of Arts and Sciences, Amritapuri Campus,, Kollam, Kerala, India",Rejected
648,A Novel Debt-Credit Mechanism for Blockchain-Based Data-Trading in Internet of Vehicles,"Eessaar, E.",Communications in Computer and Information Science,2020,"SQL is a very resilient and widely used software language. In case of building a SQL database, one has to design schemas of the database so that the database management system (DBMS) can enforce these. The result of designing a database schema is a technical artifact, which may have technical debt. The debt makes it more difficult to understand, maintain, extend, and reuse the artifact. Smells are the signs of technical debt. Many database design smells manifest the same problems as code smells. It could also be that a database schema makes incorrect statements about the domain of the database or lacks necessary elements, i.e., is incomplete. Thus, database schemas can have numerous problems and finding these is a prerequisite of improving the schemas. The paper introduces a catalog of open-source SQL queries that have been designed for finding the occurrences of design problems in PostgreSQL databases (https://github.com/erki77/database-design-queries). Most of the queries help us to detect the occurrences of database design smells. The queries are for a specific although popular DBMS. However, most of the problems that occurrences these help us to find can appear in any SQL database, regardless of the used DBMS. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-57672-1_14,"Department of Software Science, Tallinn University of Technology, Tallinn, Estonia",Accepted
649,Software developer productivity loss due to technical debtA replication and extension study examining developers development work,"Molnar, A.J. and Motogna, S.",ENASE 2020 - Proceedings of the 15th International Conference on Evaluation of Novel Approaches to Software Engineering,2020,"We present a longitudinal study on the long-term evolution of maintainability in open-source software. Quality assessment remains at the forefront of both software research and practice, with many models and assessment methodologies proposed and used over time. Some of them helped create and shape standards such as ISO 9126 and 25010, which are well established today. Both describe software quality in terms of characteristics such as reliability, security or maintainability. An important body of research exists linking these characteristics with software metrics, and proposing ways to automate quality assessment by aggregating software metric values into higher-level quality models. We employ the Maintainability Index, technical debt ratio and a maintainability model based on the ARiSA Compendium. Our study covers the entire 18 year development history and all released versions for three complex, open-source applications. We determine the maintainability for each version using the proposed models, we compare obtained results and use manual source code examination to put them into context. We examine the common development patterns of the target applications and study the relation between refactoring and maintainability. Finally, we study the strengths and weaknesses of each maintainability model using manual source code examination as the baseline. © Copyright 2020 by SCITEPRESS - Science and Technology Publications, Lda. All rights reserved.",,"Faculty of Mathematics and Computer Science, Babes - Bolyai University, Cluj - Napoca, Romania",Accepted
650,PROMISE 2019 - 15th International Conference on Predictive Models and Data Analytics in Software Engineering,"Santos, R.M. and Santos, I.M. and Rodrigues, M.C., Júnior and de Mendonça Neto, M.G.",ICEIS 2020 - Proceedings of the 22nd International Conference on Enterprise Information Systems,2020,"Context: In software development, new functionalities and bug fixes are required to ensure a better user experience and to preserve software value for a longer period. Sometimes developers need to implement quick changes to meet deadlines rather than a better solution that would take longer. These easy choices, known as Technical Debt, can cause long-term negative impacts because they can bring extra effort to the team in the future. Technical debts must be managed and detected so that the team can evaluate the best way to deal with them and avoid more serious problems. One way to detect technical debts is through source code comments. Developers often insert comments in which they admit that there is a need to improve that part of the code later. This is known as Self-Admitted Technical Debt (SATD). Objective: Evaluate a Long short-term memory (LSTM) neural network model combined with Word2vec for word embedding to identify design and requirement SATDs from comments in source code. Method: We performed a controlled experiment to evaluate the quality of the model compared with two language models from literature and LSTM without word embedding in a labelled dataset. Results: The results showed that the LSTM model with Word2vec have improved in recall and f-measure. The LSTM model without word embedding achieves greater recall, but perform worse in precision and f-measure. Conclusion: Overall, we found that the LSTM model and word2vec can outperform other models. Copyright © 2020 by SCITEPRESS  Science and Technology Publications, Lda. All rights reserved",,"Graduate Program in Computer Science, Federal University of Bahia, Salvador, Brazil; Department of Information Systems, Federal University of Sergipe, Itabaiana, Brazil",Accepted
651,A Blockchain-Based distributed network for Secure Credit Scoring,"Digkas, G. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.",Communications in Computer and Information Science,2020,"Code Technical Debt (TD) is intentionally or unintentionally created when developers introduce inefficiencies in the codebase. This can be attributed to various reasons such as heavy work-load, tight delivery schedule, unawareness of good practices, etc. To shed light into the context that leads to technical debt accumulation, in this paper we investigate: (a) the temporality of code technical debt introduction in new methods, i.e., whether the introduction of technical debt is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of technical debt introduction and the development teams workload in a given period. To answer these questions, we perform a case study on twenty-seven Apache projects, and inspect the number of Technical Debt Items introduced in 6-month sliding temporal windows. The results of the study suggest that: (a) overall, the number of Technical Debt Items introduced through new code is a stable metric, although it presents some spikes; and (b) the number of commits performed is not strongly correlated to the number of introduced Technical Debt Items. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-58793-2_6,"Institute of Mathematics and Computer Science, University of Groningen, Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
652,"Proceedings - 2019 IEEE 23rd International Enterprise Distributed Object Computing Workshop, EDOCW 2019","Tsintzira, A.-A. and Arvanitou, E.-M. and Ampatzoglou, A. and Chatzigeorgiou, A.",Communications in Computer and Information Science,2020,"Technical Debt Management (TDM) is a fast-growing field that in the last years has attracted the attention of both academia and industry. TDM is a complex process, in the sense that it relies on multiple and heterogeneous data sources (e.g., source code, feature requests, bugs, developers activity, etc.), which cannot be straightforwardly synthesized; leading the community to using mostly qualitative empirical methods. However, empirical studies that involve expert judgement are inherently biased, compared to automated or semi-automated approaches. To overcome this limitation, the broader (not TDM) software engineering community has started to employ machine learning (ML) technologies. Our goal is to investigate the opportunity of applying ML technologies for TDM, through a Systematic Literature Review (SLR) on the application of ML to software engineering problems (since ML applications on TDM are limited). Thus, we have performed a broader scope study, i.e., on machine learning for software engineering, and then synthesize the results so as to achieve our high-level goal (i.e., possible application of ML in TDM). Therefore, we have conducted a literature review, by browsing the research corpus published in five high-quality SE journals, with the goal of cataloging: (a) the software engineering practices in which ML is used; (b) the machine learning technologies that are used for solving them; and (c) the intersection of the two: developing a problem-solution mapping. The results are useful to both academics and industry, since the former can identify possible gaps, and interesting future research directions, whereas the latter can obtain benefits by adopting ML technologies. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-58793-2_5,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
653,Financial frauds on financial performance of banking industry,"Bessghaier, N. and Ouni, A. and Mkaouer, M.W.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"Web applications (web apps) have become one of the largest parts of the current software market over years. Modern web apps offer several business benefits over other traditional and standalone applications. Mainly, cross-platform compatibility and data integration are some of the critical features that encouraged businesses to shift towards the adoption of Web apps. Web apps are evolving rapidly to acquire new features, correct errors or adapt to new environment changes especially with the volatile context of the web development. These ongoing amends often affect software quality due to poor coding and bad design practices, known as code smells or anti-patterns. The presence of code smells in a software project is widely considered as form of technical debt and makes the software harder to understand, maintain and evolve, besides leading to failures and unforeseen costs. Therefore, it is critical for web apps to monitor the existence and spread of such anti-patterns. In this paper, we specifically target web apps built with PHP being the most used server-side programming language. We conduct the first empirical study to investigate the diffuseness of code smells in Web apps and their relationship with the change proneness of affected code. We detect 12 types of common code smells across a total of 223 releases of 5 popular and long-lived open-source web apps. The key findings of our study include: 1) complex and large classes and methods are frequently committed in PHP files, 2) smelly files are more prone to change than non-smelly files, and 3) Too Many Methods and High Coupling are the most associated smells with files change-proneness. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-59592-0_5,"Ecole de Technologie Superieure (ETS), University of Quebec, Montreal, QC, Canada; Rochester Institute of Technology (RIT), Rochester, NY, United States",Accepted
654,"Familiarity, Causes and Reactions of Software Practitioners to the Presence of Technical Debt: A Replicated Study in the Chilean Software Industry","Malakuti, S. and Ostroumov, S.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"The long lifetime and the evolving nature of industrial products make them subject to technical debt management at different levels such as architecture and code. Although the classical steps to perform technical debt management are known, in a study that we have been performing in a large-scale industrial company as our client, we realized that finding a starting point, which leads to the desired outcome, is in fact a major challenge. This paper elaborates on various causes that we have identified for this challenge, and discusses our stepwise approach to address them so that the software quality can be improved. We believe that our experiences can be beneficial for both practitioners and researchers to gain more insight into applying quality improvement in practice as well as indicating open areas for further research. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-58923-3_20,"ABB Corporate Research Center, Ladenburg, Germany; Softability Group Oy, Helsinki, Finland",Accepted
655,Accurate modeling of performance histories for evolving software systems,"Pérez, B.",Communications in Computer and Information Science,2020,"Architectural Technical Debt (ATD) is a metaphor used to describe decisions taken by software architects to accomplish short-term goals but possibly negatively affecting the long-term health of the system. However, ATD doesnt receive enough attention for the architect teams because it is hard to identify, to measure, to prioritize, and its value is related to long-term maintenance and evolution of a system. In this research, we propose a model-driven approach that focuses on building a binary classification model for ATD identification based on the information gathered from artifacts produced during architecture design. This model will allow software architects to support the managing of conscious and unconscious ATD in their software projects. This proposal focuses on TD at the architecture-level only without considering source code. The effectiveness of this proposal will be evaluated using case studies and expert interviews. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-59155-7_1,"Universidad de los Andes, Bogotá, Colombia; Univ. Francisco de Paula Santander, Cúcuta, Colombia",Accepted
656,Automatic Classifying Self-Admitted Technical Debt Using N-Gram IDF,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,The proceedings contain 23 papers. The special focus in this conference is on Software Architecture. The topics include: Data stream operations as first-class entities in component-based performance models; architecture-centric support for integrating security tools in a security orchestration platform; visarch: Visualisation of performance-based architectural refactorings; an initial study on the association between architectural smells and degradation; architectural technical debt: A grounded theory; does bert understand code?  an exploratory study on the detection of architectural tactics in code; teaching students software architecture decision making; the pdeng program on software technology: Experience report on a doctorate level architecture training program; architectural concerns for digital twin of the organization; quick evaluation of a software architecture using the decision-centric architecture review method: An experience report; formal software architectural migration towards emerging architectural styles; the quest for introducing technical debt management in a large-scale industrial company; determining microservice boundaries: A case study using static and dynamic software analysis; ias: An iot architectural self-adaptation framework; a comparison of mqtt brokers for distributed iot edge computing; monolith migration complexity tuning through the application of microservices patterns; decentralized architecture for energy-aware service assembly; continuous experimentation for automotive software on the example of a heavy commercial vehicle in daily operation; towards using probabilistic models to design software systems with inherent uncertainty; empowering sysml-based software architecture description with formal verification: From sysadl to csp; a flexible architecture for key performance indicators assessment in smart cities.,,,Rejected
657,Understanding automated and human-based technical debt identification approaches-a two-phase study,"Yun, T.-S. and Moon, I.-C.",JASSS,2020,"This paper introduces an agent-based model of a housing market with macro-prudential policy ex-periments. Specifically, the simulation model is used to examine the effects of a policy setting on loan-to-value (LTV) and debt-to-income (DTI), which are policy instruments several governments use to regulate the housing market. The simulation model illustrates the interactions among the households, the house suppliers, and the real estate brokers. We model each household in the population as either seller or buyer, and some of households may behave as speculators in the housing market. To better understand the impact of the policies, we used the real-world observations from the Korean housing market, which include various economic conditions, policy variables, and Korean census data. Our baseline model is quantitatively validated to the price index and the transaction volume of the past Korean housing market. After validation, we show the empirical effectiveness of setting LTV and DTI towards house prices, transaction volumes, and the amount of households mort-gages. Furthermore, we investigate the simulation results for the owner-occupier rate of households. These investigations provide the policy analyses in Koreas housing market, and other governments with LTV and DTI regulations. © 2020, University of Surrey. All rights reserved.",10.18564/jasss.4410,"Korea Advanced Institute of Science and Technology (KAIST), 291 Daehak-ro, Yuseong-gu, Daejeon, 34141, South Korea",Rejected
658,Networks of log returns and volatilities of international stock market indexes,"Marantos, C. and Tsintzira, A.-A. and Papadopoulos, L. and Ampatzoglou, A. and Chatzigeorgiou, A. and Soudris, D.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"The design constraints of Implantable Medical Devices (IMD), such as the low energy consumption, impose significant challenges to application developers. Software tools that improve the quality of the source code by means of technical debt management and provide energy consumption estimations are useful to IMD application developers for addressing such challenges. In this work, we demonstrate the effectiveness of tools that manage the technical debt and provide energy consumption estimations applied to an IMD application for seizure detection. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-60939-9_25,"School of Electrical and Computer Engineering, National Technical University of Athens, Athens, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Rejected
659,"Scientific Collaboration, Citation and Topic Analysis of International Conference on Agile Software Development Papers","Guamán, D. and Pérez, J. and Garbajosa, J. and Rodríguez, G.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"Well-established methods in software engineering research, such as Systematic Literature Reviews, Systematic Mappings and Case Studies are effective research methods to explore emerging areas, since they are systematic and replicable, and produce reusable result avoiding bias. Frequently, software engineers have to evaluate and select CASE (Computer Aided Software Engineering) tools that address trending issues with a non-systematic and replicable processes. This work addresses this problem by tailoring the ISO/IEC 14102:2008 to a systematic-oriented process for the evaluation of software engineering CASE tools in order to embrace the advantages of software engineering systematic methods in the exploration of new areas or emerging issues. This tailored ISO/IEC 14102:2008 standard prescribes a process for the preparation, design and conduction of the software engineering CASE tools evaluation and selection. This process is founded in the application of systematic methods and the generation of a pre-established assets to ensure the reusability of knowledge. In this paper, this tailored process has been applied to address two great emerging concerns in architectural reconstruction: technical debt and energy consumption. As result of this adoption, this paper details the reporting analysis and the set of reusable assets that have been generated during the evaluation process. Specifically, this contribution presents a set of tables, statistics and a decision-making tree of the selected tools for technical debt and energy consumption analysis in architecture reconstruction. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-64148-1_15,"Universidad Politécnica de Madrid, Madrid, Spain; Universidad Técnica Particular de Loja, Loja, Ecuador",Accepted
660,An Analysis of Automated Technical Debt Measurement,"Kuhn, P. and Balta, D.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"In the course of digitalization, governments increasingly aim at improving service quality for their users. To support this aim, government proactivity is considered a suitable approach: reduction of interactions or even non-interaction between users and government. While government proactivity can be crucial for improving the service quality perceived by its users, there is a lacking of understanding how exactly non-interaction interplays with service quality. Understanding this interplay is important, given that for some services non-interaction might also decrease service quality: for instance, non-interactive student loans spare the user the application but at the same time cause automatic debt. We introduce the purpose of an interaction as a lens to help understand this interplay. The lens utilizes the fact that the purpose of an interaction has to be fulfilled also in a proactive, non-interactive version of the service. We operationalize the lens by proposing two groups of interaction purposes and integrating them with service quality dimensions in an analysis framework. The framework can be used to analyze individual services towards their service quality in a proactive, non-interactive version of the service. Our work contributes to theory by developing a set of interaction purposes to study service interactions and the qualitative interplay of non-interaction and service quality on a service level. Based on an exemplary application of the service free school transport, we demonstrate how government service designers can adapt the framework into a tool for the evaluation and design of individual services. © 2020, IFIP International Federation for Information Processing.",10.1007/978-3-030-57599-1_7,"fortiss GmbH, Research Institute of the Free State of Bavaria for Software-Intensive Systems and Services, Munich, Germany",Rejected
661,Religious activities amongst the elderly to get a better quality of life (The implementation of activity theory),"Garcia, R. and Liu, E. and Sreekanti, V. and Yan, B. and Dandamudi, A. and Gonzalez, J.E. and Hellerstein, J.M. and Sen, K.",Proceedings of the VLDB Endowment,2020,"In modern Machine Learning, model training is an iterative, experimental process that can consume enormous computation resources and developer time. To aid in that process, experienced model developers log and visualize program variables during training runs. Exhaustive logging of all variables is infeasible, so developers are left to choose between slowing down training via extensive conservative logging, or letting training run fast via minimalist optimistic logging that may omit key information. As a compromise, optimistic logging can be accompanied by program checkpoints; this allows developers to add log statements post-hoc, and replay desired log statements from checkpointa process we refer to as hindsight logging. Unfortunately, hindsight logging raises tricky problems in data management and software engineering. Done poorly, hindsight logging can waste resources and generate technical debt embodied in multiple variants of training code. In this paper, we present methodologies for efficient and effective logging practices for model training, with a focus on techniques for hindsight logging. Our goal is for experienced model developers to learn and adopt these practices. To make this easier, we provide an open-source suite of tools for Fast Low-Overhead Recovery (flor) that embodies our design across three tasks: (i) efficient background logging in Python, (ii) adaptive periodic checkpointing, and (iii) an instrumentation library that codifies hindsight logging for efficient and automatic record-replay of model-training. Model developers can use each flor tool separately as they see fit, or they can use flor in hands-free mode, entrusting it to instrument their code end-to-end for efficient record-replay. Our solutions leverage techniques from physiological transaction logs and recovery in database systems. Evaluations on modern ML benchmarks demonstrate that flor can produce fast checkpointing with small user-specifiable overheads (e.g. 7%), and still provide hindsight log replay times orders of magnitude faster than restarting training from scratch. © VLDB Endowment. All rights reserved.",10.14778/3436905.3436925,"UC Berkeley, United States",Rejected
662,On Data Analysis of Software Repositories,,Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"The proceedings contain 28 papers. The special focus in this conference is on Product-Focused Software Process Improvement. The topics include: A Practice-Informed Conceptual Model for a Combined Approach of Agile, User-Centered Design, and Lean Startup; lean R&amp;D: An Agile Research and Development Approach for Digital Transformation; a Portfolio-Driven Development Model and Its Management Method of Agile Product Line Engineering Applied to Automotive Software Development; how to Integrate Security Compliance Requirements with Agile Software Engineering at Scale?; impediment Management of Agile Software Development Teams; a Study of the Agile Coachs Role; exploring the Microservice Development Process in Small and Medium-Sized Organizations; integration of Security Standards in DevOps Pipelines: An Industry Case Study; an Empirical Investigation into Industrial Use of Software Metrics Programs; software Startup Practices  Software Development in Startups Through the Lens of the Essence Theory of Software Engineering; improving a Software Modernisation Process by Differencing Migration Logs; redefining Legacy: A Technical Debt Perspective; a Systematic-Oriented Process for Tool Selection: The Case of Green and Technical Debt Tools in Architecture Reconstruction; data Labeling: An Empirical Investigation into Industrial Challenges and Mitigation Strategies; from a Data Science Driven Process to a Continuous Delivery Process for Machine Learning Systems; data Pipeline Management in Practice: Challenges and Opportunities; demystifying Data Science Projects: A Look on the People and Process of Data Science Today; on Clones and Comments in Production and Test Classes: An Empirical Study; preface; kuksa ?: Self-adaptive Microservices in Automotive Systems; Dimensions of Consistency in GSD: Social Factors, Structures and Interactions.",,,Rejected
663,"26th International Working Conference on Requirements Engineering: Foundation for Software Quality, REFSQ 2020","Monaghan, B.D. and Bass, J.M.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2020,"Organisations that manage legacy systems at scale, such as those found within large government agencies and commercial enterprises, face a set of unique challenges. They manage complex software landscapes that have evolved over decades. Current conceptual definitions of legacy systems give practitioners limited insights that can inform their daily work. In this research, we compare conceptual definitions of large-scale legacy and technical debt. We hypothesise that large-scale legacy reflects an accumulation of technical debt that has never been through a remediation phase. To pursue this hypothesis, we identified the following question: How do practitioners describe their experience of managing large-scale legacy landscapes? We conducted 16 semi-structured open-ended, recorded and transcribed interviews with industry practitioners from 4 government organisations and 9 large enterprises involved with the maintenance and migration of large-scale legacy systems. A snowball sampling technique was used to identify participants. We adopted an approach informed by grounded theory. There was consensus among the practitioners in our study that the landscape is fragmented and inflexible, consisting of many dispersed and fragile applications. Practitioners report challenges with shifting paradigms from batch processing to near real-time customer-focused information systems. Our findings show there is overlap between challenges experienced by participants and symptoms typified by technical debt. We identify a novel type of technical debt, Ecosystem Debt which arises from the scale, and age, of many large-scale legacy applications. By positioning Legacy within the context of Technical Debt, practitioners have a more concrete understanding of the state of the systems they maintain. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-64148-1_16,"University of Salford, 43 Crescent, Salford, M5 4WT, United Kingdom",Accepted
664,Technical debt aware estimations in software engineering: A systematic mapping study,"Djuaeriah, N. and Winarta, B.J. and Bustaman, Y.",International Journal of Advanced Science and Technology,2020,"The ones The purpose for this examination is to interrupt down the impact of CEO trademark toward Capital systems. This exploration utilizes taken into consideration one of a type relapse on board facts of an instance of 24 corporations recorded in listing LQ45 for the duration from 2013 to 2017 with 61 female CEOs and fifty nine male CEOs in the instance. This exam is utilising CEO sexual orientation as loose problem; capital structures spoken to with the useful resource of short term debts over total assets(STD), long term debt over total assets (LTD) and total debt over total asset(TD) as reliant variable. specific CEO trademark, for instance, age, residency, and education. The exploration famous a immoderate excellent noteworthy impact among female CEOs within the route of LTD yet lousy essential wih STD. it's far just first-class effect on TD, The results additionally show that residency is contrarily noteworthy on every STD and TD. besides, the age and education might now not essentially impact STD, LTD and TD. The age certainly has excessive exceptional very last effects on STD and TD at the identical time as contrarily impact LTD. The education has horrible effect on STD and TD however exceptional impact on LTD.. girl CEO moreover can slight the corporation trouble in the company. The UET hypothesis is applied to assist the discoveries wherein CEO trademark can impact the organization's presentation and money associated preference. UET writing facilities round dependable statistic to make clean corporate undertaking choice at the identical time as this paper broadens the use of the UET inside the region of bookkeeping. © 2020 SERSC.",,"Swiss German University, Indonesia; Second PriceWaterhouseCoopers(PWc), India",Rejected
665,"21st International Conference on Enterprise Information Systems, ICEIS 2019","Njima, M. and Businge, J. and Demeyer, S.",CEUR Workshop Proceedings,2020,"Forking is an often used idiom in software ecosystems that allows for the immediate reuse of existing software packages. Further, research shows that forking negatively impacts software quality since it distributes the maintenance effort across several repositories. However, there is a lack of sufficient knowledge exploring the validity and applicability of forking as an approach to solve software quality issues. In this position paper we present a plan to investigate the effectiveness of forking in managing technical debt. Copyright 2020 for this paper by its authors.",,"Department of Computer Science, University of Antwerp, Antwerp, Belgium; Department of Computer Science, University of Antwerp and Flanders Make, Antwerp, Belgium",Rejected
666,Mathematical modelling and the empirical validation of organisational financial performance  Conceptual insights into the inferential focus of the analytical perspectives in the finance discipline,"Weinberg, N. and Bora, A. and Sassetti, F. and Bryant, K. and Rootalu, E. and Bikziantieieva, K. and van Breen, L. and Carrier, P. and Lannquist, Y. and Miailhe, N.",CEUR Workshop Proceedings,2020,"From seafood from Thailand and electronics from Malaysia and China, to textiles from India and wood from Brazil, modern slavery exists in all corners of the planet. It is a multibillion-dollar transnational criminal business that affects us all through trade and consumer choices. In 2016, an estimated 25 million people were forced to work through threats, violence, coercion, deception, or debt bondage. Of these, 16 million were forced to work in the private sector. Given the widespread nature of the problem, governments, corporations, and the general public are increasingly expecting companies to accurately disclose the actions they are taking to tackle modern slavery. Yet, five years on, there are challenges with understanding companies compliance under the 2015 UK Modern Slavery Act. It is unclear which companies are failing to report under the MSA, while the quality of these statements often remains poor. Project AIMS (Artificial Intelligence against Modern Slavery) harnesses the power of artificial intelligence (AI) for tackling modern slavery by analyzing modern slavery statements to assess compliance with the UK and Australian Modern Slavery Acts, in order to prompt business action and policy responses. This paper examines the challenges and opportunities for better machine readability of modern slavery statements identified in the initial stages of this project. Machine readability is important to extract data from modern slavery statements to enable analysis using AI techniques. Although extensive technological solutions can be used to extract data from PDFs and HTMLs, establishing transparency and accessibility requirements would reduce the resources required to assess modern slavery reporting and ultimately understand what companies are doing to address modern slavery in their direct operations and supply chains - unlocking this critical AI for Social Good use case. Copyright © 2020 for this paper by its authors.",,The Future Society; Walk Free; WikiRate; Business and Human Rights Resource Centre,Rejected
667,Working capital management and ratio analysis at tata steel,"Zampetti, F. and Serebrenik, A. and DI Penta, M.","SANER 2020 - Proceedings of the 2020 IEEE 27th International Conference on Software Analysis, Evolution, and Reengineering",2020,"Technical Debt (TD) expresses the need for improvements in a software system, e.g., to its source code or architecture. In certain circumstances, developers 'self-admit' technical debt (SATD) in their source code comments. Previous studies investigate when SATD is admitted, and what changes developers perform to remove it. Building on these studies, we present a first step towards the automated recommendation of SATD removal strategies. By leveraging a curated dataset of SATD removal patterns, we build a multi-level classifier capable of recommending six SATD removal strategies, e.g., changing API calls, conditionals, method signatures, exception handling, return statements, or telling that a more complex change is needed. SARDELE (SAtd Removal using DEep LEarning) combines a convolutional neural network trained on embeddings extracted from the SATD comments with a recurrent neural network trained on embeddings extracted from the SATD-affected source code. Our evaluation reveals that SARDELE is able to predict the type of change to be applied with an average precision of 55%, recall of 57%, and AUC of 0.73, reaching up to 73% precision, 63% recall, and 0.74 AUC for certain categories such as changes to method calls. Overall, results suggest that SATD removal follows recurrent patterns and indicate the feasibility of supporting developers in this task with automated recommenders. © 2020 IEEE.",10.1109/SANER48275.2020.9054868,"University of Sannio, Italy; Eindhoven University of Technology, Netherlands",Accepted
668,ATDx: Building an architectural technical debt index,"Lenarduzzi, V. and Lomio, F. and Huttunen, H. and Taibi, D.","SANER 2020 - Proceedings of the 2020 IEEE 27th International Conference on Software Analysis, Evolution, and Reengineering",2020,"The popularity of tools for analyzing Technical Debt, and particularly the popularity of SonarQube, is increasing rapidly. SonarQube proposes a set of coding rules, which represent something wrong in the code that will soon be reflected in a fault or will increase maintenance effort. However, our local companies were not confident in the usefulness of the rules proposed by SonarQube and contracted us to investigate the fault-proneness of these rules. In this work we aim at understanding which SonarQube rules are actually fault-prone and to understand which machine learning models can be adopted to accurately identify fault-prone rules. We designed and conducted an empirical study on 21 well-known mature open-source projects. We applied the SZZ algorithm to label the fault-inducing commits. We analyzed the fault-proneness by comparing the classification power of seven machine learning models. Among the 202 rules defined for Java by SonarQube, only 25 can be considered to have relatively low fault-proneness. Moreover, violations considered as 'bugs' by SonarQube were generally not fault-prone and, consequently, the fault-prediction power of the model proposed by SonarQube is extremely low. The rules applied by SonarQube for calculating technical debt should be thoroughly investigated and their harmfulness needs to be further confirmed. Therefore, companies should carefully consider which rules they really need to apply, especially if their goal is to reduce fault-proneness. © 2020 IEEE.",10.1109/SANER48275.2020.9054821,"Lahti-Lappeenranta University, Lahti-Lappeenranta, Finland; Tampere University, Tampere, Finland",Accepted
669,Self-Admitted Technical Debt classification using LSTM neural network,"Zhang, Q. and Wang, X. and Zhou, X. and Chen, Q.",Neural Computing and Applications,2020,"With the increasing number of data in Chinas interest rate market, the model is increasingly complex. For most interest rate models at this stage, its parameter estimation has become the focus of many scholars in recent years. At present, for the parameter estimation of the interest rate model, there is often a problem that the parameter estimation accuracy is not high and the algorithm stability is poor. Therefore, this research work investigates the parameter estimation method of the no-arbitrage NelsonSiegel model for the classical interest rate model and points out the shortcomings of the estimation method. In the iterative process, the mean error and the estimated error covariance will expand continuously. The phenomenon eventually leads to the consequences of poor estimation. In this study, an improved adaptive Kalman filtering method is proposed. In the process of algorithm updating, an exponential decay factor is added to improve the accuracy of parameter estimation and the stability of the algorithm. Finally, based on Chinas national debt data, the simulation experiment is carried out. © 2020, Springer-Verlag London Ltd., part of Springer Nature.",10.1007/s00521-020-04706-z,"School of Economics, Dongbei University of Finance and Economics, Dalian, 116023, China; Department of Information Management, Dalian Neusoft University of Information, Dalian, 116023, China",Rejected
670,"16th IFIP WG 2.13 International Conference on Open Source Systems, OSS 2020","Zarour, M. and Alenezi, M. and Alsarayrah, K.",ACM International Conference Proceeding Series,2020,"Huge numbers of worldwide-deployed software suffer from poor quality and possess vulnerabilities with serious impact. Meanwhile, people are using such software to save and manage their valuable information including their monetary data. This has increased the hackers' appetite to attack software. Henceforth, researchers and practitioners are convinced that software security is not an added value or a gold-plating need. Consequently, security requirements specification and implementation become vital during the software development process. Unfortunately, researchers and practitioners are doing so in a rush. This has made them mix concepts and practices up in a way that can terribly make the problem of delivering software overdue more chronic which will result in a security and technical debt. This research represents a corrective study that sheds light on what has been achieved in analyzing and designing secure software and what are the problems committed and how to handle them. © 2020 ACM.",10.1145/3383219.3383284,"Software Engineering Department, Prince Sultan University, Riyadh, Saudi Arabia; Software Engineering Department, Hashemite University, Zarka, Jordan",Rejected
671,Implications of microcredit: A study on economic and personal well-being of agro women entrepreneurs (BPL category),"Freire, S. and Rios, N. and Gutierrez, B. and Torres, D. and Mendonça, M. and Izurieta, C. and Seaman, C. and Spínola, R.O.",ACM International Conference Proceeding Series,2020,"Background: Little is known about the practices used for technical debt (TD) payment. The study of payment practices, as well as the reasons for not applying them, can help practitioners to control and manage TD items. Aims: To investigate, from the point of view of software practitioners, if TD items have been paid off in software projects, the practices that have been used to pay off TD and the reasons that hamper the implementation of these practices. Method: We analyzed-both quantitatively and qualitatively-a corpus of responses from a survey of 432 practitioners, from four countries, about the possibility of TD payment. Results: We found that, for most of the cases, TD items have not been eliminated from software projects. The main reasons for not paying off TD are lack of organizational interest, low priority on the debt, focus on short-term goals, cost, and lack of time. On the other hand, we identified that code refactoring, design refactoring, and update system documentation are the most used practices for TD payment. Practitioners also cited practices related to the prevention, prioritization, and creation of a favorable setting as part of TD payment initiatives. Conclusion: This paper summarizes the identified practices and reasons for not paying off debt items in a map. Our map reveals that the majority of payment practices are of a technical nature while the majority of reasons for not paying off debts are associated with non-technical issues. © 2020 ACM.",10.1145/3383219.3383241,"Federal University of Bahia, Federal Institute of Ceará, Brazil; University of Los Andes Francisco de Paula Stder., Univ. Colombia; University of Los Andes, Colombia; Montana State University United States, United States; University of Maryland, Baltimore County, United States; Salvador University, State University of Bahia, Brazil",Accepted
672,Automating detection of occurrences of postgresql database design problems,"Almarimi, N. and Ouni, A. and Chouchen, M. and Saidani, I. and Mkaouer, M.W.","Proceedings - 2020 ACM/IEEE 15th International Conference on Global Software Engineering, ICGSE 2020",2020,"Community smells are symptoms of organizational and social issues within the software development community that often increase the project costs and impact software quality. Recent studies have identified a variety of community smells and defined them as suboptimal patterns connected to organizational-social structures in the software development community such as the lack of communication, coordination and collaboration. Recognizing the advantages of the early detection of potential community smells in a software project, we introduce a novel approach that learns from various community organizational and social practices to provide an automated support for detecting community smells. In particular, our approach learns from a set of interleaving organizational-social symptoms that characterize the existence of community smell instances in a software project. We build a multi-label learning model to detect 8 common types of community smells. We use the ensemble classifier chain (ECC) model that transforms multi-label problems into several single-label problems which are solved using genetic programming (GP) to find the optimal detection rules for each smell type. To evaluate the performance of our approach, we conducted an empirical study on a benchmark of 103 open source projects and 407 community smell instances. The statistical tests of our results show that our approach can detect the eight considered smell types with an average F-measure of 89% achieving a better performance compared to different state-of-the-art techniques. Furthermore, we found that the most influential factors that best characterize community smells include the social network density and closeness centrality as well as the standard deviation of the number of developers per time zone and per community. © 2020 ACM.",10.1145/3372787.3390439,"University of Quebec, Montreal, Canada; Rochester Institute of Technology, United States",Accepted
673,Longitudinal evaluation of open-source software maintainability,"Placencia, J.O. and Hallo, M. and Lujan-Mora, S.","Iberian Conference on Information Systems and Technologies, CISTI",2020,"Due to limitations in tax administrations, such as: Staff, tools, time, etc., tax administrations seek to recover debts in the early stages of control, where the cost of collection is lower than in the subsequent stages. This work proposes a framework based on deep learning techniques to predict debts of taxpayers with high probability of non-payment in a short period of time. A group of debts of a tax administration was used to generate the model to estimate the risk of non-payment. A concordance index metric was used to measure the performance. The performance obtained was 90%. © 2020 AISTI.",10.23919/CISTI49556.2020.9140837,"Escuela Politécnica Nacional, Departamento de Informática y Ciencias de Computación, Quito, Ecuador; Universidad de Alicante, Departamento de Lenguajes y Sistemas Informáticos, Alicante, Spain",Rejected
674,Long term-short memory neural networks and word2vec for self-admitted technical debt detection,"Sas, D. and Avgeriou, P.",Software Quality Journal,2020,"The embedded systems domain has grown exponentially over the past years. The industry is forced by the market to rapidly improve and release new products to beat the competition. Frenetic development rhythms thus shape this domain and give rise to several new challenges for software design and development. One of them is dealing with trade-offs between run-time and design-time quality attributes. To study practices, processes and tools concerning the management of run-time and design-time quality attributes as well as the trade-offs among them from the perspective of embedded systems software engineers. An exploratory case study with two qualitative data collection steps, namely interviews and a focus group, involving six different companies from the embedded systems domain with a total of twenty participants. The interviewed subjects showed a preference for run-time over design-time qualities. Trade-offs between design-time and run-time qualities are very common, but they are often implicit, due to the lack of adequate monitoring tools and practices. Practitioners prefer to deal with trade-offs in the most lightweight way possible, by applying ad-hoc practices, thus avoiding any overhead incurred. Finally, practitioners have elaborated on how they envision the ideal tool support for dealing with trade-offs. Although it is notoriously difficult to deal with trade-offs, constantly monitoring the quality attributes of interest with automated tools is key in making explicit and prudent trade-offs and mitigating the risk of incurring technical debt. © 2019, The Author(s).",10.1007/s11219-019-09478-x,"Bernoulli Institute for Mathematics, Computer Science and Artificial Intelligence Faculty of Science and Engineering, University of Groningen, Nijenborgh 9, Groningen, 9747AG, Netherlands",Rejected
675,On the temporality of introducing code technical debt,"Alomar, E.A. and Peruma, A. and Newman, C.D. and Mkaouer, M.W. and Ouni, A.","Proceedings - 2020 IEEE/ACM 42nd International Conference on Software Engineering Workshops, ICSEW 2020",2020,"Refactoring is one of the means of managing technical debt and maintaining a healthy software structure through enforcing best design practices, or coping with design defects. Previous refactoring surveys have shown that these code restructurings are mainly executed by developers who have sufficient knowledge of the system's design, and disposing of leadership roles in their development teams. However, these surveys were mainly limited to specific projects and companies. In this paper, we explore the generalizability of the previous results though analyzing 800 open-source projects. We mine their refactoring activities, and we identify their corresponding contributors. Then, we associate an expertise score to each contributor in order to test the hypothesis of whether developers with higher scores tend to perform a higher number of refactoring operations. We found that (1) although refactoring is not restricted to a subset of developers, those with higher experiences score tend to perform more refactorings than others; (2) our qualitative analysis of three randomly sampled projects show that the developers who are responsible for the majority of refactoring activities are typically on advanced positions in their development teams, demonstrating their extensive knowledge of the design of the systems they contribute to. © 2020 ACM.",10.1145/3387940.3392193,"Rochester Institute of Technology, Rochester, NY, United States; ETS Montreal, University of Quebec, Montreal, QC, Canada",Rejected
676,Applying machine learning in technical debt management: Future opportunities and challenges,"Catolino, G. and Palomba, F. and Tamburri, D.A. and Serebrenik, A. and Ferrucci, F.",Proceedings - International Conference on Software Engineering,2020,"Community smells have been defined as sub-optimal organizational structures that may lead to social debt. Previous studies have shown that they are highly diffused in both open- and closed-source projects, are perceived as harmful by practitioners, and can even lead to the introduction of technical debt in source code. Despite the presence of this body of research, little is known on the practitioners' perceived prominence of community smells in practice as well as on the strategies adopted to deal with them. This paper aims at bridging this gap by proposing an empirical study in which 76 software practitioners are inquired on (i) the prominence of four well-known community smells, i.e., Organizational Silo, Black Cloud, Lone Wolf, and Radio Silence, in their contexts and (ii) the methods they adopted to ""refactor"" them. Our results first reveal that community smells frequently manifest themselves in software projects and, more importantly, there exist specific refactoring practices to deal with each of the considered community smells. © 2020 Association for Computing Machinery.",10.1145/3377815.3381380,"University of Salerno, Fisciano, Italy; Jheronimus Academy of Data Science, s'Hertogenbosch, Netherlands; Eindhoven University of Technology, Eindhoven, Netherlands",Accepted
677,On the Diffusion and Impact of Code Smells in Web Applications,"Cai, Y. and Kazman, R.",Proceedings - International Conference on Software Engineering,2020,"Recently we have worked with a dozen industrial collaborators to pinpoint and quantify architecture debts, from multi-national corporations to startup companies. Our technology leverages a wide range of project data, from source file dependencies to issue records, and we interacted with projects of various sizes and characteristics. Crossing the border between research and practice, we have observed significant gaps in terms ofdata availability and quality among projects of different kinds. Compared with successful open source projects, data from proprietary projects are rarely complete or well-organized. Consequently, not all projects can benefit from all the features and analyses we provide. This, in turn, made them realize they needed to improve their development processes. In this talk, we categorize the commonly observed differences between open source and proprietary project data, analyze the reasons for such differences, and propose suggestions to minimize the gaps, to facilitate advances to both software research and practice. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3377813.3381357,"Computer Science Department, Drexel University, Philadelphia, PA, United States; Shidler College of Business, University of Hawaii, Honolulu, HI, United States",Rejected
678,The quest for introducing technical debt management in a large-scale industrial company,"Benedetto, J.I. and Navon, J.",Proceedings - International Conference on Software Engineering,2020,"Analysis, modeling and design activities are integral parts of any modern software development project. However, educators often struggle in convincing undergraduate students of their value. Grasping the importance of good software design requires a certain maturity that is not yet attained in the first years of a computer science curriculum. In this study, we introduce group shuffling dynamics to a formal software design course to convey the importance of these concepts by exposing students to the experience of switching groups mid-semester. This grants a whole new perspective on the matter as the cost of managing technical debt is felt when the respective developers leave, and modeling artifacts become pivotal in aiding the incorporation of new team members. This short paper presents our first experience while implementing this methodology and shares our preliminary results derived from a first set of interviews with our students. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3377814.3381717,"Computer Science Department, Pontificia Universidad Católica de Chile, Santiago, Chile",Rejected
679,A semiautomatic approach to identify architectural technical debt from heterogeneous artifacts,"De Stefano, M. and Pecorelli, F. and Tamburri, D.A. and Palomba, F. and De Lucia, A.","Proceedings - 2020 IEEE/ACM 42nd International Conference on Software Engineering Workshops, ICSEW 2020",2020,"Software engineering projects are now more than ever a community effort. In the recent past, researchers have shown that their success may not only depend on source code quality, but also on other aspects like the balance of distance, culture, global engineering practices, and more. In such a scenario, understanding the characteristics of the community around a project and foresee possible problems may be the key to develop successful systems. In this paper, we focus on this research problem and propose an exploratory study on the relation between community patterns, i.e., recurrent mixes of organizational or social structure types, and smells, i.e., sub-optimal patterns across the organizational structure of a software development community that may be precursors of some sort of social debt. We exploit association rule mining to discover frequent relations between them. Our findings show that different organizational patterns are connected to different forms of socio-technical problems, possibly suggesting that practitioners should put in place specific preventive actions aimed at avoiding the emergence of community smells depending on the organization of the project. © 2020 ACM.",10.1145/3387940.3392204,"SeSa Lab, University of Salerno, Italy; Jheronimus Academy of Data Science, Netherlands",Rejected
680,"14th European Conference on Software Architecture, ECSA 2020","Gilson, F. and Morales-Trujillo, M. and Mathews, M.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Technical debt is a metaphor that measures the additional effort needed to continue to add more features in a software due to its inherent decrease in code quality. Most software systems suffer from technical debt at some point so that dedicated tools and metrics have been developed to monitor such debt. Alongside tools, appropriate engineering practices must be put in place by the development team to keep that debt at an acceptable level. In this empirical study, we observed and surveyed Scrum development teams composed of experienced students in order to understand their quality-related processes on a year-long academic project. We found that (1) students do use static analysis tools of many forms, but their actual usage is limited due to time pressure; (2) retrospective and non-constraining feedback on code quality has little to no effect, even when given regularly during the course of the project; and (3) junior developers value composite quality indicators (e.g., maintainability, reliability in SonarQube), even if they do not fully understand their meaning. From our findings, we propose a series of recommendations, both technical and methodological, on how to train junior developers to understand and manage technical debt. © 2020 ACM.",10.1145/3387906.3388624,"University of Canterbury, Christchurch, New Zealand",Accepted
681,Housing market agent-based simulation with loan-to-value and debt-to-income,"Gauthier, F. and Jordan, A. and Krishnan, P. and Hassanshahi, B. and Süß, J.G. and Bae, S. and Lee, H.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Nowadays, industrial research labs operate like startups. In a relatively short amount of time, researchers are expected not only to explore innovative ideas but also show how the new ideas can add value to the organisation. One way to do this, especially when developing tools, is to construct usable prototypes. When the technology underlying the research tool is highly complex or niche, like program analysis, field trials with potential users also help explaining and demonstrating the benefits of the tool. Getting support from potential users helps demonstrate value to the organisation, which in turn justifies conducting more extensive research and investing more resources to enhance the initial prototype. Thus, research that involves the construction of tools need to manage both short and long term risk, and the technical debt that arises throughout the lifecycle of a research prototype. As not all prototypes will result in a technology transfer, one has to carefully manage the project resources dedicated to paying the technical debt. For example, failure to pay the debt early in the project might result in unstable prototypes that can have a negative influence on potential customers and make technology transfer harder. On the other hand, over committing resources to reduce the technical debt might result in slower research progress and failure to show improvement over state-of-the-art. In this paper, we will present experience reports from two dynamic program analysis projects. at Oracle Labs Australia. © 2020 ACM.",10.1145/3387906.3388623,,Accepted
682,Technical Debt Management and Energy Consumption Evaluation in Implantable Medical Devices: The SDK4ED Approach,"Pérez, B. and Castellanos, C. and Correal, D. and Rios, N. and Freire, S. and Spínola, R. and Seaman, C.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Context: Technical debt (TD) is a metaphor used to describe technical decisions that can give the company a benefit in the short term but possibly hurting the overall quality of the software in the long term. Objective: This study aims to characterize the current state of practices related to TD payment from the point of view of software practitioners. Method: We used a survey research method to collect and analyze - both quantitatively and qualitatively - a corpus of responses from a survey of 432 software practitioners from Colombia, Chile, Brazil, and the United States, as a part of the InsighTD project. Results: We were able to identify that refactoring (24.3%) was the main practice related to TD payment, along with improving testing (6.2%) and improve design (5.8%). Also, we identify that small-sized systems and big-sized systems, along with young systems (less than one year) tend to use more refactoring. As a part of these results, we also could identify that some practices do not eliminate the debt by itself, but support a favorable scenario for TD payment or prevention. Additionally, after comparing the three major TD types cited (code debt, test debt and design debt) we could discover an important similarity of TD payment practices between code debt and design debt. Lastly, we identified that no matter the cause leading to TD occurrence, refactoring remained the most common practice. Conclusion: Definition of practices related to TD payment is an essential activity for software development teams. Developing healthy software systems that can be maintained in the future requires that companies find the right approaches for TD payment. © 2020 ACM.",10.1145/3387906.3388632,"University of Los Andes, Bogotá, Colombia; Federal University of Bahia, Salvador, Brazil; University of Maryland, United States",Accepted
683,A Systematic-Oriented Process for Tool Selection: The Case of Green and Technical Debt Tools in Architecture Reconstruction,"Couto, M. and Maia, D. and Saraiva, J. and Pereira, R.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"This paper introduces the concept of energy debt: a new metric, reflecting the implied cost in terms of energy consumption over time, of choosing a flawed implementation of a software system rather than a more robust, yet possibly time consuming, approach. A flawed implementation is considered to contain code smells, known to have a negative influence on the energy consumption. Similar to technical debt, if energy debt is not properly addressed, it can accumulate an energy ""interest"". This interest will keep increasing as new versions of the software are released, and eventually reach a point where the interest will be higher than the initial energy debt. Addressing the issues/smells at such a point can remove energy debt, at the cost of having already consumed a significant amount of energy which can translate into high costs. We present all underlying concepts of energy debt, bridging the connection with the existing concept of technical debt and show how to compute the energy debt through a motivational example. © 2020 ACM.",10.1145/3387906.3388628,"HasLab/INESC TEC, Universidade Do Minho, Portugal; Universidade da Beira Interior, Covilhã, Portugal",Accepted
684,Service Quality Through Government Proactivity: The Concept of Non-interaction,"Pujols, J.B. and Bas, P. and Martínez-Fernandez, S. and Martini, A. and Trendowicz, A.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"As the development progresses, software projects tend to accumulate Technical Debt and become harder to maintain. Multiple tools exist with the mission to help practitioners to better manage Technical Debt. Despite this progress, there is a lack of tools providing actionable and self-learned suggestions to practitioners aimed at mitigating the impact of Technical Debt in real projects. We aim to create a data-driven, lightweight, and self-learning tool positioning highly impactful refactoring proposals on a Jira backlog. Bearing this goal in mind, the first two authors have founded a startup, called Skuld.ai, with the vision of becoming the go-to software renovation company. In this tool paper, we present the software architecture and demonstrate the main functionalities of our tool. It has been showcased to practitioners, receiving positive feedback. Currently, its release to the market is underway thanks to an industry-research institute collaboration with Fraunhofer IESE to incorporate self-learning technical debt capabilities. © 2020 ACM.",10.1145/3387906.3388626,"Skuld Technologies, Barcelona, Spain; Fraunhofer IESE and UPC, Kaiserslautern, Germany; Skuld and University of Oslo, Oslo, Norway; Fraunhofer IESE, Kaiserslautern, Germany",Accepted
685,Hindsight logging for model training,"Meinicke, J. and Hoyos, J. and Vasilescu, B. and Kästner, C.","Proceedings - 2020 IEEE/ACM 17th International Conference on Mining Software Repositories, MSR 2020",2020,"Feature flags (a.k.a feature toggles) are a mechanism to keep new features hidden behind a boolean option during development. Flags are used for many purposes, such as A/B testing and turning off a feature more easily in case of failures. While software engineering research on feature flags is burgeoning, examples of software projects using flags rarely come from outside commercial and private projects, stifling academic progress. To address this gap, in this paper we present a novel semi-automated mining software repositories approach to detect feature flags in open-source projects, based on analyzing the projects' commit messages and other project characteristics. With our approach, we search over all open-source GitHub projects, finding multiple thousand plausible and active candidate feature flagging projects. We manually validate projects and assemble a dataset of 100 confirmed feature flagging projects. To demonstrate the benefits of our detection technique, we report on an initial analysis of feature flags in the validated sample of 100 projects, investigating practices that correlate with shorter flag lifespans (typically desirable to reduce technical debt), such as using the issue tracker and having a flag owner. © 2020 ACM.",10.1145/3379597.3387463,"Carnegie Mellon University, United States; Universidad Nacional de Colombia, Colombia",Accepted
686,"21st International Conference on Product-Focused Software Process Improvement, PROFES 2020","Kumar, S. and Chen, T. and Bahsoon, R. and Buyya, R.","Proceedings - 2020 IEEE/ACM 15th International Symposium on Software Engineering for Adaptive and Self-Managing Systems, SEAMS 2020",2020,"The rapidly changing workload of service-based systems can easily cause under-/over-utilization on the component services, which can consequently affect the overall Quality of Service (QoS), such as latency. Self-adaptive services composition rectifies this problem, but poses several challenges: (i) the effectiveness of adaptation can deteriorate due to over-optimistic assumptions on the latency and utilization constraints, at both local and global levels; and (ii) the benefits brought by each composition plan is often short term and is not often designed for long-term benefits - -a natural prerequisite for sustaining the system. To tackle these issues, we propose a two levels constraint reasoning framework for sustainable self-adaptive services composition, called DATESSO. In particular, DATESSO consists of a refined formulation that differentiates the 'strictness' for latency/utilization constraints in two levels. To strive for long-term benefits, DATESSO leverages the concept of technical debt and time-series prediction to model the utility contribution of the component services in the composition. The approach embeds a debt-aware two level constraint reasoning algorithm in DATESSO to improve the efficiency, effectiveness and sustainability of self-adaptive service composition. We evaluate DATESSO on a service-based system with real-world WS-DREAM dataset and comparing it with other state-of-the-art approaches. The results demonstrate the superiority of DATESSO over the others on the utilization, latency and running time whilst likely to be more sustainable. © 2020 ACM.",10.1145/3387939.3391604,"University of Birmingham, United Kingdom; Loughborough University, United Kingdom; University of Melbourne, Australia",Rejected
687,Redefining Legacy: A Technical Debt Perspective,"Waltersdorfer, L. and Rinker, F. and Kathrein, L. and Biffl, S.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Technical Debt (TD) has proven to be a suitable communication concept for software-intensive contexts to raise awareness regarding longterm negative effects of deviations from standards and guidelines. TD has also been introduced to systems engineering domain, to communicate design shortcomings in long-running, software-assisted systems. We analysed potential TD in the engineering data exchange for production system engineering. Similar to requirements engineering in software-intensive systems, data exchange in the design phase plays an integral part in Software Engineering (SE) for Production Systems Engineering: Specifications, and physical logic have to be derived from heterogeneous plant models or parameter tables designed by different stakeholders. However, traditional procedures and inadequate tool support lead to inefficient data extraction and integration. We identified debt arising from knowledge representation, data model and the exchange process. The refinement validation of identified TD was achieved through semi-structured interviews with representatives in two analysed companies. In an online survey with ten participants from an industrial consortium we evaluated whether the identified TD concepts also applied to other companies, which is true for the majority of TD. Furthermore, we discuss promising TD management strategies to repay and manage negative effects and the accumulation of additional debt, such as improved communication, test-driven model engineering and visualisation of engineering models. © 2020 ACM.",10.1145/3387906.3388627,"SBA Research, Austria; Technische Universität Wien, Austria",Accepted
688,CEO characteristics on capital structure: A case study on Indonesian firms,"Aversano, L. and Iammarino, M. and Carapella, M. and Vecchio, A.D. and Nardi, L.",Algorithms,2020,"The technical debt (TD) in a software project refers to the adoption of an inadequate solution from its design to the source code. When developers admit the presence of technical debt in the source code, through comments or commit messages, it is called self-admitted technical debt (SATD). This aspect of TD has been the subject of numerous research studies, which have investigated its distribution, the impact on software quality, and removal. Therefore, this work focuses on the relationship between SATD and TD values. In particular, the study aims to compare the admitted technical debt with respect to its objective measure. In fact, the trends of TD values during SATD removals have been studied. This was done thanks to the use of an SATD dataset and their related removals in four open source projects. Instead, the SonarQube tool was used to measure TD values. Thanks to this work, it turned out that SATD removals in a few cases correspond to an effective reduction of TD values, while in numerous cases, the classes indicated are removed. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/A13070168,"Department of Engineering, University of Sannio, Benevento, 82100, Italy",Accepted
689,An empirical study of technical debt management as a motivation for forking,"Lunde, B.A. and Colomo-Palacios, R.","Proceedings - 2020 20th International Conference on Computational Science and Its Applications, ICCSA 2020",2020,"Technical debt in software development is a common problem that is overlooked by many development teams. This debt can be generated from a variety of reasons, including time pressure and complexity in software. Technical debt in simple terms is when a simple and less optimized solution is carried out in order to gain short term benefits, which leads to refactoring and reworking code later on, costing both time and money. The issue is present in both big, established companies and small startups, and is the reason why many of these small startups never get enough economic grip before debt catch up and they go bankrupt. This paper aims to address this problem by exploring how continuous practices including DevOps could help resolve this issue by adopting the right approaches into the software development cycle and workflow. So as to collect information about these topics, a systematic literature review has been conducted, covering both positive and negative impacts these practices can have on technical debt. The findings will present the current practices used to manage and reduce the accumulation of technical debt, if and how these approaches can be used to reduce already existing technical debt and which of these practices that have the biggest impact on technical debt. The paper concludes that there's potential for continuous practices including DevOps to possibly reduce technical debt if applied appropriately © 2020 IEEE.",10.1109/ICCSA50381.2020.00018,"Ostfold University College, Department of Computer Science, Halden, 1783, Norway",Accepted
690,AI against modern slavery: Digital insights into modern slavery reporting - challenges and opportunities,"Kolahdouz-Rahimi, S. and Lano, K. and Karimi, M.",Journal of Computer Languages,2020,"Model transformations (MT) are a significant element of model-based and model-driven engineering approaches. Hence their quality is important for their effectiveness for use in such developments. The concept of technical debt (TD) estimates the impact of quality flaws on the maintenance costs of software artefacts. In this paper we define a quality model for model transformation languages, and define TD indicators for MT based on this model. We apply the indicators to evaluate the TD levels in 40 transformation cases in three procedural MT languages: QVT-O, Kermeta and EGL, and compare these levels with results for the declarative QVT-R language. © 2020 Elsevier Ltd",10.1016/j.cola.2020.100971,"MDSE Research Group, Department of Software Engineering, University of Isfahan, Isfahan, Iran; Department of Informatics, King's College London, London, United Kingdom",Accepted
691,Automatically Learning Patterns for Self-Admitted Technical Debt Removal,"Xavier, L. and Ferreira, F. and Brito, R. and Valente, M.T.","Proceedings - 2020 IEEE/ACM 17th International Conference on Mining Software Repositories, MSR 2020",2020,"Self-admitted technical debt (SATD) is a particular case of Technical Debt (TD) where developers explicitly acknowledge their sub-optimal implementation decisions. Previous studies mine SATD by searching for specific TD-related terms in source code comments. By contrast, in this paper we argue that developers can admit technical debt by other means, e.g., by creating issues in tracking systems and labelling them as referring to TD. We refer to this type of SATD as issue-based SATD or just SATD-I. We study a sample of 286 SATD-I instances collected from five open source projects, including Microsoft Visual Studio and GitLab Community Edition. We show that only 29% of the studied SATD-I instances can be tracked to source code comments. We also show that SATD-I issues take more time to be closed, compared to other issues, although they are not more complex in terms of code churn. Besides, in 45% of the studied issues TD was introduced to ship earlier, and in almost 60% it refers to DESIGN flaws. Finally, we report that most developers pay SATD-I to reduce its costs or interests (66%). Our findings suggest that there is space for designing novel tools to support technical debt management, particularly tools that encourage developers to create and label issues containing TD concerns. © 2020 ACM.",10.1145/3379597.3387459,"Aserg Group, Department of Computer Science, Federal University of Minas Gerais (UFMG), Belo Horizonte, Brazil; Center of Informatics, Federal Institute of the Southeast of Minas Gerais, Barbacena, Brazil",Accepted
692,Are SonarQube Rules Inducing Bugs?,"Aripin, N. and Abdulmumuni, O.",International Journal of Supply Chain Management,2020,"This paper examined the association between financial leverage and financial performance of Nigerian manufacturing firms. Performance is the ability of management to control firms' resources to gain competitive advantage. Among the internal organisational factors that affect firms' profitability is financial leverage which is the firms' capital structure framework. From agency theory perspective, it is hypothesised that profitability increases with debt financing to a certain optimal level of debts. A five-year data covering a period between 2011 to 2015, sourced from the financial statements of 66 Nigerian manufacturing firms were collected. This study found that financial leverage is positively and significantly associated with the financial performance of Nigerian manufacturing firms, measured as return on equity (ROE). Further, the firms with moderate level of debt ratio are found positively associated with ROE. In contrast, all equity-financed firms and those firms with excessive debts financing are negatively associated with ROE. A positive association is also found between firm size and revenue growth rate with ROE. Nigerian manufacturing firms are recommended to apply agency theory of optimal debts financing to address their financial constraint and poor performance issues. © ExcelingTech Pub, UK.",,"Tunku Puteri Intan Safinaz School of Accountancy (TISSA-UUM), Universiti Utara Malaysia, UUM Sintok, Kedah, 06010, Malaysia; Kogi State University, Anyigba, Kogi State, Nigeria",Rejected
693,Application of improved adaptive Kalman filter in Chinas interest rate market,"Stochel, M.G. and Cholda, P. and Wawrowski, M.R.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"This paper proposes a technical debt prioritization technique to be used throughout software development lifecycle. Our method stresses a broader perspective of the product, so the focus is kept on optimizing the software artifacts supporting the complete flow of the value for the customer (including e.g. test environment or deployment pipelines). Many technical debt approaches are focused on static code analysis and misconsider business aspects as a separate activity. On the contrary, our method, based on the New Solution Selling Process, strongly advocates for a business perspective. It facilitates technical debt valuation against a predicted product roadmap by a close alignment with a structured sales process and the advancement of sales opportunities. Taking into account prediction of sales, progress of conversations with potential clients and bids, probability that a given functionality will be prioritized for the development, this approach may serve as a reference point for measuring business value of technical debt continuously. This valuation serves as a relative comparison of technical debt items enabling prioritization of effort to pay off technical debt. The method was evaluated on a release of a wireless telecommunication system. The results confirm that the suggested priorities may address the most profitable product areas from the company's perspective and ultimately optimize the value for customers. © 2020 IEEE.",10.1109/SEAA51224.2020.00066,"Motorola Solutions, Krakow, Poland; AGH University of Science and Technology, Department of Telecommunications, Krakow, Poland",Accepted
694,Software Security Specifications and Design: How Software Engineers and Practitioners Are Mixing Things up,"Stochel, M.G. and Cholda, P. and Wawrowski, M.R.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"In this survey paper on the recent research, the authors evaluate consistency of the use of technical debt terminology and its convergence with the agreed-upon conceptual model. This consistency is important from the perspective of decision makers, who may delay or even abandon investment in a given area of the product, unless the benefits from repaying a specific technical debt are clear enough. Additionally, the paper discusses a degree in which the metaphorical origins of the technical debt term are still present and influence the research. The analysis is focused on the selected conference papers and offers a view on the inherent dynamics behind shaping the technical debt concept and its conceptual model. Besides, by discussing aspects related to cognitive linguistics, this study provides the means to understand this dynamics and equip the reader with suggestions to decrease ambiguity in the research.The results of the research lead to the following conclusions: 1. Ambiguity stemming from the origin of metaphorical expression of technical debt still exists in the research and there is a need to decrease it by e.g. framing, clarification, and explicit limitation of the research field. 2. Tool designers, such as SonarQube, are not bound by the research results and lead to more confusion in defining technical debt. 3. Risk Management models should be applied to enable technical debt management by decision makers. Thus, Architecture Tradeoff Analysis Method and other Quality Attribute Models may serve as good references to expand the current technical debt model. Even though some ambiguity is still present, the technical debt concept as a software development artifact and agreed-upon conceptual model provide a consistent approach for interpretation and analysis of technical debt phenomenon. Notably, code smells can be mapped to a list of symptoms of technical debt items. © 2020 IEEE.",10.1109/SEAA51224.2020.00067,"Motorola Solutions, Krakow, Poland; AGH University of Science and Technology, Department of Telecommunications, Krakow, Poland",Accepted
695,Surveying Software Practitioners on Technical Debt Payment Practices and Reasons for not Paying off Debt Items,"Krivorotov, V.V. and Fediai, E.S. and Ivanova, O.Y. and Polyakova, O.Y.","Bulletin of the South Ural State University, Series: Mathematical Modelling, Programming and Computer Software",2020,"The article considers mathematical tools for modelling economic policy as a whole, as well as convergence in the field of labor, foreign economic activity, monetary and debt policy. Convergence was estimated using the convergence model, which characterizes the decrease in time spread in the levels of development of countries and regions, reflecting the negative relationship between economic growth rates and the initial level of development of countries and regions. The convergence was estimated by the coefficient of variation and by the dispersion-based model. To assess convergence, we used the Barro and Salai- Martin models, as well as the Baumol, Solow-Svan, and Quadrado-Rour models. The use of this mathematical toolkit allows to explore the presence and speed of convergence before and after joining international integration associations. The proposed mathematical modelling tools are recommended to be used in order to analyze convergence processes, study the dynamics of convergence or divergence, and also to adjust the directions and methods of state and regional economic policies of countries included in the integration association. © 2020 South Ural State University. All rights reserved.",10.14529/mmp200306,"Ural Federal University, Ekaterinburg, Russian Federation; South Ural State University, Chelyabinsk, Russian Federation; Research Centre for Industrial Development Problems of NAS of Ukraine, Kharkov, Ukraine",Rejected
696,On the detection of community smells using genetic programming-based ensemble classifier chain,"Zabardast, E. and Gonzalez-Huerta, J. and Smite, D.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"Code evolution, whether related to the development of new features, bug fixing, or refactoring, inevitably changes the quality of the code. One particular type of such change is the accumulation of Technical Debt (TD) resulting from sub-optimal design decisions. Traditionally, refactoring is one of the means that has been acknowledged to help to keep TD under control. Developers refactor their code to improve its maintainability and to repay TD (e.g., by removing existing code smells and anti-patterns in the source code). While the accumulation of the TD and the effect of refactoring on TD have been studied before, there is a lack of empirical evidence from industrial projects on how the different types of code changes affect the TD and whether specific refactoring operations are more effective for repaying TD. To fill this gap, we conducted an empirical study on an industrial project and investigated how Refactoring, Bug Fixing, and New Development affect the TD. We have analyzed 2, 286 commits in total to identify which activities reduced, kept the same, or even increased the TD, further delving into specific refactoring operations to assess their impact. Our results suggest that TD in the studied project is mainly introduced in the development of new features (estimated in 72.8 hours). Counterintuitively, from the commits tagged as refactoring, only 22.90% repay TD (estimated to repay 8.30 hours of the TD). Moreover, while some types of refactoring operations (e.g., Extract Method), help repaying TD, other refactoring operations (e.g., Move Class) are highly prone to introduce more TD. © 2020 IEEE.",10.1109/SEAA51224.2020.00068,"Blekinge Institute of Technology, Software Engineering Research Lab SERL Sweden, Karlskrona, Sweden",Accepted
697,Detection of Taxpayers with High Probability of Non-payment: An Implementation of a Data Mining Framework,"Rantala, L. and Mantyla, M. and Lo, D.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"When developers use different keywords such as TODO and FIXME in source code comments to describe self-admitted technical debt (SATD), we refer it as Keyword-Labeled SATD (KL-SATD). We study KL-SATD from 33 software repositories with 13,588 KL-SATD comments. We find that the median percentage of KL-SATD comments among all comments is only 1,52%. We find that KL-SATD comment contents include words expressing code changes and uncertainty, such as remove, fix, maybe and probably. This makes them different compared to other comments. KL-SATD comment contents are similar to manually labeled SATD comments of prior work. Our machine learning classifier using logistic Lasso regression has good performance in detecting KL-SATD comments (AUC-ROC 0.88). Finally, we demonstrate that using machine learning we can identify comments that are currently missing but which should have a SATD keyword in them. Automating SATD identification of comments that lack SATD keywords can save time and effort by replacing manual identification of comments. Using KL-SATD offers a potential to bootstrap a complete SATD detector. © 2020 IEEE.",10.1109/SEAA51224.2020.00069,"University of Oulu, ITEE, M3S, Oulu, Finland; Singapore Management University, Information Systems, Singapore, Singapore",Accepted
698,Quality attribute trade-offs in the embedded systems industry: an exploratory case study,"Tan, J. and Feitosa, D. and Avgeriou, P.","Proceedings - 46th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2020",2020,"Technical debt (TD) reflects issues that may negatively affect software maintenance and evolution. There is currently little evidence on how the different types of TD co-occur; for example, how code smells and design smells affect the same part of the system. This paper investigates how different types of TD co-occur, as well as the time period of the co-occurrence. To that end, we analyzed the co-occurring associations between five types of TD, captured in 42 SonarQube rules, in 3862 files of 20 Python projects from the Apache Software Foundation. We found that this phenomenon is dominant, affecting more than 90% of Python files. We also found that Documentation Debt and Test Debt appear in the majority of the files, although it seems to be mostly by coincidence. Finally, we noticed that co-occurrence of TD seems to happen very quickly: co-occurring issues tend to be introduced within the same week. But once it does happen, it is hard to get rid of. These results can benefit both researchers and practitioners by: aiding the prioritization of TD remediation; leading to novel tools for detecting co-occurring TD and warning potential issues; shedding further light on the explanation of how TD is introduced and can be mitigated. © 2020 IEEE.",10.1109/SEAA51224.2020.00082,"Bernoulli Institute for Mathematics, Computer Science and Artificial Intelligence, University of Groningen, Groningen, Netherlands",Accepted
699,On the Relationship between Developer Experience and Refactoring: An Exploratory Study and Preliminary Results,"Maipradit, R. and Treude, C. and Hata, H. and Matsumoto, K.",Empirical Software Engineering,2020,"Self-admitted technical debt refers to situations where a software developer knows that their current implementation is not optimal and indicates this using a source code comment. In this work, we hypothesize that it is possible to develop automated techniques to understand a subset of these comments in more detail, and to propose tool support that can help developers manage self-admitted technical debt more effectively. Based on a qualitative study of 333 comments indicating self-admitted technical debt, we first identify one particular class of debt amenable to automated management: on-hold self-admitted technical debt (on-hold SATD), i.e., debt which contains a condition to indicate that a developer is waiting for a certain event or an updated functionality having been implemented elsewhere. We then design and evaluate an automated classifier which can identify these on-hold instances with an area under the receiver operating characteristic curve (AUC) of 0.98 as well as detect the specific conditions that developers are waiting for. Our work presents a first step towards automated tool support that is able to indicate when certain instances of self-admitted technical debt are ready to be addressed. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-020-09854-3,"Nara Institute of Science and Technology, Ikoma, Japan; University of Adelaide, Adelaide, Australia",Accepted
700,Refactoring community smells in the wild: The practitioner's field manual,"Feitosa, D. and Ampatzoglou, A. and Gkortzis, A. and Bibi, S. and Chatzigeorgiou, A.",Journal of Systems and Software,2020,"During the last years the TD community is striving to offer methods and tools for reducing the amount of TD, but also understand the underlying concepts. One popular practice that still has not been investigated in the context of TD, is software reuse. The aim of this paper is to investigate the relation between white-box code reuse and TD principal and interest. In particular, we target at unveiling if the reuse of code can lead to software with better levels of TD. To achieve this goal, we performed a case study on approximately 400 OSS systems, comprised of 897 thousand classes, and compare the levels of TD for reused and natively-written classes. The results of the study suggest that reused code usually has less TD interest; however, the amount of principal in them is higher. A synthesized view of the aforementioned results suggest that software engineers shall opt to reuse code when necessary, since apart from the established reuse benefits (i.e., cost savings, increased productivity, etc.) are also getting benefits in terms of maintenance. Apart from understanding the phenomenon per se, the results of this study provide various implications to research and practice. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110618,"Data Research Centre, University of GroningenGroningen, Netherlands; Department of Applied Informatics, University of MacedoniaThessaloniki, Greece; Department of Management Science and Technology, Athens University of Economics and Business, Greece; Department of Informatics and Telecommunications, University of Western MacedoniaKozani, Greece",Accepted
701,"Software development data for architecture analysis: expectations, reality, and future directions","Besker, T. and Ghanbari, H. and Martini, A. and Bosch, J.",Journal of Systems and Software,2020,"Context: Previous research in the Technical Debt (TD) field has mainly focused on the technical and economic aspects, while its human aspect has received minimal attention. Objective: This paper aims to understand how software developers morale is influenced by TD and how their morale is influenced by TD management activities. Furthermore, this study correlates the morale with the amount of wastage of time due to TD. Method: Firstly, we conducted 15 interviews with professionals, and, secondly, these data were complemented with a survey. Thirdly, we collected 473 data points from 43 developers reporting their amount of wasted time. The collected data were analyzed using both quantitative and qualitative techniques, including thematic and statistical analysis. Results: Our results show that the occurrence of TD is associated with a lack of progress and waste of time. This might have a negative influence on developers morale. Further, management of TD seems to have a positive influence on developers morale. Conclusions: The results highlight the effects TD has on practitioners software work. This study presents results indicating that software suffering from TD reduces developers morale and thereby also their productivity. However, our results also indicate that TD management increases developers morale and developer productivity. © 2020",10.1016/j.jss.2020.110586,"Chalmers University of Technology, Hörselgången 4, Gothenburg, 417 56, Sweden; Aalto University, Ekonominaukio 1, Espoo, 02510, Finland; University of Oslo, Department of Informatics, Gaustadalléen 23B, 0373 Oslo, Norway",Accepted
702,Exploiting group shuffling dynamics to convey the importance of good software design,"Maipradit, R. and Lin, B. and Nagy, C. and Bavota, G. and Lanza, M. and Hata, H. and Matsumoto, K.","Proceedings - 20th IEEE International Working Conference on Source Code Analysis and Manipulation, SCAM 2020",2020,"Modern software is developed under considerable time pressure, which implies that developers more often than not have to resort to compromises when it comes to code that is well written and code that just does the job. This has led over the past decades to the concept of 'technical debt', a short-Term hack that potentially generates long-Term maintenance problems. Self-Admitted technical debt (SATD) is a particular form of technical debt: developers consciously perform the hack but also document it in the code by adding comments as a reminder (or as an admission of guilt). We focus on a specific type of SATD, namely 'On-hold' SATD, in which developers document in their comments the need to halt an implementation task due to conditions outside of their scope of work (e.g., an open issue must be closed before a function can be implemented).We present an approach, based on regular expressions and machine learning, which is able to detect issues referenced in code comments, and to automatically classify the detected instances as either 'On-hold' (the issue is referenced to indicate the need to wait for its resolution before completing a task), or as 'cross-reference', (the issue is referenced to document the code, for example to explain the rationale behind an implementation choice). Our approach also mines the issue tracker of the projects to check if the On-hold SATD instances are 'superfluous' and can be removed (i.e., the referenced issue has been closed, but the SATD is still in the code). Our evaluation confirms that our approach can indeed identify relevant instances of On-hold SATD. We illustrate its usefulness by identifying superfluous On-hold SATD instances in open source projects as confirmed by the original developers. © 2020 IEEE.",10.1109/SCAM51674.2020.00011,"Nara Institute of Science and Technology, Japan; Software Institute, Usi Università della Svizzera Italiana, Switzerland",Accepted
703,Splicing Community Patterns and Smells: A Preliminary Study,"Fucci, G. and Zampetti, F. and Serebrenik, A. and Di Penta, M.","Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020",2020,"Self-Admitted Technical Debt (SATD) are comments, left by developers in the source code or elsewhere, aimed at describing the presence of TD, i.e., source code ""not ready yet"". Although this was never stated in the original paper by Potdar and Shihab, the term SATD might suggest that it refers to a ""self-admission""by whoever has written or changed the source code. This paper empirically investigates, using a curated SATD dataset from five Java open-source projects, (i) the extent to which SATD comments are introduced by authors different from those who have done last changes to the related source code, and (ii) when this happens, what is the level of ownership those developers have about the commented source code. Results of the study indicate that, depending on the project, the percentage of SATD admissions introduced or changed without modifying the related source code varies between 0% and 16%, and therefore represent a small, yet not negligible, phenomenon. The level of ownership of those developers is not particularly low, with a median value per project between 10% and 42%. This indicates the possible use of SATD as a different way to perform code review, although this behavior should be considered sub-optimal to the use of more traditional tools, which entail suitable notification mechanisms. © 2020 IEEE.",10.1109/ICSME46990.2020.00070,"University of Sannio, Italy; Eindhoven University of Technology, Netherlands",Accepted
704,How junior developers deal with their technical debt?,"Li, Z. and Yu, Q. and Liang, P. and Mo, R. and Yang, C.","Proceedings - 2020 IEEE International Conference on Software Maintenance and Evolution, ICSME 2020",2020,"Defect technical debt (defect debt) refers to known deferred bugs that have not been fixed. The interest of a defect debt item (i.e., bug) is the extra effort needed to fix the bug due to the delay of fixing. It is important to measure defect debt interest in a software system in order to be aware of how much the interest of certain bugs is and which bugs should be fixed first. Furthermore, it is valuable to understand the features of the bugs of high interest or no interest, so as to facilitate the identification of those kinds of bugs. In this work, we proposed three pairs of measures for quantifying defect debt interest at three granularities (i.e., lines of code, source file, and package) of software changes, and conducted an exploratory case study on 13,438 bugs collected from 59 non-trivial Apache open source software projects written mainly in Java. We have the following findings. (1) Each bug, with an average of 224 days delay of fixing, has interest of 660 to 845 lines of code, 0.57 to 1.05 source files, and 0.29 to 0.35 package on average in need for understanding or modifying when fixing the bug. (2) The average interest of a bug shows overall increasing trends over delayed time of bug fixing and bug priority levels from the lowest to highest. (3) Around 30% of the bugs under study did not incur interest at the granularity of lines of code, which means that the involved source files in the bug-fixing commits of such bugs were not modified at all during the delayed time of bug fixing. (4) The average code change size of bug-fixing commits of a bug without interest is much smaller than that of a bug with (high) interest; for a bug without interest at the granularity of lines of code, the source files involved in the bug-fixing commits of the bug were alternately modified by different committers much less frequently than those of the bug with (high) interest. © 2020 IEEE.",10.1109/ICSME46990.2020.00065,"Central China Normal University, School of Computer Science Hubei Provincial, Key Laboratory of Artificial Intelligence and Smart Learning, Wuhan, China; Wuhan University, School of Computer Science, Wuhan, China; Ibo Technology (Shenzhen) Co. Ltd., Shenzhen, China",Accepted
705,Trade-offs in managing risk and technical debt in industrial research labs: An experience report,"Benidris, M. and Ammar, H. and Dzielski, D. and Benamer, W.H.",ACM International Conference Proceeding Series,2020,"Technical Debt (TD) can be detected using different methods. TD is a metaphor that refers to short-term solutions in software development, which may affect the cost of the software development life-cycle. Several tools have been developed to detect, estimate, or manage TD. TD can be indicated through smells, code comments, and software metrics. Machine learning Techniques (MLTs) are used in many software engineering topics such as fault-proneness, bug severity, and code smell. In this paper we use four internal structure metrics to identify and classify Architecture Technical Debt (ATD) risk by using MLTs. We show that MLTs can identify and classify the risk of ATD on software components to help the decision-makers to prioritizing the refactoring decisions based on the level of the risk. © 2020 ACM.",10.1145/3410352.3410730,"Lane Department CS and EE, West Virginia University, Morgantown, WV, United States; Faculty of IT, University of Benghazi, Benghazi, Libyan Arab Jamahiriya",Accepted
706,What are the practices used by software practitioners on technical debt payment: Results from an international family of surveys,"Maia, D. and Couto, M. and Saraiva, J. and Pereira, R.","Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering Workshops, ASEW 2020",2020,"This paper extends previous work on the concept of a new software energy metric: Energy Debt. This metric is a reflection on the implied cost, in terms of energy consumption over time, of choosing an energy flawed software implementation over a more robust and efficient, yet time consuming, approach.This paper presents the implementation a SonarQube tool called E-Debitum which calculates the energy debt of Android applications throughout their versions. This plugin uses a robust, well defined, and extendable smell catalog based on current green software literature, with each smell defining the potential energy savings. To conclude, an experimental validation of E-Debitum was executed on 3 popular Android applications with various releases, showing how their energy debt fluctuated throughout releases. © 2020 ACM.",10.1145/3417113.3422999,"HASLab/INESC Tec Universidade Do Minho, Portugal; HASLab/INESC Tec, Portugal",Accepted
707,On energy debt: Managing consumption on evolving software,"Wang, X. and Liu, J. and Li, L. and Chen, X. and Liu, X. and Wu, H.","Proceedings - 2020 35th IEEE/ACM International Conference on Automated Software Engineering, ASE 2020",2020,"Self-Admitted Technical Debt (SATD) is a sub-type of technical debt. It is introduced to represent such technical debts that are intentionally introduced by developers in the process of software development. While being able to gain short-term benefits, the introduction of SATDs often requires to be paid back later with a higher cost, e.g., introducing bugs to the software or increasing the complexity of the software. To cope with these issues, our community has proposed various machine learning-based approaches to detect SATDs. These approaches, however, are either not generic that usually require manual feature engineering efforts or do not provide promising means to explain the predicted outcomes. To that end, we propose to the community a novel approach, namely HATD (Hybrid Attention-based method for self-admitted Technical Debt detection), to detect and explain SATDs using attention-based neural networks. Through extensive experiments on 445, 365 comments in 20 projects, we show that HATD is effective in detecting SATDs on both in-the-lab and in-the-wild datasets under both within-project and cross-project settings. HATD also outperforms the state-of-the-art approaches in detecting and explaining SATDs. © 2020 ACM.",10.1145/3324884.3416583,"School of Computer Science, Wuhan University, Wuhan, China; Faculty of Information Technology, Monash University, Melbourne, Australia; School of Information Technology, Deakin University, Geelong, Australia; School of Information Science and Engineering, Yunnan University, Kunming, China",Accepted
708,Skuld: A self-learning tool for impact-driven technical debt management,"Liu, J. and Huang, Q. and Xia, X. and Shihab, E. and Lo, D. and Li, S.","Proceedings - 2020 ACM/IEEE 42nd International Conference on Software Engineering: Software Engineering in Society, ICSE-SEIS 2020",2020,"Developers of deep learning applications (shortened as application developers) commonly use deep learning frameworks in their projects. However, due to time pressure, market competition, and cost reduction, developers of deep learning frameworks (shortened as framework developers) often have to sacrifice software quality to satisfy a shorter completion time. This practice leads to technical debt in deep learning frameworks, which results in the increasing burden to both the application developers and the framework developers in future development.In this paper, we analyze the comments indicating technical debt (self-Admitted technical debt) in 7 of the most popular open-source deep learning frameworks. Although framework developers are aware of such technical debt, typically the application developers are not. We find that: 1) there is a significant number of technical debt in all the studied deep learning frameworks. 2) there is design debt, defect debt, documentation debt, test debt, requirement debt, compatibility debt, and algorithm debt in deep learning frameworks. 3) the majority of the technical debt in deep learning framework is design debt (24.07%-65.27%), followed by requirement debt (7.09%-31.48%) and algorithm debt (5.62%-20.67%). In some projects, compatibility debt accounts for more than 10%. These findings illustrate that technical debt is common in deep learning frameworks, and many types of technical debt also impact the deep learning applications. Based on our findings, we highlight future research directions and provide recommendations for practitioners. © 2020 ACM.",,"Zhejiang University, College of Computer Science and Technology, Hangzhou, Zhejiang, China; Monash University, Faculty of Information Technology, Melbourne, VIC, Australia; Concordia University, Department of Computer Science and Software Engineering, Montreal, Canada; Singapore Management University, School of Information System, Singapore, Singapore",Accepted
709,Capture the Feature Flag: Detecting Feature Flags in Open-Source,"Halepmollasi, R.","Proceedings - 2020 ACM/IEEE 42nd International Conference on Software Engineering: Companion, ICSE-Companion 2020",2020,"Technical debt (TD), its impact on development and its consequences such as defects and vulnerabilities, are of common interest and great importance to software researchers and practitioners. Although there exist many studies investigating TD, the majority of them focuses on identifying and detecting TD from a single stage of development. There are also studies that analyze vulnerabilities focusing on some phases of the life cycle. Moreover, several approaches have investigated the relationship between TD and vulnerabilities, however, the generalizability and validity of findings are limited due to small dataset. In this study, we aim to identify TD through multiple phases of development, and to automatically measure it through data and text mining techniques to form a comprehensive feature model. We plan to utilize neural network based classifiers that will incorporate evolutionary changes on TD measures into predicting vulnerabilities. Our approach will be empirically assessed on open source and industrial projects. © 2020 ACM.",10.1145/3377812.3381396,"Istanbul Technical University, Faculty of Computer and Informatics Engineering, Turkey",Accepted
710,DATESSO: Self-adapting service composition with debt-aware two levels constraint reasoning,"Apa, C. and Solari, M. and Vallespir, D. and Travassos, G.H.",International Symposium on Empirical Software Engineering and Measurement,2020,"Background: Technical debt (TD) has been an important focus of attention in recent years by the scientific community and the software industry. TD is a concept for expressing the lack of internal software quality that directly affects its capacity to evolve. Some studies have focused on the TD industry perspective. Aims: To characterize how the software industry professionals in Uruguay understand, perceive, and adopt technical debt management (TDM) activities. Method: To replicate a Brazilian survey with the Uruguayan software industry and compare their findings. Results: From 259 respondents, many indicated any awareness of the TD concept due to the faced difficult to realize how to associate such a concept with actual software issues. Therefore, it is possible to observe a considerable variability in the importance of TDM among the respondents. However, a small part of the respondents declares to carry out TDM activities in their organizations. A list of software technologies declared as used by practitioners was produced and can be useful to support TDM activities. Conclusions: The TD concept and its management are not common yet in Uruguay. There are indications of TD unawareness and difficulties in the conduction of some TDM activities considered as very important by the practitioners. There is a need for more effort aiming to disseminate the TD knowledge and to provide software technologies to support the adoption of TDM in Uruguay. It is likely other software engineering communities face similar issues. Therefore, further investigations in these communities can be of interest. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3382494.3421463,"Universidad de la República, Montevideo, Uruguay; Universidad ORT Uruguay, Montevideo, Uruguay; PESC/COPPE, Universidade Federal Do Rio de Janeiro, Rio de Janeiro, Brazil",Accepted
711,Experiences with technical debt and management strategies in production systems engineering,"Molnar, A.-J. and Motogna, S.",International Symposium on Empirical Software Engineering and Measurement,2020,"Background: A consistent body of research and practice have identified that technical debt provides valuable and actionable insight into the design and implementation deficiencies of complex software systems. Existing software tools enable characterizing and measuring the amount of technical debt at selective granularity levels; by providing a computational model, they enable stakeholders to measure and ultimately control this phenomenon. Aims: In this paper we aim to study the evolution and characteristics of technical debt in open-source software. For this, we carry out a longitudinal study that covers the entire development history of several complex applications. The goal is to improve our understanding of how the amount and composition of technical debt changes in evolving software. We also study how new technical debt is introduced in software, as well as identify how developers handle its accumulation over the long term. Method: We carried out our evaluation using three complex, open-source Java applications. All 110 released versions, covering more than 10 years of development history for each application were analyzed using SonarQube. We studied how the amount, composition and history of technical debt changed during development, compared our results across the studied applications and present our most important findings. Results: For each application, we identified key versions during which large amounts of technical debt were added, removed or both. This had significantly more impact when compared to the lines of code or class count increases that generally occurred during development. However, within each version, we found high correlation between file lines of code and technical debt. We observed that the Pareto principle was satisfied for the studied applications, as 20% of issue types generated around 80% of total technical debt. Interestingly, there was a large degree of overlap between the issues that generated most of the debt across the studied applications. Conclusions: Early application versions showed greater fluctuation in the amount of existing technical debt. We found application size to be an unreliable predictor for the quantity of technical debt. Most debt was introduced in applications as part of milestone releases that expanded their feature set; likewise, we identified releases where extensive refactoring significantly reduced the level of debt. We also discovered that technical debt issues persist for a long time in source code, and their removal did not appear to be prioritized according to type or severity. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3382494.3410673,"Babe?-Bolyai University, Cluj-Napoca, Romania",Accepted
712,On the relationship between self-admitted technical debt removals and technical debt measures,"Lenarduzzi, V. and Mandi?, V. and Katin, A. and Taibi, D.",International Symposium on Empirical Software Engineering and Measurement,2020,"Background. Software engineering is one of the engineering fields with the highest inflow of junior engineers. Tools that utilize source code analysis to provide feedback on internal software quality, i.e. Technical Debt (TD), are valuable to junior developers who can learn and improve their coding skills with minimal consultations with senior colleagues. Objective. We aim at understating which SonarQube TD items junior developers prioritize during the refactoring and how long they take to refactor them. Method. We designed a case study with replicated design and we conducted it with 185 junior developers in two countries, that developed 23 projects with different programming languages and architectures. Results. Junior developers focus homogeneously on different types of TD items. Moreover, they can refactor items in a fraction of the estimated time, never spending more than 50% of the time estimated by SonarQube. Conclusion. Junior Developers appreciate the usage of SonarQube and considered as a useful tool. Companies might ask junior developers to quickly clean their code. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3382494.3422169,"LUT University, Finland; University of Novi Sad, Serbia; Tampere University, Finland",Accepted
713,Continuous practices and technical debt: A systematic literature review,"Cadavid, H. and Andrikopoulos, V. and Avgeriou, P. and Klein, J.",International Symposium on Empirical Software Engineering and Measurement,2020,"Background: The Systems Engineering and Software Engineering disciplines are highly intertwined in most modern Systems of Systems (SoS), and particularly so in industries such as defense, transportation, energy and health care. However, the combination of these disciplines during the architecting of SoS seems to be especially challenging; the literature suggests that major integration and operational issues are often linked to ambiguities and gaps between system-level and software-level architectures. Aims: The objective of this paper is to empirically investigate: 1) the state of practice on the interplay between these two disciplines in the architecting process of systems with SoS characteristics; 2) the problems perceived due to this interplay during said architecting process; and 3) the problems arising due to the particular characteristics of SoS systems. Method:We conducted a questionnaire-based online survey among practitioners from industries in the aforementioned domains, having a background on Systems Engineering, Software Engineering or both, and experience in the architecting of systems with SoS characteristics. The survey combined multiple-choice and openended questions, and the data collected from the 60 respondents were analyzed using quantitative and qualitative methods. Results: We found that although in most cases the software architecting process is governed by system-level requirements, the way requirements were specified by systems engineers, and the lack of domain-knowledge of software engineers, often lead to misinterpretations at software level. Furthermore, we found that unclear and/or incomplete specifications could be a common cause of technical debt in SoS projects, which is caused, in part, by insufficient interface definitions. It also appears that while the SoS concept has been adopted by some practitioners in the field, the same is not true about the existing and growing body of knowledge on the subject in Software Engineering resulting in recurring problems with system integration. Finally, while not directly related to the interplay of the two disciplines, the survey also indicates that low-level hardware components, despite being identified as the root cause of undesired emergent behavior, are often not considered when modeling or simulating the system. Conclusions: The survey indicates the need for tighter collaboration between the two disciplines, structured around concrete guidelines and practices for reconciling their differences. A number of open issues identified by this study require further investigation. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3382494.3410671,"University of Groningen, Groningen, Netherlands; Gloucester, MA, United States",Rejected
714,Technical debt in procedural model transformation languages,"Gama, E. and Freire, S. and Mendonça, M. and Spinola, R.O. and Paixao, M. and Cortes, M.I.",ACM International Conference Proceeding Series,2020,"Context. The accumulation of technical debt (TD) items can lead to risks in software projects, such a gradual decrease in product quality, difficulties in their maintenance, and ultimately the cancellation of the project. To mitigate these risks, developers need means to identify TD items, which enable better documentation and improvements in TD management. Recent literature has proposed different indicator-based strategies for TD identification. However, there is limited empirical evidence to support that developers use these indicators to identify TD in practice. In this context, data from QA websites, such as Stack Overflow (SO), have been extensively leveraged in recent studies to investigate software engineering practices from a developers' point of view. Goal. This paper seeks to investigate, from the point of view of practitioners, how developers commonly identify TD items in their projects. Method. We mined, curated, and selected a total of 140 TD-related discussions on SO, from which we performed both quantitative and qualitative analyses. Results. We found that SO's practitioners commonly discuss TD identification, revealing 29 different low-level indicators for recognizing TD items on code, infrastructure, architecture, and tests. We grouped low-level indicators based on their themes, producing an aggregated set of 13 distinct high-level indicators. We then classified all low-and high-level indicators into three different categories according to which type of debt each of them is meant to identify. Conclusions. We organize the empirical evidence on the low-and high-level indicators and their relationship to types of TD in a conceptual framework, which may assist developers and serve as guidance for future research, shedding new light on TD identification state-of-practice. © 2020 ACM.",10.1145/3422392.3422429,"State University of Ceara (UECE), Fortaleza, Brazil; Federal Institute of Ceara (IFCE), Morada Nova, Brazil; Federal University of Bahia (UFBA) Salvador, Brazil; Salvador University (UNIFACS) and State University of Bahia (UNEB) Salvador, Brazil; University of Fortaleza (UNIFOR) Fortaleza, Brazil",Accepted
715,Beyond the Code: Mining Self-Admitted Technical Debt in Issue Tracker Systems,"Gomes, R.A. and Pinheiro, L.B.L. and MacIel, R.S.P.",ACM International Conference Proceeding Series,2020,"Model-driven development (MDD) and Technical Debt (TD) are software engineering approaches that look for promoting the quality of systems under development. Most research on TD focuses on application code as primary TD sources. In an MDD project, however, dealing with technical debt only on the source code may not be an adequate strategy because MDD projects should focus their software building efforts on models. Besides, in MDD projects, code generation is often done at a later stage than creating models, then dealing with TD only in source code can lead to unnecessary interest payments due to unmanaged debts, such as model and source codes artifacts desynchronization. Recent works concluded that MDD project codes are not technical debt free, making it necessary to investigate the possibility and benefits of applying TD identification techniques in earlier stages of the development process, such as in modeling phases. The use of TD concept in an MDD context is also known as Model-Driven Technical Debt (MDTD). This paper intends to analyze whether it is possible to use source code technical debt detection strategies to identify TD on code-generating models in the context of model-driven development projects. A catalog of nine different model technical debt items for platform-independent code-generating models was specified. An evaluation was performed to observe the effectiveness of the proposed catalog compared to existing source code identification techniques found in the literature. Through three different open source software projects, more than 78 thousand lines of code were investigated. Results revealed that, although the catalog items present different precision rates, it is possible to identify these model-driven technical debts before source code is generated. We hope that sharing this catalog version provides future contributions and improvements. © 2020 ACM.",10.1145/3422392.3422434,"Federal University of Bahia, Salvador, Bahia, Brazil",Accepted
716,Financial leverage and financial performance of Nigerian manufacturing firms,"Chen, H. and Ren, Z. and Qiao, L. and Zhou, Z. and Gao, G. and Ma, Y. and Jiang, H.","Proceedings - 2020 7th International Conference on Dependable Systems and Their Applications, DSA 2020",2020,"Software requirements are constantly changing. Consequently, the development process is frequently under time pressure, which results in technical debt. To illustrate the symptoms of technical debt, 22 code smells have been introduced to indicate the poor design in code fragment, among which refused bequest is one of the most harmful smells and with high diffuseness. However, refused bequest is rarely taken into account because there is a lack of dataset. Moreover, it is difficult to design the detection rules for refused bequest compared with other popular smells.In this paper, we propose a machine-learning-based refused bequest smell detection framework SEADART, which features the utilization of a set of synthetic smelly instances. Specifically, SEADART comprises three components: (1) a smell generation approach, and (2) a model training strategy, and (3) an AdaBoost-based detection model. We evaluate the performance of the proposed framework. The evaluation results suggest that the generated smelly instances are reliable, and the trained AdaBoost model significantly outperforms the state-of-the-art over a real-world dataset. © 2020 IEEE.",10.1109/DSA51864.2020.00019,"Dalian University of Technology, School of Software, Dalian, China; Beijing Institute of Control Engineering, Beijing, China; Taiyuan University of Technology, Taiyuan, China",Accepted
717,Continuous Debt Valuation Approach (CoDVA) for Technical Debt Prioritization,"Pecorelli, F. and Di Nucci, D. and De Roover, C. and De Lucia, A.",Journal of Systems and Software,2020,"Code smells can compromise software quality in the long term by inducing technical debt. For this reason, many approaches aimed at identifying these design flaws have been proposed in the last decade. Most of them are based on heuristics in which a set of metrics is used to detect smelly code components. However, these techniques suffer from subjective interpretations, a low agreement between detectors, and threshold dependability. To overcome these limitations, previous work applied Machine-Learning that can learn from previous datasets without needing any threshold definition. However, more recent work has shown that Machine-Learning is not always suitable for code smell detection due to the highly imbalanced nature of the problem. In this study, we investigate five approaches to mitigate data imbalance issues to understand their impact on Machine Learning-based approaches for code smell detection in Object-Oriented systems and those implementing the Model-View-Controller pattern. Our findings show that avoiding balancing does not dramatically impact accuracy. Existing data balancing techniques are inadequate for code smell detection leading to poor accuracy for Machine-Learning-based approaches. Therefore, new metrics to exploit different software characteristics and new techniques to effectively combine them are needed. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110693,"SeSa Lab - University of Salerno, Fisciano, Italy; Tilburg University - Jheronimus Academy of Data Science, s-Hertogenbosch, Netherlands; Vrije Universiteit Brussel, Brussels, Belgium",Accepted
718,On Coherence in Technical Debt Research : Awareness of the Risks Stemming from the Metaphorical Origin and Relevant Remediation Strategies,"Baldassarre, M.T. and Lenarduzzi, V. and Romano, S. and Saarimäki, N.",Information and Software Technology,2020,"Context. Among the static analysis tools available, SonarQube is one of the most used. SonarQube detects Technical Debt (TD) itemsi.e., violations of coding rulesand then estimates TD as the time needed to remedy TD items. However, practitioners are still skeptical about the accuracy of remediation time estimated by the tool. Objective. In this paper, we analyze both diffuseness of TD items and accuracy of remediation time, estimated by SonarQube, to fix TD items on a set of 21 open-source Java projects. Method. We designed and conducted a case study where we asked 81 junior developers to fix TD items and reduce the TD of 21 projects. Results. We observed that TD items are diffused in the analyzed projects and most items are code smells. Moreover, the results point out that the remediation time estimated by SonarQube is inaccurate and, as compared to the actual time spent to fix TD items, is in most cases overestimated. Conclusions. The results of our study are promising for practitioners and researchers. The former can make more aware decisions during project execution and resource management, the latter can use this study as a starting point for improving TD estimation models. © 2020",10.1016/j.infsof.2020.106377,"University of Bari, Italy; LUT University, Finland; Tampere University, Finland",Accepted
719,Convergence modelling in international integration associations,"de Sousa, D.B.C. and Maia, P.H.M. and Rocha, L.S. and Viana, W.",Journal of the Brazilian Computer Society,2020,"Exception handling is a well-known technique used to improve software robustness. However, recent studies report that developers typically neglect exception handling (mostly novice ones). We believe the quality of exception handling code in a software project is directly affected (i) by the absence, or lack of awareness, of an explicit exception handling policy and guidelines and (ii) by a silent rising of exception handling anti-patterns. In this paper, we investigate this phenomenon in a case study of a long-lived large-scale Java Web system in a Public Education Institution, trying to better understand the relationship between (i) and (ii), and the impact of developers turnover, skills, and guidance in (ii). Our case study takes into account the technical and human aspects. As a first step, we surveyed 21 developers regarding their perception of exception handling in the systems institution. Next, we analysed the evolution of exception handling anti-patterns across 15 releases of the target system. We conducted a semi-structured interview with three senior software engineers, representatives of the development team, to present partial results of the case and raise possible causes for the found problems. The interviewed professionals and a second analysis of the code identified the high team turnover as the source of this phenomenon, since the public procurement process for hiring new developers has mostly attracted novice ones. These findings suggest that the absence of an explicit exception handling policy impacts negatively in the developers perception and implementation of exception handling. Furthermore, the absence of such policy has been leading developers to replicate existing anti-patterns and spread them through new features added during system evolution. We also observed that most developers have low skills regarding exception handling in general and low knowledge regarding the design and implementation of exception handling in the system. The system maintainer now has a diagnosis of the major causes of the quality problems in the exception handling code and was able to lead the required measures to repair this technical debt. © 2020, de Sousa et al.",10.1186/s13173-019-0095-5,"Federal University of Ceará, Av. Humberto Monte, Fortaleza, 60440-593, Brazil; State University of Ceará, Av. Dr. Silas Munguba, Fortaleza, 60741-000, Brazil",Rejected
720,"Refactoring, Bug Fixing, and New Development Effect on Technical Debt: An Industrial Case Study","Giacometti, R. and Torri, G. and Farina, G. and De Giuli, M.E.",Computational Management Science,2020,"The global financial crisis in 2008, and the European sovereign debt crisis in 2010, highlighted how credit risk in banking sectors cannot be analysed from a uniquely micro-prudential perspective, focused on individual institutions, but it has instead to be studied and regulated from a macro-prudential perspective, considering the banking sector as a complex system. Traditional risk management tools often fail to account for the complexity of the interactions in a financial system, and rely on simplistic distributional assumptions. In recent years machine learning techniques have been increasingly used, incorporating tools such as text mining, sentiment analysis, and network models in the risk management processes of financial institutions and supervisors. Network theory applications in particular are increasingly popular, as they allow to better model the intertwined nature of financial systems. In this work we set up an analytical framework that allows to decompose the credit risk of banks and sovereign countries in the European Union according to systematic (system-wide and regional) components. Then, the non-systematic components of risk are studied using a network approach, and a simple stress-test framework is set up to identify the potential transmission channels of distress and risk spillovers. Results highlight a relevant component of credit risk that is not explained by common factors, but can still be a potential vehicle for the transmission of shocks. We also show that due to the properties of the network structure, the transmission of shocks applied to different institutions is quite diversified, both in terms of breadth and speed. Our work is useful to both regulators and financial institutions, thanks to its flexibility and its requirement of data that can be easily available. © 2021, The Author(s).",10.1007/s10287-020-00385-2,"Department of Economics, University of Bergamo, Via dei Caniana 2, Bergamo, 24127, Italy; VB Technical University of Ostrava, Sokolská t?. 33, Ostrava, 702 00, Czech Republic; Mediobanca S.P.A, Milan, Italy; Department of Economics and Management, University of Pavia, Corso Str. Nuova, 65, Pavia, 27100, Italy",Rejected
721,"Prevalence, Contents and Automatic Detection of KL-SATD","Ampatzoglou, A. and Mittas, N. and Tsintzira, A.-A. and Ampatzoglou, A. and Arvanitou, E.-M. and Chatzigeorgiou, A. and Avgeriou, P. and Angelis, L.",Information and Software Technology,2020,"Context: The cornerstones of technical debt (TD) are two concepts borrowed from economics: principal and interest. Although in economics the two terms are related, in TD there is no study on this direction so as to validate the strength of the metaphor. Objective: We study the relation between Principal and Interest, and subsequently dig further into the ingredients of each concept (since they are multi-faceted). In particular, we investigate if artifacts with similar levels of TD Principal exhibit a similar amount of TD Interest, and vice-versa. Method: To achieve this goal, we performed an empirical study, analyzing the dataset using the Mantel test. Through the Mantel test, we examined the relation between TD Principal and Interest, and identified aspects that are able to denote proximity of artifacts, with respect to TD. Next, through Linear Mixed Effects (LME) modelling we studied the generalizability of the results. Results: The results of the study suggest that TD Principal and Interest are related, in the sense that classes with similar levels of TD Principal tend to have similar levels of Interest. Additionally, we have reached the conclusion that aggregated measures of TD Principal or Interest are more capable of identifying proximate artifacts, compared to isolated metrics. Finally, we have provided empirical evidence on the fact that improving certain quality properties (e.g., size and coupling) should be prioritized while ranking refactoring opportunities in the sense that high values of these properties are in most of the cases related to artifacts with higher levels of TD Principal. Conclusions: The findings shed light on the relations between the two concepts, and can be useful for both researchers and practitioners: the former can get a deeper understanding of the concepts, whereas the latter can use our findings to guide their TD management processes such as prioritization and repayment. © 2020 Elsevier B.V.",10.1016/j.infsof.2020.106391,"Department of Computer Science, Institute for Mathematics, Computer Science and AI, University of Groningen, Netherlands; Department of Chemistry, International Hellenic UniversityKavala, Greece; Department of Applied Informatics, University of Macedonia, Greece; School of Informatics, Aristotle University of Thessaloniki, Greece",Accepted
722,Investigating the Relationship between Co-occurring Technical Debt in Python,"Tsoukalas, D. and Kehagias, D. and Siavvas, M. and Chatzigeorgiou, A.",Journal of Systems and Software,2020,"Technical debt (TD) is commonly used to indicate additional costs caused by quality compromises that can yield short-term benefits in the software development process, but may negatively affect the long-term quality of software products. Predicting the future value of TD could facilitate decision-making tasks regarding software maintenance and assist developers and project managers in taking proactive actions regarding TD repayment. However, no notable contributions exist in the field of TD forecasting, indicating that it is a scarcely investigated field. To this end, in the present paper, we empirically evaluate the ability of machine learning (ML) methods to model and predict TD evolution. More specifically, an extensive study is conducted, based on a dataset that we constructed by obtaining weekly snapshots of fifteen open source software projects over three years and using two popular static analysis tools to extract software-related metrics that can act as TD predictors. Subsequently, based on the identified TD predictors, a set of TD forecasting models are produced using popular ML algorithms and validated for various forecasting horizons. The results of our analysis indicate that linear Regularization models are able to fit and provide meaningful forecasts of TD evolution for shorter forecasting horizons, while the non-linear Random Forest regression performs better than the linear models for longer forecasting horizons. In most of the cases, the future TD value is captured with a sufficient level of accuracy. These models can be used to facilitate planning for software evolution budget and time allocation. The approach presented in this paper provides a basis for predictive TD analysis, suitable for projects with a relatively long history. To the best of our knowledge, this is the first study that investigates the feasibility of using ML models for forecasting TD. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110777,"Information Technologies Institute, Centre for Research and Technology Hellas, Thessaloniki, 57001, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, 54643, Greece",Accepted
723,Wait for it: identifying On-Hold self-admitted technical debt,"Arif, A. and Rana, Z.A.","2020 14th International Conference on Open Source Systems and Technologies, ICOSST 2020 - Proceedings",2020,"Software development organizations face issue like Technical Debt in their software projects. Technical Debt (TD) is incurred when a person involved in engineering of software, intentionally or unintentionally makes wrong or non-optimal design decisions. This problem occurs due to non-systematic and undefined approach to manage the high level of uncertainty in requirements. These non-optimal design decisions and the nonsystematic approach can result in introduction of code smells. Code smells are actually technical debt (also known as perceived debt), which may cause a project to fade out with time. Code of a software project with technical debt is considered as unclean code. Refactoring is an activity of modifying the code to remove technical debt from a software project and make the project code clean. Goal of this work is to study the impact of removing TD on the effort required to add features and remove bugs from software. To this end, this work uses a stepwise approach; first code smells (considered as TD) are identified, and in the next step the smells are removed and impact of removing the code smells (on removing bug and adding new feature) is observed in terms of effort required during maintenance. Technical debt in five open source software applications has been calculated and impact of removing the code smells has been observed on one of the applications named NopCommerce (an ecommerce-based system). Effort to add a new feature and remove a bug, before and after refactoring, has been calculated in terms of man-hours. The effort required to add new feature and remove a bug from the clean code has been 7% less as compared to the effort required to do the same in unclean code. Whether to perform refactoring or not is a decision made by software developers. The impact of refactoring in reducing effort required to maintain code will help a developer make a decision regarding refactoring. © 2020 IEEE.",10.1109/ICOSST51357.2020.9332917,"National University of Computer and Emerging Sciences-FAST, Department of Computer Science, Lahore, Pakistan",Accepted
724,CODE reuse in practice: Benefiting or harming technical debt,"Tefagh, M. and Bagheri, F. and Khajehpour, A. and Abdi, M.",ACM International Conference Proceeding Series,2020,"Inspired by the recent boom in decentralized finance (DeFi) and the unprecedented success of flash loan projects in this ecosystem, we introduce a decentralized debt derivative named atomic bonded cross-chain debt (ABCD) to bridge the gap between the growth of lending protocols on Ethereum and other UTXO-based blockchains specifically Bitcoin. We think of ABCD as the alphabet of interoperability for DeFi and as a credit infrastructure which unlike the current protocols is not limited by requiring either smart contracts, over-collateralization, or instantaneous payback. © 2020 ACM.",10.1145/3446983.3446987,"Department of Mathematical Sciences, Sharif University of Technology, Iran; Department of Computer Engineering, Sharif University of Technology, Iran; Department of Electrical Engineering, Sharif University of Technology, Iran",Rejected
725,The influence of Technical Debt on software developer morale,"Garcia-Alvarado, C. and Ordonez, C.","Proceedings - 2020 IEEE International Conference on Big Data, Big Data 2020",2020,"Software compliance, auditing, and maintainability of large application repositories force organizations to rely on source code analysis tools to identify code vulnerabilities, data flows, technical debt, and bugs. We propose a novel method to identify data flows within an application by analyzing the code traces or 'links' that exist between the code and the data. Our application, SourceDB, leverages a relational database system as the backend to perform such discovery and computations. Our experiments show that SourceDB is able to process, analyze, and query the data source, logs, and source code in seconds. © 2020 IEEE.",10.1109/BigData50022.2020.9378481,"Autonomic Llc, Palo Alto, CA  94304, United States; University of Houston, Dept. of Computer Science, Houston, TX  77204, United States",Rejected
726,Automated Identification of On-hold Self-Admitted Technical Debt,"Oztaysi, B. and Cevik Onar, S. and Kahraman, C. and Gok, M.",Journal of Enterprise Information Management,2020,"Purpose: The companies are struggling to collect invoices due to the decrease in the economic growth. This global trend does not only affect undeveloped countries, but it also has a strong impact on the developed countries. Improving the debt collection process become a significant element to maintain financial stability. The institutions that are specialized on collecting payments, debt collection agencies and their call centers, with their expertise in the field can improve the payment process. Yet, managing evaluating the performance of debt collection agencies is a very hard process that involves uncertainty and imprecision. Performance measurement (PM) is a combination of numerically expressed characteristics which give insight about the success or degree of accomplishment of an activity. PM can be handled in various levels such as individual, team, department or company. The aim of this study is to present a systematic and objective PM method for call centers. Design/methodology/approach: In this study, first an exploratory approach is used to understand the call center measurement problem. Several meetings are done with the representatives of both call center firms and the parent firms that outsource debt collection process. Simultaneously, a broad literature review is conducted. An iterative approach is selected to reach deeper knowledge on the process. New meetings are planned and scope of the literature review has changed based on this iterative approach. After these steps, the problem has been considered as the multi-criteria decision-making problem since more than one criteria should be considered for evaluating the performances of call centers. The result of the literature review and the meetings with experts show that defining the weights for the criteria is very crucial for evaluating the performances accurately. Collecting human judgment for defining the weights of call center criteria necessitates dealing with vagueness and uncertainty. The intuitionistic fuzzy sets excellent tools for representing uncertainty. Interval valued intuitionistic fuzzy sets can easily represent the human judgments. Thus, in this study, an intuitionistic fuzzy multi-criteria decision making approach is used to design the proposed methodology. Incomplete interval-valued intuitionistic preference relations are used to determine the weights of the indicators aggregating linguistic evaluations of the decision makers. Findings: The proposed approach provides an objective calculation of performance measurement. In order to provide objectivity, indicator performance functions are proposed for the first time in this study. Nine different functions and related parameters are defined to objectively measure indicator performances. Originality/value: The paper proposes an objective and easy-to-modify approach for call-center PM, which can be used by call center managers. It presents a new fuzzy multi-criteria decision-making (MCDM) method for call center performance evaluation, which can consider the multi-experts' judgments under vagueness and impreciseness, which may be conflicting and incomplete interval-valued intuitionistic fuzzy preference relations. Also nine new functions are defined for indicator performance. © 2020, Emerald Publishing Limited.",10.1108/JEIM-04-2017-0050,"Istanbul Technical University, Istanbul, Turkey; Etcbase, Istanbul, Turkey",Rejected
727,Who (Self) Admits Technical Debt?,"Barddal, J.P. and Loezer, L. and Enembreck, F. and Lanzuolo, R.",Expert Systems with Applications,2020,"The financial credibility of a person is a factor used to determine whether a loan should be approved or not, and this is quantified by a credit score, which is calculated using a variety of factors, including past performance on debt obligations, profiling, amongst others. Machine learning has been widely applied to automate the development of effective credit scoring models over the years. Yet, studies show that the development of robust credit scoring models may take longer than a year, and thus, if the behavior of customers changes over time, the model will be outdated even before its deployment. In this paper, we made 3 anonymized real-world credit scoring datasets available alongside the results obtained. In each of these datasets, we verify whether the credit scoring task should be thought as an ephemeral scenario since many of the variables may drift over time, and thus, data stream mining techniques should be used since they were tailored for incremental learning and to detect and adapt to changes in the data distribution. Therefore, we compare both traditional batch machine learning algorithms with data stream algorithms in different validation schemes using both KolmogorovSmirnov and Population Stability Index metrics. Furthermore, we also provide insights on the importance of features according to their Information Value, Mean Decrease Impurity, and Mean Positional Gain metrics, such that the last depicts changes in the importance of features over time. For 2 of the 3 tested datasets, the results obtained by data stream learners are comparable to predictive models currently in use, thus showing the efficiency of data stream classification for the credit scoring task. © 2020 Elsevier Ltd",10.1016/j.eswa.2020.113899,"PPGIa, Pontifícia Universidade Católica do Paraná, Curitiba, Brazil; 4KST, Curitiba, Brazil",Rejected
728,Interest of Defect Technical Debt: An Exploratory Study on Apache Projects,"Amanatidis, T. and Mittas, N. and Moschou, A. and Chatzigeorgiou, A. and Ampatzoglou, A. and Angelis, L.",Empirical Software Engineering,2020,"Software teams are often asked to deliver new features within strict deadlines leading developers to deliberately or inadvertently serve not quite right code compromising software quality and maintainability. This non-ideal state of software is efficiently captured by the Technical Debt (TD) metaphor, which reflects the additional effort that has to be spent to maintain software. Although several tools are available for assessing TD, each tool essentially checks software against a particular ruleset. The use of different rulesets can often be beneficial as it leads to the identification of a wider set of problems; however, for the common usage scenario where developers or researchers rely on a single tool, diverse estimates of TD and the identification of different mitigation actions limits the credibility and applicability of the findings. The objective of this study is two-fold: First, we evaluate the degree of agreement among leading TD assessment tools. Second, we propose a framework to capture the diversity of the examined tools with the aim of identifying few reference assessments (or class/file profiles) representing characteristic cases of classes/files with respect to their level of TD. By extracting sets of classes/files exhibiting similarity to a selected profile (e.g., that of high TD levels in all employed tools) we establish a basis that can be used either for prioritization of maintenance activities or for training more sophisticated TD identification techniques. The proposed framework is illustrated through a case study on fifty (50) open source projects and two programming languages (Java and JavaScript) employing three leading TD tools. © 2020, Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-020-09869-w,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Chemistry, International Hellenic University, Kavala, Greece; Department of Informatics, Aristotle University of Thessaloniki, Thessaloniki, Greece",Accepted
729,Prioritizing software components risk: Towards a machine learning-based approach,"Mandi?, V. and Tauan, N. and Rama?, R.","Proceedings - 2020 IEEE/ACM International Conference on Technical Debt, TechDebt 2020",2020,"Background: There is a growing body of knowledge on Technical Debt (TD) in recent years. This knowledge provides various explanations of the term and suggests different remedies for it. However, the knowledge is yet to be validated in software development processes. Aims: The objective of this study is twofold. First, to get empirical insight on the understanding and the use of the TD concept in Serbian IT industry. Second, to contribute towards precise conceptualization of the TD concept. Method: We conducted a national-wide survey to collect feedback from industry practitioners. The survey is a part of InsighTD-an international initiative to investigate causes and effects of TD. Results: In total, 93 responses were collected, mostly from developers. Results indicate that the concept of TD is not widely accepted for use by the industry, only 35% of practitioners have practical experiences with projects that explicitly considered or managed TD. The most common types of TD are: code, test and design debt that together account for 61% of all reported cases. The archetypal TD case is caused by a tight schedule and resulted with non-optimal solutions that are difficult to evolve and in constant need of rework. Conclusions: Implications are at one hand for academics, who should consider TD as a topic for their curriculums since the results revealed that novice developers are unfamiliar with the concept. At the other hand, industry practitioners have a well aligned understanding of the TD concept, which is consistent with TD literature. However, we perceive that the wider use of the existing tools and techniques for managing TD can significantly help practitioners to deal with the top three occurring TD types. © 2020 ACM.",10.1145/3387906.3388622,"University of Novi Sad, Novi Sad, Serbia; Infora Research Group, Subotica, Serbia",Accepted
730,E-Debitum: Managing Software Energy Debt,"dos Santos, E.D.B. and Renzi, A.B.",Advances in Intelligent Systems and Computing,2020,"Apartment complexes in Brazil are usually managed by its residents, as each one represents an equal share in administrative decisions regarding the building they live. According to the housing syndicate survey, applied to apartment complexes administrations, the most common pointed problems are related to communication, behavior, security and payment debts. This paper is part of an extensive research, part of the Interaction Design program project, with building managers and residents, involving observation, interviews, storytelling, cooperative evaluation and think-aloud protocol to help understand and map users mental model, their expectations and affordances to integrate the use of digital devices into building managing processes and improve the user experience. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-20040-4_51,"Serviço Nacional de Aprendizagem Comercial, Rio de Janeiro, Brazil; UFF  Universidade Federal Fluminense, Niterói, Brazil",Rejected
731,Detecting and Explaining Self-Admitted Technical Debts with Attention-based Neural Networks,"Guimaraes, E.H.C. and Dias, A.F.S. and França, J.B.S.",Advances in Intelligent Systems and Computing,2020,"The development, implementation, and contracts involving interactive systems in Brazil have direct influence over educators and managers regarding and the digital technology potential. And these factors facilitate to choose, among many possible tools, the ones that have elements to better support learning in school environments. EMIS (Educational Management Integrated System) is a fundamental piece to consolidate quality education. Any ERP is usually capable of integrating diverse data in one system: finance, sales, accounting, stock, debts and income balance, human resources, production processes and logistic activities. However, education related systems surface factors related to classroom dynamics, to students and to teachers. These factors must be contemplated and evaluated as part of the whole context, part of a country with such cultural diversity and lack of resources, such as Brazil. This paper presents the unfolding of the project developed between IDB (Inter-American Development Bank) and FVG (Fundação Getúlio Vargas) to analyze EMIS systems in two public schools for basic education in Brazil. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-20040-4_53,"PPGI  UFRJ  Universidade Federal do Rio de Janeiro, Rio de Janeiro, Brazil",Rejected
732,Is Using Deep Learning Frameworks Free? Characterizing Technical Debt in Deep Learning Frameworks,"Torriente, I. and Lastre, A. and Carrera, C. and Quishpe, K. and Morales, P.",Advances in Intelligent Systems and Computing,2020,"In this work, we proceed with the study and analysis of a model that facilitates the evaluation and prediction of financial and management indicators of SMEs. The model is based on the use of Artificial Neural Networks (ANN) as a data-mining tool that, supported on the financial statements, contributes to the evaluation and forecasting of liquidity, debt, performance, efficiency and profitability indicators, following the DuPont system. The objective of the work is to assess and forecast the financial situation of SMEs for proper management decision making in organizations. The model focuses on two interrelated phases, the estimation-diagnosis phase and the forecast phase. The conclusions show the predictive feasibility of using neural networks for financial indicators. © 2020, Springer Nature Switzerland AG.",10.1007/978-3-030-20154-8_56,"Universidad UTE, Sede Santo Domingo, Via Chone Km 4 1/2, Esquina Italia, Santo Domingo de losTsáchilas, Ecuador",Rejected
733,A Composed Technical Debt Identification Methodology to Predict Software Vulnerabilities,"Larrucea, X. and Santamaria, I. and Fernandez-Gauna, B.",Journal of Software: Evolution and Process,2020,"Nowadays, security and safety aspects are two of the major concerns for any software system development, especially while developing safety critical systems. This is especially relevant for very small entities because they have a limited amount of resources for dealing with all these aspects at the same time. In addition, these systems are highly regulated domains, and they involve a huge set of standards focused on safety and security-related issues. Therefore, these small entities are not only facing hurdles related to technical aspects but also from the so-called technical debt when overarching a critical development. This paper extends the assurance cases approach by integrating security aspects within the life cycle, and it proposes a framework for managing the associated security technical debt for very small entities. A tool chain is outlined, and the approach is illustrated with an industrial use case. © 2019 John Wiley & Sons, Ltd.",10.1002/smr.2214,"TECNALIABizkaia, Spain; Lenguajes y Sistemas Informáticos, Universidad del País Vasco, Leioa, Vitoria-Gasteiz, Spain",Accepted
734,A taste of the software industry perception of technical debt and its management in Uruguay: A survey in software industry,"Codabux, Z. and Dutchyn, C.",International Symposium on Empirical Software Engineering and Measurement,2020,"Context: Technical Debt needs to be managed to avoid disastrous consequences, and investigating developers' habits concerning technical debt management is invaluable information in software development. Objective: This study aims to characterize how developers manage technical debt based on the code smells they induce and the refactorings they apply. Method: We mined a publicly-available Technical Debt dataset for Git commit information, code smells, coding violations, and refactoring activities for each developer of a selected project. Results: By combining this information, we profile developers to recognize prolific coders, highlight activities that discriminate among developer roles (reviewer, lead, architect), and estimate coding maturity and technical debt tolerance. © 2020 IEEE Computer Society. All rights reserved.",10.1145/3382494.3422172,"University of Saskatchewan, Canada",Accepted
735,Long-term evaluation of technical debt in open-source software,"Wang, H. and Qiao, L. and Tian, C. and Lin, Q.",Complexity,2020,"Optimising the allocation of population, land, and capital production resources is crucial for promoting an efficient urbanisation and solving the urban land financial problem. This study uses a panel threshold model to identify the response boundary of urban construction land use efficiency to government debt level for 51 postfinancial crisis Chinese coastal cities. The results indicate that the threshold of economic development level and provincial gross domestic product (per capita gross domestic product: pgdp) are 2.67 and 5.17, respectively. In cities with relatively backward economic development, an expansion of the government debt scale hinders the improvement of the utilisation efficiency of construction land. Also, the threshold value of the government's accumulated debt level threshold (sd) is 15.83%. When cities fall below the government accumulated debt level threshold (sd < 15.83%), the new debt level has a positive effect on the utilisation efficiency of construction land. When sd > 15.83%, the new debt level impedes the improvement of the utilisation efficiency of construction land. Local governments should reduce their dependence on land finance in cities with high cumulative debt ratios, especially those with negative responses to both thresholds (pgdp and sd thresholds). This study's findings can provide a reference for a sustainable promotion of new urbanisation in both China and in other countries to avoid the risk of land urbanisation. © 2020 Hui Wang et al.",10.1155/2020/3428968,"School of Maritime Economics and Management, Dalian Maritime University, Dalian, 116026, China",Rejected
736,How long do junior developers take to remove technical debt items?,"Rantala, L.","Proceedings - 2020 ACM/IEEE 42nd International Conference on Software Engineering: Companion, ICSE-Companion 2020",2020,"Technical debt (TD) is an economical term used to depict non-optimal choices made in the software development process. It occurs usually when developers take shortcuts instead of following agreed upon development practices, and unchecked growth of technical debt can start to incur negative effects for software development processes.Technical debt detection and management is mainly done manually, and this is both slow and costly way of detecting technical debt. Automatic detection would solve this issue, but even state-of-the-art tools of today do not accurately detect the appearance of technical debt. Therefore, increasing the accuracy of automatic classification is of high importance, so that we could eliminate significant portion from the costs relating to technical debt detection.This research aims to solve the problem in detection accuracy by bringing in together static code analysis and natural language processing. This combination of techniques will allow more accurate detection of technical debt, when compared to them being used separately from each other. Research also aims to discover themes and topics from written developer messages that can be linked to technical debt. These can help us to understand technical debt from developers' viewpoint. Finally, we will build an open-source tool/plugin that can be used to accurately detect technical debt using both static analysis and natural language processing methods. © 2020 ACM.",10.1145/3377812.3381404,"University of Oulu, Oulu, Finland",Accepted
737,A survey on the interplay between software engineering and systems engineering during SoS architecting,"Karamitsos, I. and Albarhami, S. and Apostolopoulos, C.",Information (Switzerland),2020,"This paper proposes DevOps practices for machine learning application, integrating both the development and operation environment seamlessly. The machine learning processes of development and deployment during the experimentation phase may seem easy. However, if not carefully designed, deploying and using such models may lead to a complex, time-consuming approaches which may require significant and costly efforts for maintenance, improvement, and monitoring. This paper presents how to apply continuous integration (CI) and continuous delivery (CD) principles, practices, and tools so as to minimize waste, support rapid feedback loops, explore the hidden technical debt, improve value delivery and maintenance, and improve operational functions for real-world machine learning applications. © 2020 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/info11070363,"Department of Computing, Rochester Institute of Technology, Dubai Campus, Dubai, 341055, United Arab Emirates; Department of Management Science, University of Strathclyde Business School, Glasgow, G1 1XQ, United Kingdom",Rejected
738,Using Stack Overflow to Assess Technical Debt Identification on Software Projects,"Behutiye, W. and Karhapää, P. and López, L. and Burgués, X. and Martínez-Fernández, S. and Vollmer, A.M. and Rodríguez, P. and Franch, X. and Oivo, M.",Information and Software Technology,2020,"Context: Quality requirements (QRs) describe the desired quality of software, and they play an important role in the success of software projects. In agile software development (ASD), QRs are often ill-defined and not well addressed due to the focus on quickly delivering functionality. Rapid software development (RSD) approaches (e.g., continuous delivery and continuous deployment), which shorten delivery times, are more prone to neglect QRs. Despite the significance of QRs in both ASD and RSD, there is limited synthesized knowledge on their management in those approaches. Objective: This study aims to synthesize state-of-the-art knowledge about QR management in ASD and RSD, focusing on three aspects: bibliometric, strategies, and challenges. Research method: Using a systematic mapping study with a snowballing search strategy, we identified and structured the literature on QR management in ASD and RSD. Results: We found 156 primary studies: 106 are empirical studies, 16 are experience reports, and 34 are theoretical studies. Security and performance were the most commonly reported QR types. We identified various QR management strategies: 74 practices, 43 methods, 13 models, 12 frameworks, 11 advices, 10 tools, and 7 guidelines. Additionally, we identified 18 categories and 4 non-recurring challenges of managing QRs. The limited ability of ASD to handle QRs, time constraints due to short iteration cycles, limitations regarding the testing of QRs and neglect of QRs were the top categories of challenges. Conclusion: Management of QRs is significant in ASD and is becoming important in RSD. This study identified research gaps, such as the need for more tools and guidelines, lightweight QR management strategies that fit short iteration cycles, investigations of the link between QRs challenges and technical debt, and extension of empirical validation of existing strategies to a wider context. It also synthesizes QR management strategies and challenges, which may be useful for practitioners. © 2019 Elsevier B.V.",10.1016/j.infsof.2019.106225,"Faculty of Information Technology and Electrical Engineering, University of Oulu, M3S, Oulu, Finland; Universitat Politècnica de Catalunya, Barcelona, Spain; Fraunhofer Institute for Experimental Software Engineering IESE, Kaiserslautern, Germany",Rejected
739,Anticipating Identification of Technical Debt Items in Model-Driven Software Projects,"Issami, M.A.",Lecture Notes in Information Systems and Organisation,2020,"Targeting financial stability has become an important matter for central banks. This objective has considerable impacts on growth and reinforces the economic structure. During the last decades, the financial environment has suffered from different forms of instabilities. Turbulences, crashes, and bubbles are occuring frequently. The ability of modern economies to absorb shocks is questionned since their vulnerability is increasing. This situation is due mainly to the contraction of business cycles, fragility of financial institutions, and corporate debt. Within this scope, volatility clustering in the financial markets has been consistently observed. This paper aims to develop a dynamic system able to detect instantly different instabilities using ABM models. It consists of implementing a strategy-based prevention holistic and integrated. © Springer Nature Switzerland AG 2020.",10.1007/978-3-030-34269-2_41,"Groupe ISCAE, BP. 8114, Casablanca, Morocco",Rejected
740,AdaBoost-based Refused Bequest Code Smell Detection with Synthetic Instances,"Montenegro, C.-D. and Nunes-Da-Silva, P. and Montenegro, C.",ACM International Conference Proceeding Series,2020,"This research shows that the Regression Discontinuity Design (RDD) can be applied to close presidential elections worldwide to obtain samples of elections whose outcome - -leadership change or leadership continuation - -is assigned quasi-experimentally. It is shown that the number of close presidential elections is sufficiently numerous to fulfil regression discontinuity demands. Furthermore, a robustness checks reveals that the sample indeed behaves quasi-experimentally, as the assignment of electoral outcomes is independent of pre-election characteristics. Using this sample, researchers can estimate the causal effect of leadership changes on the substantive outcome of interest - -for instance, sovereign debt defaults - -without worrying too much for selection effects or omitted variable biases. The study contributes to the modelling of e-Democracy processes, including the elections, the mechanisms and their significance. © 2020 ACM.",10.1145/3402569.3402596,"Universidad San Francisco de Quito, Quito, Ecuador; Escuela Politécnica Nacional, Quito, Ecuador",Rejected
741,A large empirical assessment of the role of data balancing in machine-learning-based code smell detection,"Antysheva, E. and Prishutova, T. and Frolova, V.",ACM International Conference Proceeding Series,2020,"In modern conditions, there is a constant expansion of sales markets, and the turnover of organizations is growing. This leads to a large volume of cash flows and contract items, and those, in their turn, generate receivables. However, there has been an increase in the number of fly-by-night firms recently. It is quite difficult to recognize the fraudulent nature of such companies before starting a contractual relationship with them. Therefore, it is necessary to monitor not only the current accounts receivable but also the reputation of potential customers, in particular, their solvency. It is also recommended to pay attention to the potential client's reputation. During the economic downturn, many large companies are forced to deal with large amounts of accounts receivable. If this debt is not repaid, the general functioning of the company is disrupted, since it no longer has the funds to cover its expenses. This situation may lead to the company's bankruptcy. In order to correctly calculate debt and regulate it in a timely manner, it is necessary to manage accounts receivable in an appropriate and competent manner, which is an important component of the company's liquidity and solvency, as well as its image. An excessively high amount of accounts receivable will result in an increase of repayment periods, as well as reduce turnover and increase the company's financial cycle. Effective management of accounts receivable of an enterprise requires a clear understanding of the economic content and classification thereof, which should be diverse and meet the information needs of the managers. The main goal of this paper is to examine the accounts receivable management process from the point of view of digitalization. In order to achieve the objective, it is necessary to perform the following tasks: to examine the nature of AR management; to outline the problems of management in the remote mode; to examine the process of digitalization, its benefits and shortcomings in the implementation of receivables management, as well as to suggest the most efficient software products that you can use to achieve and improve efficiency in receivables management. The methodology of this paper consists of the following stages: determination of the essence and methods of accounts receivable management; highlighting the main problems arising in the process of asset management; definition of the essence of the concept of digitalization, its advantages and disadvantages; studying the management of accounts receivable in the context of automation. In the work would be used the following research methods: review of scientific literature, comparison, observation, systematization. © 2020 ACM.",10.1145/3446434.3446486,"Graduate School of Industrial Economics, Peter the Great St. Petersburg Polytechnic University, Saint Petersburg, Russian Federation; Peter the Great St.Petersburg Polytechnic University, Saint Petersburg, Russian Federation",Rejected
742,On the diffuseness of technical debt items and accuracy of remediation time when using SonarQube,"Iovino, L. and Di Salle, A. and Di Ruscio, D. and Pierantonio, A.","Proceedings - 23rd ACM/IEEE International Conference on Model Driven Engineering Languages and Systems, MODELS-C 2020 - Companion Proceedings",2020,"Model-Driven Engineering helps formalize problem-domains by using metamodels. Modeling ecosystems consisting of purposely designed editors, transformations, and code generators are defined on top of the metamodels. Analogously to other software forms, metamodels can evolve - -consequently, the validity of existing artifacts might be compromised. Coupled evolution provides techniques for restoring artifacts' validity in response to metamodel evolution. In this paper, we propose using deprecation in metamodeling to mitigate the difficulties in performing a class of adaptations that must be operated manually. Technical debt in co-evolution can be regarded as the outcome of procrastinating the migration of artifacts and, thus, must be reduced if not eliminated. Tool support for the adoption of deprecation and technical debt is used to demonstrate the feasibility of the methods. © 2020 ACM.",10.1145/3417990.3419625,"Gran Sasso Science Institute, L'Aquila, Italy; University of l'Aquila, L'Aquila, Italy",Accepted
743,Studying the evolution of exception handling anti-patterns in a long-lived large-scale project,"Alhusain, S.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Object-oriented software metrics provide a numerical characterization of software quality. They have also been used in the assessment and identification of technical debt. However, metrics generally need to be used with thresholds as reference points that help to interpret their values properly and objectively. The problem is that, while there are many proposed metrics, there are relatively few studies on thresholds and threshold calculation methods; hence, the effective application of metrics in practice has been limited. Moreover, although it has been acknowledged that thresholds should not be absolute, but rather relative to certain contextual factors, the context is still not considered in most threshold studies. In this paper, the relationship between system size (as a contextual factor) and metric thresholds is investigated. The objective is to build predictive models that estimate thresholds based solely on system size, and to assess the feasibility of this approach as a threshold estimation method. An empirical study is conducted for this purpose using 36 defect- prediction datasets and six metrics. The results show that the proposed threshold estimation method is feasible, and it can achieve an accuracy remarkably comparable to more complex threshold models. © 2021 IEEE.",10.1109/TechDebt52882.2021.00015,"Saudi Electronic University, College of Computing and Informatics, Riyadh, Saudi Arabia",Rejected
744,Risk attribution and interconnectedness in the EU via CDS data,"Soliman, M. and Avgeriou, P. and Li, Y.",Information and Software Technology,2021,"Context: During software development, some architectural design decisions incur technical debt, either deliberately or inadvertently. These have serious impact on the quality of a software system, and can cost significant time and effort to be changed. While current research efforts have explored general concepts of architectural design decisions and technical debt separately, debt-incurring architectural design decisions have not been specifically explored in practice. Objective: In this case study, we explore debt-incurring architectural design decisions (DADDs) in practice. Specifically, we explore the main types of DADDs, why and how they are incurred in a software system, and how practitioners deal with these types of design decisions. Method: We performed interviews and a focus group with practitioners working in embedded and enterprise software companies, discussing their concrete experience with such architectural design decisions. Results: We provide the following contributions: 1) A categorization for the types of DADDs, which extend a current ontology on architectural design decisions. 2) A process on how deliberate DADDs are made in practice. 3) A conceptual model which shows the relationships between the causes and triggers of inadvertent DADDs. 4) The main factors that influence the way of dealing with DADDs. Conclusion: The results can support the development of new approaches and tools for Architecture Technical Debt management from the perspective of Design Decisions. Moreover, they support future research to capture architecture knowledge related to DADDs. © 2021 The Authors",10.1016/j.infsof.2021.106669,"Bernoulli Institute for Mathematics, Computer Science and Artificial Intelligence, University of Groningen, Groningen, Netherlands",Accepted
745,Exploring the Relation between Technical Debt Principal and Interest: An Empirical Approach,"Akter, S. and McCarthy, G. and Sajib, S. and Michael, K. and Dwivedi, Y.K. and D'Ambra, J. and Shen, K.N.",International Journal of Information Management,2021,"Data-driven innovation (DDI) gains its prominence due to its potential to transform innovation in the age of AI. Digital giants Amazon, Alibaba, Google, Apple, and Facebook, enjoy sustainable competitive advantages from DDI. However, little is known about algorithmic biases that may present in the DDI process, and result in unjust, unfair, or prejudicial data product developments. Thus, this guest editorial aims to explore the sources of algorithmic biases across the DDI process using a systematic literature review, thematic analysis and a case study on the Robo-Debt scheme in Australia. The findings show that there are three major sources of algorithmic bias: data bias, method bias and societal bias. Theoretically, the findings of our study illuminate the role of the dynamic managerial capability to address various biases. Practically, we provide guidelines on addressing algorithmic biases focusing on data, method and managerial capabilities. © 2021 Elsevier Ltd",10.1016/j.ijinfomgt.2021.102387,"School of Business, University of WollongongNSW  2522, Australia; UTS Business School, University of Technology Sydney, 15 Broadway, Ultimo, NSW  2007, Australia; School for the Future of Innovation in Society, Arizona State University, Mailcode 5603, Tempe, United States; Emerging Markets Research Centre (EMaRC), School of Management, Swansea University Bay Campus, Swansea, Wales  SA1 8EN, United Kingdom; Symbiosis Institute of Business Management, Pune & Symbiosis International (Deemed Univers",Rejected
746,Technical debt forecasting: An empirical study on open-source repositories,"De Toledo, S.S. and Martini, A. and Sjoberg, D.I.K. and Przybyszewska, A. and Frandsen, J.S.","Proceedings - 2021 47th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2021",2021,"Architectural technical debt (ATD) may create a substantial extra effort in software development, which is called interest. There is little evidence about whether repaying ATD in microservices reduces such interest. Objectives: We wanted to conduct a first study on investigating the effect of removing ATD on the occurrence of incidents in a microservices architecture. Method: We conducted a quantitative and qualitative case study of a project with approximately 1000 microservices in a large, international financing services company. We measured and compared the number of software incidents of different categories before and after repaying ATD. Results: The total number of incidents was reduced by 84%, and the numbers of critical- and high-priority incidents were both reduced by approximately 90% after the architectural refactoring. The number of incidents in the architecture with the ATD was mainly constant over time, but we observed a slight increase of low priority incidents related to inaccessibility and the environment in the architecture without the ATD. Conclusion: This study shows evidence that refactoring ATDs, such as lack of communication standards, poor management of dead-letter queues, and the use of inadequate technologies in microservices, reduces the number of critical- and high-priority incidents and, thus, part of its interest, although some low priority incidents may increase. © 2021 IEEE.",10.1109/SEAA53835.2021.00033,"University of Oslo, Dept. of Informatics, Oslo, Norway; Dept. of Computer Science, IT University of Copenhagen, Copenhagen, Denmark; IT University of Copenhagen, Dept. of Computer Science, Copenhagen, Denmark",Accepted
747,Refactoring of Code to Remove Technical Debt and Reduce Maintenance Effort,"Counsell, S. and Hierons, R.M. and Patel, K.","Proceedings - 2021 47th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2021",2021,"The 80-20 rule is well-known in the real-world. When applied to bugs, it suggests that 80% of bugs arise in just 20% of classes. One research question that has yet to be explored is whether the same rule applies to refactoring activity. In other words, do 20% of classes account for 80% of refactorings applied to a system? In this short paper, we explore this question using data from seven open-source systems drawn from two previous studies. In each case, we explore whether the 80-20 rule applies and suggest why. Results showed limited evidence of an 80-20 rule; in the two systems where it was evident, the refactoring profile implied firstly, a large-scale movement of class fields and methods and, secondly, the deliberate aim of collapsing the class hierarchy using inheritance-based refactorings. © 2021 IEEE.",10.1109/SEAA53835.2021.00043,"Brunel University, Department of Computer Science, London, United Kingdom; University of Sheffield, Department of Computer Science, Sheffield, United Kingdom",Rejected
748,Atomic bonded cross-chain debt,"Olsson, J. and Risfelt, E. and Besker, T. and Martini, A. and Torkar, R.",Empirical Software Engineering,2021,"Context: Software engineering is a human activity. Despite this, human aspects are under-represented in technical debt research, perhaps because they are challenging to evaluate. Objective: This studys objective was to investigate the relationship between technical debt and affective states (feelings, emotions, and moods) from software practitioners. Method: Forty participants (N = 40) from twelve companies took part in a mixed-methods approach, consisting of a repeated-measures (r = 5) experiment (n = 200), a survey, and semi-structured interviews. From the qualitative data, it is clear that technical debt activates a substantial portion of the emotional spectrum and is psychologically taxing. Further, the practitioners reactions to technical debt appear to fall in different levels of maturity. Results: The statistical analysis shows that different design smells (strong indicators of technical debt) negatively or positively impact affective states. Conclusions: We argue that human aspects in technical debt are important factors to consider, as they may result in, e.g., procrastination, apprehension, and burnout. © 2021, The Author(s).",10.1007/s10664-021-09998-w,"Department of Computer Science and Engineering, Chalmers and University of Gothenburg, Göteborg, SE-412 96, Sweden; Department of Informatics, University of Oslo, Oslo, N-0373, Norway; Stellenbosch Institute for Advanced Study (STIAS), Wallenberg Research Centre at Stellenbosch University, Stellenbosch, South Africa",Rejected
749,Querying Big Source Code,"Kim, D.J. and Yang, B. and Yang, J. and Chen, T.-H.P.",ESEC/FSE 2021 - Proceedings of the 29th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering,2021,"Software testing is an essential software quality assurance practice. Testing helps expose faults earlier, allowing developers to repair the code and reduce future maintenance costs. However, repairing (i.e., making failing tests pass) may not always be done immediately. Bugs may require multiple rounds of repairs and even remain unfixed due to the difficulty of bug-fixing tasks. To help test maintenance, along with code comments, the majority of testing frameworks (e.g., JUnit and TestNG) have also introduced annotations such as @Ignore to disable failing tests temporarily. Although disabling tests may help alleviate maintenance difficulties, they may also introduce technical debt. With the faster release of applications in modern software development, disabling tests may become the salvation for many developers to meet project deliverables. In the end, disabled tests may become outdated and a source of technical debt, harming long-term maintenance. Despite its harmful implications, there is little empirical research evidence on the prevalence, evolution, and maintenance of disabling tests in practice. To fill this gap, we perform the first empirical study on test disabling practice. We develop a tool to mine 122K commits and detect 3,111 changes that disable tests from 15 open-source Java systems. Our main findings are: (1) Test disabling changes are 19% more common than regular test refactorings, such as renames and type changes. (2) Our life-cycle analysis shows that 41% of disabled tests are never brought back to evaluate software quality, and most disabled tests stay disabled for several years. (3)We unveil the motivations behind test disabling practice and the associated technical debt by manually studying evolutions of 349 unique disabled tests, achieving a 95% confidence level and a 5% confidence interval. Finally, we present some actionable implications for researchers and developers. © 2021 ACM.",10.1145/3468264.3468609,"Concordia University, Canada",Accepted
750,Call center performance measurement using intuitionistic fuzzy sets,"Terra-Neves, M. and Nadkarni, J. and Ventura, M. and Resende, P. and Veiga, H. and Alegria, A.",ESEC/FSE 2021 - Proceedings of the 29th ACM Joint Meeting European Software Engineering Conference and Symposium on the Foundations of Software Engineering,2021,"Visual Programming Languages (VPLs), coupled with the high-level abstractions that are commonplace in visual programming environments, enable users with less technical knowledge to become proficient programmers. However, the lower skill floor required by VPLs also entails that programmers are more likely to not adhere to best practices of software development, producing systems with high technical debt, and thus poor maintainability. Duplicated code is one important example of such technical debt. In fact, we observed that the amount of duplication in the OutSystems VPL code bases can reach as high as 39%. Duplicated code detection in text-based programming languages is still an active area of research with important implications regarding software maintainability and evolution. However, to the best of our knowledge, the literature on duplicated code detection for VPLs is very limited. We propose a novel and scalable duplicated code pattern mining algorithm that leverages the visual structure of VPLs in order to not only detect duplicated code, but also highlight duplicated code patterns that explain the reported duplication. The performance of the proposed approach is evaluated on a wide range of real-world mobile and web applications developed using OutSystems. © 2021 ACM.",10.1145/3468264.3473928,"OutSystems, Portugal",Rejected
751,But do commit messages matter? An empirical association analysis with technical debt,"Starosta, W.",European Journal of Operational Research,2021,"Modeling loss in the case of default is a crucial task for financial institutions to support the decision making process in the risk management framework. It has become an inevitable part of modern debt collection strategies to keep promising loans on the banking book and to write off those that are not expected to be recovered at a satisfactory level. Research tends to model Loss Given Default directly or to decompose it based on the dependent variable distribution. Such an approach neglects the patterns which exist beneath the recovery process and are mainly driven by the activities made by collectors in the event of default. To overcome this problem, we propose a decomposition of the LGD model that integrates cures, partial recoveries, and write-offs into one equation, defined based on common collection strategies. Furthermore, various levels of data aggregation are applied to each component to reflect the domain that influences each stage of the default process. To assess the robustness of our approach, we propose a comparison with two benchmark models on two different datasets. We assess the goodness of fit on out-of-sample data and show that the proposed decomposition is more effective than state-of-the-art methods, maintaining a strong level of interpretability. © 2020 Elsevier B.V.",10.1016/j.ejor.2020.11.034,"Chair of Econometrics, Institute of Econometrics, Department of Economics and Sociology, University of Lodz, POW 3/5 Street, Lodz, 90-255, Poland",Rejected
752,Interdisciplinary effects of technical debt in companies with mechatronic products  a qualitative study,"Calle Santander, J.R. and Hernández Ramos, E.L. and Guamán Chach, K.A.",Studies in Computational Intelligence,2021,"Throughout life, people can make mistakes that lead to the deprivation of freedom. When people pay off their debt to society, they join a social rehabilitation regime. However, in all cases, complete rehabilitation is not obtained. This research aims to develop a method for treatment and its impact on changing the social rehabilitation regimen. The uncertainty process is modeled using compensatory fuzzy logic. A case study is implemented from which a group of people undergoing rehabilitation is taken to determine their treatment. As a result, the status of compliance with the main treatment axes was obtained for the different cases analyzed. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-73819-8_16,"Universidad Regional Autónoma de los Andes (UNIANDES), Riobamba, Chimborazo, 060150, Ecuador",Rejected
753,Lessons learned from data stream classification applied to credit scoring,"Barrak, A. and Eghan, E.E. and Adams, B. and Khomh, F.",Journal of Systems and Software,2021,"Previous studies have investigated a wide range of factors potentially explaining software build breakages, focusing primarily on build-triggering code changes or previous CI outcomes. However, code quality factors such as the presence of code/test smells have not been yet evaluated in the context of CI, even though such factors have been linked to problems of comprehension and technical debt, and hence might introduce bugs and build breakages. This paper performs a conceptual replication study on 27,675 Travis CI builds of 15 GitHub projects, considering the features reported by Rausch et al. and Zolfagharinia et al., as well as those related to code/test smells. Using a multivariate model constructed from nine dimensions of features, results indicate a precision (recall) ranging between 58.3% and 79.0% (52.4% and 69.6%) in balanced project datasets, and between 2.5% and 37.5% (2.5% and 12.4%) in imbalanced project datasets. Models trained on our balanced project datasets were later used to perform cross-project prediction on the imbalanced projects, achieving an average improvement of 9.3% (16.2%) in precision (recall). Statistically, the results confirm that features from the build history, author, code complexity, and code/test smell dimensions are the most important predictors of build failures. © 2021 Elsevier Inc.",10.1016/j.jss.2021.110939,"Polytechnique Montréal, Montréal, Canada; School of Computing Queen's University, Kingston, Canada",Rejected
754,Classification of Technical Debts in Software Development Using Text Analytics,"Abrantes, P.C. and Furtado, A.P.","Iberian Conference on Information Systems and Technologies, CISTI",2021,"Context: Previous studies considered software startups are not applying agile development practices, especially those related to quality. This leads to the accumulation of technical debt. Objective: This study aims at identifying primary studies that describe how startups are applying agile development practices and how they could benefit from these practices, thereby contributing to product quality improvement and better resource allocation. Method: A Systematic Mapping Study was conducted which applied automatic searches so as to identify relevant primary studies. Results: 60 primary studies were identified that present information regarding practices, challenges, and limitations of adopting agile development practices in startups and also the benefits, tools, and ways of simplifying their adoption. Conclusions: 55 agile development practices used by startups were found, the most cited ones being associated with DevOps, Test Automation, and Scrum. The main challenges and limitations are related to the difficulty of adapting legacy systems architecture to support DevOps practices, to market volatility, to the need for quick product release, and to resources, including financial resources, being limited. Benefits related to having improved internal processes were the most cited and 128 tools were classified. Few studies have offered answers on how to simplify adopting agile development practices, although all of them led to tools for automating processes being used. © 2021 AISTI.",10.23919/CISTI52073.2021.9476368,"Cesar School, Recife, Brazil; Rural Federal University of Pernambuco, Recife, Brazil",Rejected
755,"A systematic literature review on Technical Debt prioritization: Strategies, processes, factors, and tools","Bonfitto, S. and Cappelletti, L. and Trovato, F. and Valentini, G. and Mesiti, M.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2021,"Spreadsheets are often used as a simple way for representing tabular data. However, since they do not impose any restriction on their table structures and contents, their automatic processing and the integration with other information sources are particularly hard problems to solve. Many table understanding approaches have been proposed for extracting data from tables and transforming them in meaningful information. However, they require some regularities on the table contents. Starting from CSV spreadsheets that present values of different types and errors, in this paper we introduce an approach for inferring the types of columns in CSV tables by exploiting a multi-label classification approach. By means of our approach, each column of the table can be associated with a simple datatype (such as integer, float, text), a domain-specific one (such as the name of a municipality, and address), or an union of types (that takes into account the frequency of the corresponding values). Since the automatically inferred types might not be accurate, graphical interfaces have been developed for supporting the user in fixing the mistakes. Experimental results are finally reported on real spreadsheets obtained by a debt collection agency. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-67731-2_39,"Department of Computer Science, Università di Milano, Via Celoria 18, Milano, 20133, Italy; Area S.r.l., Via Torino 10/B, Mondovì, 12084, Italy",Rejected
756,Ensemble Method for Identification and Automatic Production of Related Words for Historical Linguistics,"Rahad, K. and Badreddin, O. and Mohsin Reza, S.",Software - Practice and Experience,2021,"In model-driven engineering (MDE) software projects, large portions of the executable code are automatically generated from designs and models. This generated code may or may not be edited by the developers to achieve their development objectives. MDE projects also include a significant amount of handwritten code (HC). This handwritten code is developed under unique constraints, as it must integrate with generated artifacts and code elements that are not directly developed by the engineers. These constraints adversely affect codebase quality and maintainability. This case study aims to investigate the hypothesis pertaining to the handwritten code quality developed in the context of MDE. The study analyzes these unique code fragments and compares their characteristics to handwritten code in repositories where code generation is not present. The study finds that handwritten code quality in the MDE context suffers from elevated technical debt and code smells. We observe key code smells that are particularly evident in this handwritten code. These findings imply that code generators must optimize for human comprehension, prioritize extensibility, and must facilitate integration with handwritten code elements. © 2021 John Wiley & Sons, Ltd.",10.1002/spe.2957,"Computer Science, University of Texas at El Paso, El Paso, TX, United States",Rejected
757,The Technical Debt Density over Multiple Releases and the Refactoring Story,"Tripathi, V. and Modiano, E.","IEEE INFOCOM 2021 - IEEE Conference on Computer Communications Workshops, INFOCOM WKSHPS 2021",2021,"We consider the problem of minimizing age of information in general single-hop and multihop wireless networks. First, we formulate a way to convert AoI optimization problems into equivalent network stability problems. Then, we propose a heuristic low complexity approach for achieving stability that can handle general network topologies; unicast, multicast and broadcast flows; interference constraints; link reliabilities; and AoI cost functions. We provide numerical results to show that our proposed algorithms behave as well as the best known scheduling and routing schemes available in the literature for a wide variety of network settings. © 2021 IEEE.",10.1109/INFOCOMWKSHPS51825.2021.9484621,"MIT, Laboratory for Information Decision Systems",Rejected
758,Tax Default Prediction Using Feature Transformation-Based Machine Learning,"Lefever, J. and Cai, Y. and Cervantes, H. and Kazman, R. and Fang, H.",Proceedings - International Conference on Software Engineering,2021,"A vigorous and growing set of technical debt analysis tools have been developed in recent years-both research tools and industrial products-such as Structure 101, SonarQube, and DV8. Each of these tools identifies problematic files using their own definitions and measures. But to what extent do these tools agree with each other in terms of the files that they identify as problematic? If the top-ranked files reported by these tools are largely consistent, then we can be confident in using any of these tools. Otherwise, a problem of accuracy arises. In this paper, we report the results of an empirical study analyzing 10 projects using multiple tools. Our results show that: 1) these tools report very different results even for the most common measures, such as size, complexity, file cycles, and package cycles. 2) These tools also differ dramatically in terms of the set of problematic files they identify, since each implements its own definitions of 'problematic'. After normalizing by size, the most problematic file sets that the tools identify barely overlap. 3) Our results show that code-based measures, other than size and complexity, do not even moderately correlate with a file's change-proneness or error-proneness. In contrast, co-change-related measures performed better. Our results suggest that, to identify files with true technical debt-those that experience excessive changes or bugs-co-change information must be considered. Code-based measures are largely ineffective at pinpointing true debt. Finally, this study reveals the need for the community to create benchmarks and data sets to assess the accuracy of software analysis tools in terms of commonly used measures. © 2021 IEEE.",10.1109/ICSE-SEIP52600.2021.00021,"Drexel University; UAM Iztapalapa, Mexico; University of Hawai'i",Accepted
759,Experience with Managing Technical Debt in Scientific Software Development Using the EXA2PRO Framework,"Bogner, J. and Verdecchia, R. and Gerostathopoulos, I.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Background: With the rising popularity of Artificial Intelligence (AI), there is a growing need to build large and complex AI-based systems in a cost-effective and manageable way. Like with traditional software, Technical Debt (TD) will emerge naturally over time in these systems, therefore leading to challenges and risks if not managed appropriately. The influence of data science and the stochastic nature of AI-based systems may also lead to new types of TD or antipatterns, which are not yet fully understood by researchers and practitioners. Objective: The goal of our study is to provide a clear overview and characterization of the types of TD (both established and new ones) that appear in AI-based systems, as well as the antipatterns and related solutions that have been proposed. Method: Following the process of a systematic mapping study, 21 primary studies are identified and analyzed. Results: Our results show that (i) established TD types, variations of them, and four new TD types (data, model, configuration, and ethics debt) are present in AI-based systems, (ii) 72 antipatterns are discussed in the literature, the majority related to data and model deficiencies, and (iii) 46 solutions have been proposed, either to address specific TD types, antipatterns, or TD in general. Conclusions: Our results can support AI professionals with reasoning about and communicating aspects of TD present in their systems. Additionally, they can serve as a foundation for future research to further our understanding of TD in AI-based systems. © 2021 IEEE.",10.1109/TechDebt52882.2021.00016,"Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany; Vrije Universiteit Amsterdam, Department of Computer Science, Amsterdam, Netherlands",Accepted
760,A Study of Maintainability in Evolving Open-Source Software,"Martinez, J. and Quintano, N. and Ruiz, A. and Santamaria, I. and De Soria, I.M. and Arias, J.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Industries from very diverse domains are realising that security should not be treated in a reactive way (e.g., once the cyberattack has happened). This way, security-related requirements and risks need to be continuously managed, and the need of integrating technical measures should be continuously assessed. In some cases, some decisions led, intentionally or unintentionally, to debt related to security aspects. This security debt is thus incurred when limited approaches or solutions are applied to reach the expected security levels of the system in operation. Identifying and making explicit security debt items is a challenge for companies. In this work, we analyse the literature on security debt to provide initial insights on the topic. Concretely, we discuss its definition, identify its most salient characteristics, present approaches for integrating its management in the product life-cycle, and to present categories and examples of security debt items. © 2021 IEEE.",10.1109/TechDebt52882.2021.00009,"Tecnalia, Basque Research and Technology Alliance (BRTA), Derio, Spain",Accepted
761,Influence of enterprise cloud computing database application and enterprise debt financing based on SVM algorithm: internal control quality analysis,"Ahmadjee, S. and Mera-Gomez, C. and Bahsoon, R.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Smart contracts are self-enforcing agreements that are employed to exchange assets without the approval of trusted third parties. This feature has encouraged various sectors to make use of smart contracts when transacting. Experience shows that many deployed contracts are vulnerable to exploitation due to their poor design, which allows attackers to steal valuable assets from the involved parties. Therefore, an assessment approach that allows developers to recognise the consequences of deploying vulnerable contracts is needed. In this paper, we propose a debt-aware approach for assessing security design vulnerabilities in smart contracts. Our assessment approach involves two main steps: (i) identification of design vulnerabilities using security analysis techniques and (ii) an estimation of the ramifications of the identified vulnerabilities leveraging the technical debt metaphor, its principal and interest. We use examples of vulnerable contracts to demonstrate the applicability of our approach. The results show that our assessment approach increases the visibility of security design issues. It also allows developers to concentrate on resolving smart contract vulnerabilities through technical debt impact analysis and prioritisation. Developers can use our approach to inform the design of more secure contracts and for reducing unintentional debts caused by a lack of awareness of security issues. © 2021 IEEE.",10.1109/TechDebt52882.2021.00010,"University of Birmingham, School of Computer Science, Birmingham, United Kingdom; ESPOL Polythecnic University Escuela Superior Politecnica Del, Litoral, Facultad de Ingenieria en Electricidad y Computacion, Guayaquil, Ecuador",Accepted
762,A Novel Four-Way Approach Designed with Ensemble Feature Selection for Code Smell Detection,"Malakuti, S. and Heuschkel, J.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"The long lifetime and the evolving nature of industrial products make them subject to technical debt at different levels. Despite multiple years of research on technical debt management, our industrial experience shows that introducing systematic technical debt management in a large-scale company is very challenging. To identify the challenges, we provide a conceptual framework for holistic debt management across the product development value stream, which takes multiple categories of debt and their interplays into account. We use this framework to identify multiple challenges that are still open to be explored by the research community. Due to the practical nature of technical debt management, we believe this paper can guide the research community on the needs of industry for the effective application of technical debt management in practice. © 2021 IEEE.",10.1109/TechDebt52882.2021.00021,"ABB AG Corporate Research Center, Germany",Accepted
763,"22nd International Conference on Enterprise Information Systems, ICEIS 2020","Crespo, Y. and Gonzalez-Escribano, A. and Piattini, M.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Technical Debt management is an important aspect in the training of Software Engineering students. In this paper we study the effect of two assessment strategies in an educational context: One based on penalisation, the other based on rewards. Both are applied to assignments where the students develop a project focusing on keeping a low technical debt level, and obtaining a high quality code. We describe the design, tools and context of the strategies applied. SonarQube, a tool commonly used in production environments, is used for measuring the metrics. The penalisation strategy is based on a SonarQube quality gate. The reward strategy is based on a contest, where an automatic judge tool is devised to provide an online leaderboard with a classification based on the SonarQube metrics. An empirical study is conducted to determine which of the strategies works better to help the students/trainees keep the Technical Debt low. Statistically significant results are obtained in 5 of the 8 analysed metrics, showing that the reward strategy works much better. The effect size of the executed statistical tests is analysed, resulting in medium and large effect size in the majority of the analysed metrics. © 2021 IEEE.",10.1109/TechDebt52882.2021.00020,"Universidad de Valladolid, Valladolid, Spain; Universidad de Castilla-La Mancha, Ciudad Real, Spain",Accepted
764,Evaluating a LSTM Neural Network and a Word2vec Model in the Classification of Self-admitted Technical Debts and Their Types in Code Comments,,"Proceedings - 2021 IEEE/ACM 18th International Conference on Mining Software Repositories, MSR 2021",2021,"Self-Admitted Technical Debt (SATD) is a particular case of Technical Debt (TD) where developers explicitly acknowledge their sub-optimal implementation decisions. Though previous studies have demonstrated that SATD is common in software projects and negatively impacts their maintenance, they have mostly approached software systems coded in traditional object-oriented programming (OOP), such as Java, C++ or.NET. This paper studies SATD in R packages, and reports results of a three-part study. The first part mined more than 500 R packages available on GitHub, and manually analysed more than 164k of comments to generate a dataset. The second part administered a crowd-sourcing to analyse the quality of the extracted comments, while the third part conducted a survey to address developers' perspectives regarding SATD comments. The main findings indicate that a large amount of outdated code is left commented, with SATD accounting for about 3% of comments. Code Debt was the most common type, but there were also traces of Algorithm Debt, and there is a considerable amount of comments dedicated to circumventing CRAN checks. Moreover, package authors seldom address the SATD they encounter and often add it as self-reminders. © 2021 IEEE.",10.1109/MSR52588.2021.00030,,Accepted
765,NeuroCrypt: Machine Learning Over Encrypted Distributed Neuroimaging Data,"Codabux, Z. and Vidoni, M. and Fard, F.H.","Proceedings - 2021 IEEE/ACM 18th International Conference on Mining Software Repositories, MSR 2021",2021,"Context: Technical Debt (TD) is a metaphor used to describe code that is ""not quite right.""Although TD studies have gained momentum, TD has yet to be studied as thoroughly in non-Object-Oriented (OO) or scientific software such as R. R is a multi-paradigm programming language, whose popularity in data science and statistical applications has amplified in recent years. Due to R's inherent ability to expand through user-contributed packages, several community-led organizations were created to organize and peer-review packages in a concerted effort to increase their quality. Nonetheless, it is well-known that most R users do not have a technical programming background, being from multiple disciplines. Objective: The goal of this study is to investigate TD in the documentation of the peer-review of R packages led by rOpenSci. Method: We collected over 5, 000 comments from 157 packages that had been reviewed and approved to be published at rOpenSci. We manually analyzed a sample dataset of these comments posted by package authors, editors of rOpenSci, and reviewers during the review process to investigate the types of TD present in these reviews. Results: The findings of our study include (i) a taxonomy of TD derived from our analysis of the peer-reviews (ii) documentation debt as being the most prevalent type of debt (iii) different user roles are concerned with different types of TD. For instance, reviewers tend to report some types of TD more than other roles, and the types of TD they report are different from those reported by the authors of a package. Conclusion: TD analysis in scientific software or peer-review is almost non-existent. Our study is a pioneer but within the context of R packages. However, our findings can serve as a starting point for replication studies, given our public datasets, to perform similar analyses in other scientific software or to investigate the rationale behind our findings. © 2021 IEEE.",10.1109/MSR52588.2021.00032,"University of Saskatchewan, Canada; RMIT University, Australia; University of British Columbia, Canada",Accepted
766,? fuzzy-set Qualitative Comparative Analysis Approach for the evaluation of corporate viability,"Sridharan, M. and Mantyla, M. and Rantala, L. and Claes, M.","Proceedings - 2021 IEEE/ACM 18th International Conference on Mining Software Repositories, MSR 2021",2021,"A high imbalance exists between technical debt and non-technical debt source code comments. Such imbalance affects Self-Admitted Technical Debt (SATD) detection performance, and existing literature lacks empirical evidence on the choice of balancing technique. In this work, we evaluate the impact of multiple balancing techniques, including Data level, Classifier level, and Hybrid, for SATD detection in Within-Project and Cross-Project setup. Our results show that the Data level balancing technique SMOTE or Classifier level Ensemble approaches Random Forest or XGBoost are reasonable choices depending on whether the goal is to maximize Precision, Recall, F1, or AUC-ROC. We compared our best-performing model with the previous SATD detection benchmark (cost-sensitive Convolution Neural Network). Interestingly the top-performing XGBoost with SMOTE sampling improved the Within-project F1 score by 10% but fell short in Cross-Project set up by 9%. This supports the higher generalization capability of deep learning in Cross-Project SATD detection, yet while working within individual projects, classical machine learning algorithms can deliver better performance. We also evaluate and quantify the impact of duplicate source code comments in SATD detection performance. Finally, we employ SHAP and discuss the interpreted SATD features. We have included the replication package1 and shared a web-based SATD prediction tool2 with the balancing techniques in this study. © 2021 IEEE.",10.1109/MSR52588.2021.00048,"University of Oulu, M3S, ITEE, Oulu, Finland",Accepted
767,Anacondebt: A tool to assess and track technical debt,"Huang, Z. and Shao, Z. and Fan, G. and Gao, J. and Zhou, Z. and Yang, K. and Yang, X.",IEEE International Conference on Program Comprehension,2021,"Community smells appear in sub-optimal software development community structures, causing unforeseen additional project costs, e.g., lower productivity and more technical debt. Previous studies analyzed and predicted community smells in the granularity of community sub-groups using socio-Technical factors. However, refactoring such smells requires the effort of developers individually. To eliminate them, supportive measures for every developer should be constructed according to their motifs and working states. Recent work revealed developers' personalities could influence community smells' variation, and their sentiments could impact productivity. Thus, sentiments could be evaluated to predict community smells' occurrence on them. To this aim, this paper builds a developer-oriented and sentiment-Aware community smell prediction model considering 3 smells such as Organizational Silo, Lone Wolf, and Bottleneck. Furthermore, it also predicts if a developer quitted the community after being affected by any smell. The proposed model achieves cross-And within-project prediction F-Measure ranging from 76% to 93%. Research also reveals 6 sentimental features having stronger predictive power compared with activeness metrics. Imperative and indicative expressions, politeness, and several emotions are the most powerful predictors. Finally, we test statistically the mean and distribution of sentimental features. Based on our findings, we suggest developers should communicate in a straightforward and polite way. © 2021 IEEE.",10.1109/ICPC52881.2021.00030,"East China University of Science and Technology, Department of Computer Science and Engineering, Shanghai, China; Shanghai Normal University, Department of Computer Science and Technology, Shanghai, China",Rejected
768,Research on Total Factor Productivity Measurement and Influencing Factors of Digital Economy Enterprises,"Kalwar, A. and Ajmera, R. and Gill, A.",International Journal on Technical and Physical Problems of Engineering,2021,"Web applications are immensely important in today's world. Every business whether small or big is focusing on web-based development. However, a significant number of web application projects fail each year. Some web application development project fails in pre-launch stage as their development becomes increasing complex and unmanageable. The reason for this is that web applications are developed using the lifecycle models designed for software development. Web applications have fundamentally different and unique characteristics as compared to software development such as short go to market time and global audience. The aim of this research is to propose a new iterative lifecycle model for web application development. The proposed model is designed to specifically cater to the development needs of web applications and the developed model is tested by practical implementation in case study. The results reveal that the proposed model leads better Business Value Management and consumer satisfaction. © 2021, International Organization on 'Technical and Physical Problems of Engineering'. All rights reserved.",,"Department of Computer Science and Engineering, JECRC University, Jaipur, India; Department of Information Technology, JECRC University, Jaipur, India; Department of Electrical Engineering, JECRC University, Jaipur, India",Rejected
769,Recognition and Generation of Logically Related Words for Historical Text Data using Reconstruction of Protowords,"Hossain, A. and Hossen, M. and Hasan, M.M. and Sattar, A.","Proceedings of the 3rd International Conference on Intelligent Communication Technologies and Virtual Mobile Networks, ICICV 2021",2021,"The main objective is to predict GDP Growth by help of other parameters like GDP Per Capita, Inflation Rate, Government Debt, Total Investment, Remittance, Unemployed Rate. The complex relations are obtained by machine learning algorithm among GDP Growth Rate and other parameters to predict GDP Growth Rate that may help everyone to get connected to the field of economy and also to the economist to demonstrate their prediction about the economy. With help of this it is easy to find out the possible way to improve the desire growth of GDP. This project can help to demonstrate our eco-social scenario of future. This project can help to set economic goals for our country and can find out which parameters are most directly related to our GDP Growth and which are less related to our GDP Growth and which are accountable for reducing our GDP Growth. For any country GDP growth is a very important think to follow up. This project will give the analyzed data and we will get proper information to take certain action to keep the growth in higher rate. Through this system it is possible to achieve accurate information about the GDP Growth. © 2021 IEEE.",10.1109/ICICV50876.2021.9388593,"Daffodil International University, Department of Computer Science and Engineering, Dhaka, Bangladesh",Rejected
770,Technical and Nontechnical Prioritization Schema for Technical Debt: Voice of TD-Experienced Practitioners,"Al Maruf, A. and Lambaria, N. and Abdelfattah, A.S. and Cerny, T.","Proceedings - 2021 36th IEEE/ACM International Conference on Automated Software Engineering, ASE 2021",2021,"Despite the fact that there are numerous classifications of technical debt based on various criteria, Code Debt or code smells is a category that appears in the majority of current research. One of the primary causes of code debt is the urgency to deliver software quickly, as well as bad coding practices. Among many approaches, static code analysis has received the most attention in studies to detect code-smell/code debt. However, most of them examine the same programming language, although today's software company utilizes many development stacks with various languages and tools. This problem can be resolved by detecting code debt with Issue/Ticket cards. This paper presents a method for detecting code debt leveraging natural language processing on issue tickets. It also proposes a method for calculating the average amount of time that a code debt was present in the software. This method is implemented utilizing git mining. © 2021 IEEE.",10.1109/ASE51524.2021.9678532,"Baylor University, Dept. of Computer Science, Waco, TX, United States",Accepted
771,Managing Technical Debt under Uncertainty,"Mumtaz, H. and Singh, P. and Blincoe, K.",Journal of Systems and Software,2021,"The recognition of the need for high-quality software architecture is evident from the increasing trend in investigating architectural smells. Detection of architectural smells is paramount because they can seep through to design and implementation stages if left unidentified. Many architectural smells detection techniques and tools are proposed in the literature. The diversity in the detection techniques and tools suggests the need for their collective analysis to identify interesting aspects for practice and open research areas. To fulfill this, in this paper, we unify the knowledge about the detection of architectural smells through a systematic mapping study. We report on the existing detection techniques and tools for architectural smells to identify their limitations. We find there has been limited investigation of some architectural smells (e.g., micro-service smells); many architectural smells are not detected by tools yet; and there are limited empirical validations of techniques and tools. Based on our findings, we suggest several open research problems, including the need to (1) investigate undetected architectural smells (e.g., Java package smells), (2) improve the coverage of architectural smell detection across architecture styles (e.g., service-oriented and cloud), and (3) perform empirical validations of techniques and tools in industry across different languages and project domains. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110885,"Department of Electrical, Computer, and Software Engineering at the University of Auckland, New Zealand; School of Computer Science at the University of Auckland, New Zealand",Accepted
772,Technical Debt Forecasting Based on Deep Learning Techniques,"MacHado, C. and Dos Santos, R.R.S. and Westphall, C.M.","Proceedings - 2021 IEEE 20th International Conference on Trust, Security and Privacy in Computing and Communications, TrustCom 2021",2021,"Community networks are prone to free-riders, i.e., participants who take advantage of cooperation from others' routers but do not contribute reciprocally. In this paper, we present HARPIA, a system for credit-based incentive mechanisms for data forwarding in community networks aimed to prevent selfish behavior. HARPIA does not require a trusted third-party or tamper-resistant security modules as in other incentive mechanisms. Instead, it uses a distributed accounting scheme (DPIFA) to estimate the balance of data forwarding contribution and consumption of each network router and settle correspondent cryptocurrency debts on an Ethereum smart contract. On-chain settlement transactions are performed every HARPIA cycle (e.g., daily, weekly, monthly) and must be validated by at least m-of-n network routers using a multi-signature scheme (MuSig). We also realized a performance evaluation, security threat assessment, and cryptocurrency costs estimation. Results show that our proposal is suitable for community networks with up to 64 infrastructure routers under specific m-of-n MuSig thresholds. © 2021 IEEE.",10.1109/TrustCom53373.2021.00152,"Federal University of Santa Catarina - UFSC, Graduate Program in Computer Science - PPGCC, Network and Management Laboratory - LRG, PO Box 47, Florianópolis, 88040-900, Brazil",Rejected
773,Risks of water and wastewater PPP projects: an investors perspective,"Sreeram, G. and Pradeep, S. and Pabba, S. and Parveen, N.",International Journal of System of Systems Engineering,2021,We exposed a flourishing structure of high process eminence supertendence services on face book that influence fundamental of encounter. Collusion networks accumulate OAuth get admission to tokens from colluding contributors and abuse them to provide fake likes or feedback to their individuals. We completed a complete size examine to apprehend how these collusion networks exploited popular 0.33-celebration face book programs with susceptible security settings to retrieve OAuth get admission to tokens. We infiltrated famous collusion networks the use of honeypots and identified more than one million colluding face book debts by way of draining these collusion networks. This determines outcome for face book and associated through the process of different alleviations which terminates open authorisation to get expression maltreatment externally giving up function stage convinces by third party engineers. Copyright © 2021 Inderscience Enterprises Ltd.,10.1504/IJSSE.2021.121472,"Department of CSE, Vignana Bharathi Institute of Technology, TS, Hyderabad, 501301, India; Department of CSE, Bhoj Reddy Engineering College for Women, TS, Hyderabad, 500059, India; Department of CSE, K J Somaiya College of Engineering, Maharashtra, Mumbai, 400077, India; Department of CSE, Koneru Lakshmaiah Education Foundation, AP, Guntur, 522502, India",Rejected
774,Automatically Assessing Complexity of Contributions to Git Repositories,"Maurizka, S. and Handayani, P.W. and Pinem, A.A.","Proceedings - 3rd International Conference on Informatics, Multimedia, Cyber, and Information System, ICIMCIS 2021",2021,"Pay Later is a new payment method that allows consumers to buy products using installments with a certain deadline. Pay Later have been adopted by various online marketplaces and increased during the COVID-19. This study aims to seek light on Pay Later payment method adoption on business-to-consumer (B2C) online marketplace in Indonesia using the modification of the Technology Acceptance Model (TAM). This study uses the Partial Least Square Structural Equation Modelling (PLS-SEM) analysis method with the help of SmartPLS 3.0 and a survey filled out by 1,141 respondents. The results showed that perceived usefulness, perceived ease of use, social influence, lifestyle compatibility, consumer trust, perceived risk, and debt attitude influence the users' intention to adopt/use Pay Later, and the intention is proven to influence the actual use of Pay Later in B2C online marketplace in Indonesia. © 2021 IEEE.",10.1109/ICIMCIS53775.2021.9699127,"Universitas Indonesia, Faculty of Computer Science, Depok, Indonesia",Rejected
775,dalex: Responsible machine learning with interactive explainability and fairness in python,"Wolf, M. and Logan, J. and Mehta, K. and Jacobson, D. and Cashman, M. and Walker, A.M. and Eisenhauer, G. and Widener, P. and Cliff, A.","Proceedings - IEEE International Conference on Cluster Computing, ICCC",2021,"The FAIR principles of open science (Findable, Accessible, Interoperable, and Reusable) have had transformative effects on modern large-scale computational science. In particular, they have encouraged more open access to and use of data, an important consideration as collaboration among teams of researchers accelerates and the use of workflows by those teams to solve problems increases. How best to apply the FAIR principles to workflows themselves, and software more generally, is not yet well understood. We argue that the software engineering concept of technical debt management provides a useful guide for application of those principles to workflows, and in particular that it implies reusability should be considered as 'first among equals'. Moreover, our approach recognizes a continuum of reusability where we can make explicit and selectable the tradeoffs required in workflows for both their users and developers. To this end, we propose a new abstraction approach for reusable workflows, with demonstrations for both synthetic workloads and real-world computational biology workflows. Through application of novel systems and tools that are based on this abstraction, these experimental workflows are refactored to rightsize the granularity of workflow components to efficiently fill the gap between end-user simplicity and general customizability. Our work makes it easier to selectively reason about and automate the connections between trade-offs across user and developer concerns when exposing degrees of freedom for reuse. Additionally, by exposing fine-grained reusability abstractions we enable performance optimizations, as we demonstrate on both institutional-scale and leadership-class HPC resources. ©2021 IEEE.",10.1109/Cluster48925.2021.00053,"Oak Ridge National Laboratory, Oak Ridge, TN, United States; Bredesen Center for Interdisciplinary Research and Graduate Education, University of Tennessee, Knoxville, TN, United States; Sandia National Laboratories, Albuquerque, NM, United States; Georgia Institute of Technology, Atlanta, GA, United States",Rejected
776,Evaluating the agreement among technical debt measurement tools: building an empirical benchmark of technical debt liabilities,"Liu, J. and Jin, W. and Feng, Q. and Zhang, X. and Dai, Y.","Proceedings - International Symposium on Software Reliability Engineering, ISSRE",2021,"Architecture anti-patterns violate design principles and negatively impact software internal quality. Both academia and industry have designed methods and tools to detect anti-patterns. However, these tools tend to report a large number of defects, hindering developers from prioritizing true debts. In this work, we take one step further to explore the most problematic files (we define them as root files) in the architecture anti-patterns, which are potential causes leading to the difficulty of software maintenance. Using 45 Python projects as subjects, we investigate root files' maintainability, evolution (i.e., birth, living, and death), and their interactions in different architecture anti-patterns. Our results reveal that, compared with other files in anti-patterns, these root files take only a small proportion but incur heavy maintenance costs. Our study of their evolution and interactions can help developers identify potential causes of anti-patterns. We believe our findings will benefit the practice of design problem fixing. © 2021 IEEE.",10.1109/ISSRE52982.2021.00060,"Ministry of Education Key Laboratory of Intelligent Networks and Network Security, Xi'An Jiaotong University, China; School of Software Engineering, Xi'An Jiaotong University, Xi'an, China; Nanjing University of Science and Technology, Nanjing, China",Accepted
777,"Low-Code Is Often High-Code, So We Must Design Low-Code Platforms to Enable Proper Software Engineering","Ksontini, E. and Kessentini, M. and Ferreira, T.D.N. and Hassan, F.","Proceedings - 2021 36th IEEE/ACM International Conference on Automated Software Engineering, ASE 2021",2021,"Software containers, such as Docker, are recently considered as the mainstream technology of providing reusable software artifacts. Developers can easily build and deploy their applications based on the large number of reusable Docker images that are publicly available. Thus, a current popular trend in industry is to move towards the containerization of their applications. However, container-based projects compromise different components including the Docker and Docker-compose files, and several other dependencies to the source code combining different containers and facilitating the interactions with them. Similar to any other complex systems, container-based projects are prone to various quality and technical debt issues related to different artifacts: Docker and Docker-compose files, and regular source code ones. Unfortunately, there is a gap of knowledge in how container-based projects actually evolve and are maintained.In this paper, we address the above gap by studying refactorings, i.e., structural changes while preserving the behavior, applied in open-source Docker projects, and the technical debt issues they alleviate. We analyzed 68 projects, consisting of 19, 5 MLOC, along with 193 manually examined commits. The results indicate that developers refactor these Docker projects for a variety of reasons that are specific to the configuration, combination and execution of containers, leading to several new technical debt categories and refactoring types compared to existing refactoring domains. For instance, refactorings for reducing the image size of Dockerfiles, improving the extensibility of Docker-compose files, and regular source code refactorings are mainly associated with the evolution of Docker and Docker-compose files. We also introduced 24 new Docker-specific refactorings and technical debt categories, respectively, and defined different best practices. The implications of this study will assist practitioners, tool builders, and educators in improving the quality of Docker projects. © 2021 IEEE.",10.1109/ASE51524.2021.9678585,"University of Michigan-Dearborn, Dearborn, MI, United States",Accepted
778,ATDx: A tool for providing a data-driven overview of architectural technical debt in software-intensive systems,"Alsaif, S.A. and Hidri, A.",Informatica (Slovenia),2021,"To protect the middle class from over-indebtedness, banking institutions need to implement a flexible analytic-based evaluation method to improve the banking process by detecting customers who are likely to have difficulty in managing their debt. In this paper, we test and evaluate a large variety of data balancing methods on selected machine learning algorithms (MLAs) to overcome the effects of imbalanced data and show their impact on the training step to predict credit risk. Our objective is to deal with data unbalance to achieve the best predictions. We investigated the performance of these methods by different learners when classification models are trained using MLAs. © 2021 Slovene Society Informatika. All rights reserved.",10.31449/inf.v45i2.3479,"Computer Department, Deanship of Preparatory Year and Supporting Studies, Imam Abdulrahman Bin Faisal University, P.O. Box 1982, Dammam, 31441, Saudi Arabia",Rejected
779,Design choices in building an MSR tool: The case of Kaiaulu,"Jindal, R. and Raturi, A. and Kunwar, A.K. and Thapper, A.","Proceedings - 2021 1st IEEE International Conference on Artificial Intelligence and Machine Vision, AIMV 2021",2021,"Crop related services like fisheries, sericulture hubs, animal husbandry, and agriculture, that is, traditional farming methods, play a highly vital role in the progression of the economies of the developing third world countries and are also responsible, to some extent, for the current status of the so-called developed countries. Good crop choice is a vital parameter that is directly proportional to the amount of yield of a particular crop a farmer gets in an agricultural year. Poor crop selection patterns that are not per external factors like rainfall, temperature, humidity, etc. lead to detrimental outputs and yields, which may even be a factor to some length, in the increasing debts that the Indian farmers are in for the past 8 years. Thus there are direct consequences of bad crop selection and poor yield to the social, economic, and mental wellbeing of the farmer. The Indian agriculture industry is heavily at the mercy of climate in different parts of the year. To this view, over the past years, many different Artificial Intelligence-based techniques have been introduced to try to revolutionize the farming industry in some way. These techniques come under the banner of Precision Agriculture. Concepts used in precision agriculture include Ensemble models, KNN based models, Similarity-based frameworks and many other techniques to mitigate traditional problems in farming. Along the same lines of thinking, we discuss in this paper, a regularized ANN-based method to better recommend crops based on selective factors like rain and temperature. © 2021 IEEE.",10.1109/AIMV53313.2021.9670902,"Delhi Technological University, Department of Computer Science and Engineering, New Delhi, India",Rejected
780,A conceptual framework to support the management of technical debt in software testing,"Borup, N.B. and Christiansen, A.L.J. and Tovgaard, S.H. and Persson, J.S.",Lecture Notes in Business Information Processing,2021,"Technical Debt (TD) has seen a growing interest from software companies and researchers since the term was first established almost 30 years ago. TD refers to concessions made for short-term advantages or conveniences, which may result in long-term difficulties. Numerous TD management strategies have been proposed to avoid the severe consequences of leaving TD unchecked. However, these strategies often suffer from being too abstract, making it difficult to initiate TD deliberations. To investigate how software development companies can initiate such deliberations, we conducted an Action Research study in collaboration with a Danish software development department, SoftShelf. Through two Action Research interventions at SoftShelf, we introduced strategies and tools for TD management and reified them to their situation in order to initiate deliberations on the matter. After reporting the interventions practical consequences in SoftShelf, we discuss the usefulness of deliberation theory in TD management research and practice. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-91983-2_5,"Department of Computer Science, Aalborg University, Selma Lagerlöfs Vej 300, Aalborg Øst, 9220, Denmark",Accepted
781,A Plea to Tool Vendors: Do Not Mislead How Technical Debt Is Managed,"Korobov, E.A. and Semernina, Y.V. and Usmanova, A.S. and Odinokova, K.A.",Business Informatics,2021,"The modern global debt market features historically low average interest rates, convergence of yields on bonds with different maturities, an increase of yield curve inversion emergence frequency and a large-scale trend to automate financial decision making. The researchers' attention in these fields is mainly focused on designing models that describe the state of the debt market as whole or its individual instruments in particular, as well as on risk management methods. At the same time, the specialized literature offers very few works concerning the topic of computer algorithms for bond portfolio selection based on traditional or advanced investment strategies. The aim of the present research is to create a modification of the existing algorithm of riding the yield curve strategy application, employing, first, average bond yield over the holding period instead of traditional bond yield to maturity; second, a developed algorithm for calculating the market spread on bonds; and, third, alternative risk evaluation indicators (compensation coefficients), which allow us to measure objectively price risk, liquidity risk, transaction costs risk and a general risk. The modification and the development of the algorithm for calculating the market spread were carried out using the direct measurement of the result technique, which entails application of the strategy to the data on bond issues received through the Moscow Exchange API. The selection of financial instruments was conducted in all sectors of the Russian debt market: public bonds, sub-federal and municipal bonds, corporate bonds. The modified algorithm enabled us to get extra yield for each selected bond issue, thereby proving the high effectiveness of the technique compared to the traditional strategy. Software implementation of the algorithm can be integrated into any robotized or semi-robotized stock exchange trading application. © 2021 National Research University, Higher School of Econoimics. All rights reserved.",10.17323/2587-814X.2021.4.7.21,"Laboratory of IT in Economics, Saratov State University, 83 Astrakhanskaya Street, Saratov, 410012, Russian Federation; Department of Finance and Banking, Socio-Economic Institute, Saratov State Technical University, 77 Polytechnicheskaya Street, Saratov, 410054, Russian Federation",Rejected
782,"10 Years of Technical Debt Research and Practice: Past, Present, and Future","Laak, M. and Schmitz, A.-K. and Becking, D. and Seelmeyer, U. and Waag, P. and Weinhardt, M.",Communications in Computer and Information Science,2021,"This paper gives an overview of the ongoing project STellaR  A stationary telepresence counselling system for collaborative work on paper documents. The system consists of dedicated rooms for video counselling, which clients can use to connect to a remotely located counselor without requiring any knowledge about computers or the internet. STellaR rooms are equipped with a large monitor, high quality microphone, camera, and sound system, which represent the counselor in life size. The system enables a collaborative work on paper documents, that are still widely used in e.g., debt counselling. These documents are scanned and transmitted to the counselor. Through the use of projectors, the counselor can point, mark and annotate the paper documents. Furthermore, the digitized paper documents are archived in a block chain. This enables to track their states of editing over several counselling sessions. We describe the developments on the system that have already taken place, as well as planned, future work. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-90179-0_49,"Fachhochschule Bielefeld, Bielefeld, Germany; Universität Trier, Trier, Germany",Rejected
783,A Gap in the Analysis of Technical Debt in Procedural Languages: An Experiential Report on Go,"Jindal, A. and Interlandi, M.",Proceedings of the VLDB Endowment,2021,"The goal of this tutorial is to educate the audience about the state of the art in ML for cloud data systems, both in research and in practice. The tutorial is divided in two parts: the progress, and the path forward. Part I covers the recent successes in deploying machine learning solutions for cloud data systems. We will discuss the practical considerations taken into account and the progress made at various levels. The goal is to compare and contrast the promise of ML for systems with the ground actually covered in industry. Finally, Part II discusses practical issues of machine learning in the enterprise covering the generation of explanations, model debugging, model deployment, model management, constraints on eyes-on data usage and anonymization, and a discussion of the technical debt that can accrue through machine learning and models in the enterprise. © The authors.",10.14778/3476311.3476408,"Microsoft, United States",Rejected
784,Determining Enterprise Architecture Smells from Software Architecture Smells,"Qin, K. and Zhou, L. and Livshits, B. and Gervais, A.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2021,"Credit allows a lender to loan out surplus capital to a borrower. In the traditional economy, credit bears the risk that the borrower may default on its debt, the lender hence requires upfront collateral from the borrower, plus interest fee payments. Due to the atomicity of blockchain transactions, lenders can offer flash loans, i.e., loans that are only valid within one transaction and must be repaid by the end of that transaction. This concept has lead to a number of interesting attack possibilities, some of which were exploited in February 2020. This paper is the first to explore the implication of transaction atomicity and flash loans for the nascent decentralized finance (DeFi) ecosystem. We show quantitatively how transaction atomicity increases the arbitrage revenue. We moreover analyze two existing attacks with ROIs beyond 500k%. We formulate finding the attack parameters as an optimization problem over the state of the underlying Ethereum blockchain and the state of the DeFi ecosystem. We show how malicious adversaries can efficiently maximize an attack profit and hence damage the DeFi ecosystem further. Specifically, we present how two previously executed attacks can be boosted to result in a profit of 829.5k USD and 1.1M USD, respectively, which is a boost of 2.37 × and 1.73 ×, respectively. © 2021, International Financial Cryptography Association.",10.1007/978-3-662-64322-8_1,"Imperial College London, London, United Kingdom",Rejected
785,The temporality of technical debt introduction on new code and confounding factors,"Farias, M. and Mendes, T.S. and Mendonça, M.G. and Spínola, R.O.","27th Annual Americas Conference on Information Systems, AMCIS 2021",2021,"Context: Technical debt (TD) contextualizes the problem of pending development tasks as a type of debt that brings a short-term benefit to the project, but which may have to be paid with interest later. When development teams explicitly admit these issues, TD is named Self-Admitted Technical Debt (SATD). Objective: Evaluate a SATD identification strategy, based on a SATD conceptual model implemented by the eXcomment tool, identifying comment patterns that are good indicators of the presence of SATD and those that point to false positive items. Method: We conducted an empirical study, considering two large and mature open-source software projects. Results: We identified 25 patterns that are more commonly found in code comments that point to SATD items and patterns that point to false-positive comments, indicating that those patterns can be excluded from the SATD conceptual model. Conclusion: We provide new evidence on how software engineers can use code comments to detect SATD items automatically. © AMCIS 2021.",,"Federal Institute of Sergipe, Brazil; Federal Institute of Bahia, Brazil; Federal University of Bahia, Brazil; Salvador University, El Salvador",Accepted
786,Adding security to implantable medical devices: Can we afford it?,"Alomar, E.A. and Peruma, A. and Mkaouer, M.W. and Newman, C.D. and Ouni, A.",Journal of Software: Evolution and Process,2021,"Refactoring is widely recognized as one of the efficient techniques to manage technical debt and maintain a healthy software project through enforcing best design practices, or coping with design defects. Previous refactoring surveys have shown that code refactoring activities are mainly executed by developers who have sufficient knowledge of the system's design, and disposing of leadership roles in their development teams. However, these surveys were mainly limited to specific projects and companies. In this paper, we explore the generalizability of the previous results by analyzing 800 open-source projects. We mine their refactoring activities, and we identify their corresponding contributors. Then, we associate an experience score to each contributor in order to test various hypotheses related to whether developers with higher scores tend to (1) perform a higher number of refactoring operations, (2) exhibit different motivations behind their refactoring, and (3) better document their refactoring activity. We found that (1) although refactoring is not restricted to a subset of developers, those with higher contribution scores tend to perform more refactorings than others; (2) although there is no correlation between experience and motivation behind refactoring, top contributed developers are found to perform a wider variety of refactoring operations, regardless of their complexity; and (3) top contributed developer tend to document less their refactoring activity. Our qualitative analysis of three randomly sampled projects shows that the developers who are responsible for the majority of refactoring activities are typically in advanced positions in their development teams, demonstrating their extensive knowledge of the design of the systems they contribute to. © 2021 John Wiley & Sons, Ltd.",10.1002/smr.2395,"Department of Software Engineering, Rochester Institute of Technology, Rochester, NY, United States; School of Systems and Enterprises, Stevens Institute of Technology, Hoboken, NJ, United States; Department of Software Engineering and IT, ETS Montreal, Montreal, QC, Canada",Accepted
787,Machine Learning for Technical Debt Identification,"Madhivanan, V. and Godandapani, Z.",International Journal of Information and Decision Sciences,2021,"Technical debt (TD) is a metaphor that is one of the reasons for software to become obsolete. The process of refactoring can be effectively applied to reduce the technical debt and the improvement of other vital quality attributes such as abstraction, inheritance and coupling. This paper discusses a refactoring model that can be applied for an object oriented software system for improved quality by applying the concepts of game theory. A multi-player perturbed software refactor game model is developed, that models inheritance, abstraction, coupling and the technical debt, as multiple players of the game. An optimal strategy for refactoring the source code is arrived by calculating the ?-Nash equilibrium of the perturbed game. The results attained are compared against the popular genetic algorithm (GA), artificial bee colony (ABC) and simulated annealing (SA) optimisation algorithms, taking three open source Java project samples. © 2021 Inderscience Enterprises Ltd.",10.1504/IJIDS.2021.118052,"Department of Computer Science and Engineering, Pondicherry Engineering College, Pillaichavady, Puducherry, 605014, India",Accepted
788,BRICS-Eurasian Credit Markets: Problems and Prospects,"Pigazzini, I. and Foppiani, D. and Fontana, F.A.",CEUR Workshop Proceedings,2021,"Architectural smells (AS) represent symptoms of problems at architectural level that have an impact on architectural debt. It is important to identify among them the most critical ones, so that developers can prioritize them for their removal. In order to evaluate the criticality of AS, in this paper we consider two facets: the PageRank metric, to assess the centrality of a smell in a project, and Severity, a metric to estimate the cost-solving of smells. We have proposed these two metrics in a previous work and here we perform an empirical analysis of the evolution and correlation of these metrics in the version history of 10 projects (at least 22 versions each, 264 projects in total). The analysis of the evolution is useful in order to identify which architectural smells types tend to become more critical. The analysis of the correlation is useful to study whether the criticality of a smell has an influence on how much it costs to remove it, and vice-versa. © 2021 Copyright for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"University of Milano - Bicocca, Milan, Italy",Accepted
789,Do practitioners intentionally self-fix Technical Debt and why?,"Rinta-Kahila, T. and Someh, I. and Gillespie, N. and Indulska, M. and Gregor, S.",European Journal of Information Systems,2021,"Governments are increasingly relying on algorithmic decision-making (ADM) to deliver public services. Recent information systems literature has raised concerns regarding ADMs negative unintended consequences, such as widespread discrimination, which in extreme cases can be destructive to society. The extant empirical literature, however, has not sufficiently examined the destructive effects of governmental ADM. In this paper, we report on a case study of the Australian governments Robodebt programme that was designed to automatically calculate and collect welfare overpayment debts from citizens but ended up causing severe distress to citizens and welfare agency staff. Employing perspectives from systems thinking and organisational limits, we develop a research model that explains how a socially destructive government ADM programme was initiated, sustained, and delegitimized. The model offers a set of generalisable mechanisms that can benefit investigations of ADMs consequences. Our findings contribute to the literature of unintended consequences of ADM and demonstrate to practitioners the importance of setting up robust governance infrastructures for ADM programmes. © 2021 The Author(s). Published by Informa UK Limited, trading as Taylor & Francis Group.",10.1080/0960085X.2021.1960905,"Business Information Systems, Business School, The University of Queensland, Brisbane, Australia; Management, Business School, The University of Queensland, Brisbane, Australia; Research School of Management, Faculty of Business and Economics, Australian National University, Canberra, Australia",Rejected
790,Revealing Common Enterprise Architecture Debts: Conceptualization and Critical Reflection on a Workshop Format Industry Experience Report,"Arango, E.C. and Loaiza, O.L.",Lecture Notes in Networks and Systems,2021,"This study consisted of the extension of the Scrum framework with Clean Architecture practices (Scrum-CA) to improve software maintainability. Methodologically, in this study: i) the requirements that Scrum-CA had to satisfy were identified; ii) identification of Scrum aspects (artifacts and/or activities) to be extended, iii) specify the extended framework; and, iv) validate the proposal through a pilot project. At the extended framework level, this proposal considers the formulation of a business context as an input to the Product Backlog. The specification of tasks in the Sprint backlog diversifies them into 4 spaces (infrastructure, controllers, application and domain) so that in the development of the Sprint the achievement of a maintainable architecture is allowed, an issue that Scrum teams must define empirically a priori. SOLID principles are added in the implementation of the product within the Sprints and coherence is maintained between the planning of the requirements and the achievement of the product architecture. Scrum-CA was validated through an implementation project in a Peruvian State entity nationwide. The results show an improvement in the maintainability of the project software, from Sprint1 to Sprint2, reducing code duplication from 4.8% to 3.5%, from 31 duplicated blocks to 9, a technical debt from 6.3% to 1.3%. Also, it is necessary to repeat Scrum-CA in other projects to generate a standard. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-77442-4_56,"Escuela de Posgrado, Unidad de Posgrado de Ingeniería y Arquitectura, Universidad Peruana Unión, Carretera Central Km. 19.5, Lurigancho-Chosica, Lima, Peru",Rejected
791,Emerging Technical Debt in Digital Twin Systems,"Gopinath, M. and Srinivas Shankar Maheep, K. and Sethuraman, R.",Advances in Parallel Computing,2021,"Banking Sector contains loan where it is a process of lending or borrowing a sum of money by one or more individuals, organizations, etc. from Banks. The Person who lends that money from respective financier incurs a debt, and he is responsible to pay back the money with the Interest decided by Bank within a certain period. Generally what Bank's look into before applying for a loan is Credit History, Credit loss and Income of Applicant. So basically,loans play a major role regarding Income for Bank. Due to rapid urban development people who are applying for loans got increased rapidly. Therefore, finding the applicant to whom loan can be approved become a complexed process. In this paper, we want to predict the loan eligibility based on details of the customer. Fields that required are Matrimonial Status, Income, Education, Loan Amount, Credit History and other income sources of Applicant dependants. To predict the status, we will use Logistic Regression to spot the eligible applicants so bank will engage with them for granting loans to those people who can payback in a given time. © 2021 The authors and IOS Press.",10.3233/APC210103,"Dept of CSE, Sathyabama Institute of Science and Technology, Chennai, India",Rejected
792,Automated Refactoring of Unbounded Queries in Software Automation Platforms,"Mallidi, R.K. and Sharma, M. and Singh, J.",International Journal of Electrical and Computer Engineering Systems,2021,"Legacy Digital Transformation is modernizing or migrating systems from non-digital or older digital technology to newer digital technologies. Digitalization is essential for information reading, processing, transforming, and storing. Social media, Cloud, and analytics are the major technologies in today's digital world. Digitalization (business process) and Digital Transformation (the effect) are the core elements of newer global policies and processes. Recent COVID pandemic situation, Organizations are willing to digitalize their environment without losing business. Digital technologies help to improve their capabilities to transform processes that intern promote new business models. Applications cannot remain static and should modernize to meet the evolving business and technology needs. Business needs time to market, Agility, and reduce technical debt. Technology needs consist of APIs, better Security, Portability, Scalability, Cloud support, Deployment, Automation, and Integration. This paper elaborates different transformation/ modernization approaches for Legacy systems written in very long or End of Life (EOL) systems to newer digital technologies to serve the business needs. EOL impacts application production, supportability, compliance, and security. Organizations spend money and resources on Digital Transformation for considering Investment versus Return on Investment, Agility of the System, and improved business processes. Migration and Modernization are critical for any Legacy Digital Transformation. Management takes decisions to proceed with Digital Transformation for considering Total Cost Ownership (TCO) and Return on Investment (ROI) of the program. The paper also includes a TCO-ROI calculator for Transformation from Legacy / Monolithic to new architectures like Microservices. © 2021 J.J. Strossmayer University of Osijek , Faculty of Electrical Engineering, Computer Science and Information Technology. All rights reserved.",10.32985/IJECES.12.3.5,"School of Computer Applications Lovely Professional University Punjab, India; Mittal School of Business Lovely Professional University Punjab, India",Rejected
793,Solution Discovery over Feature Toggling with Built-in Abstraction in OutSystems,"Jeyasheela Rakkini, M.J. and Geetha, K.",Lecture Notes on Data Engineering and Communications Technologies,2021,"Microfinance which promises alleviation of poverty to the less privileged, oppressed community of people and to empower womenfolk, will get enrichment if it is implemented in a blockchain with a digital currency. Microfinance promises to end the vicious cycle of debt, and poverty can be deployed in a permissioned or permissionless blockchain, and the stakeholders can form a decentralized autonomous organization which enables a transparent successful functionality. Blockchain which is a decentralized, distributed, the tamper-proof ledger can be used for reading and writing of transactions of self-help groups in a much transparent way. The decentralized autonomous organization enabled with smart contracts to trigger our intended functionality in blockchain will give the microfinance, its streamlined intended functionality with expert panel members contingency measures to meet contingency situations, angel investors to invest in the new proposals of self-help group(SHG) microfinance and initial coin offerings for funding of new projects with potential investors. The hash of the transactions is used with crypto addresses, and the elliptic curve digital signature algorithm is used for authentication. The peer pressure model of SHG leads to a 90% loan repayment with more than 50% of the line of credit for the modern-day microfinance loan applicants. The self-help group working model, know your customer of SHG, initial coin offering model is given as proof of concept in solidity code in remix IDE. © 2021, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.",10.1007/978-981-15-9647-6_32,"School of Computing, SASTRA Deemed to be University, Thirumalaisamudram, Thanjavur, Tamil Nadu, India",Rejected
794,Common Causes and Effects of Technical Debt in Costa Rica: InsighTD Survey Replication,"Masmali, O. and Badreddin, O. and khandoker, R.",Advances in Intelligent Systems and Computing,2021,"Software complexity is an indicator to the quality of software. It shows that a software or a component of software has a design or implementation that is difficult to understand, modify and maintain. Many complexity metrics have been developed by researchers to identify and measure the degree of complexity. Unfortunately, Current complexity metrics are based on the number of model elements only, regardless of the complexity of those elements themselves. In this paper, we propose new code complexity metrics that are derived from its design. This approach ensures that the derived metrics are uniquely tailored for the software under development, and the derived metrics are unique for each software module. In this study, we aim to attempt an empirical evaluation study in order to have a clear understanding of the proposed complexity metrics. We investigated whether there is a correlation between the proposed UML Class Diagram complexity and the associated code, specially code size, code smells, and technical debt. The result shows that there is a high correlation between the design driven code complexity metrics and the associated code. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-73103-8_9,"Department of Computer Science, The University of Texas, El Paso, TX  79902, United States",Accepted
795,An Emergent Design Approach to test the Quality of the Software System,"Fang, W. and Li, X. and Zhou, P. and Yan, J. and Jiang, D. and Zhou, T.",IEEE Access,2021,"Recently, Internet finance is increasingly popular. However, bad debt has become a serious threat to Internet financial companies. The fraud detection models commonly used in conventional financial companies is logistic regression. Although it is interpretable, the accuracy of the logistic regression still remains to be improved. This paper takes a large public loan dataset, e.g. Lending club, for example, to explore the potential of applying deep neural network for fraud detection. We first fill the missing values by a random forest. Then, an XGBoost algorithm is employed to select the most discriminate features. After that, we propose to use a synthetic minority oversampling technique to deal with the sample imbalance. With the preprocessed data, we design a deep neural network for Internet loan fraud detection. Extensive experiments have been conducted to demonstrate the outperformance of the deep neural network compared with the commonly-used models. Such a simple yet effective model may brighten the application of deep learning in anti-fraud for Internet loans, which would benefit the financial engineers in small and medium Internet financial companies. © 2013 IEEE.",10.1109/ACCESS.2021.3051079,"College of Science, Shantou University, Shantou, China; College of Engineering, Shantou University, Shantou, China; College of Information Engineering, Nanyang Institute of Technology, Nanyang, 473000, China; Key Laboratory of Intelligent Manufacturing Technology, Ministry of Education, Shantou University, Shantou, 515063, China",Rejected
796,"Proceedings - 2021 36th IEEE/ACM International Conference on Automated Software Engineering, ASE 2021","Palomba, F. and Tamburri, D.A.",Journal of Systems and Software,2021,"Community smells represent sub-optimal conditions appearing within software development communities (e.g., non-communicating sub-teams, deviant contributors, etc.) that may lead to the emergence of social debt and increase the overall project's cost. Previous work has studied these smells under different perspectives, investigating their nature, diffuseness, and impact on technical aspects of source code. Furthermore, it has been shown that some socio-technical metrics like, for instance, the well-known socio-technical congruence, can potentially be employed to foresee their appearance. Yet, there is still a lack of knowledge of the actual predictive power of such socio-technical metrics. In this paper, we aim at tackling this problem by empirically investigating (i) the potential value of socio-technical metrics as predictors of community smells and (ii) what is the performance of within- and cross-project community smell prediction models based on socio-technical metrics. To this aim, we exploit a dataset composed of 60 open-source projects and consider four community smells such as ORGANIZATIONAL SILO, BLACK CLOUD, LONE WOLF, and BOTTLENECK. The key results of our work report that a within-project solution can reach F-Measure and AUC-ROC of 77% and 78%, respectively, while cross-project models still require improvements, being however able to reach an F-Measure of 62% and overcome a random baseline. Among the metrics investigated, socio-technical congruence, communicability, and turnover-related metrics are the most powerful predictors of the emergence of community smells. © 2020",10.1016/j.jss.2020.110847,"SeSa Lab - University of Salerno, Italy; JADE Lab - Eindhoven University of Technology/Jheronimus Academy of Data Science, Netherlands",Rejected
797,FixMe: A GitHub Bot for Detecting and Monitoring On-Hold Self-Admitted Technical Debt,"Pahuja, S. and Singh, G. and Singh, P.",Artificial Intelligence and IoT-Based Technologies for Sustainable Farming and Smart Agriculture,2021,"In many countries like India, farming is done using indigenous methods. Because of lack of proper knowledge in our farmers, the state of the agricultural sector becomes even more critical. Since the farming methodologies rely mostly on weather forecasts and predictions which might not be foolproof, most often the farmers incur huge losses leading to debts and mass farmer suicides. Adequate soil moisture, soil quality, air quality, and proper irrigation play a major role in the yield of crops, and hence, such factors cannot be overlooked. A major concern now is the exploding population due to which the agricultural supplies are not meeting the ever-increasing demand. The world's population is expected to cross nine billion marks by 2050 due to which the agricultural supply should increase at least by 70% to meet the requirement. To achieve this, it's necessary to monitor the plant growth at all stages starting from sowing until cultivation. © 2021, IGI Global.",10.4018/978-1-7998-1722-2.ch014,"Delhi Technological University, Delhi, India; Salesforce, United States",Rejected
798,Research on architecture and smart contract of household intelligent power service platform based on blockchain,"Saleh, A.F. and Rashid, A.M. and Jasim, S.R.",Webology,2021,"In the banking world, the non-performing debts are considering one of the main critical that have almost all commercial banks attention. Hence, this study aimed to know the impact of non-performing loans on profitability and liquidity of commercial banks, where it has found a fundamental impact on its various profitability activities such as return on equity assets. The study was conducted on a group of the Iraqi commercial banks, 10 banks, for the period (2011-2018), and panel data models were used to analyze and demonstrate the impact of non-performing bank loans on profitability, return on equity (shareholders equity), and return on assets. In return, the study did not find such an impact of liquidity size because it determines by monetary authority represented by Central Bank of Iraq (CBI) and it related significantly to loans, the higher the proportion of loans the greater the proportion of its reserves. © 2021",10.14704/WEB/V18SI05/WEB18262,"University of Anbar, Anbar, Iraq",Rejected
799,Applying Machine Learning to Improve Collection and to Reduce Write-Offs in Utilities,"Ye, Z.",ACM International Conference Proceeding Series,2021,"High-accuracy bankruptcy prediction has been important to investors and corporate finance officers for decades. With bankruptcy data in China and Poland given, this paper is an exploratory study attempting to aid feature engineering in bankruptcy predictions through a new exploratory method we call ""Data Slicing.""Our data slicing analysis relies on making predictions on carefully selected and sliced financial datasets and measuring each sliced dataset's prediction accuracy. According to the findings in this research, the most related metric and the best variable to slice on to get a predictable sliced dataset turn out to be ""Solvency Ratio""both in Chinese and Polish data. Simultaneously, using two different sliced datasets, the accuracy of machine learning and deep learning methods is improved. Support Vector Machine, Neural Networks and Random Forest methods are suggested to use in bankruptcy detection for higher accuracy. In summary, investors and other risk management officers are highly recommended to pay attention to firm's ability to pay debts, especially in their valuation attempts and forecasts. © 2021 ACM.",10.1145/3480001.3480008,"College of Information Science and Technology, Beijing University of Chemical Technology, China, China",Rejected
800,A Study on Shift Towards Digitalization of Medical Reimbursement by Insurance Companies during COVID Like Pandemic Situation,"Sardo, F. and Serrasqueiro, Z.","International Journal of Services, Technology and Management",2021,"This study analyses the relationships between intellectual capital components and firms financing decisions. We collect data for two subsamples formed by high value added intellectual capital and low value added intellectual capital (VAIC) firms belonging to 14 countries in Western Europe. Our findings show that IC components, such as human capital and structural capital are negatively related to firms book leverage in both samples of firms. In contrast, relational capital is positively related to book leverage in high VAIC firms. The negative relationship between profitability and book leverage suggests that firms for both samples, prefer internal finance instead of debt. The negative effect of growth opportunities and the positive effect of collaterals on book leverage suggest that firms of both samples face information asymmetry problems. The speed of adjustment towards the target debt ratio is greater in high VAIC firms than in low VAIC firms, suggesting lower adjustment costs for the former. Copyright © 2021 Inderscience Enterprises Ltd.",10.1504/IJSTM.2021.118177,"Research on Economics, Management and Information Technologies  REMIT, Universidade Portucalense, Porto, Portugal; Unidade de Investigação em Governança, Competitividade e Políticas Públicas (GOVCOPP), Aveiro, Portugal; Instituto Superior de Contabilidade e Administração (ISCA-UA), Universidade de Aveiro, R. Associação Humanitária dos Bombeiros Voluntários de Aveiro, Aveiro, 3810-500, Portugal; Department of Management and Economics, University of Beira Interior, Portugal; CEFAGE-UBI  Center f",Rejected
801,Refactoring Cost Estimation for Architectural Technical Debt,"Zhu, L. and Li, M. and Metawa, N.",Information Processing and Management,2021,"With accelerating global economic integration processes, the financial risk early warning requirements for companies are becoming higher and higher. This study discusses the financial risk evaluation Z-Score Model for intelligent IoT-based enterprises. The financial risk early warning system of an IoT company is made up of four parts: alarm source analysis, Z-Score Model analysis, and main financial ratio analysis. Among them, the police source analysis is the premise and important guarantee for the operation of the system overall. After analyzing the internal and external risk factors from different sources in combination with the annual and industry reports of the IoT company, we found that the main risk sources IoT companies face focus on external legal risk, industry competition risk (mainly affected by the external environment), and external tenant credit risk (dominated by their own characteristics). Based on analysis of police sources, a Z-Score Model analysis for IoT companies can be carried out. Z-Score Model analysis is the core of the new financial risk early warning system of IoT companies; therefore, an IoT company's long-term solvency is weak. Any IoT company should be committed to diversifying investments and to carefully selecting investment projects. This study may prove helpful for IoT companies in reducing the probability of crises and developing in a healthy and orderly way. © 2021 Elsevier Ltd",10.1016/j.ipm.2021.102692,"School of Business Administration, Xi'an Eurasia University, Xi'an, Shaanxi  710065, China; School of Economics & Management, Northwest University, Xi'an, Shaanxi  710127, China; School of Management, Wenzhou Business College, Wenzhou, Zhejiang  325035, China; American University in the Emirates, Dubai, United Arab Emirates; College of Business Administration, Mansoura University, Egypt",Rejected
802,Beyond RoboDebt: The Future of Robotic Process Automation,"Chen, H. and Shen, J. and Wang, L. and Jin, Y.",Advances in Intelligent Systems and Computing,2021,"The identification of protein-protein interaction (PPI) is one of the most important tasks to understand the biological functions and disease mechanisms. Although numerous databases of biological interactions have been published in debt to advanced high-throughput technology, the study of inter-species protein-protein interactions, especially between human and bacterium pathogens, remains an active yet challenging topic to harness computational models tackling the complex analysis and prediction tasks. In this paper, we comprehensively revisit the prediction task of human-bacterium protein-protein interactions (HB-PPI), which is a first ever endeavour to report an empirical evaluation in learning and predicting HB-PPI based on machine learning models. Firstly, we summarise the literature review of human-bacterium interaction (HBI) study, meanwhile a vast number of databases published in the last decades are carefully examined. Secondly, a broader and deeper experimental framework is designed for HB-PPI prediction task, which explores a variety of feature representation algorithms and different computational models to learn from the curated HB-PPI dataset and perform predictions. Furthermore, a bidirectional LSTM-based model is proposed for the prediction task, which demonstrates a more effective performance in comparison with the others. Finally, opportunities for improving the performance and robustness of machine learning models for HP-PPI prediction are also discussed, laying a foundation for future work. © 2021, The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-54568-0_10,"University of Wollongong, Wollongong, NSW  2500, Australia; University of Surrey, Guildford, GU2 7XH, United Kingdom",Rejected
803,A benchmark of machine learning approaches for credit score prediction,"Yang, J. and Shi, Y.",Advances in Intelligent Systems and Computing,2021,"With the development of Internet technology, the influx of massive data has enabled research in the development of related fields such as the education robot industry. The era of big data has knocked on the door of artificial intelligence that has been silent for many years, combining statistical methodology, information theory, probability theory, etc. Disciplines, a new Internet era is coming. Educational robots, as a segmented industry of service robots, are closely related to artificial intelligence, and have been at the core of capital in recent years. In this context, using big data analysis to promote the healthy development of the education robot industry is of great significance to the development of the domestic education robot industry. This article uses big data technology to analyze the human resource management and debt structure and solvency of Shanghai Future Partners Robot Co., Ltd., analyzes the macroeconomic environment and industry environment of Shanghai Future Partners Robot Co., Ltd., and discusses the opportunities and challenge. Study the internal resources and capabilities of Shanghai Future Partners Robotics Co., Ltd., and analyze the companys strengths and weaknesses in terms of production management, technology research and development capabilities, financial management, marketing management, and human resource management. This article adopts the method of combining theory with practice and big data analysis, combining the learned economic theory, corporate strategy theory, financial management science, and human resources science with the actual situation of the development of Shanghai Future Partner Robot Co., Ltd., and On this basis, the strategic goals and strategic positioning of the companys future development are determined. Finally, it discusses how to control and implement corporate development strategies. The study found that the companys engineering and technical personnel ratio is as high as 61.8%, and the employees are of high quality, which is in line with the high-tech and composite characteristics of the industry. © Springer Nature Switzerland AG 2021.",10.1007/978-3-030-51556-0_10,"Jilin Engineering Normal University, Changchun, 130052, China; University of Sydney, Sydney, NSW  2006, Australia",Rejected
804,Exploring Community Smells in Open-Source: An Automated Approach,"Mikhaylov, A.M.",Lecture Notes in Networks and Systems,2021,"The banking business is transforming under current economic realities. This is not about increasing the role of financial technology or the Fintech industry in banking practice. The essence of modern transformation of the banking sector is its expansion, the capture of new market segments. A modern bank is an independent ecosystem with its own production potential, characterized both by production assets of pledging clients and by its own IT centers developing new digital financial assets. However, banking expansion also occurs in an extensive way. Banks begin to expand the range of their potential customers abroad, becoming transnational financial institutions, the task of which is to provide their new customers with a full range of investment services. The purpose of this study is to analyze the features of the investment banking development in Russia. For this, the following tasks are solved: a list of operations performed by domestic banks is determined, and the investment position of the domestic economy is analyzed to identify the development potential of investment banking in our country. Key research methods include synthesis, analysis, and expert judgment. The results of the study are reflected in a table representing the international investment position of the Russian Federation. © 2021, The Editor(s) (if applicable) and The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-60929-0_85,"Samara State University of Economics, Samara, Russian Federation",Rejected
805,Rapid prototyping of virtual reality cognitive exercises in a telerehabilitation context,"Tolstov, N.",Lecture Notes in Networks and Systems,2021,"The study examines the problem of agency conflicts and their impact on the value of a business and the welfare of shareholders. This problem may lead to a decrease in the business capitalization, become the basis for unfriendly acquisitions by competitors and foreign capital, may become the reason for an increase in the cost of debt financing, thus affecting the overall financial stability and solvency of the company. The study offers an updated model for evaluating the quality of financial management of public joint-stock companies, based on EMR, TSR, FARR, SGR, EQ/TA, CR and ND/EBITDA indicators as the tool for eliminating and preventing agency conflicts that affect the business value; its efficiency is demonstrated basing on the data obtained from the largest corporations in Russia. Evaluation of the model effectiveness shows a stable direct correlation between the scores obtained using the model and the future indicators of a business value, which testifies to the appropriateness of using the model in the context of the Russian economic environment. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-66093-2_9,"Kuban State University, 149, Stavropolskaya Street, Krasnodar, 350040, Russian Federation",Rejected
806,A Clustering Approach Towards Cross-Project Technical Debt Forecasting,"Vinogradova, E.K. and Kisarov, I.V. and Tishin, I.V. and Dolgov, Y.V.",Lecture Notes in Networks and Systems,2021,"Purpose: The purpose of the chapter is to underline through the historical analysis of public debt relations the main changes in the economic system of the Russian Federation. Design/methodology/approach: In this chapter the authors pay attention to the cyclical nature of economic relations. In particular, we are talking about the impact on the modern economic structure of centuries-old historical problems in the field of public debt relations. Besides we devoted special attention to the processes of capitals globalization, which can act as a problem, and, in the same time, can provide unique alternatives for modern Russian economy. Findings: Centuries-old debt problems and the effect of capital globalization identified new development trend. In this chapter it was named as institutional and mechanical transformation in the financial sector of the economy. Besides, in the context of this transformation, possible alternatives for the future development of monetary circulation were identified in the chapter. Originality/value: The institutional and mechanical transformation and the trends in the development of monetary circulation are united by a common goal - to speed up operations and to provide a high-quality reflection of current information. Perhaps these innovations will allow to optimize the procedure of state debt relations in its problem segments. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-69421-0_91,"Tver State University, Tver, Russian Federation",Rejected
807,How do Technical Debt Payment Practices Relate to the Effects of the Presence of Debt Items in Software Projects?,"Glotova, I.I. and Tomilina, E.P. and Klishina, Y.E. and Uglitskikh, O.N.",Lecture Notes in Networks and Systems,2021,"The increasing debt burden of the budgets of the Russian federal subjects has increased the relevance of assessing debt sustainability. The paper is devoted to the analysis of the dynamics and structure of Russian regional debt burdens. Financial assistance does not ensure the sustainability of regional budgets. The problem of debt sustainability has a significant impact on the economic security of the region since it requires constant monitoring. An effective way to reduce debt dependency is to issue government securities. The government also needs to implement a stimulative policy within the regions so that most debt obligations are formed due to market borrowing. The use of exchange auctions will help minimize the cost of borrowing in the regions. The levels of debt sustainability indicators stipulated by the budget legislation and the ranking system for Russian Federal subjects will allow monitoring the debt situation and timely applying the relevant restrictions and requirements. These measures are primarily aimed at supporting the regions. The parameters of the Stavropol Krai state debt allow us to conclude the average level of debt sustainability and the effective debt policy pursued by the Ministry of Finance of the Stavropol Krai. Given the current situation, the region could achieve high debt sustainability by the end of 2019. In general, the existing approaches to assessing the debt sustainability of the Russian Federal subjects require further development. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-72110-7_77,"Stavropol State Agrarian University, Stavropol, Russian Federation",Rejected
808,An exploratory study on the introduction and removal of different types of technical debt in deep learning frameworks,"Mantusov, V.B. and Tkachenko, M.F. and Nemirova, G.I.",Lecture Notes in Networks and Systems,2021,"The article assesses the balance between the use of various instruments for financing the development of the Central Asian states and defines measures to adjust the strategy of Russias presence in the region of Central Asia, taking into account the current situation and increased competition from major global players in the region. The analysis shows that the instruments used by Russia to finance the economy of the Central Asian states are quite ineffective. The potential of foreign investment is poorly used, but the so-called unproductive investments remain on a fairly high level, including remittances and, with a certain degree of conditionality, official development assistance. Remittances, official development assistance (mainly in the form of humanitarian aid and grants) and intergovernmental loans are often spent on consumption, old debts and budget deficits, without contributing to the development of economic potential of the Central Asian states and, consequently, without solving the problems that Russia, due to its geopolitical position, experiences from its proximity to the Central Asian countries. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-69415-9_215,"Russian Customs Academy, Lyubertsy, Russian Federation",Rejected
809,Wireless scheduling with deadline and power constraints,"Popkova, E.G. and Oudah, A.-M.M.Y. and Ermolina, L.V. and Sergi, B.S.",Lecture Notes in Networks and Systems,2021,"Purpose: The purpose of this chapter is to study the problem of sustainable development financing in the conditions of the budget deficit and investment collapse during the 2020 crisis and to determine the perspectives of solving this problem. Design/Methodology/Approach: The authors determine regression dependence of the sustainable development manifestations on the possibilities of sustainable development financing: state budget surplus as the difference between revenues and expenditures, government debt, and volume of private investments. Forecasts of change of the indicators values, which characterize the opportunities for sustainable development financing, are developed. The established regression dependence helps to determine the consequences for sustainable development. Findings: A forecast of financing and sustainable development amid the crisis of 2020 is compiled. The budget deficit will be more vivid (surplus budget will decrease by 220.61%, and government debt will grow by 85.42%); the investment will shrink by 41.96%. State financing has more significant influence (regression coefficient equals 379.34 for state budget surplus and 67.41 for government debt on average); private investments (regression coefficient is ?266.64 on average). Originality/Value: A far-reaching influence of deficit of financing for sustainable development is moderately negative on the whole  the expected decrease of all indicators of sustainable development under the control of the 2020 crisis compared to 2019, will constitute ?0.55%. The perspectives of solving the problem of sustainable development financing in the conditions of the budget deficit and investment collapse under the influence of the 2020 crisis are connected to balancing the revenues and expenditures of government debt, limitation of borrowings, reduction of the volume of government debt, and attraction of investments in economy and restriction of their outflow. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-69415-9_88,"Moscow State Institute of International Relations (MGIMO), Moscow, Russian Federation; Al-Ayen University, Nasiriyah, Dhi Qar, Iraq; Samara State Technical University, Samara, Russian Federation; Harvard University, Cambridge, United States; University of Messina, Messina, Italy",Rejected
810,Understanding Community Smells Variability: A Statistical Approach,"Liu, S. and Xiao, C.",Mobile Information Systems,2021,"Portfolio theory mainly studies how to optimize the allocation of assets under the premise of maximizing expected returns and minimizing investment risks. In view of the instability of the financial market, a diversified investment portfolio can help control the loss of the investment portfolio. In addition to paying attention to the safety and return of asset allocation, we cannot ignore the liquidity of assets, that is, their liquidity. Adding high-liquidity products to asset allocation, such as equity investment, can better control the financial cash flow in response to emergencies. One of the ways to make assets flow is to securitize assets and sell them to the market. In order to revitalize the stock assets, good investment efficiency is a necessary choice for financial investment. Various financial products and their derivatives continue to enter people's vision. There are many financial products in reality, and optimizing the investment portfolio can bring high economic benefits. The purpose of this paper is to study the application of optimization algorithms in financial portfolio problems. (1) Monetary policy remains prudent and neutral. It is not easy to expect flooding, but flexibility is required in complex situations. (2) Financial resources are tilted towards innovation and transformation and capital markets, which is beneficial to the development of capital markets in the medium and long term. (3) Unblocking the transmission mechanism is conducive to lenient credit and tapping the wrong killing opportunities in private enterprise debt. (4) Banks and other financial institutions have moderate pressure to give benefits to entities, but in the long run, the interests of the two are consistent. (5) Finance risk prevention will continue, orderly breaking the rigid exchange and reshaping the financial structure and ecology. (6) The pace of opening up of the financial industry has accelerated, and the bond market investor structure has improved. In this paper, we establish different optimization schemes to compare and study the portfolio problem and then use MATLAB to solve the modeling and programming problem, calculate the highest return rate and the lowest risk value before and after optimization, and then make a comparative analysis to get a better optimization scheme. The results show that the genetic algorithm model is superior to the quadratic programming method in terms of risk control. The minimum risk of portfolio optimization through genetic algorithm has been reduced by about 40%, and the maximum return has increased by about 25%. The comprehensive optimization effect is better than the quadratic planning method and ultimately can obtain higher economic benefits. It can be seen that the optimization algorithm is of great significance for the comparative study of financial portfolio problems. © 2021 Shuai Liu and Chenglin Xiao.",10.1155/2021/3462715,"School of Economics and Management, Hunan Institute of Science and Technology, Yueyang, 414000, China",Rejected
811,An Overview and Comparison of Technical Debt Measurement Tools,"Kamthan, P. and Shahmir, N.",Lecture Notes in Networks and Systems,2021,"The use of user stories for expressing software requirements, in agile software projects and beyond, has only increased over the years. However, the results on the quality of user stories have been mixed. This paper proposes a semiotics-based, technology-and-tool-independent, semi-formal framework, comprising interrelated conceptual (meta-)models that provide an understanding to the concept of user story, user story context, user story quality, and violations of user story quality. In doing so, it elicits the unique nature of user story, highlights the challenges in modeling and addressing user story quality, presents the results of a preliminary survey of students and professionals on the use of user story, and, through various real-world examples, illustrates violations of user story quality. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-65796-3_40,"Concordia University, Montreal, Canada; Canadian Pacific Railway Limited, Calgary, Canada",Rejected
812,Evolution of technical debt remediation in Python: A case study on the Apache Software Ecosystem,"Lazarenko, A.L. and Altynnikova, L.A. and Rykova, I.A. and Stepanova, O.A. and Uvarova, E.E.",Lecture Notes in Networks and Systems,2021,"The production aspect of economic security measures is important for various fields and areas of economic activity, as well as socio-economic activities. Today, systems are transformed by threats from their environment. This situation affected the financial system of the country, which, due to existing external risks, cannot quickly adapt to new challenges and changes. The highlighted fact made it possible to formulate a topical topic of research related to ensuring the economic security of the countrys financial system. The purpose of writing a scientific article is to consider instruments to ensure the economic security of the countrys financial system. To achieve the goal, it is necessary to solve the following tasks: to formulate a general idea of the financial system of the Russian Federation, to identify instruments to ensure economic security, to form shortcomings and instruments to ensure the economic security of the countrys financial system. The following tools are used to write a scientific article: synthesis method, theoretical representation method, description method, data grouping method, classification method, concretization method, analysis method, implication method and comparison method. The following measures are proposed as tools for ensuring the economic security of the countrys financial system: the use of tools and mechanisms for harmonizing the interests of business/population/state in the financial system, the development of strategies for the most rational use of funds, the definition of the role of the state and financial institutions in solving problems of economic security, the formation of monetary funds in the business activities of legal entities. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-69415-9_197,"Orel State University of Economics and Trade, Orel, Russian Federation",Rejected
813,QScored: A large dataset of code smells and quality metrics,"Saltari, E. and Semmler, W. and Di Bartolomeo, G.",Computational Economics,2021,"Our paper aims at introducing a moving-horizon interaction in a strategic context. We assume that, in each instant of time, players can predict the effects of their actions and those of their opponents on a finite moving horizon. We define an equilibrium concept, which is consistent in this setting, and develop an appropriate algorithm to compute it by using nonlinear model predictive control techniques. Focusing on the length of forecasting horizon, we propose two economic interpretations for our equilibrium, based on the limited rationality and political economy literature: a simple 2 players nonlinear policy game, and what happens to debt stabilization when policymakers have different values of the forecasting horizon. To provide some practical insights of our approach, we consider a debt stabilization game in a monetary union. We consider three players; two nonlinear differential constraints; and assume that one player controls one instrument which is not additive but has some multiplicative effects on the state variables. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10614-021-10177-8,"Universita degli Studi di Roma La Sapienza, Rome, Italy; The New School, New York, United States; University of Bielefeld, Bielefeld, Germany",Rejected
814,Emotions in Computer Vision Service QA,"Garcés Mayorga, D.V. and Andrade Santamaría, D.R. and Miranda Chávez, L.R.",Studies in Computational Intelligence,2021,"As part of bad economic planning carried out by people, they sometimes declare themselves debtors. Debts are a legal effect that causes a socio-economic impact. The present work proposes a method to measure the legal and socioeconomic effect in debtors declared in default. The method bases its operation on fuzzy logic through user experience. A case study was implemented in the canton of Pastaza with the aim of measuring the socioeconomic legal effect from which a working tool for decision-making is obtained. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-73819-8_9,"Universidad Regional Autónoma de Los Andes (UNIANDES), Puyo, Pastaza, 160150, Ecuador",Rejected
815,Frequency and Impact of Technical Debt Characteristics in Companies Producing Mechatronic Products,"Gnoyke, P. and Schulze, S. and Kruger, J.","Proceedings - 2021 IEEE International Conference on Software Maintenance and Evolution, ICSME 2021",2021,"If software quality assurance is postponed or even abandoned for a software system, maintenance and evolution become harder or even impossible. One widely known symptom for the degradation of system quality are Architecture Smells (ASs), which violate fundamental principles of software design. In this paper, we present a study on the evolution of ASs as well as on how and when they foster system degradation. Thus, we provide valuable insights regarding what ASs are meaningful to assure system quality. To this end, we analyzed the evolution of three types of ASs in 14 open-source systems with a total of 485 versions. We adapted indicators used in previous studies to assess the severity of ASs (e.g., growth, lifetime), and relate ASs to technical debt as another established indicator. Our results indicate that 1) ASs remain mostly stable compared to the code size of a system, 2) certain types of ASs, such as cyclic dependencies, have a greater impact on system degradation, and 3) certain properties determine how much an AS contributes to software degradation. These findings are valuable for practitioners to identify and tackle system degeneration, as well as for researchers to scope new research on managing ASs and technical debt. © 2021 IEEE.",10.1109/ICSME52107.2021.00043,"Otto-von-Guericke University Magdeburg, Magdeburg, Germany; University of Potsdam, Potsdam, Germany; Ruhr-University Bochum, Bochum, Germany",Duplicated
816,Waiting around or job half-done? Sentiment in self-admitted technical debt,"Vogel-Heuser, B. and Bi, F.",Journal of Systems and Software,2021,"Digitalization of products and production systems requires a fusion of mechatronic disciplines, where interfaces between mechanical, electrical, and software engineering are inevitable. The increasingly rapid pace of innovations in mechatronic systems triggers decisions being taken under time and cost pressure. At times, compromises in technical solutions are made, neglecting their long-term damage to the system. Technical debt (TD), a concept from software engineering, refers to short-term benefits that lead to long-term negative consequences, e.g., in the form of more difficult maintainability or evolvability. This also applies to mechatronic systems, yet the knowledge of TD characteristics and correlations in the interdisciplinary life cycle has only received little attention. This first comprehensive survey investigates TD in mechatronics systematically and across sectors. 50 experts, of whom 42% hold positions as department heads, from 21 renowned companies and 10 sectors in the German-speaking region supported this study with real scenarios where TD caused damage to their system. 94 informative TD incidents that were classified into twelve TD types were recorded, of which 2/3 have not yet been eliminated and posed a potential risk to the system. TD emerges most frequently in the first three stages of the life cycle, where the consequences rarely remain isolated at their source but are forwarded to later phases and disciplines in the life cycle. In contrast to the research focus in software engineering, the multi-domain analysis of mechatronic TD issues reveals that software engineers are most burdened by Requirements TD and Infrastructure TD in the interdisciplinary environment. © 2020",10.1016/j.jss.2020.110809,"Institute of Automation and Information Systems, Technische Universität München, Garching b. München, 85748, Germany",Accepted
817,Business-Driven Technical Debt Prioritization: An Industrial Case Study,"Rajalakshmi, V. and Sendhilkumar, S. and Mahalakshmi, G.S.",EAI/Springer Innovations in Communication and Computing,2021,"Technical debt refers to the technical trade-offs made by the software teams at the time of development of the software to fasten the delivery process. These trade-offs lead to a higher system maintenance cost, and it is difficult to often enhance the application. In some cases, enhancements can result in the entire modules being rewritten. So, in order to reduce the debt from the system, it is required to identify the debt and the project cycle where most of the debts occur. To automatically address this problem, this work uses the machine learning and text analytics model. Random forest and support vector machine (SVM) algorithms extract features from incident tracker documents and effectively classify the technical debts. The proposed technical debt classification model is made sustainable to handle the growing volumes of project documents by executing a distributed framework. The performance of both the models is examined, and it is found that SVM outperforms the other. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-49795-8_31,"Department of IST, Anna University, Chennai, India; Department of CSE, Anna University, Chennai, India",Accepted
818,Worst Smells and Their Worst Reasons,"Lenarduzzi, V. and Besker, T. and Taibi, D. and Martini, A. and Arcelli Fontana, F.",Journal of Systems and Software,2021,"Background: Software companies need to manage and refactor Technical Debt issues. Therefore, it is necessary to understand if and when refactoring of Technical Debt should be prioritized with respect to developing features or fixing bugs. Objective: The goal of this study is to investigate the existing body of knowledge in software engineering to understand what Technical Debt prioritization approaches have been proposed in research and industry. Method: We conducted a Systematic Literature Review of 557 unique papers published until 2020, following a consolidated methodology applied in software engineering. We included 44 primary studies. Results: Different approaches have been proposed for Technical Debt prioritization, all having different goals and proposing optimization regarding different criteria. The proposed measures capture only a small part of the plethora of factors used to prioritize Technical Debt qualitatively in practice. We present an impact map of such factors. However, there is a lack of empirical and validated set of tools. Conclusion: We observed that Technical Debt prioritization research is preliminary and there is no consensus on what the important factors are and how to measure them. Consequently, we cannot consider current research conclusive. In this paper, we therefore outline different directions for necessary future investigations. © 2020 Elsevier Inc.",10.1016/j.jss.2020.110827,"LUT University, Lathi, Finland; Chalmers University of Technology, Göteborg, Sweden; Tampere University, Tampere, Finland; University of Oslo, Oslo, Norway; University of Milano-Bicocca, Milan, Italy",Accepted
819,Impact of Opportunistic Reuse Practices to Technical Debt,"Sajini, G. and Kallimani, J.S.",Lecture Notes on Data Engineering and Communications Technologies,2021,"Language change throughout time and space is one of the major issues in linguistic history. The paper deals with new methods for the study of language evolutions to help researchers and experts. Firstly, a method is used to determine, if the words are cognate or not. A linguistic information algorithm is proposed to derive cognates from online dictionaries. Then a dataset is created of similar terms and machine learning techniques are used to focus on spelling to classify the cognates. The aligned subsequences are used to identify standards and guidelines for language change in newly created languages mainly to distinguish between non-cognate and cognates which are used for classification algorithms. Secondly, for identifying the sort of association between those words that humans expand the method to a simpler level. Discriminating cognates and debts gives an insight into a languages history and allows a clearer understanding of the linguistic relationship. The spelling characteristics have discriminative features and analyze the linguistic factors underlying this classification task. This is considered as the first such effort, to linguistic knowledge. Thirdly, a machine learning technique is developed for producing similar words automatically. One should concentrate on proto-word reconstruction to address issues related to it to generate the modern words which are not synonyms and another one is generating cognates. The task of reconstruction of proto words is to recreate words from its modern daughter languages in an ancient language. The method is based on the regularity of words and uses knowledge from many modern languages to build an ensemble method for proto-word reconstruction. This method is applied to multiple datasets to improve from the previous dataset accuracies. © The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd. 2021.",10.1007/978-981-15-8677-4_40,"Department of Computer Science and Engineering, M S Ramaiah Institute of Technology, Bangalore, India and affiliated to Visvesvaraya Technological University, Belagavi, Karnataka, India",Rejected
820,Experiences on Managing Technical Debt with Code Smells and AntiPatterns,"Benidris, M. and Ammar, H. and Dzielski, D.",International Journal of Software Engineering and Knowledge Engineering,2021,"Do developers postpone fixing Technical Debt (TD) in software systems? TD is a metaphor that refers to short-term decisions in software development that may affect the cost of the software development life cycle. The bad smell is an imperfect solution in the software system that negatively impacts the internal software quality and maintainability. In this paper, we will study five open-source software projects (OSSPs) that have several releases and also estimate the numbers of architecture smells (ASs), design smells (DSs), and code smells (CSs) for every release. Designite will be used to detect smells. We describe a case study conducted to explore the following: (1) What is theaverage smells density for architecture, design, and code smells in an OSSP? (2) Does the density of each smell type increase over multiple releases? (3) What percentage of each smell-type density is eliminated by refactoring? We collected around 2 million LOC from five OSSPs that have multiple releases from the GitHub repository to statistically analyze the software concerning the smells as indicators of TD. We find 36% of Architecture Technical Debt (ATD) is Cyclic Dependency, while 33% of Design Debt (DD) is Cyclically-dependent Modularization. More than 70% of Code Debt (CD) is MagicNumber. Even though the developers do refactoring between releases, the TD density in general increases. On average, by refactoring, developers remove around 48%, 16%, and 22% from the introduced ATD, DD, and CD from their next release, respectively. © 2021 World Scientific Publishing Company.",10.1142/S0218194021500017,"Lane Department of Computer Science and Electrical Engineering, West Virginia University, 395 Evansdale Drive, Morgantown, WV  26506, United States",Accepted
821,Architectural Archipelagos: Technical Debt in Long-Lived Software Research Platforms,"Abedin, M.Z. and Chi, G. and Uddin, M.M. and Satu, M.S. and Khan, M.I. and Hajek, P.",IEEE Access,2021,"This study proposes to address the economic significance of unpaid taxes by using an automatic system for predicting a tax default. Too little attention has been paid to tax default prediction in the past. Moreover, existing approaches tend to apply conventional statistical methods rather than advanced data analytic approaches, including state-of-the-art machine learning methods. Therefore, existing studies cannot effectively detect tax default information in real-world financial data because they fail to take into account the appropriate data transformations and nonlinear relationships between early-warning financial indicators and tax default behavior. To overcome these problems, this study applies diverse feature transformation techniques and state-of-the-art machine learning approaches. The proposed prediction system is validated by using a dataset showing tax defaults and non-defaults at Finnish limited liability firms. Our findings provide evidence for a major role of feature transformation, such as logarithmic and square-root transformation, in improving the performance of tax default prediction. We also show that extreme gradient boosting and the systematically developed forest of multiple decision trees outperform other machine learning methods in terms of accuracy and other classification performance measures. We show that the equity ratio, liquidity ratio, and debt-to-sales ratio are the most important indicators of tax defaults for 1-year-ahead predictions. Therefore, this study highlights the essential role of well-designed tax default prediction systems, which require a combination of feature transformation and machine learning methods. The effective implementation of an automatic tax default prediction system has important implications for tax administration and can assist administrators in achieving feasible government expenditure allocations and revenue expansions. © 2013 IEEE.",10.1109/ACCESS.2020.3048018,"Department of Finance and Banking, Hajee Mohammad Danesh Science and Technology University, Dinajpur, 5200, Bangladesh; School of Economics and Management, Dalian University of Technology, Dalian, 116024, China; Department of Accountancy, College of Business and Management, University of Illinois Springfield, Springfield, IL  62703, United States; Department of Management Information Systems, Noakhali Science and Technology University, Noakhali, 3814, Bangladesh; Department of Computer Science a",Rejected
822,Evaluating unit testing practices in R packages,"Nikolaidis, N. and Zisis, D. and Ampatzoglou, A. and Chatzigeorgiou, A. and Soudris, D.",IEEE Access,2021,"Technical Debt (TD) is a software engineering metaphor that resembles the production of poor-quality code to going into debt. In particular, a development team that 'saves' effort while developing by not removing inefficiencies, has to 'pay-back' with interest, in the form of additional maintenance costs (i.e., fixing bugs, adding features, etc.) due to the poor maintainability of the developed code. Although maintainability assurance is an established practice in traditional software development (lately known as TD management), it has still not attracted the attention of scientific software developers; i.e., researchers writing code and developing tools for purely research purposes. Nevertheless, based on the literature and practice, maintainability seems to be ranked as an important key-driver for the development of such applications; since the effort needed to update the code before the experimentation (e.g., executing a simulation) is common and should not receive low priority. In this paper, we present the outcome of a 3-year research project on Technical Debt Management (TDM) for scientific software development. The outcome of the project is a framework (termed: EXA2PRO TDM framework) and an accompanying platform for assisting scientific software developers in managing the TD of their applications. The framework is a collection of methods tailored for the mainstream programming languages of scientific software development, which have been empirically validated through five pilot applications. The majority of the EXA2PRO framework suggestions have been applied by scientific software developers and eased future maintenance activities. © 2013 IEEE.",10.1109/ACCESS.2021.3079271,"Department of Applied Informatics, University of Macedonia, Thessaloniki, 546 36, Greece; School of Electrical and Computer Engineering, National Technical University of Athens, Athens, 15780, Greece",Accepted
823,Software Ticks Need No Specifications,"Molnar, A.-J. and Motogna, S.",Communications in Computer and Information Science,2021,"Our study is focused on an evaluation of the maintainability characteristic in the context of the long-term evolution of open-source software. According to well established software quality models such as the ISO 9126 and the more recent ISO 25010, maintainability remains among key quality characteristics alongside performance, security and reliability. To achieve our objective, we selected three complex, widely used target applications for which access to their entire development history and source code was available. To enable cross-application comparison, we restricted our selection to GUI-driven software developed on the Java platform. We focused our examination on released versions, resulting in 111 software releases included in our case study. These covered more than 10 years of development for each of the applications. For each version, we determined its maintainability using three distinct quantitative models of varying complexity. We examined the relation between software size and maintainability and studied the main drivers of important changes to software maintainability. We contextualized our findings using manual source code examination. We also carried out a finer grained evaluation at package level to determine the distribution of maintainability issues within application source code. Finally, we provided a cross-application analysis in order to identify common as well as application-specific patterns. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-70006-5_11,"Faculty of Mathematics and Computer Science, Babe?-Bolyai University, Cluj-Napoca, Romania",Rejected
824,Evolution of the Unix System Architecture: An Exploratory Case Study,"Liu, B.",Journal of Ambient Intelligence and Humanized Computing,2021,"The continuous deepening of the development of my country's market economy has brought more development opportunities to Chinese enterprises, which has made the development of Chinese enterprises more rapid. A financial crisis in an enterprise will bring about disastrous consequences such as investment loss, unemployment of employees, and unrecoverable credit, which will further affect the country's economic development, financial security and social stability. Therefore, the impact of corporate cloud computing database applications and corporate debt financing has attracted widespread attention, and the impact of corporate debt financing capabilities and debt financing costs have become the main issues studied in this article. This article uses scientific methods to establish an effective financial crisis early warning model, conducts an empirical analysis of the financial data of listed companies in my country, selects indicators that have a significant impact on the financial status of the enterprise, and obtains an accurate early warning classification of the financial status of the enterprise, which verifies this article The feasibility and effectiveness of the proposed early warning ideas, early warning index system and early warning methods. This article also focuses on the internal risk management methods of enterprises, and makes an in-depth study on whether high-quality internal control can weaken creditors' expectations of risks caused by corporate strategic differences, thereby weakening the relationship between strategic differences and corporate debt financing. Based on the conclusions obtained, this article puts forward a number of constructive suggestions for Chinese enterprises to optimize their strategic positioning and control operating risks to alleviate financing difficulties, which have certain theoretical significance and practical value. © 2021, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.",10.1007/s12652-021-03103-1,"China University of Mining and Technology, Beijing, 100083, China",Rejected
825,Evaluating the effectiveness of risk containers to isolate change propagation,"Kaur, I. and Kaur, A.",IEEE Access,2021,"Purpose: Code smells are residuals of technical debt induced by the developers. They hinder evolution, adaptability and maintenance of the software. Meanwhile, they are very beneficial in indicating the loopholes of problems and bugs in the software. Machine learning has been extensively used to predict Code Smells in research. The current study aims to optimise the prediction using Ensemble Learning and Feature Selection techniques on three open-source Java data sets. Design and Results: The work Compares four varied approaches to detect code smells using four performance measures Accuracy(P1), G-mean1 (P2), G-mean2 (P3), and F-measure (P4). The study found out that values of the performance measures did not degrade it instead of either remained same or increased with feature selection and Ensemble Learning. Random Forest turns out to be the best classifier while Correlation-based Feature selection(BFS) is best amongst Feature Selection techniques. Ensemble Learning aggregators, i.e. ET5C2 (BFS intersection Relief with classifier Random Forest), ET6C2 (BFS union Relief with classifier Random Forest), and ET5C1 (BFS intersection Relief with Bagging) and Majority Voting give best results from all the aggregation combinations studied. Conclusion: Though the results are good, but using Ensemble learning techniques needs a lot of validation for a variety of data sets before it can be standardised. The Ensemble Learning techniques also pose a challenge concerning diversity and reliability and hence needs exhaustive studies. © 2013 IEEE.",10.1109/ACCESS.2021.3049823,"University School of Information Communication Technology, Guru Gobind Singh Indraprastha University, New Delhi, India; University School of Information Communication Technology, Guru Gobind Singh Indraprastha University, New Delhi, India",Accepted
826,Building and evaluating a theory of architectural technical debt in software-intensive systems,,Lecture Notes in Business Information Processing,2021,"The proceedings contain 41 papers. The special focus in this conference is on Enterprise Information Systems. The topics include: Fast and Efficient Parallel Execution of SARIMA Prediction Model; an Approach to Intelligent Control Public Transportation System Using a Multi-agent System; comparative Evaluation of the Supervised Machine Learning Classification Methods and the Concept Drift Detection Methods in the Financial Business Problems; sammon Mapping-Based Gradient Boosted Trees for Tax Crime Prediction in the City of São Paulo; extraction of Speech Features and Alignment to Detect Early Dyslexia Evidences; an Extended Secondary Study to Characterize the Influence of Developers Sentiments on Practices and Artifacts in Open Source Software Projects; improving Quality of Use-Case Models by Correlating Defects, Difficulties, and Modeling Strategies; iVolunteer - A Platform for Digitization and Exploitation of Lifelong Volunteer Engagement; an Investigation of Currently Used Aspects in Model Transformation Development; streaming Set Similarity Joins; Software Evolution and Maintenance Using an Agile and MDD Hybrid Processes; DSL Based Approach for Building Model-Driven Questionnaires; modeling of Robot Interaction in Coalition Through Smart Space and Blockchain: Precision Agriculture Scenario; a Capability Based Method for Development of Resilient Digital Services; adopting Agile Software Development Combined with User-Centered Design and Lean Startup: A Systematic Literature Review on Maturity Models; Evaluating a LSTM Neural Network and a Word2vec Model in the Classification of Self-admitted Technical Debts and Their Types in Code Comments; from Simple to Structural Clones: Tapping the Benefits of Non-redundancy; SACIP: An Agent-Based Constructionist Adaptive System for Programming Beginners; security Architecture Framework for Enterprises.",,,Rejected
827,DebtHunter: A machine learning-based approach for detecting self-admitted technical debt,"Santos, R.M. and Santos, I.M. and Júnior, M.C. and Mendonça, M.",Lecture Notes in Business Information Processing,2021,"Context: Software development teams constantly opt for faster, lower quality solutions to solve current problems without planning for the future. This situation will have a negative long-term impact and is called technical debt. Similar to a financial debt, technical debts require interest payments and must be managed and detected so that the team can evaluate the best way to deal with them. One way to detect technical debts is through classification of source code comments. Developers often insert comments warning of the need to improve their own code in the future. This is known as Self-Admitted Technical Debt (SATD). Objective: Combine Word2vec for word embedding with a Long short-term memory (LSTM) neural network model to identify SATDs from comments in source code and compare with other studies and LSTM without word embedding. Method: We plan and execute an experimental process with models effectiveness data validation. Results: In general, the classification improves when all SATD types were grouped in a single label. In relation to other studies, the LSTM model with Word2vec achieved better recall and f-measure. The LSTM model without word embedding achieves greater recall, but perform worse in precision and f-measure. Conclusion: We found evidence that LSTM models combined with word embedding are promising for the development a more effective SATD classifier. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-75418-1_25,"Graduate Program in Computer Science, Federal University of Bahia, Salvador, Brazil; Department of Information Systems, Federal University of Sergipe, Itabaiana, Brazil",Accepted
828,On the nature of issues in five open source microservices systems: An empirical study,"Senanayake, N. and Podschwadt, R. and Takabi, D. and Calhoun, V.D. and Plis, S.M.",Neuroinformatics,2021,"The field of neuroimaging can greatly benefit from building machine learning models to detect and predict diseases, and discover novel biomarkers, but much of the data collected at various organizations and research centers is unable to be shared due to privacy or regulatory concerns (especially for clinical data or rare disorders). In addition, aggregating data across multiple large studies results in a huge amount of duplicated technical debt and the resources required can be challenging or impossible for an individual site to build. Training on the data distributed across organizations can result in models that generalize much better than models trained on data from any of organizations alone. While there are approaches for decentralized sharing, these often do not provide the highest possible guarantees of sample privacy that only cryptography can provide. In addition, such approaches are often focused on probabilistic solutions. In this paper, we propose an approach that leverages the potential of datasets spread among a number of data collecting organizations by performing joint analyses in a secure and deterministic manner when only encrypted data is shared and manipulated. The approach is based on secure multiparty computation which refers to cryptographic protocols that enable distributed computation of a function over distributed inputs without revealing additional information about the inputs. It enables multiple organizations to train machine learning models on their joint data and apply the trained models to encrypted data without revealing their sensitive data to the other parties. In our proposed approach, organizations (or sites) securely collaborate to build a machine learning model as it would have been trained on the aggregated data of all the organizations combined. Importantly, the approach does not require a trusted party (i.e. aggregator), each contributing site plays an equal role in the process, and no site can learn individual data of any other site. We demonstrate effectiveness of the proposed approach, in a range of empirical evaluations using different machine learning algorithms including logistic regression and convolutional neural network models on human structural and functional magnetic resonance imaging datasets. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s12021-021-09525-8,"Georgia State University, Atlanta, GA, United States",Rejected
829,Finding and Fixing Design Debt,"Krassadaki, E. and Zopounidis, C. and Lemonakis, C.",Operational Research,2021,"Various methodological tools have been employed to assess the viability of firms. In the current study, the methodological approach is based on fuzzy sets and Boolean logic, namely, the fuzzy set Qualitative Comparative Analysis method (fsQCA), which explores all the necessary conditions and sufficient combinations in a dataset for the presence or the absence of an outcome. Necessary causal conditions are those that produce the outcome, while sufficient combinations are those that always lead to the given outcome. The fsQCA method focuses on linguistic summarization of if-then type rules. In this frame, the method explores rules, which lead to an outcome condition. The outcome explored in the current study concerns the viability of 89 randomly selected Greek firms for three consecutive years, 20092011. According to their financial situation, firms are either viable or in bankruptcy or even in a between financial condition. Our analysis is based on five financial ratios: the Total Debt Capacity, the Long-Term Debt Capacity, the Financial Expenses Management, the Current Ratio (CR), and the Quick Ratio (QR). The results indicate that necessary conditions for viable firms are CR and QR for each year. Moreover, one sufficient rule is extracted, the same for each year, which includes the necessary conditions CR and QR along with LTDC. © 2021, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.",10.1007/s12351-021-00653-2,"Decision Support Systems Laboratory, School of Production Engineering and Management, Technical University of Crete, Chania, 73100, Greece; Financial Engineering Laboratory, School of Production Engineering and Management, Technical University of Crete, Chania, 73100, Greece; Audencia Business School, 8 Route de la Jonelière, B.P.31222, Nantes, Cedex, 44312, France; Administrative Economics and Decision Systems Laboratory, Management Science and Technology Department, Hellenic Mediterranean Uni",Rejected
830,Evaluating the Architectural Debt of IoT Projects,"Tian, J. and Liu, Y.",Procedia Computer Science,2021,"Digital economy becomes the main driving force of the future economy. However, the existing literatures on digital economy mainly focuses on the measurement of the overall development level and its impact, and lacks the discussion of digital economy from the perspective of enterprises. In this paper, we use LP semi-parametric method and ACF method to measure the total factor productivity of China's listed digital economy enterprises from 2013 to 2018, and construct multiple regression model to explore the influencing factors of total factor productivity. We find that, at the regional level, digital economy enterprises in eastern China have higher total factor productivity than those in central and western China. The level of digital infrastructure has a significant positive impact on total factor productivity. From the perspective of enterprises, capitalization degree, debt leverage, profitability, staff quality, management efficiency and R&D per capita have significant positive effects on total factor productivity. In addition, the influence of government subsidies on total factor productivity exhibits a positive ""U"" shape. © 2021 Elsevier B.V.. All rights reserved.",10.1016/j.procs.2021.04.077,"School of Statistics, Shandong University of Finance and Economics, Jinan, 250014, China",Rejected
831,"Identifying architectural technical debt, principal, and interest in microservices: A multiple-case study","Sajini, G. and Kallimani, J.S.",Lecture Notes in Networks and Systems,2021,"This article presents new methods for the study of language evolutions which helps researchers and experts. Initially, a method is used to determine if the words are cognate or not. A linguistic information algorithm is proposed to derive cognates from online dictionaries. Later, a dataset is created of similar terms and machine learning techniques are used to focus on spelling in order to classify the cognates. The aligned subsequences are used to identify standards and guidelines for language change in newly created languages mainly to distinguish between non-cognates and cognates which are used for classification algorithms. Next, discriminating cognates and debts give an insight into a language's history and allow a clearer understanding of the linguistic relationship. The task of reconstruction of protowords is to recreate words from its modern daughter languages in an ancient language. The method is based on the regularity of words and use knowledge from many modern languages to build an ensemble method for protoword reconstruction. This method is applied to multiple datasets to improve from the previous dataset accuracies. © 2021, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.",10.1007/978-981-33-6546-9_54,"Department of Computer Science and Engineering, M S Ramaiah Institute of Technology, Bangalore, India; Department of Computer Science and Engineering, Visvesvaraya Technological University, Belagavi, Karnataka, India",Rejected
832,Augmenting commit classification by using fine-grained source code changes and a pre-trained deep neural language model,"Mandic, V. and Tausan, N. and Ramac, R. and Freire, S. and Rios, N. and Perez, B. and Castellanos, C. and Correal, D. and Pacheco, A. and Lopez, G. and Izurieta, C. and Falessi, D. and Seaman, C. and Spinola, R.",IEEE Software,2021,"Technical debt (TD) can be injected at any stage of software development, spreading across other phases and causing various problems. This article presents a model for conceptualizing TD causes, effects, payment practices, and reasons for payment avoidance, with a prioritization schema for technical and nontechnical roles. © 1984-2012 IEEE.",10.1109/MS.2021.3103121,University of Novi Sad; Infora Research; Federal University of Bahia; Federal University of Rio de Janeiro; Universidad de Los Andes; University of Costa Rica; Montana State University; University of Rome 'Tor Vergata'; University of Maryland Baltimore County; Salvador University,Accepted
833,"Iberian Conference on Information Systems and Technologies, CISTI","Fungprasertkul, S. and Bahsoon, R.",IEEE Software,2021,"A fundamental problem and an open challenge is managing technical debt in the presence of uncertainty. We provide an overview of the research, practical limitations, and future study of the current state of technical debt management under uncertainty. © 1984-2012 IEEE.",10.1109/MS.2021.3101945,University of Birmingham,Accepted
834,Technical Debt predictive model through Temporal Convolutional Network,"Mathioudaki, M. and Tsoukalas, D. and Siavvas, M. and Kehagias, D.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2021,"Technical debt (TD) is a metaphor commonly used to reflect the consequences of quality compromises that can derive short-term benefits but may result in quality decay of software products in the long run. While a broad variety of methods and tools have been proposed over the years for the identification and quantification of TD during the software development cycle, it is not until recently that researchers have turned their interest towards methods aiming to forecast the future TD evolution of a software project. Predicting the future value of TD could facilitate decision-making tasks regarding software maintenance and assist developers and project managers in taking proactive actions regarding TD repayment. In previous relevant studies, time series analysis and Machine Learning techniques have been employed in order to generate meaningful TD forecasts. While these approaches have been proven capable of producing reliable TD predictions, their predictive performance has been observed to decrease significantly for long-term predictions. To this end, in the present paper we investigate whether the adoption of Deep Learning may lead to more accurate long-term TD prediction. For this purpose, Deep Learning models are constructed, evaluated, and compared based on a dataset of five popular real-world software applications. The results of our analysis indicate that the adoption of Deep Learning results in TD forecasting models with sufficient predictive performance up to 150 steps ahead into the future. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-87007-2_22,"Centre for Research and Technology Hellas, Thessaloniki, Greece",Accepted
835,Predicting Accounts Receivable with Machine Learning: A Case in Malaysia,"Amiri, O. and Ayazi, A. and Rahimi, M. and Khazaeni, G.",Construction Innovation,2021,"Purpose: Water and wastewater (WW) projects are gaining attention in Iran because of shortages of water resources. However, these projects are lengthy and they are accompanied by numerous risks, such as lack of sufficient financial resources. Publicprivate partnerships (PPPs) are taken into account as a constructive approach to deal with the problem of insufficient government funds and they are increasingly being implemented to construct the required infrastructures in different countries. Although WW projects in PPPs can reduce the governments debt, investors are still uncertain about this approach. Hence, this study aims to identify and evaluate the risk of all parties involved in WW-PPP projects, from the viewpoint of investor. Design/methodology/approach: First, the risk factors which are involved in WW projects are identified by interviewing experts and reviewing the literature by means of fault tree analysis (FTA) tool. Second, the probability and effects of the risky factors which are related to specific event are evaluated and analyzed by hybridization of interval fuzzy Type-2 sets (IT2FS) and risk score formulation. Finally, some solutions are proposed to deal with the most challenging risks. Findings: Six gate events, namely, risks which are related to investors such as investors consultant-related risks, risky conditions from engineering, procurement, and construction (EPC) contractors point of view, risk factors which public sector takes into account, public sectors consultant-related risks which public sectors consultant consider challenging and external factors were defined according to the literature. From FTA tool and by interviewing the experts, 94 basic events were identified. Finally, from hybridization of IT2FSs and risk score formulation, top five risks are determined as Difficulty of injecting financial resources into the project, Fluctuation in inflation rate, Poor decision-making process in public sector, Difficulty of importing the equipment which are required for the project (such as pumps, grain catchers, garbage collectors, etc.) from other countries and Impact of risky conditions in other projects on operation of PPP project. Originality/value: In the absence of a constructive approach for risk identification and a reliable model for evaluating the identified risks in PPP projects, this research project is one of the first research studies which used FTA for identifying risks and hybridization of IT2FSs and risk score formulation for evaluating the risks. © 2021, Emerald Publishing Limited.",10.1108/CI-04-2021-0073,"Islamic Azad University Science and Research Branch, Tehran, Iran; Department of Civil Engineering, Islamic Azad University Shahr-e-Qods Branch, Tehran, Iran; Department of Urban Planning, Islamic Azad University Central Tehran Branch, Tehran, Iran; Azad University West Tehran Branch, Tehran, Iran",Rejected
836,Accounting-based Digital Payment Systems for SMEs,"Pfeiffer, R.-H.",Communications in Computer and Information Science,2021,"Lehmans second law of software evolution suggests that under certain conditions software becomes more difficult to evolve. Similarly, Technical Debt (TD) is often considered as technical compromises that render future changes of software more costly. But how does one actually assess if modifying software becomes more difficult or costly? So far research studied this question indirectly by assessing internal structural complexity of successive software versions arguing that increasing internal complexity renders evolution tasks more difficult and costly too. Our goal is to assess complexity of evolution tasks directly. Therefore, we present an algorithm and tool that allows to automatically assess Contribution Complexity (CC), which is the complexity of a contribution respecting difficulty of integration work. Our initial evaluation suggests that our proposed algorithm and readily available tool are suitable to automatically assess complexity of contributions to software in Git repositories and the results of applying it on 8 686 contributions to two open-source systems indicate that evolution tasks actually become slightly more difficult. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-85347-1_9,"IT University of Copenhagen, Rued Langgaards Vej 7, Copenhagen, Denmark",Rejected
837,Using BiLSTM with attention mechanism to automatically detect self-admitted technical debt,"Baniecki, H. and Kretowicz, W. and Piatyszek, P. and Wisniewski, J. and Biecek, P.",Journal of Machine Learning Research,2021,"In modern machine learning, we observe the phenomenon of opaqueness debt, which manifests itself by an increased risk of discrimination, lack of reproducibility, and deflated performance due to data drift. An increasing amount of available data and computing power results in the growing complexity of black-box predictive models. To manage these issues, good MLOps practice asks for better validation of model performance and fairness, higher explainability, and continuous monitoring. The necessity for deeper model transparency comes from both scientific and social domains and is also caused by emerging laws and regulations on artificial intelligence. To facilitate the responsible development of machine learning models, we introduce dalex, a Python package which implements a model-agnostic interface for interactive explainability and fairness. It adopts the design crafted through the development of various tools for explainable machine learning; thus, it aims at the unification of existing solutions. This librarys source code and documentation are available under open license at https://python.drwhy.ai. © 2021 Hubert Baniecki, Wojciech Kretowicz, Piotr Piatyszek, Jakub Wisniewski, and Przemyslaw Biecek.",,"Faculty of Mathematics and Information Science, Warsaw University of Technology, Poland; Samsung Research & Development Institute, Poland",Rejected
838,An empirical study on the co-occurrence between refactoring actions and Self-Admitted Technical Debt removal,"Lethbridge, T.C.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2021,"The concept of low-code (and no-code) platforms has been around for decades, even before the term was used. The idea is that applications on these platforms can be built by people with less technical expertise than a professional programmer, yet can leverage powerful technology such as, for example, for databases, financial analysis, web development and machine learning. However, in practice, software written on such platforms often accumulates large volumes of complex code, which can be worse to maintain than in traditional languages because the low-code platforms tend not to properly support good engineering practices such as version control, separation of concerns, automated testing and literate programming. In this paper we discuss experiences with several low-code platforms and provide suggestions for directions forward towards an era where the benefits of low-code can be obtained without accumulation of technical debt. Our recommendations focus on ensuring low-code platforms enable scaling, understandability, documentability, testability, vendor-independence, and the overall user experience for developers those end-users who do some development. © 2021, Springer Nature Switzerland AG.",10.1007/978-3-030-89159-6_14,"University of Ottawa, Ottawa, Canada",Rejected
839,Technical Debt Impacting Lead-Times: An Exploratory Study,"Ospina, S. and Verdecchia, R. and Malavolta, I. and Lago, P.",CEUR Workshop Proceedings,2021,"Architectural technical debt (ATD) in software-intensive systems is mostly invisible to software developers, can be widespread throughout entire code-bases, and its remediation cost is often steep. In recent years, numerous approaches have been proposed to identify, keep track, and ultimately manage ATD. The variety of approaches available opens a new problem, namely how to gain an encompassing overview of the ATD identified in a software-intensive system. With this paper we make available the ATDx tool, an implementation of ATDx written in Python, designed in a plug-in fashion. ATDx is an approach designed to provide a data-driven, intuitive, and actionable overview of the ATD present in a portfolio of software projects. ATDx is based on third-party source code analysis tools, architectural issue severity calculation via clustering, and aggregation of measurements into different architectural technical debt dimensions. The ATDx tool allows users to automatically run the ATDx analysis, generate reports containing the ATDx analysis results, and is integrated with GitHub. In addition to the tool, we provide two already implemented plugins, allowing users to run the ATDx tool out-of-the-box. GitHub repository: https://github.com/S2-group/ATDx Video: https://youtu.be/ULT9fgxuB7E © 2021 Copyright for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"Vrije Universiteit Amsterdam, Netherlands; Chalmers University of Technology, Gothenburg, Sweden",Accepted
840,Biological connection of psychological stress and polytrauma under intensive care: The role of oxytocin and hydrogen sulfide,"Paradis, C. and Kazman, R.",CEUR Workshop Proceedings,2021,"Background: Since Alitheia Core was proposed and subsequently retired, tools that support empirical studies of software continue to be proposed, such as Codeface, Codeface4Smells, GrimoireLab and SmartSHARK, but they all make different design choices with overlapping functionality. Aims: We seek to understand the design decisions adopted on these toolsgood and badand their consequences to understand why their authors reinvented functionality already present in other tools, and to help inform the design of future tools. Method: We used action research to evaluate the tools, and determine principles and anti-patterns to motivate a new tool design. Results: We identified 7 major design choices among the tools: 1) Abstraction Debt, 2) the use of Project Configuration Files, 3) the choice of Batch or Interactive Mode, 4) Minimal Paths to Data, 5) Familiar Software Abstractions, 6) Licensing and 7) the Perils of Code Reuse. Building on the observed good and bad design decisions, we created our own architecture and implemented it as an R package. Conclusions: Tools should not require onerous setup for users to obtain data. Authors should consider the conventions and abstractions used by their chosen language and build upon these instead of redefining them. Tools should encourage best practices in experiment reproducibility by leveraging self-contained and readable schemas that are used for tool automation, and reuse must be done with care to avoid depending on dead code. © 2021 Copyright for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"University of Hawaii, Honolulu, HI  86822, United States",Rejected
841,A systematic literature review on obesity: Understanding the causes & consequences of obesity and reviewing various machine learning approaches used to predict obesity,"Rocha, V. and Freire, S. and Rios, N. and Lima, C. and Ribeiro, L. and Perez, B. and Neto, A.D. and Moura, H. and Correal, D. and Mendonça, M. and Spínola, R.","27th Annual Americas Conference on Information Systems, AMCIS 2021",2021,"Background: Although technical debt (TD) can occur in several software development phases, little is known how TD items can affect testing activities, requiring the identification of TD elements - indicators, causes, effects, and preventive practices - related to those activities. Aims: To investigate the causes, effects, indicators, and preventive practices of test-related debt (TRD). Method: We followed an incremental triangulation process using data collected from a literature review, a survey with experts, and a survey run in the context of the InsighTD project. Results: We found that test, test automation, documentation, defect, people, and infrastructure debt items are related to software testing. In total, the study identified 22 indicators of the presence of TRD, found 87 causes for them, 51 effects of their presence, and 77 preventive practices. Conclusion: Our work summarizes those elements in an interactive conceptual framework to support the management of TD items in software testing. © AMCIS 2021.",,"Federal Univ. of Bahia, Brazil; Federal Univ. of Rio de Janeiro, Brazil; Federal Univ. of Pernambuco, Brazil; Federal Inst. of Bahia, Brazil; Franc. de Paula Stder. Univ.; Federal Univ. of Amazonas, Brazil; University of Los Andes, Colombia; Salvador University, El Salvador",Accepted
842,Industry practices and challenges for the evolvability assurance of microservices: An interview study and systematic grey literature review,"Ozkaya, I.",IEEE Software,2021,"All systems have technical debt, and it has to be continuously managed. Thanks to the past decade of research, software engineering teams have now built an awareness and understanding of technical debt as a concept,1 have an improved appreciation of code analysis to drive down unintentional implementation mistakes that may lead to technical debt,2 and even started using some practices to improve its management.3 In fact, arguably, the managing technical debt research agenda, which was initially summarized at the 2010 National Science Foundation Future of Software Engineering Workshop,4 has been one of the few bodies of work in software engineering where we have seen upfront and engaged collaboration among academia, industry, and tool vendors. © 1984-2012 IEEE.",10.1109/MS.2021.3102361,"Carnegie Mellon Software Engineering Institute, United States",Accepted
843,IT Portfolio management as a framework for managing Technical Debt: Theoretical framework applied on a case study,"Ciolkowski, M. and Lenarduzzi, V. and Martini, A.",IEEE Software,2021,"Delivering increasingly complex software-reliant systems demands better ways to manage the long-term effects of short-term expedients. The technical debt (TD) metaphor has gained significant traction as a way to understand and communicate such issues. Almost 25 years after the term was coined in 1992 by Ward Cunningham, and more than 10 years after the first edition of the TechDebt workshop/conference series, we take a brief look at the past, present, and future of TD. © 1984-2012 IEEE.",10.1109/MS.2021.3105625,QAware; LUT University; University of Oslo,Accepted
844,A Decision Support System for Managing Technical Debt: Towards a Systemic Perspective,"Nelson, G. and Izurieta, C.",IEEE Software,2021,Technical debt analysis of procedural languages has not kept up with the growth in popularity of procedural languages. This article provides a perspective from one language: Go. We describe analysis complications and the potential for future developments to help practitioners overcome this gap. © 1984-2012 IEEE.,10.1109/MS.2021.3103710,Montana State University and Workiva; Montana State University and Authors A.I.,Accepted
845,Scaling enterprise recommender systems for decentralization,"Tieu, B. and Hacks, S.","Proceedings - 2021 IEEE 23rd Conference on Business Informatics, CBI 2021 - Main Papers",2021,"Software Architectural Smells (SA smells) are design problems in the internal structure and behavior of an SA. These can be seen as a specific category under the umbrella concept of Technical Debt (TD). TD is a central concept in software development projects and having the means to detect and measure the smells is important to understand impairments they may cause. However, TD is only limited to the technical aspects and does not describe smells found on an enterprise level. Enterprise Architecture Debt (EAD) expands the concepts of TD beyond the technical aspects such that it covers the debts that can be found in all layers of an Enterprise Architecture (EA). EA smells give a measurement for EAD, by providing means for detecting the smell, hence enabling a method to quantify the level of debt. The goal of this paper is to find EA smells derived from existing SA smells. This has resulted in three new EA smells that could be used as measurements for the quality of an EA. They can also be used in the future as a basis for automatic EA smell detection. © 2021 IEEE.",10.1109/CBI52690.2021.10064,"Kth Royal Institute Of Technology, School Of Electrical Engineering And Computer Science, Stockholm, Sweden; The Maersk Mc-Kinney Moller Institute, University Of Southern Denmark, Odense, Denmark",Accepted
846,An Integrated Platform for Multi-Model Digital Twins,"Digkas, G. and Ampatzoglou, A. and Chatzigeorgiou, A. and Avgeriou, P.",Software Quality Journal,2021,"Code Technical Debt (TD) is intentionally or unintentionally created when developers introduce inefficiencies in the codebase. This can be attributed to various reasons such as heavy workload, tight delivery schedule, or developers lack of experience. Since a software system grows mostly through the addition of new code, it is interesting to study how TD fluctuates along this process. Specifically, in this paper, we investigate: (a) the temporality of code TD introduction in new code, i.e., whether the introduction of TD is stable across the lifespan of the project, or if its evolution presents spikes; and (b) the relation of TD introduction to the development teams workload in a given period, as well as to the experience of the development team. To answer these questions, we have performed a case study on 47 open-source projects from two well-known ecosystems (Apache and Eclipse) as well as additional isolated projects from GitHub (not selected from a specific ecosystem) and inspected the number of TD issues introduced in 6-month sliding temporal windows. The results of the study suggested that: (a) overall, the number of TD issues introduced through new code is a stable measure, although it presents spikes; and (b) the number of commits performed, as well as developers experience are not strongly correlated to the number of introduced TD issues. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s11219-021-09569-8,"Institute of Mathematics and Computer Science, University of Groningen, Groningen, Netherlands; Department of Applied Informatics, University of Macedonia, Macedonia, Greece",Accepted
847,Self-admitted technical debt practices: a comparison between industry and open-source,"Siddiqi, M.A. and Tsintzira, A.-A. and Digkas, G. and Siavvas, M. and Strydis, C.",International Conference on Embedded Wireless Systems and Networks,2021,"Implantable Medical Devices (IMDs) belong to a class of highly life-critical, resource-constrained, deeply embedded systems out there. Their gradual conversion to wirelessly accessible devices in recent years has made them amenable to numerous successful ethical-hacking attempts. These attacks were made possible due to the absence of proper security provisions in IMDs. IMD manufacturers have only very recently started taking cybersecurity threats seriously, a move that will force development teams to overhaul IMD designs and grow sharper reflexes in an industry that has historically opted for small, careful steps. Thus, valid concerns arise regarding the technical feasibility but, chiefly, the economic viability of adding security to IMDs. In this work, we assess the economic repercussions of securing IMDs by employing the concept of technical debt (TD) on the evolving IMD software. Our quantitative analysis reveals that security-related costs are currently well in hand, however, security-code TD amasses faster and will eventually overtake medical-code TD. The economic viability of IMDs will, thus, be ensured only if security-development efforts are allocated significant resources within the next decade. © 2021 the authors.",,"Erasmus Medical Center, Rotterdam, Netherlands; University of Macedonia, Thessaloniki, Greece; Information Technologies Institute, Thessaloniki, Greece",Rejected
848,A framework for fostering transparency in shared artificial intelligence models by increasing visibility of contributions,"Tsoukalas, D. and Mittas, N. and Chatzigeorgiou, A. and Kehagias, D.D. and Ampatzoglou, A. and Amanatidis, T. and Angelis, L.",IEEE Transactions on Software Engineering,2021,"Technical Debt (TD) is a successful metaphor in conveying the consequences of software inefficiencies and their elimination to both technical and non-technical stakeholders, primarily due to its monetary nature. The identification and quantification of TD rely heavily on the use of a small handful of sophisticated tools that check for violations of certain predefined rules, usually through static analysis. Different tools result in divergent TD estimates calling into question the reliability of findings derived by a single tool. To alleviate this issue we use 18 metrics pertaining to source code, repository activity, issue tracking, refactorings, duplication and commenting rates of each class as features for statistical and Machine Learning models, so as to classify them as High-TD or not. As a benchmark we exploit 18.857 classes obtained from 25 Java projects, whose high levels of TD has been confirmed by three leading tools. The findings indicate that it is feasible to identify TD issues with sufficient accuracy and reasonable effort: a subset of superior classifiers achieved an F&lt;sub&gt;2&lt;/sub&gt;-measure score of approximately 0.79 with an associated Module Inspection ratio of approximately 0.10. Based on the results a tool prototype for automatically assessing the TD of Java projects has been implemented. IEEE",10.1109/TSE.2021.3129355,"Department of Applied Informatics, University of Macedonia, 68999 Thessaloniki, Central Macedonia, Greece, (e-mail: tsoukj@iti.gr); Department of Chemistry, International Hellenic University, 125444 Thessaloniki, Central Macedonia, Greece, (e-mail: nmittas@chem.ihu.gr); Department of Applied Informatics, University of Macedonia, 68999 Thessaloniki, Central Macedonia, Greece, (e-mail: achat@uom.edu.gr); Information Technologies Institute, Centre for Research and Technology-Hellas, 419215 Thessalo",Accepted
849,Technical debt as an indicator of software security risk: a machine learning approach for software development enterprises,"Yarygina, I. and Lukashenko, I. and Lee, E. and Washington, P. and Tsarev, R.",Lecture Notes in Networks and Systems,2021,"Strengthening financial cooperation between BRICS-Eurasian member-countries is the best solution to mitigate trade wars, unfair competition and worsening of international economic relations. In this paper, we analyze and determine cooperation between BRICS and Eurasian union (EAEU) credit markets, taking into consideration their reasonable interaction. The aim of the article is to introduce recommendations aimed at optimizing financial cooperation of developing countries as members of the intergovernmental alliances. The existing data is processed using combination of Bloomberg and Excel tools. Testing of initial hypothesis proved interdependence of credit markets. It is mostly developed and presented in data. The analysis of the research concludes the main industries financed by governments or institutional investors vary depending on the strategic orientation of each country's economy. For example, for the Russian Federation, South Africa, India, Brazil, these sectors are Materials, energy, innovations with domination of the Materials sector as an essential for building mutual value-chains ecosystems. In China, the key industry is the financial sector, which indicates the predominance of the service sector. As for the EAEU countries, most of the loans are directed to state needs, covering external or internal debt (Belarus, Armenia, etc.) and are forced to resort to borrowed funds to cover their needs. Kazakhstan and Russia use credit facility for developing national economies in the interest of the population. Anyway, the research founds out, that the indexes of the emerging credit markets still rely on the production of raw materials and depends to the certain extent on the price movements of commodities. We consider reasonable to take into consideration the international experience in risk management as well as approach conveying better access to loans for commercial entities; improving inter government grants to new industries and taxing relief for manufactured exported goods. In order to break the economic deadlock of some BRICS - EAEU credit markets it is worth to lead harmonized financial policies that would pave the way for mutual development. #COMESYSO1120 © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-90321-3_24,"Financial University, Moscow, Russian Federation; Broward College, Davie, FL, United States; Morehouse College, Atlanta, GA, United States; V.A. Trapeznikov Institute of Control Sciences of Russian Academy of Sciences, Moscow, Russian Federation; International Academy of Science and Technologies, Moscow, Russian Federation",Rejected
850,Selling to the newsvendor through debt-shared bank financing,"Tan, J. and Feitosa, D. and Avgeriou, P.","Proceedings - 2021 IEEE International Conference on Software Maintenance and Evolution, ICSME 2021",2021,"The impact of Technical Debt (TD) on software maintenance and evolution is of great concern, but recent evidence shows that a considerable amount of TD is fixed by the same developers who introduced it; this is termed self-fixed TD. This characteristic of TD management can potentially impact team dynamics and practices in managing TD. However, the initial evidence is based on low-level source code analysis; this casts some doubt whether practitioners repay their own debt intentionally and under what circumstances. To address this gap, we conducted an online survey on 17 well-known Java and Python open-source software communities to investigate practitioners' intent and rationale for self-fixing technical debt. We also investigate the relationship between human-related factors (e.g., experience) and self-fixing. The results, derived from the responses of 181 participants, show that a majority addresses their own debt consciously and often. Moreover, those with a higher level of involvement (e.g., more experience in the project and number of contributions) tend to be more concerned about self-fixing TD. We also learned that the sense of responsibility is a common self-fixing driver and that decisions to fix TD are not superficial but consider balancing costs and benefits, among other factors. The findings in this paper can lead to improving TD prevention and management strategies. © 2021 IEEE.",10.1109/ICSME52107.2021.00029,"University of Groningen, Netherlands",Accepted
851,Towards optimal quality requirement documentation in agile software development: A multiple case study,"Jung, J. and Hacks, S. and De Gooijer, T. and Kinnunen, M. and Rehring, K.","Proceedings - IEEE International Enterprise Distributed Object Computing Workshop, EDOCW",2021,"The Enterprise Architecture (EA) discipline evolved during the past two decades and is now established in a large number of companies. Architectures in these companies changed over time and are now the result of a long creation and maintenance process. Such architectures still contain processes and services provided by legacy IT systems (e.g., systems, applications) that were reasonable during the time they were created but might now hamper the introduction of better solutions. In order to support handling those legacies, research on the notion of EA debts has been started. The concept of EA debts widens the scope of technical debts to cover also organizational aspects offering a mean for managing EA in dynamic environments. The research encompasses the development of methods for managing debts together with a repository of typical EA debts. Identifying EA debts for the repository is challenging as required knowledge is usually not documented. Therefore, a structured approach is needed to externalize this knowledge. The paper presents a workshop format that is used to identify EA debts in organizations. Corresponding workshops are performed in two distinct companies to support them in understanding certain issues they face. First results from those workshops are presented in the second part of the paper. © 2021 IEEE.",10.1109/EDOCW52865.2021.00058,"Frankfurt University Of Applied Sciences, Frankfurt, Germany; KTH Royal Institute Of Technology, Division Of Network And Systems Engineering, Stockholm, Sweden; The Maersk Mc-Kinney Moller Institute, University Of Southern Denmark, Odense, Denmark; Kommuninvest I Sverige AB, Örebro, Sweden; Duisburger Versorgungs- Und Verkehrsgesellschaft MbH, Duisburg, Germany",Accepted
852,Practice of Tech Debt Assessment and Management with TETRA,"Malakuti, S.","IEEE International Conference on Emerging Technologies and Factory Automation, ETFA",2021,"Nowadays, the data silo problem in the industrial systems is a major problem hindering scalable design of data-driven use cases across the value stream of products. Although the notion of digital twins is gaining attention as a solution to address the data silo problem, we observe that various kinds of technical debt may occur in the design of digital twin solutions. Such technical debt can eventually reduce the agility of companies in addressing the changing customers' demands. This paper defines a maturity model for digital twin solutions, and outlines roles and products that emerge in digital twin solutions. These are then used as the basis to identify various kinds of technical debt that we observe emerging in the realization of digital twin solutions in practice. The increasing demand for digital twins in industrial use cases on one hand, and extensive studies on its simulation and analysis aspects on the other hand, have caused practitioners and researchers to overlook the software engineering aspects of digital twins. We believe that this paper helps close this gap by identifying various topics that need to be addressed by the practitioners and researchers to design scalable and maintainable digital twin solutions. © 2021 IEEE.",10.1109/ETFA45728.2021.9613538,"ABB AG Corporate Research Center, Germany",Accepted
853,Toward prioritization of self-admitted technical debt: an approach to support decision to payment,"Fernandes, I.P. and Terra-Neves, M. and Seco, J.C.","Companion Proceedings - 24th International Conference on Model-Driven Engineering Languages and Systems, MODELS-C 2021",2021,"Software Automation Platforms (SAPs) enable faster development and reduce the need to use code to construct applications. SAPs provide abstraction and automation, resulting in a low-entry barrier for users with lower programming skills to become proficient developers. An unfortunate of using SAPs is to produce code with a higher technical-debt, since such developers are less familiar with the software development best practices. Hence, SAPs should aim to produce a simpler software construction and evolution pipeline beyond providing a rapid software development environment.An example of such high technical debt is the Unlimited Records anti-pattern, which occurs whenever queries are unbounded, i.e. the maximum number of records to be fetched is not explicitly limited. Limiting the number of records retrieved may, in many cases, improve the performance of applications by reducing screen loading time, thus making applications faster and more responsive, which is a top priority for developers. The OutSystems development environment signals the existence of unbounded queries as potential efficiency pitfall, as a development warning. There are scenarios where the limit was not defined because the query returns only one record by construction (e.g. get by primary key). The profusion of false positives in this analysis hinders the handling of true problems. Thus, we focus on the identification of such spurious warnings, and automatically fixing some straightforward occurrences, thus contributing to a more effective software evolution process. The total number of real-world findings reported in the OutSystems analysis tools, as of January 2021, consists of +1, 3M unbounded queries.The state-of-the-art solution reports and recommends that developers solve these findings by hand. However, up to to this day, developers only solved 15% (200K) of the reports. In this work, we propose an innovative approach for automated refactoring of the Unlimited Records anti-pattern by automatically limiting the number of records returned by simply following Relational Databases query size rules. We have developed detection and refactoring algorithms for two different subcases of the Unlimited Records anti-pattern. We experimentally evaluated our approach in a sample containing a wide range of OutSystems applications (+737K queries). Our results showed a 28% (140K) reduction of extra Unlimited Records occurrences (515K), a percentage of almost twice as much as the ones solved by hand. The combined effort of manual and automatic fixing of warnings of spurious unbounded queries amounts to solving 30% of the total findings. The main goal of our detecting and automated refactoring mechanisms is the reduction of notorious occurrences of the Unlimited Records anti-pattern which we achieve by substantially solving the two subcases. © 2021 IEEE.",10.1109/MODELS-C53483.2021.00065,"NOVA University of Lisbon, Portugal; OutSystems, Portugal; NOVA University of Lisbon, NOVA LINCS, Portugal",Rejected
854,E-Commerce Credit Risk Assessment Based on Fuzzy Neural Network,"Lopes, B. and Amorim, S. and Ferreira, C.","Companion Proceedings - 24th International Conference on Model-Driven Engineering Languages and Systems, MODELS-C 2021",2021,"Technology is evolving rapidly, so are the users' needs and requirements. Software companies need to be competitive and deliver new versions of their product at a fast pace. That is why the demand for continuous integration and continuous delivery is increasing. Feature toggling is one of the techniques used to reduce the development cycle time. By including toggles in their code, developers can isolate code related to the new features under development and prevent it from being executed. Toggling allows the delivery of code with incomplete features without impacting the remaining functionalities.Feature toggling not only helps with the process of continuous integration and continuous delivery but also allows more control over the features. By implementing toggles, developers can control if a feature is visible and to whom. This gives access to a new world of possibilities, from progressive rollouts to business-directed user targeting. However, toggling must be used with caution, as it increases code complexity and technical debt.There is yet no solution at OutSystems for feature toggling that helps developers introduce this technique seamlessly into their workflow, thus toggling is rarely used. The goal of this work is to support feature toggling in the OutSystems platform, given developers easy access to the advantages inherent to this technique, without worrying about the technical debt involved. This work explores possible solutions to be adopted, as well as its strengths and challenges, focusing on reducing effort and maintaining a higher abstraction level, characteristic of low-code languages. Solutions proposed in this discovery work can also be adapted and replicated in other low-code development platforms. © 2021 IEEE.",10.1109/MODELS-C53483.2021.00015,"NOVA University of Lisbon, Lisbon, Portugal; OutSystems, Lisbon, Portugal",Rejected
855,Detection of Design Smells Using Adaptive Neuro-Fuzzy Approaches,"Murillo, M.I. and Pacheco, A. and López, G. and Marín, G. and Guzmán, J.","Proceedings - 2021 47th Latin American Computing Conference, CLEI 2021",2021,"Technical debt is a concept used to describe technical decisions that can benefit companies in the short term but can produce costs and software quality issues in the long term. Technical debt management can help enterprise profitability, sustainability, and the software industry's credibility. This paper presents a replication of the InsighTD survey (a globally distributed family of industrial surveys on causes and effects of TD), focusing on Costa Rica and comparing other regional countries. In total, 145 practitioners from the Costa Rican IT industry participated. Results show that the leading cause of technical debt is not technical (not only in Costa Rica but also in the region). On the other hand, the main effects reported are delivery delay and general dissatisfaction of the parties involved. A comparative study of InsighTD survey results in various countries is also included. ©2021 IEEE",10.1109/CLEI53233.2021.9640164,"University of Costa Rica, San José, Costa Rica",Accepted
856,Empirical evaluation of an architectural technical debt index in the context of the Apache and ONAP ecosystems,"Razafimahatratra, H. and Ilie, M. and Rapatsalahy, A.M. and Mahatody, T. and Ilie, S. and Razafindrakoto, N.R.","Proceedings - 2021 International Conference on Computing, Computational Modelling and Applications, ICCMA 2021",2021,"The organizations involved in software production have an interest in ensuring that the software developed conforms to a practice accepted by industry, namely compliance with standards, excellent quality control, efficiency and timeliness. Therefore, emergent design is an appropriate solution for acquiring higher quality software at low cost but meeting the production deadline. Indeed, it aims to reduce technical debt, accidental complexity as well as hyper-genericity contained in a software development process. In this article, we propose an approach supporting the modeling of emergent design, which is a way to make it easy for a designer to test the design quality of an object-oriented system. Our strategy is to define the necessary steps for the realization of emergent design within the software development process. Therefore, emergent design elements that make up our model are redundancy, readability, testability, cohesion, coupling and refactoring. As a case study, we instantiate in the proposed model a UML class diagram to test its design quality in order to improve the diagram if necessary. In order to validate our approach, we evaluated the performance of the UML class diagram obtained after the realization of emergent design proposed in this paper using the CM-Builder's technique. The result of the performance evaluation with a high score of 93.61% concerning the accuracy of the proposed approach allows us to deduce that the method presented in this paper is essential for software designers in order to achieve a modular and easy to maintain system. © 2021 IEEE",10.1109/ICCMA53594.2021.00016,"Laboratory for Mathematical and Computer Applied to the Development Systems (LIMAD), University of Fianarantsoa, Fianarantsoa, Madagascar; Dept. of Computers and Information Technology, University of Craiova, Craiova, Romania; Laboratory of Multidisciplinary Applied Research (LRAM), University of Fianarantsoa, Fianarantsoa, Madagascar",Rejected
857,Systemic Fragility Measures,,"Proceedings - 2021 36th IEEE/ACM International Conference on Automated Software Engineering, ASE 2021",2021,The proceedings contain 166 papers. The topics discussed include: learning GraphQL query cost; mining cross-domain apps for software evolution: a feature-based approach; binary code similarity detection; intelligent change operators for multi-objective refactoring; subtle bugs everywhere: generating documentation for data wrangling code; Beafix: an automated repair tool for faulty alloy models; learning patterns in configuration; PY2SRC: towards the automatic (and reliable) identification of sources for PYPI package; JTDOG: a Gradle plugin for dynamic test smell detection; using version control and issue tickets to detect code debt and economical cost; learning-based assistant for data migration of enterprise information systems; and on the real-world effectiveness of static bug detectors at finding null pointer exceptions.,,,Rejected
858,Accumulation and Prioritization of Architectural Debt in Three Companies Migrating to Microservices,"Phaithoon, S. and Wongnil, S. and Pussawong, P. and Choetkiertikul, M. and Ragkhitwetsagul, C. and Sunetnanta, T. and Maipradit, R. and Hata, H. and Matsumoto, K.","Proceedings - 2021 36th IEEE/ACM International Conference on Automated Software Engineering, ASE 2021",2021,"Self-Admitted Technical Debt (SATD) is a special form of technical debt in which developers intentionally record their hacks in the code by adding comments for attention. Here, we focus on issue-related ""On-hold SATD"", where developers suspend proper implementation due to issues reported inside or outside the project. When the referenced issues are resolved, the On-hold SATD also need to be addressed, but since monitoring these issue reports takes a lot of time and effort, developers may not be aware of the resolved issues and leave the On-hold SATD in the code. In this paper, we propose FixMe, a GitHub bot that helps developers detecting and monitoring On-hold SATD in their repositories and notify them whenever the On-hold SATDs are ready to be fixed (i.e. the referenced issues are resolved). The bot can automatically detect On-hold SATD comments from source code using machine learning techniques and discover referenced issues. When the referenced issues are resolved, developers will be notified by FixMe bot. The evaluation conducted with 11 participants shows that our FixMe bot can support them in dealing with On-hold SATD. FixMe is available at https://www.fixmebot.app/ and FixMe's VDO is at https://youtu.be/YSz9kFxN_YQ. © 2021 IEEE.",10.1109/ASE51524.2021.9678680,"Faculty of Information and Communication Technology (ICT), Mahidol University, Nakhon Pathom, Thailand; Nara Institute of Science and Technology (NAIST), Nara, Japan; Shinshu University, Nagano, Japan",Accepted
859,"Proceedings - IEEE 18th International Conference on Software Architecture, ICSA 2021","Zou, D. and Shao, X. and Chen, X.","Proceedings - 2021 International Conference on Intelligent Computing, Automation and Systems, ICICAS 2021",2021,"Household intelligent power service (HIPS) is an interaction service between power grid companies and household users. Power grid companies release interactive electricity demand and response subsidy price through HIPS platform to attract users to participate in orderly electricity consumption, so as to reduce the peak debt ratio of power consumption in stations or improve the consumption rate of new energy. This paper proposes an architecture of HIPS platform based on the Consortium blockchain, and then designs smart contracts for three types of participants: power grid companies, load aggregators and users. Finally, the proposed smart contract is implemented. © 2021 IEEE.",10.1109/ICICAS53977.2021.00098,"State Grid Electric Power Research Institute, Beijing, China; State Grid Jiangsu Electric Power CO. LTD, Nanjing, China",Rejected
860,"Trade Diversion, Money-Laundering and Illicit Flows","Nascimento, B.S. and Maia, D. and Almada, L.","Proceedings - 2021 International Conference on Artificial Intelligence and Blockchain Technology, AIBT 2021",2021,"Up to 2% of utilities' bills become bad debt and write-offs, meaning tens of billion dollars annually. Collection of unpaid invoices is a complex task for power, gas and water companies that continuously search for improvement. The goal of our research was to investigate utilities' payment behavior and how they respond to collection actions, in order that could be possible optimize the capital allocation to recover more revenue. Therefore, we selected 43 features, none external to the utility, and applied machine learning algorithms to 300 thousand utility's customers with unpaid invoices in the last 3 years to evaluate results. For this, we proposed a framework for the scoring models of default prediction, spontaneous payments, and payment through response to collection actions. The approach was divided into three phases consisting of carrying out the pre-processing of data, feature selection and evaluation of the approach through AUC, Accuracy and ROC curve. Our work achieved an AUC of 0.9222 and Accuracy of 0.8696 for payment propensity in the next 30 days (similar results for next 60 and 90 days). Comparing to the Financial industry, a study that applied machine learning techniques to predict payment delinquency for bank loans, using 345 features, achieved AUC of 0.8748 with Deeper MLP with sigmoid and Accuracy of 0.8650 with XGBoost, after NAP algorithm for feature selection [1]. © 2021 IEEE.",10.1109/AIBT53261.2021.00017,"Faculdade de Tecnologia Senac Rio Choice Technologies Holding Sàrl, Computer Department, Rio de Janeiro, Brazil; Choice Technologies Holding Sàrl, Rio de Janeiro, Brazil",Rejected
861,An Evolutionary Analysis of Software-Architecture Smells,"Das, A. and Anand, R. and Dash, A. and Buddala, R.","3rd IEEE International Virtual Conference on Innovations in Power and Advanced Computing Technologies, i-PACT 2021",2021,"Health insurance is an agreement in which an insurance company guarantees to pay for the insurer's medical expenses in the event of hospitalization. Purchasing a health insurance policy is important as the medical costs required for treatment are very expensive these days. This involves paying a small amount each year to reduce stress in the event of a medical emergency. Claiming health insurance is a very tedious process. As insurance companies require all documents like hospital medical certificate signed by a medical doctor, a certificate of discharge, medical prescriptions etc., at that time for verification. People face problems in collecting all the documents including debts and receipts. In the current COVID like pandemic situations, it is even worse if one needs to visit a hospital to collect documents. Insurance companies require all that documents to be authentic without being programmed. Insurance companies sometimes insist that documents may be duplicates. These situations create a major problem for people. That is why a website is introduced to help people get through this boring process and will reduce paperwork to avoid data mismatch and deception to get the wrong results. The health Insurance Scheme provides coverage to the policyholder for medical expenses in the event of a medical emergency including the cost of surgery, day care costs, and critical illness etc. This is done by an individual. Taking the conventional scenario into account, whenever a person claims insurance, the insurance company wants the original documents from the hospital. In the case of COVID, it is very dangerous for a person to visit a hospital to collect physical documents. As it also involves handling documents by hospital staff and can be the cause of the spread of the virus. On the other hand, through the website, a person can gain access to his or her documents whenever required, even staying at home or through a remote place, without having to return to the hospital repeatedly, in turn protecting themselves from getting COVID contaminated. Even if the hard copy of the receipt is lost, the hospital records would always remain available for the users through the website. © 2021 IEEE.",10.1109/i-PACT52855.2021.9696982,"Vellore Institute of Technology, School of Mechanical Engineering, Vellore, India; Vellore Institute of Technology, School of Computer Science and Engineering, Vellore, India",Rejected
862,Structural Shifts on Derivatives Markets at the Time of Increasing Digitalization and Post-pandemic Transformation of the Market,"Deeb, S. and Benidris, M. and Ammar, H. and Dzielski, D.",International Journal of Software Engineering and Knowledge Engineering,2021,"Paying-off the Architectural Technical Debt by refactoring the flawed code is important to control the debt and to keep it as low as possible. Project Managers tend to delay paying off this debt because they face difficulties in comparing the cost of the refactoring against the benefits gained. These managers need to estimate the cost and the efforts required to conduct these refactoring activities as well as to decide which flaws have higher priority to be refactored. Our research is based on a dataset used by other researchers that study the technical debt. It includes more than 18,000 refactoring operations performed on 33 apache java projects. We applied the COCOMO II:2000 model to calculate the refactoring cost in person-months units per release. Furthermore, we investigated the correlation between the refactoring efforts and two static code metrics of the refactored code. The research revealed a weak correlation between the refactoring efforts and the size of the project, and a moderate correlation with the code complexity. Finally, we applied the DesigniteJava tool to verify our research results. From the analysis we found a significant correlation between the ranking of the architecture smells and the ranking of refactoring efforts for each package. Using machine learning practices, we took the architecture smells level and the code metrics of each release as an input to predict the levels of the refactoring effort of the next release. We calculated the results using our model and found that we can predict the 'High' and 'Very High' levels, the most significant levels from managers' perspective, with 93% accuracy. © 2021 World Scientific Publishing Company.",10.1142/S021819402150008X,"Lane Department of Computer Science and Electrical Engineering, West Virginia University, 395 Evansdale Dr. MorgantownWV  26506, United States",Accepted
863,DESIGNING A DEEP LEARNING-BASED FINANCIAL DECISION SUPPORT SYSTEM FOR FINTECH TO SUPPORT CORPORATE CUSTOMER'S CREDIT EXTENSION,"DRosario, M. and DRosario, C.","Research Anthology on Recent Trends, Tools, and Implications of Computer Programming",2021,"Automated decision support systems with high stake decision processes are frequently controversial. The Online Compliance Intervention (herewith OCI or RoboDebt) is a system of compliance implemented with the intention to facilitate automatic issuance of statutory debt notices to individuals, taking a receipt of welfare payments and exceeding their entitlement. The system appears to employ rudimentary data scraping and expert systems to determine whether notices should be validly issued. However, many individuals that take receipt of debt notices assert that they were issued in error. The commentary on the system has resulted in a lot of conflation of the system with other system types and caused many to question the role of decision of support systems in public administration given the potentially deleterious impacts of such systems for the most vulnerable. The authors employ a taxonomy of Robotic Process Automation (RPA) issues, to review the OCI and RPA more generally. This paper identifies potential problems of bias, inconsistency, procedural fairness, and overall systematic error. This research also considers a series of RoboDebt specific issues regarding contractor arrangements and the potential impact of the system for Australias Indigenous population. The authors offer a set of recommendations based on the observed challenges, emphasizing the importance of moderation, independent algorithmic audits, and ongoing reviews. Most notably, this paper emphasizes the need for greater transparency and a broadening of criteria to determine vulnerability that encompasses, temporal, geographic, and technological considerations. © 2022 by IGI Global. All rights reserved.",10.4018/978-1-6684-3694-3.ch013,"Deakin University, Burwood, Australia",Rejected
864,Deep neural network ensembles for detecting self-admitted technical debt,"Moscato, V. and Picariello, A. and Sperlí, G.",Expert Systems with Applications,2021,"Credit risk assessment plays a key role for correctly supporting financial institutes in defining their bank policies and commercial strategies. Over the last decade, the emerging of social lending platforms has disrupted traditional services for credit risk assessment. Through these platforms, lenders and borrowers can easily interact among them without any involvement of financial institutes. In particular, they support borrowers in the fundraising process, enabling the participation of any number and size of lenders. However, the lack of lenders experience and missing or uncertain information about borrower's credit history can increase risks in social lending platforms, requiring an accurate credit risk scoring. To overcome such issues, the credit risk assessment problem of financial operations is usually modeled as a binary problem on the basis of debt's repayment and proper machine learning techniques can be consequently exploited. In this paper, we propose a benchmarking study of some of the most used credit risk scoring models to predict if a loan will be repaid in a P2P platform. We deal with a class imbalance problem and leverage several classifiers among the most used in the literature, which are based on different sampling techniques. A real social lending platform (Lending Club) data-set, composed by 877,956 samples, has been used to perform the experimental analysis considering different evaluation metrics (i.e. AUC, Sensitivity, Specificity), also comparing the obtained outcomes with respect to the state-of-the-art approaches. Finally, the three best approaches have also been evaluated in terms of their explainability by means of different eXplainable Artificial Intelligence (XAI) tools. © 2020 Elsevier Ltd",10.1016/j.eswa.2020.113986,"Department of Electrical Engineering and Information Technology (DIETI), University of Naples Federico II, Via Claudio 21, Naples, Italy",Rejected
865,Agile MERODE: a model-driven software engineering method for user-centric and value-based development,"Tamburri, D.A. and Palomba, F. and Kazman, R.",IEEE Transactions on Software Engineering,2021,"Software engineering is now more than ever a community effort. Its success often weighs on balancing distance, culture, global engineering practices and more. In this scenario many unforeseen socio-technical events may result into additional project cost or 'social' debt, e.g., sudden, collective employee turnover. With industrial research we discovered community smells, that is, sub-optimal patterns across the organisational and social structure in a software development community that are precursors of such nasty socio-technical events. To understand the impact of community smells at large, in this paper we first introduce CodeFace4Smells, an automated approach able to identify four community smell types that reflect socio-technical issues that have been shown to be detrimental both the software engineering and organisational research fields. Then, we perform a large-scale empirical study involving over 100 years worth of releases and communication structures data of 60 open-source communities: we evaluate (i) their diffuseness, i.e., how much are they distributed in open-source, (ii) how developers perceive them, to understand whether practitioners recognize their presence and their negative effects in practice, and (iii) how community smells relate to existing socio-technical factors, with the aim of assessing the inter-relations between them. The key findings of our study highlight that community smells are highly diffused in open-source and are perceived by developers as relevant problems for the evolution of software communities. Moreover, a number of state-of-the-art socio-technical indicators (e.g., socio-technical congruence) can be used to monitor how healthy a community is and possibly avoid the emergence of social debt. © 1976-2012 IEEE.",10.1109/TSE.2019.2901490,"Eindhoven University of Technology, Eindhoven, Netherlands; University of Zurich, Zurich, Switzerland; University of Hawaii SEI/CMU, Honolulu, HI, United States",Rejected
866,The Framework of CAFE Credit Risk Assessment for Financial Markets in China,"Perri, D. and Fortunelli, M. and Simonetti, M. and Magni, R. and Carloni, J. and Gervasi, O.",Electronics (Switzerland),2021,"In recent years, the need to contain healthcare costs due to the growing public debt of many countries, combined with the need to reduce costly travel by patients unable to move autonomously, have captured the attention of public administrators towards tele-rehabilitation. This trend has been consolidated overwhelmingly following the Covid-19 pandemic, which has made it precarious, difficult and even dangerous for patients to access hospital facilities. We present an approach based on the rapid prototyping of virtual reality, cognitive tele-rehabilitation exercises, which reinforce the group of exercises available in the Nu!reha platform. Patients who experienced injury or pathology need to practice continuous training in order to recover functional abilities, and the therapist needs to monitor the outcomes of such practices. The group of new exercises based on the rapid prototyping approach, become crucial especially in this pandemic period. The Virtual Reality exercises are designed on Unity 3D to empower the therapist to set up personalized exercises in an easy way, enabling the patient to receive personalized stimuli, which are essential for a positive outcome in the practice. Furthermore, the reaction speed of the system is of fundamental importance, as the temporal evolution of the scene must proceed parallel to the patients movements, to ensure an effective and efficient therapeutic response. So, we optimized the virtual reality application in order to make the loading phase and the startup phase as fast as possible and we have tested the results obtained with many devices: in particular computers and smartphones with different operating systems and hardware. The implemented method powers up the Nu!Reha system®, a collection of tele-rehabilitation services that helps patients to recover cognitive and functional capabilities. © 2021 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/electronics10040457,"Department of Mathematics and Computer Science, University of Florence, Florence, 50134, Italy; Pragma Engineering Srl, Perugia, 06135, Italy; Department of Mathematics and Computer Science, University of Perugia, Perugia, 06123, Italy",Rejected
867,A catalogue of game-specific anti-patterns,"Tsoukalas, D. and Mathioudaki, M. and Siavvas, M. and Kehagias, D. and Chatzigeorgiou, A.",SN Computer Science,2021,"Technical debt (TD) describes quality compromises that can yield short-term benefits but may negatively affect the quality of software products in the long run. A wide range of tools and techniques have been introduced over the years in order for the developers to be able to determine and manage TD. However, being able to also predict its future evolution is of equal importance to avoid its accumulation, and, in turn, the unlikely event of making the project unmaintainable. Although recent research endeavors have showcased the feasibility of building accurate project-specific TD forecasting models, there is a gap in the field regarding cross-project TD forecasting. Cross-project TD forecasting is of practical importance, since it would enable the application of pre-existing forecasting models on previously unknown software projects, especially new projects that do not exhibit sufficient commit history to enable the construction of project-specific models. To this end, in the present paper, we focus on cross-project TD forecasting, and we examine whether the consideration of similarities between software projects could be the key for more accurate forecasting. More specifically, we propose an approach based on data clustering. In fact, a relatively large repository of software projects is divided into clusters of similar projects with respect to their TD aspects, and specific TD forecasting models are built for each cluster, using regression algorithms. According to our approach, previously unknown software projects are assigned to one of the defined clusters and the cluster-specific TD forecasting model is applied to predict future TD values. The approach was evaluated through several experiments based on real-world applications. The results of the analysis suggest that the proposed approach comprises a promising solution for accurate cross-project TD forecasting. © 2021, Springer Nature Singapore Pte Ltd.",10.1007/s42979-020-00408-4,"Centre for Research and Technology Hellas, Information Technologies Institute, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
868,Learning Your Options: Option-Based Model of Export Readiness and Optimal Export,"Freire, S. and Rios, N. and Pérez, B. and Torres, D. and Mendonça, M. and Izurieta, C. and Seaman, C. and Spínola, R.","Proceedings - 2021 IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2021",2021,"Context: Knowing the effects of technical debt (TD) can support software development teams in the prioritization of TD items to pay off. However, little is known about the relations between the effects of TD and TD payment practices. Having this knowledge can provide valuable information for decision making about which payment practice can be applied given the presence of specific effects of TD. Aims: To investigate, from the point of view of software practitioners, (i) which TD payment practices have been used when certain effects of the presence of debt are felt in software projects and (ii) the reasons for not paying debt items despite the effects they are causing to the project. Method: We analyze quantitatively and qualitatively data collected from a survey with 432 practitioners across four countries. Results: Among the identified relations, the practice ""code refactoring""is commonly used to pay debt items off when the effects ""delivery delay""and ""rework""are felt in software projects. On the other hand, when practitioners face the TD effects ""low external quality""and ""delivery delay"", they commonly justify the non- payment of the debt items indicating the need of ""focusing on short term goals"". Conclusion: We organize the relationship between TD effects, and payment practices and reasons for not eliminating debt items. All this information is structured in an alluvial diagram, which can facilitate the visualization of the identified relations. © 2021 IEEE.",10.1109/SANER50967.2021.00074,"Federal University of Bahia, Federal Institute of Cearâ, Brazil; Federal University of Rio de Janeiro, Brazil; University of Los Andes, Francisco de Paula Stder. Univ., Colombia; University of Los Andes, Colombia; Federal University of Bahia, Brazil; Montana State University, United States; University of Maryland Baltimore County, United States; Salvador University, State University of Bahia, Brazil",Accepted
869,Further investigation of the survivability of code technical debt items,"Liu, J. and Huang, Q. and Xia, X. and Shihab, E. and Lo, D. and Li, S.",Empirical Software Engineering,2021,"To complete tasks faster, developers often have to sacrifice the quality of the software. Such compromised practice results in the increasing burden to developers in future development. The metaphor, technical debt, describes such practice. Prior research has illustrated the negative impact of technical debt, and many researchers investigated how developers deal with a certain type of technical debt. However, few studies focused on the removal of different types of technical debt in practice. To fill this gap, we use the introduction and removal of different types of self-admitted technical debt (i.e., SATD) in 7 deep learning frameworks as an example. This is because deep learning frameworks are some of the most important software systems today due to their prevalent use in life-impacting deep learning applications. Moreover, the field of the development of different deep learning frameworks is the same, which enables us to find common behaviors on the removal of different types of technical debt across projects. By mining the file history of these frameworks, we find that design debt is introduced the most along the development process. As for the removal of technical debt, we find that requirement debt is removed the most, and design debt is removed the fastest. Most of test debt, design debt, and requirement debt are removed by the developers who introduced them. Based on the introduction and removal of different types of technical debt, we discuss the evolution of the frequencies of different types of technical debt to depict the unresolved sub-optimal trade-offs or decisions that are confronted by developers along the development process. We also discuss the removal patterns of different types of technical debt, highlight future research directions, and provide recommendations for practitioners. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC part of Springer Nature.",10.1007/s10664-020-09917-5,"College of Computer Science and Technology, Zhejiang University, Hangzhou, China; Faculty of Information Technology, Monash University, Melbourne, Australia; Department of Computer Science and Software Engineering, Concordia University, Montreal, Canada; School of Information Systems, Singapore Management University, Singapore, Singapore",Accepted
870,Does it matter who pays back Technical Debt? An empirical study of self-fixed TD,"Liu, Y. and Liu, X. and Ying, L. and Srikant, R.",Performance Evaluation,2021,"This paper studies the scheduling problem in a co-located wireless network under both the deadline and power constraints. We consider a frame-based time-slotted system. The channel condition of a link remains constant within each frame but varies from frame to frame. Packets with hard deadlines arrive at the transmitters at the beginning of each frame, and will be discarded if missing their deadlines, which are in the same frame. Each of the links is associated with a quality of service (QoS) constraint and an average transmit power constraint. A MaxWeight-type problem is formulated for achieving throughput optimality. The computational complexity of solving the MaxWeight-type problem using the exhaustive search is exponential even for a single-link system. To overcome this difficulty, we propose a greedy algorithm, named PDMax (Power and Deadline constrained MaxWeight), with complexity O(nlog(n)). PDMax schedules packets according to their deadlines and incremental weight gains to the objective of the MaxWeight-type problem. We prove that PDMax is throughput optimal. Our simulations further show that PDMax outperforms both the Largest-Debt-First and the greedy-MaxWeight algorithms in terms of average packet delivery ratio and average transmit power. © 2020 Elsevier B.V.",10.1016/j.peva.2020.102166,"Guodian Nanjing Automation Co., Ltd., Nanjing, Jiangsu, 211153, China; University of Michigan, Ann Arbor, MI  48109, United States; University of Illinois at Urbana-Champaign, Champaign, IL  61801, United States",Rejected
871,TestDCat 3.0: catalog of test debt subtypes and management activities,"Catolino, G. and Palomba, F. and Tamburri, D.A. and Serebrenik, A.",Proceedings - International Conference on Software Engineering,2021,"Social debt has been defined as the presence in a project of costly sub-optimal organizational conditions, e.g., non-cohesive development communities whose members have communication or coordination issues. Community smells are indicators of such sub-optimal organizational structures and may well lead to social debt. Recently, several studies analyzed actors affecting presence of community smells and their harmfulness, or proposed refactoring strategies to mitigate them. However, to the best of our knowledge, there is still a limited understanding of the factors influencing the variability of community smells, namely how they increase/decrease in magnitude over time. In this paper, we aim at conducting the first statistical experimentation on the matter, by analyzing how a set of 40 socio-Technical factors, e.g., turnover or communicability, impact the variability of four community smells on a dataset composed of 60 open-source communities. The results of the study reveal that communicability is, in most cases, important to reduce the risk of an increase of community smell instances, while broadening the collaboration network does not always have a positive effect. © 2021 IEEE.",10.1109/ICSE-SEIS52602.2021.00017,"Tilburg University, Netherlands; Jheronimus Academy of Data Science, Netherlands; University of Salerno, Italy; Eindhoven University of Technology, Netherlands",Rejected
872,Understanding factors affecting technical debt,"Avgeriou, P.C. and Taibi, D. and Ampatzoglou, A. and Arcelli Fontana, F. and Besker, T. and Chatzigeorgiou, A. and Lenarduzzi, V. and Martini, A. and Moschou, A. and Pigazzini, I. and Saarimaki, N. and Sas, D.D. and De Toledo, S.S. and Tsintzira, A.A.",IEEE Software,2021,"Different tools adopt different terms, metrics, and ways to identify and measure technical debt (TD). Researchers attempt to clarify the situation by comparing the features and popularity of technical debt measurement tools and analyzing the existing empirical evidence on their validity. Researchers aim is to provide an overview of the current landscape of TD measurement tools through a set of objective criteria related to the offered features and their popularity. Practitioners can use this overview to assess the tools, understand their strengths and weaknesses, and ultimately select the most suitable one for their needs.",10.1109/MS.2020.3024958,"Department of Mathematics and Computing Science, University of Groningen, Groningen, groningen, 9747 AG, Netherlands; Faculty of Information Technology and Communication Sciences, Tampere University, Tampere, Pirkanmaa, Finland; Applied Informatics, University of Macedonia, Thessaloniki, Thessaloniki, Greece; DISCo, University of Milano Bicocca, Milano, Milano, 20126, Italy; Software Engineering, Computer Science and Engineering, Goteborg, Goteborg, Sweden; Applied Informatics, University of Mac",Accepted
873,Random forest versus logit models: Which offers better early warning of fiscal stress?,"Tan, J. and Feitosa, D. and Avgeriou, P. and Lungu, M.",Journal of Software: Evolution and Process,2021,"In recent years, the evolution of software ecosystems and the detection of technical debt received significant attention by researchers from both industry and academia. While a few studies that analyze various aspects of technical debt evolution already exist, to the best of our knowledge, there is no large-scale study that focuses on the remediation of technical debt over time in Python projectsthat is, one of the most popular programming languages at the moment. In this paper, we analyze the evolution of technical debt in 44 Python open-source software projects belonging to the Apache Software Foundation. We focus on the type and amount of technical debt that is paid back. The study required the mining of over 60K commits, detailed code analysis on 3.7K system versions, and the analysis of almost 43K fixed issues. The findings show that most of the repayment effort goes into testing, documentation, complexity, and duplication removal. Moreover, more than half of the Python technical debt is short term being repaid in less than 2 months. In particular, the observations that a minority of rules account for the majority of issues fixed and spent effort suggest that addressing those kinds of debt in the future is important for research and practice. © 2020 The Authors. Journal of Software: Evolution and Process published by John Wiley & Sons Ltd",10.1002/smr.2319,"Faculty of Science and Engineering, University of Groningen, Groningen, Netherlands; Data Research Centre, University of Groningen, Groningen, Netherlands; Computer Science Department, IT University of Copenhagen, Copenhagen, Denmark",Accepted
874,ByT5: Towards a Token-Free Future with Pre-trained Byte-to-Byte Models,"Sharma, T. and Kessentini, M.","Proceedings - 2021 IEEE/ACM 18th International Conference on Mining Software Repositories, MSR 2021",2021,"Code quality aspects such as code smells and code quality metrics are widely used in exploratory and empirical software engineering research. In such studies, researchers spend a substantial amount of time and effort to not only select the appropriate subject systems but also to analyze them to collect the required code quality information. In this paper, we present QScored dataset; the dataset contains code quality information of more than 86 thousand C# and Java GitHub repositories containing more than 1.1 billion lines of code. The code quality information contains seven kinds of detected architecture smells, 20 kinds of design smells, eleven kinds of implementation smells, and 27 commonly used code quality metrics computed at project, package, class, and method levels. Availability of the dataset will facilitate empirical studies involving code quality aspects by making the information readily available for a large number of active GitHub repositories. © 2021 IEEE.",10.1109/MSR52588.2021.00080,"Siemens Technology, Charlotte, United States; University of MichiganMI, United States",Accepted
875,An empirical study on self-admitted technical debt in Dockerfiles,"Cummaudo, A. and Graetsch, U.M. and Curumsing, M.K. and Vasa, R. and Barnett, S. and Grundy, J.","Proceedings - 2021 IEEE/ACM 6th International Workshop on Emotion Awareness in Software Engineering, SEmotion 2021",2021,"Software developers are increasingly using cloud-based services that provide machine learning capabilities to implement 'intelligent' features. Studies show that incorporating machine learning into an application increases technical debt, creates data dependencies, and introduces uncertainty due to their non-deterministic behaviour. We know very little about the emotional state of software developers who have to deal with such issues; and the impacts on productivity. This paper presents a preliminary effort to better understand the emotions of developers when experiencing issues with these services with the wider goal of discovering potential service improvements. We conducted a landscape analysis of emotions found in 1,425 Stack Overflow questions about a specific and mature subset of these cloud-based services, namely those that provide computer vision techniques. To speed up the emotion identification process, we trialled an automatic approach using a pre-trained emotion classifier that was specifically trained on Stack Overflow content, EmoTxt, and manually verified its classification results. We found that the identified emotions vary for different types of questions, and a discrepancy exists between automatic and manual emotion analysis due to subjectivity. © 2021 IEEE.",10.1109/SEmotion52567.2021.00011,"Applied Artificial Intelligence Institute, Deakin University, Geelong, Australia; Faculty of Information Technology, Monash University, Clayton, Australia",Rejected
876,Feature toggles as code: Heuristics and metrics for structuring feature toggles,"Bi, F. and Vogel-Heuser, B. and Xu, L.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Complexity of products, volatility in global markets, and the increasingly rapid pace of innovations may make it difficult to know how to approach challenging situations in mechatronic design and production. Technical Debt (TD) is a metaphor that describes the practical bargain of exchanging short-term benefits for long-term negative consequences. Oftentimes, the scope and impact of TD, as well as the cost of corrective measures, are underestimated. Especially for mechatronic teams in the mechanical, electrical, and software disciplines, the adverse interdisciplinary ripple effects of TD incidents are passed on throughout the life cycle. The analysis of the first comprehensive survey showed that not only do the TD types differ in cross-disciplinary comparisons, but different characteristics can also be observed depending on whether a discipline is studied in isolation or in combination with others. To validate the study results and to report on a general consciousness of TD in the disciplines, this follow-up study involves 15 of the 50 experts of the predecessor study and reflects the frequency and impact of technical debt in industrial experts' daily work using a questionnaire. These experts rate 14 TD types, 47 TD causes, and 33 TD symptoms in terms of their frequency and impact. Detailed analyses reveal consistent results for the most frequent TD types and causes, yet they show divergent characteristics in a profound exploration of discipline-specific phenomena. Thus, this study has the potential to set the foundations for future automated TD identification analyses in mechatronics. © 2021 IEEE.",10.1109/TechDebt52882.2021.00012,"Technische Universität München Garching B, Department of Mechanical Engineering, München, Germany",Accepted
877,Exploiting gated graph neural network for detecting and explaining self-admitted technical debts,"Fucci, G. and Cassee, N. and Zampetti, F. and Novielli, N. and Serebrenik, A. and Di Penta, M.","Proceedings - 2021 IEEE/ACM 18th International Conference on Mining Software Repositories, MSR 2021",2021,"Self-Admitted Technical Debt (SATD) represents the admission, made through source code comments or other channels, of portions of a program being poorly implemented, containing provisional solutions or, in general, simply being not ready yet. To better understand developers' habits in SATD annotation, and possibly support their exploitation in tool support, this paper provides an in-depth analysis of the content provided in SATD comments, and the expressed sentiment. We manually inspect and classify 1038 instances from an existing dataset, grouping them along a taxonomy composed of 41 categories (of which 9 top-level ones), identifying their sentiment, and the presence of external references such as author names or issue IDs. Results of our study indicate that (i) the SATD content is crosscutting along life-cycle dimensions identified in previous work, (ii) comments related to functional problems or on-hold SATD are generally more negative than poor implementation choices or partially implemented functionality, and (iii) despite observations from previous literature, only a minority of SATD comments leverage external references. © 2021 IEEE.",10.1109/MSR52588.2021.00052,"University of Sannio, Italy; Eindhoven University of Technology, Netherlands; University of Bari, Italy",Accepted
878,On the documentation of refactoring types,"De Almeida, R.R. and Do Nascimento Ribeiro, R. and Treude, C. and Kulesza, U.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Incorporating the business perspective into prioritizing technical debt is essential to contribute to decision making in industry. In this paper, we evolve and evaluate a business-driven approach for technical debt prioritization. The approach was evaluated during a five-months industrial case study with business and technical stakeholders' active participation. The results show that the approach contributed to aligning business criteria between the business and technical stakeholders. We also observed a downward trend in the amount of technical debt that affects high-value business assets. Moreover, we identified eight business factors that affect the decision making related to the prioritization of technical debt. The study results suggest that the proposed business-driven technical debt prioritization approach can help teams to focus their efforts on paying off the business' most relevant debt. © 2021 IEEE.",10.1109/TechDebt52882.2021.00017,"Federal University of Paraiba - UFPB, Rio Tinto, PB, Brazil; Federal University of Rio Grande Do Norte - UFRN, Natal, RN, Brazil; University of Adelaide, Adelaide, Australia",Accepted
879,Identifying Self-Admitted Technical Debts With Jitterbug: A Two-Step Approach,"Falessi, D. and Kazman, R.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Code bad smells are symptoms of poor design and implementation. There are several well-known smell types, such as large classes (aka God classes), code clones, etc. and they have been shown to lead to technical debt and hence to decrease code maintainability. Quality gates are a recent technology that prevents the automatic acceptance of push requests of code commits that have been identified as containing certain smells. However, it is a challenging activity to decide which smells should be included in the quality gate, as developers may choose to optimize short term benefits like time to market over long term benefits like maintainability. But some smells appear to provide no benefit to developers whatsoever and hence such smells should always be avoided. The aims of this paper are: 1) to identify ""worst smells"", i.e., bad smells that never have a good reason to exist, 2) to determine the frequency, change-proneness, and severity associated with worst smells, and 3) to identify the ""worst reasons"", i.e., the reasons for introducing these worst smells in the first place. To achieve these aims we ran a survey with 71 developers. We learned that 80 out of 314 catalogued code smells are ""worst""; that is, developers agreed that these 80 smells should never exist in any code base. We then checked the frequency and change-proneness of these worst smells on 27 large Apache open- source projects. Our results show insignificant differences, in both frequency and change proneness, between worst and non-worst smells. That is to say, these smells are just as damaging as other smells, but there is never any justifiable reason to introduce them. Finally, in follow-up phone interviews with five developers we confirmed that these smells are indeed worst, and the interviewees proposed seven reasons for why they may be introduced in the first place. By explicitly identifying these seven reasons, project stakeholders can, through quality gates or reviews, ensure that such smells are never accepted in a code base, thus improving quality without compromising other goals such as agility or time to market. © 2021 IEEE.",10.1109/TechDebt52882.2021.00014,"University of Rome Tor Vergata, DICII, Rome, Italy; University of Hawaii, ITM Department, Honolulu, United States",Accepted
880,An empirical study on self-admitted technical debt in modern code review,"Capilla, R. and Mikkonen, T. and Carrillo, C. and Fontana, F.A. and Pigazzini, I. and Lenarduzzi, V.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Technical debt (TD) has been recognized as an important quality problem for both software architecture and code. The evolution of TD techniques over the past years has led to a number of research and commercial tools. In addition, the increasing trend of opportunistic reuse (as opposed to systematic reuse), where developers reuse code assets in popular repositories, is changing the way components are selected and integrated into existing systems. However, reusing software opportunistically can lead to a loss of quality and induce TD, especially when the architecture is changed in the process. However, to the best of our knowledge, no studies have investigated the impact of opportunistic reuse in TD. In this paper, we carry out an exploratory study to investigate to what extent reusing components opportunistically negatively affects the quality of systems. We use one commercial and one research tool to analyze the TD ratios of three case systems, before and after opportunistically extending them with open-source software. © 2021 IEEE.",10.1109/TechDebt52882.2021.00011,"Rey Juan Carlos University, Madrid, Spain; University of Helsinki, Helsinki, Finland; Technical University of Madrid, Madrid, Spain; University of Milano-Bicocca, Milano, Italy; LUT University, Lahti, Finland",Accepted
881,Why secret detection tools are not enough: Its not just about false positives - An industrial case study,"Lahti, J.R. and Tuovinen, A.-P. and Mikkonen, T.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"Technical debt has become a common metaphor for the accumulation of software design and implementation choices that seek fast initial gains but that are under par and counterproductive in the long run. However, as a metaphor, technical debt does not offer actionable advice on how to get rid of it. To get to a practical level in solving problems, more focused mechanisms are needed. Commonly used approaches for this include identifying code smells as quick indications of possible problems in the codebase and detecting the presence of AntiPatterns that refer to overt, recurring problems in design. There are known remedies for both code smells and AntiPatterns. In paper, our goal is to show how to effectively use common tools and the existing body of knowledge on code smells and AntiPatterns to detect technical debt and pay it back. We present two main results: (i) How a combination of static code analysis and manual inspection was used to detect code smells in a codebase leading to the discovery of AntiPatterns; and (ii) How AntiPatterns were used to identify, characterize, and fix problems in the software. The experiences stem from a private company and its long-lasting software product development effort. © 2021 IEEE.",10.1109/TechDebt52882.2021.00013,"Solita Ltd, Finland; University of Helsinki, Department of Computer Science, Finland",Accepted
882,DebtFree: minimizing labeling cost in self-admitted technical debt identification using semi-supervised learning,"Laser, M.S. and Minh Le, D. and Garcia, J. and Medvidovic, N.","Proceedings - 2021 IEEE/ACM International Conference on Technical Debt, TechDebt 2021",2021,"This paper identifies a model of software evolution that is prevalent in large, long-lived academic research tool suites (3L-ARTS). This model results in an ""archipelago""of related but haphazardly organized architectural ""islands"", and inherently induces technical debt. We illustrate the archipelago model with examples from two 3L-ARTS archipelagos identified in literature. © 2021 IEEE.",10.1109/TechDebt52882.2021.00019,"University of Southern California, United States; Bloomberg LP, United States; University of California, Irvine, United States",Accepted
883,A DQN-based agent for automatic software refactoring,"Vidoni, M.",Proceedings - International Conference on Software Engineering,2021,"Testing Technical Debt (TTD) occurs due to shortcuts (non-optimal decisions) taken about testing; it is the test dimension of technical debt. R is a package-based programming ecosystem that provides an easy way to install third-party code, datasets, tests, documentation and examples. This structure makes it especially vulnerable to TTD because errors present in a package can transitively affect all packages and scripts that depend on it. Thus, TTD can effectively become a threat to the validity of all analysis written in R that rely on potentially faulty code. This two-part study provides the first analysis in this area. First, 177 systematically-selected, open-source R packages were mined and analysed to address quality of testing, testing goals, and identify potential TTD sources. Second, a survey addressed how R package developers perceive testing and face its challenges (response rate of 19.4%). Results show that testing in R packages is of low quality; the most common smells are inadequate and obscure unit testing, improper asserts, inexperienced testers and improper test design. Furthermore, skilled R developers still face challenges such as time constraints, emphasis on development rather than testing, poor tool documentation and a steep learning curve. © 2021 IEEE.",10.1109/ICSE43902.2021.00136,"RMIT University, School of Computing Technologies, Melbourne, Australia",Accepted
884,Examining the spillover effect of sustainable consumption on microloan repayment: A big data-based research,"Reichenbach, C.",Proceedings - International Conference on Software Engineering,2021,"Software bugs cost time, money, and lives. They drive software research and development efforts, and are central to modern software engineering. Yet we lack a clear and general definition of what bugs are. Some bugs are defects, clearly defined as failures to meet some requirement or specification. However, there are many forms of undesirable program behaviour that are completely compatible with a typical program's specification. In this paper, we argue that the lack of a criterion for identifying non-defect bugs is hampering the development of tools that find and fix bugs. We propose such a criterion, based on the idea of wasted effort, discuss how bugs that meet our definition of software ticks can complement defects, and sketch how our definition can help guide future work on software tools. © 2021 IEEE.",10.1109/ICSE-NIER52604.2021.00021,"Department of Computer Science, Lund University, Lund, Sweden",Rejected
885,Improving debt collection via contact center information: A predictive analytics framework,"Spinellis, D. and Avgeriou, P.",IEEE Transactions on Software Engineering,2021,"Unix has evolved for almost five decades, shaping modern operating systems, key software technologies, and development practices. Studying the evolution of this remarkable system from an architectural perspective can provide insights on how to manage the growth of large, complex, and long-lived software systems. Along main Unix releases leading to the FreeBSD lineage we examine core architectural design decisions, the number of features, and code complexity, based on the analysis of source code, reference documentation, and related publications. We report that the growth in size has been uniform, with some notable outliers, while cyclomatic complexity has been religiously safeguarded. A large number of Unix-defining design decisions were implemented right from the very early beginning, with most of them still playing a major role. Unix continues to evolve from an architectural perspective, but the rate of architectural innovation has slowed down over the system's lifetime. Architectural technical debt has accrued in the forms of functionality duplication and unused facilities, but in terms of cyclomatic complexity it is systematically being paid back through what appears to be a self-correcting process. Some unsung architectural forces that shaped Unix are the emphasis on conventions over rigid enforcement, the drive for portability, a sophisticated ecosystem of other operating systems and development organizations, and the emergence of a federated architecture, often through the adoption of third-party subsystems. These findings have led us to form an initial theory on the architecture evolution of large, complex operating system software. © 1976-2012 IEEE.",10.1109/TSE.2019.2892149,"Athens University of Economics and Business, Athina, Greece; University of Groningen, Groningen, Netherlands",Rejected
886,Infinite technical debt,"Leigh, A. and Wermelinger, M. and Zisman, A.",Journal of Systems and Software,2021,"Previous studies indicate that error-proneness risks can be isolated into risk containers created from architectural designs, to help detect and mitigate such risks early on. Like error-proneness, change propagation may lead to higher implementation and maintenance costs. We used automated tools to analyse four software development projects using three risk container types, each type based on a different architectural perspective. A strong and significant correlation between design change propagation and implementation co-change was observed for all three container types. We found that Design Rule Containers (DRCs), based on class diagrams, are the most effective for isolating change propagation because they have the least amount of container overlap, highest levels of internal coupling, highest co-change probability between classes that share containers, and the most change sets isolated in containers. Developers from two projects were able to justify why design dependencies had resulted in the top five DRCs being predicted to isolate the most change propagation. This and the previous error-proneness research suggests DRCs are an effective technique to detect and contain code maintainability risks at the design stage. These results provide some evidence that class diagrams are more useful than use case sequence diagrams for analysing maintainability risks in designs. © 2021 Elsevier Inc.",10.1016/j.jss.2021.110947,"The Open University, Computing and Communications Department, Milton KeynesMK7 6AA, United Kingdom",Accepted
887,Combining Data-Driven and Knowledge-Based AI Paradigms for Engineering AI-Based Safety-Critical Systems,"Verdecchia, R. and Kruchten, P. and Lago, P. and Malavolta, I.",Journal of Systems and Software,2021,"Architectural technical debt in software-intensive systems is a metaphor used to describe the big design decisions (e.g., choices regarding structure, frameworks, technologies, languages, etc.) that, while being suitable or even optimal when made, significantly hinder progress in the future. While other types of debt, such as code-level technical debt, can be readily detected by static analyzers, and often be refactored with minimal or only incremental efforts, architectural debt is hard to be identified, of wide-ranging remediation cost, daunting, and often avoided. In this study, we aim at developing a better understanding of how software development organizations conceptualize architectural debt, and how they deal with it. In order to do so, in this investigation we apply a mixed empirical method, constituted by a grounded theory study followed by focus groups. With the grounded theory method we construct a theory on architectural technical debt by eliciting qualitative data from software architects and senior technical staff from a wide range of heterogeneous software development organizations. We applied the focus group method to evaluate the emerging theory and refine it according to the new data collected. The result of the study, i.e., a theory emerging from the gathered data, constitutes an encompassing conceptual model of architectural technical debt, identifying and relating concepts such as its symptoms, causes, consequences, management strategies, and communication problems. From the conducted focus groups, we assessed that the theory adheres to the four evaluation criteria of classic grounded theory, i.e., the theory fits its underlying data, is able to work, has relevance, and is modifiable as new data appears. By grounding the findings in empirical evidence, the theory provides researchers and practitioners with novel knowledge on the crucial factors of architectural technical debt experienced in industrial contexts. © 2021 The Author(s)",10.1016/j.jss.2021.110925,"Vrije Universiteit Amsterdam, Netherlands; University of British Columbia, Vancouver, Canada; Chalmers University of Technology, Gothenburg, Sweden",Accepted
888,Integrating privacy debt and VSE's software developments,"Sala, I. and Tommasel, A. and Arcelli Fontana, F.",ACM International Conference Proceeding Series,2021,"Due to limited time, budget or resources, a team is prone to introduce code that does not follow the best software development practices. This code that introduces instability in the software projects is known as Technical Debt (TD). Often, TD intentionally manifests in source code, which is known as Self-Admitted Technical Debt (SATD). This paper presents DebtHunter, a natural language processing (NLP)- and machine learning (ML)- based approach for identifying and classifying SATD in source code comments. The proposed classification approach combines two classification phases for differentiating between the multiple debt types. Evaluations over 10 open source systems, containing more than 259k comments, showed that the approach was able to improve the performance of others in the literature. The presented approach is supported by a tool that can help developers to effectively manage SATD. The tool complements the analysis over Java source code by allowing developers to also examine the associated issue tracker. DebtHunter can be used in a continuous evolution environment to monitor the development process and make developers aware of how and where SATD is introduced, thus helping them to manage and resolve it. © 2021 ACM.",10.1145/3463274.3464455,"University of Milano - Bicocca, Milano, Italy; ISISTAN Research Institute, CONICET-UNCPBA, Tandil, Argentina",Accepted
889,Semantic patterns extraction of code smells: Retrieving the solutions of bugs,"Waseem, M. and Liang, P. and Shahin, M. and Ahmad, A. and Nassab, A.R.",ACM International Conference Proceeding Series,2021,"Due to its enormous benefits, the research and industry communities have shown an increasing interest in the Microservices Architecture (MSA) style over the last few years. Despite this, there is a limited evidence-based and thorough understanding of the types of issues (e.g., faults, errors, failures, mistakes) faced by microservices system developers and causes that trigger the issues. Such evidence-based understanding of issues and causes is vital for long-term, impactful, and quality research and practice in the MSA style. To that end, we conducted an empirical study on 1, 345 issue discussions extracted from five open source microservices systems hosted on GitHub. Our analysis led to the first of its kind taxonomy of the types of issues in open source microservices systems, informing that the problems originating from Technical debt (321, 23.86%), Build (145, 10.78%), Security (137, 10.18%), and Service execution and communication (119, 8.84%) are prominent. We identified that ""General programming errors"", ""Poor security management"", ""Invalid configuration and communication"", and ""Legacy versions, compatibility and dependency""are the predominant causes for the leading four issue categories. Study results streamline a taxonomy of issues, their mapping with underlying causes, and present empirical findings that could facilitate research and development on emerging and next-generation microservices systems. © 2021 ACM.",10.1145/3463274.3463337,"Wuhan University, School of Computer Science, Wuhan, China; Monash University, Faculty of Information Technology, Melbourne, Australia; University of ha'Il, College of Computer Science and Engineering, Ha'il, Saudi Arabia; Shiraz University, Department of Engineering, Computer Science and Information Technology, Shiraz, Iran",Rejected
890,"Iberian Conference on Information Systems and Technologies, CISTI","Kazman, R.",EICS 2021 - Companion of the 2021 ACM SIGCHI Symposium on Engineering Interactive Computing Systems,2021,"In this talk I will discuss a common and pernicious form of technical debt-called design debt, or architecture debt. I will briefly present the theoretical foundation behind this form of debt and present a broad set of evidence demonstrating its dramatic effects on project outcomes. That is the bad news. The good news is that we can fully automatically pinpoint the causes and scope of such debt. I will describe how we can automatically locate it, measure it, and create the business case for removing it. Finally, I will explain how we can remove-pay down-This debt via refactoring. I will also sketch some of my experiences in transitioning the tooling to do so with industrial partners, and describe some of their experiences and outcomes. © 2021 Owner/Author.",10.1145/3459926.3464907,"University of Hawaii, United States",Rejected
891,"3rd International New Metropolitan Perspectives. Local Knowledge and Innovation dynamics towards territory attractiveness through the implementation of Horizon/Europe2020/Agenda2030, 2018","Fontana, F.A. and Pigazzini, I.","Proceedings - 2021 IEEE/ACM 3rd International Workshop on Software Engineering Research and Practices for the IoT, SERP4IoT 2021",2021,"We observed a great and increasing interest in the last few years towards the evaluation of technical debt of software projects, in particular in the direction of code and architectural debt evaluation. This kind of analysis has not yet been performed for IoT projects. Hence, in this paper we start this exploration through the analysis of four Open Source IoT projects. We focus our attention on architectural debt and we exploit a tool, called Arcan, developed for architectural smell detection and for the computation of an architectural debt index. The results show that also IoT projects are subjected to architectural debt, and in particular to the presence of Cyclic Dependency and Unstable Dependency smells. However, there is evidence that the continuous refactoring of the code helps in avoiding the increase of debt, hence also developers of IoT projects should schedule periodical clean-ups of their code. © 2021 IEEE.",10.1109/SERP4IoT52556.2021.00011,"University of Milano - Bicocca, Milan, Italy",Accepted
892,ACM International Conference Proceeding Series,"de Toledo, S.S. and Martini, A. and Sjøberg, D.I.K.",Journal of Systems and Software,2021,"Background: Using a microservices architecture is a popular strategy for software organizations to deliver value to their customers fast and continuously. However, scientific knowledge on how to manage architectural debt in microservices is scarce. Objectives: In the context of microservices applications, this paper aims to identify architectural technical debts (ATDs), their costs, and their most common solutions. Method: We conducted an exploratory multiple case study by conducting 25 interviews with practitioners working with microservices in seven large companies. Results: We found 16 ATD issues, their negative impact (interest), and common solutions to repay each debt together with the related costs (principal). Two examples of critical ATD issues found were the use of shared databases that, if not properly planned, leads to potential breaks on services every time the database schema changes and bad API designs, which leads to coupling among teams. We identified ATDs occurring in different domains and stages of development and created a map of the relationships among those debts. Conclusion: The findings may guide organizations in developing microservices systems that better manage and avoid architectural debts. © 2021 The Authors",10.1016/j.jss.2021.110968,"University of Oslo, Oslo, Norway",Accepted
893,The prevalence of the technical debt concept in serbian IT industry: Results of a national-wide survey,"Ghadhab, L. and Jenhani, I. and Mkaouer, M.W. and Ben Messaoud, M.",Information and Software Technology,2021,"Context: Analyzing software maintenance activities is very helpful in ensuring cost-effective evolution and development activities. The categorization of commits into maintenance tasks supports practitioners in making decisions about resource allocation and managing technical debt. Objective: In this paper, we propose to use a pre-trained language neural model, namely BERT (Bidirectional Encoder Representations from Transformers) for the classification of commits into three categories of maintenance tasks  corrective, perfective and adaptive. The proposed commit classification approach will help the classifier better understand the context of each word in the commit message. Methods: We built a balanced dataset of 1793 labeled commits that we collected from publicly available datasets. We used several popular code change distillers to extract fine-grained code changes that we have incorporated into our dataset as additional features to BERT's word representation features. In our study, a deep neural network (DNN) classifier has been used as an additional layer to fine-tune the BERT model on the task of commit classification. Several models have been evaluated to come up with a deep analysis of the impact of code changes on the classification performance of each commit category. Results and conclusions: Experimental results have shown that the DNN model trained on BERT's word representations and Fixminer code changes (DNN@BERT+Fix_cc) provided the best performance and achieved 79.66% accuracy and a macro-average f1 score of 0.8. Comparison with the state-of-the-art model that combines keywords and code changes (RF@KW+CD_cc) has shown that our model achieved approximately 8% improvement in accuracy. Results have also shown that a DNN model using only BERT's word representation features achieved an improvement of 5% in accuracy compared to the RF@KW+CD_cc model. © 2021",10.1016/j.infsof.2021.106566,"LARODEC, ISG Tunis, Le Bardo, Tunisia; Department of Information Technology, College of Computer Engineering and Science, Prince Mohammad Bin Fahd University, Al-Khobar31952, Saudi Arabia; Rochester Institute of Technology, Rochester, NY, United States",Accepted
894,Text Mining Approach to Analyse Stock Market Movement,,"Iberian Conference on Information Systems and Technologies, CISTI",2021,"The proceedings contain 367 papers. The topics discussed include: shared dock-less vehicle location distribution dataset visualizer; fostering inclusive education through universal instructional design; determinants of e-voting acceptance in Chile: an approach based on the UTAUT model; the role of marketing in the development of digital touchpoints; physical unclonable functions based hardware obfuscation techniques: a state of the art; web accessibility on online platforms for the tourism sector in Portugal; world-class universities, a dynamic multivariate analysis through international rankings; UNAME tool: automatic generation of computer resources monitoring scripts; agile governance guidelines for software development SMEs; on the evaluation of machine learning algorithms for hyperspectral image classification on a heterogeneous computing device; partitional clustering based on PCA method for segmentation of products; and nice payer - a software platform for registering debtors with past due debts.",,,Rejected
895,Desate nó: Management system app for buildings,"Aversano, L. and Bernardi, M.L. and Cimitile, M. and Iammarino, M.",Proceedings of the International Joint Conference on Neural Networks,2021,"Technical debt is a metaphor that refers to all the consequences of poorly written code and trade-offs in development. Early technical debt diagnosis is important for software developers because it allows planning for software maintenance and improvement activities, such as refactoring, to prevent system degradation. Several studies have been conducted in the literature on the identification of the technical debt and its consequences, thanks to useful tools for identifying the problem within the source code. On the other hand, this work aims to explore a deep learning approach to predict the rise of technical debt in software code by leveraging the knowledge of changing quality metrics. For validation of the approach, a large dataset was built, related to four known Java software projects, with the collection of numerous class-level code quality metrics. The results obtained show the effectiveness of the proposed approach in predicting the development of Technical Debt within the source code. We obtained an F1 score of 0.99 for two of the chosen software systems and greater than 0.91 for the remaining two. © 2021 IEEE.",10.1109/IJCNN52387.2021.9534423,"University of Sannio, Dept. of Engineering, Benevento, Italy; UnitelmaSapienza University, Rome, Italy",Accepted
896,Challenge of implanting educational management systems in brazilian schools,"Ramanei, T.A.-P. and Abdullah, N.L. and Khim, P.T.","2021 International Conference on Information Technology, ICIT 2021 - Proceedings",2021,"Accounts receivable plays a major role in credit to cash conversion cycle which involves collection management, payment management and debtors aging. Lack of visibility on accounts receivable management limits efficiency in collection management leading to long aging debtors. Aging payments eventually turns into bad debts leaving a negative impact on the cash flow. The case study company, PangCo Jaya is a wholesale consumer goods distributer located in Malaysia. The objective of this study is to predict payment timing of PangCo Jaya's customers. The outcome of this case study enables collection team to plan for proactive debt collection. This study applies Machine Learning techniques to address accounts receivable challenges faced by PangCo Jaya. The tools used in this study is Python in Jupyter Notebook. A supervised Machine Learning classification model for predicting invoice payment prediction has been developed. This solution enables proficient payment collection by reaching out to targeted customer with potential payment delay prediction. In future, these trends can be applied to evaluate if there is a necessity in revising customers' credit policies and estimate potential receivables that are under risk of turning into bad debts. © 2021 IEEE.",10.1109/ICIT52682.2021.9491773,"Universiti Sains Malaysia, School of Computer Sciences, Minden Penang, Malaysia; PangCo Jaya Sdn.Bhd. Perlis, Kangar, Malaysia",Rejected
897,Evaluation and Prediction of the Financial and Management Indicators in SMES with the Use of Artificial Neural Net,"Sanjaya, R. and Hastuti, T.D. and Freddy Koeswoyo, G.","Proceedings - International Conference on Computer and Information Sciences: Sustaining Tomorrow with Digital Innovation, ICCOINS 2021",2021,"Batik SMEs who have successfully sold their products through e-marketplace are now entering a new stage. They need the management of financial data from sales to bankable accounting reports. All existing e-marketplaces in Indonesia are only providing visitor statistics and sales reports without providing any features for accounting reports. The problem is the ability of the SMEs to make financial statements only uses simple calculations based on income, expenses, and notes on debt and accounts receivable. This habit has been carried out for years, causing difficulties in obtaining the detailed financial information needed by financial institutions and for business development purposes. The integration of accounting software into e-marketplaces should be added to facilitate SMEs who lack the ability to make financial reports. This feature is expected to automate financial statements until the report can be approved by financial institutions. This paper reviews the availability and possibility of the digital payment system in e-marketplaces to provide embedded accounting features, open access to integration of accounting software from third parties and propose suitable model for SMEs. © 2021 IEEE.",10.1109/ICCOINS49721.2021.9497201,"Soegijapranata Catholic University, Information Systems Department, Semarang, Indonesia",Rejected
898,A collaborative computational infrastructure for supporting technical debt knowledge sharing and evolution,"Yu, D. and Wang, L. and Chen, X. and Chen, J.",Frontiers of Computer Science,2021,"Technical debt is a metaphor for seeking short-term gains at expense of long-term code quality. Previous studies have shown that self-admitted technical debt, which is introduced intentionally, has strong negative impacts on software development and incurs high maintenance overheads. To help developers identify self-admitted technical debt, researchers have proposed many state-of-the-art methods. However, there is still room for improvement about the effectiveness of the current methods, as self-admitted technical debt comments have the characteristics of length variability, low proportion and style diversity. Therefore, in this paper, we propose a novel approach based on the bidirectional long short-term memory (BiLSTM) networks with the attention mechanism to automatically detect self-admitted technical debt by leveraging source code comments. In BiLSTM, we utilize a balanced cross entropy loss function to overcome the class unbalance problem. We experimentally investigate the performance of our approach on a public dataset including 62, 566 code comments from ten open source projects. Experimental results show that our approach achieves 81.75% in terms of precision, 72.24% in terms of recall and 75.86% in terms of F1-score on average and outperforms the state-of-the-art text mining-based method by 8.14%, 5.49% and 6.64%, respectively. © 2021, Higher Education Press.",10.1007/s11704-020-9281-z,"School of Computer Science and Technology, Hangzhou Dianzi University, Hangzhou, 310018, China",Accepted
899,CEUR Workshop Proceedings,"Iammarino, M. and Zampetti, F. and Aversano, L. and Di Penta, M.",Journal of Systems and Software,2021,"Technical Debt (TD) concerns the lack of an adequate solution in a software project, from its design to the source code. Its admittance through source code comments, issues, or commit messages is referred to as Self-Admitted Technical Debt (SATD). Previous research has studied SATD from different perspectives, including its distribution, impact on software quality, and removal. In this paper, we investigate the relationship between refactoring and SATD removal. By leveraging a dataset of SATD and their removals in four open-source projects and by using an automated refactoring detection tool, we study the co-occurrence of refactoring and SATD removals. Results of the study indicate that refactoring is more likely to co-occur with SATD removals than with other commits, however, in most cases, they belong to different quality improvement activities performed at the same time. Moreover, if looking closely at refactoring actions co-occurring with SATD removal in the same code entities, a relationship between these activities can be found. Finally, we found how both source code quality metrics and SATD removals play a statistically significant role in the likelihood that the commit applies a refactoring action. © 2021 Elsevier Inc.",10.1016/j.jss.2021.110976,"University of Sannio, Italy",Accepted
900,Mining knowledge on technical debt propagation,"Lenarduzzi, V. and Martini, A. and Saarimaki, N. and Tamburri, D.A.","Proceedings - 2021 47th Euromicro Conference on Software Engineering and Advanced Applications, SEAA 2021",2021,"Background: Technical Debt is a consolidated notion in software engineering research and practice. However, the estimation of its impact (interest of the debt) is still imprecise and requires heavy empirical and experimental inquiry. Objective: We aim at developing a data-driven approach to calculate the interest of Technical Debt in terms of delays in resolving affected tasks.Method: We conducted a case study to estimate the Technical Debt interest by analyzing its association with the lead time variation of resolving related Jira issues.Results: Data-driven approaches could significantly change the Technical Debt estimation and improve the removing Technical Debt prioritization. Our case study shows that the presence of Code Technical Debt did not affect the lead time for resolving the issues.Conclusion: Future works include the further refinement of this approach and its application to a larger data-set and on different type of issues. © 2021 IEEE.",10.1109/SEAA53835.2021.00032,"LUT University, Finland; University of Oslo, Norway; Tampere University, Finland; Eindhoven University of Technology - JADS, Netherlands",Accepted
901,CEUR Workshop Proceedings,"Merz, T. and McCook, O. and Denoix, N. and Radermacher, P. and Waller, C. and Kapapa, T.",International Journal of Molecular Sciences,2021,"This paper explored the potential mediating role of hydrogen sulfide (H2S) and the oxy-tocin (OT) systems in hemorrhagic shock (HS) and/or traumatic brain injury (TBI). Morbidity and mortality after trauma mainly depend on the presence of HS and/or TBI. Rapid repayment of the O2 debt and prevention of brain tissue hypoxia are cornerstones of the management of both HS and TBI. Restoring tissue perfusion, however, generates an ischemia/reperfusion (I/R) injury due to the formation of reactive oxygen (ROS) and nitrogen (RNS) species. Moreover, pre?existing?medi-cal?conditions (PEMCs) can aggravate the occurrence and severity of complications after trauma. In addition to the classic chronic diseases (of cardiovascular or metabolic origin), there is growing awareness of psychological PEMCs, e.g., early life stress (ELS) increases the predisposition to de-velop post?traumatic?stress?disorder (PTSD) and trauma patients with TBI show a significantly higher incidence of PTSD than patients without TBI. In fact, ELS is known to contribute to the developmental origins of cardiovascular disease. The neurotransmitter H2S is not only essential for the neuroendocrine stress response, but is also a promising therapeutic target in the prevention of chronic diseases induced by ELS. The neuroendocrine hormone OT has fundamental importance for brain development and social behavior, and, thus, is implicated in resilience or vulnerability to traumatic events. OT and H2S have been shown to interact in physical and psychological trauma and could, thus, be therapeutic targets to mitigate the acute post?traumatic effects of chronic PEMCs. OT and H2S both share anti?inflammatory, anti?oxidant, and vasoactive properties; through the reperfusion injury salvage kinase (RISK) pathway, where their signaling mechanisms converge, they act via the regulation of nitric oxide (NO). © 2021 by the authors. Licensee MDPI, Basel, Switzerland.",10.3390/ijms22179192,"Institute for Anesthesiological Pathophysiology and Process Engineering, Medical Center, Ulm University, Helmholtzstraße 8/1, Ulm, 89081, Germany; Clinic for Psychosomatic Medicine and Psychotherapy, Medical Center, Ulm University, Ulm, 89081, Germany; Department of Psychosomatic Medicine and Psychotherapy, Nuremberg General Hospital, Paracelsus Medical University, Nuremberg, 90471, Germany; Clinic for Neurosurgery, Medical Center, Ulm University, Ulm, 89081, Germany",Rejected
902,ACM International Conference Proceeding Series,"Safaei, M. and Sundararajan, E.A. and Driss, M. and Boulila, W. and Shapi'i, A.",Computers in Biology and Medicine,2021,"Obesity is considered a principal public health concern and ranked as the fifth foremost reason for death globally. Overweight and obesity are one of the main lifestyle illnesses that leads to further health concerns and contributes to numerous chronic diseases, including cancers, diabetes, metabolic syndrome, and cardiovascular diseases. The World Health Organization also predicted that 30% of death in the world will be initiated with lifestyle diseases in 2030 and can be stopped through the suitable identification and addressing of associated risk factors and behavioral involvement policies. Thus, detecting and diagnosing obesity as early as possible is crucial. Therefore, the machine learning approach is a promising solution to early predictions of obesity and the risk of overweight because it can offer quick, immediate, and accurate identification of risk factors and condition likelihoods. The present study conducted a systematic literature review to examine obesity research and machine learning techniques for the prevention and treatment of obesity from 2010 to 2020. Accordingly, 93 papers are identified from the review articles as primary studies from an initial pool of over 700 papers addressing obesity. Consequently, this study initially recognized the significant potential factors that influence and cause adult obesity. Next, the main diseases and health consequences of obesity and overweight are investigated. Ultimately, this study recognized the machine learning methods that can be used for the prediction of obesity. Finally, this study seeks to support decision-makers looking to understand the impact of obesity on health in the general population and identify outcomes that can be used to guide health authorities and public health to further mitigate threats and effectively guide obese people globally. © 2021 The Author(s)",10.1016/j.compbiomed.2021.104754,"Centre for Software Technology and Management, Faculty of Information Science and Technology, Universiti Kebangsaan Malaysia (UKM), Bangi, Selangor, 43600, Malaysia; RIADI Laboratory, University of Manouba, Manouba, Tunisia; College of Computer Science and Engineering, Taibah University, Medina, Saudi Arabia; Center for Artificial Intelligence Technology, Faculty of Information Science and Technology, Universiti Kebangsaan Malaysia (UKM), Bangi, Selangor, 43600, Malaysia",Rejected
903,Ontology-based data management for the Italian public debt,"Bogner, J. and Fritzsch, J. and Wagner, S. and Zimmermann, A.",Empirical Software Engineering,2021,"Context: Microservices as a lightweight and decentralized architectural style with fine-grained services promise several beneficial characteristics for sustainable long-term software evolution. Success stories from early adopters like Netflix, Amazon, or Spotify have demonstrated that it is possible to achieve a high degree of flexibility and evolvability with these systems. However, the described advantageous characteristics offer no concrete guidance and little is known about evolvability assurance processes for microservices in industry as well as challenges in this area. Insights into the current state of practice are a very important prerequisite for relevant research in this field. Objective: We therefore wanted to explore how practitioners structure the evolvability assurance processes for microservices, what tools, metrics, and patterns they use, and what challenges they perceive for the evolvability of their systems. Method: We first conducted 17 semi-structured interviews and discussed 14 different microservice-based systems and their assurance processes with software professionals from 10 companies. Afterwards, we performed a systematic grey literature review (GLR) and used the created interview coding system to analyze 295 practitioner online resources. Results: The combined analysis revealed the importance of finding a sensible balance between decentralization and standardization. Guidelines like architectural principles were seen as valuable to ensure a base consistency for evolvability and specialized test automation was a prevalent theme. Source code quality was the primary target for the usage of tools and metrics for our interview participants, while testing tools and productivity metrics were the focus of our GLR resources. In both studies, practitioners did not mention architectural or service-oriented tools and metrics, even though the most crucial challenges like Service Cutting or Microservices Integration were of an architectural nature. Conclusions: Practitioners relied on guidelines, standardization, or patterns like Event-Driven Messaging to partially address some reported evolvability challenges. However, specialized techniques, tools, and metrics are needed to support industry with the continuous evaluation of service granularity and dependencies. Future microservices research in the areas of maintenance, evolution, and technical debt should take our findings and the reported industry sentiments into account. © 2021, The Author(s).",10.1007/s10664-021-09999-9,"Institute of Software Engineering, University of Stuttgart, Stuttgart, Germany; Herman Hollerith Center, University of Applied Sciences Reutlingen, Reutlingen, Germany",Rejected
904,Online engagement and impact: The case of greek politicians during the financial crisis,"Nielsen, M.E. and Skaarup, S.",ACM International Conference Proceeding Series,2021,"Technical debt (TD) originally names the reoccurring phenomenon of shortcuts and quick fixes within IT development. TD saves time and resources in the short run but may cause problems and require additional resources in the long run. Managing TD is difficult, whether it is seen as a local phenomenon (residing in individual applications) or seen in a portfolio perspective. However, TD is not always caused by the individual developer and it does not always just affect one application. It may affect several parts of the IT portfolio; it may arise in the portfolio and it may be resolved by decisions on an IT-portfolio level. In this paper, we develop a theoretical framework that incorporates TD into IT portfolio management (ITPM). We apply the framework on a case study to explore how TD can be created, reside, resolved and managed in practice in a portfolio-perspective. This paper contributes with a framework integrating TD with ITPM. The paper also provides empirical insights on practice regarding ITPM and TD and highlights implications for research and practice. © 2021 ACM.",10.1145/3494193.3494296,"IT University of Copenhagen, Denmark",Accepted
905,"Proceedings - 2016 IEEE 8th International Workshop on Managing Technical Debt, MTD 2016","Franco, E. and Hirama, K. and Armenia, S. and Skripnikova, T. and Betzin, S.",ACM International Conference Proceeding Series,2021,"Maintaining a software system in operation requires resources to keep it reasonably bug-free, appropriate for the business needs, and still changeable. However, it is challenging to evaluate resource allocation strategies while considering both current and future needs. This paper presents a decision support system, using technical debt concepts, built based on the system dynamics approach that aims to assist decision-makers in evaluating different maintenance investment strategies. The tool can help evaluate future impacts by simulating possible scenarios, generating knowledge and insights for decision-makers, and helping to communicate them among different stakeholders. © 2021 ACM.",10.1145/3474624.3477062,"University of São Paulo, Brazil; Link Campus University, Italy; Generic.de Software Technologies Ag, Germany",Accepted
906,Technical Debt Indexes Provided by Tools: A Preliminary Discussion,"Van Der Goes, M.",RecSys 2021 - 15th ACM Conference on Recommender Systems,2021,"Within decentralized organizations, the local demand for recommender systems to support business processes grows. The diversity in data sources and infrastructure challenges central engineering teams. Achieving a high delivery velocity without technical debt requires a scalable approach in the development and operations of recommender systems. At the HEINEKEN Company, we execute a machine learning operations method with five best practices: pipeline automation, data availability, exchangeable artifacts, observability, and policy-based security. Creating a culture of self-service, automation, and collaboration to scale recommender systems for decentralization. We demonstrate a practical use case of a self-service ML workspace deployment and a recommender system, that scale faster to subsidiaries and with less technical debt. This enables HEINEKEN to globally support applications that generate insights with local business impact. © 2021 Owner/Author.",10.1145/3460231.3474616,"The Heineken Company, Amsterdam, Netherlands",Rejected
907,Agent-Based Debt Terms' Bargaining Model to Improve Negotiation Inefficiency in PPP Projects,"Malakuti, S. and Borrison, R. and Kotriwala, A. and Kloepper, B. and Nordlund, E. and Ronnberg, K.",ACM International Conference Proceeding Series,2021,"The notion of Digital Twin is known as a means to access otherwise dispersed lifecycle data of industrial devices, and enabling advanced reasoning on top of the data via various kinds of models (e.g. machine learning, simulation). Despite many studies on digital twins, there is still a need for common architectures, platforms and information meta-modelling that enable defining various lifecycle data in a harmonized way, as well as integrating the information with machine learning and simulation models; a gap that is filled by this paper. Our approach for the integration of various digital twin models addresses three known technical debt in machine learning systems: data pipeline jungle, undeclared/unstable data dependencies and undeclared consumers. Adopting such an integrated digital twin platform can reduce the required time and effort to develop and maintain digital twin-based solutions, as well as laying a foundation to support a variety of digital twin-based use cases. © 2021 ACM.",10.1145/3494322.3494324,"Corporate Research Center, ABB, Ladenburg, Germany; Corporate Research Center, ABB, Västerås, Sweden",Rejected
908,Practical Technical Debt Discovery by Matching Patterns in Assessment Graph,"Zampetti, F. and Fucci, G. and Serebrenik, A. and Di Penta, M.",Empirical Software Engineering,2021,"Self-admitted technical debt (SATD) consists of annotations, left by developers as comments in the source code or elsewhere, as a reminder about pieces of software manifesting technical debt (TD), i.e., not being ready yet. While previous studies have investigated SATD management and its relationship with software quality, there is little understanding of the extent and circumstances to which developers admit TD. This paper reports the results of a study in which we asked developers from industry and open-source about their practices in annotating source code and other artifacts for self-admitting TD. The study consists of two phases. First, we conducted 10 interviews to gather a first understanding of the phenomenon and to prepare a survey questionnaire. Then, we surveyed 52 industrial developers as well as 49 contributors to open-source projects. Results of the study show how the TD annotation practices, as well as the typical content of SATD comments, are very similar between open-source and industry. At the same time, our results highlight how, while open-source code is spread of comments admitting the need for improvements, SATD in industry may be dictated by organizational guidelines but, at the same time, implicitly discouraged by the fear of admitting responsibilities. Results also highlight the need for tools helping developers to achieve a better TD awareness. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-021-10031-3,"University of Sannio, Via Traiano, 3, Benevento, Italy; Eindhoven University of Technology, Eindhoven, Netherlands",Accepted
909,Database Design Debts through Examining Schema Evolution,"Barclay, I. and Taylor, H. and Preece, A. and Taylor, I. and Verma, D. and de Mel, G.",Concurrency and Computation: Practice and Experience,2021,"Increased adoption of artificial intelligence (AI) systems into scientific workflows will result in an increasing technical debt as the distance between the data scientists and engineers who develop AI system components and scientists, researchers and other users grows. This could quickly become problematic, particularly where guidance or regulations change and once-acceptable best practice becomes outdated, or where data sources are later discredited as biased or inaccurate. This paper presents a novel method for deriving a quantifiable metric capable of ranking the overall transparency of the process pipelines used to generate AI systems, such that users, auditors and other stakeholders can gain confidence that they will be able to validate and trust the data sources and contributors in the AI systems that they rely on. The methodology for calculating the metric, and the type of criteria that could be used to make judgements on the visibility of contributions to systems are evaluated through models published at ModelHub and PyTorch Hub, popular archives for sharing science resources, and is found to be helpful in driving consideration of the contributions made to generating AI systems and approaches toward effective documentation and improving transparency in machine learning assets shared within scientific communities. © 2020 John Wiley & Sons, Ltd.",10.1002/cpe.6129,"Crime and Security Research Institute, Cardiff University, Cardiff, United Kingdom; Center for Research Computing, University of Notre Dame, IN, United States; IBM TJ Watson Research Center, Armonk, NY, United States; IBM Research, Warrington, United Kingdom",Rejected
910,Design of counseling robot for production by 3D printer,,"Proceedings - IEEE 18th International Conference on Software Architecture, ICSA 2021",2021,The proceedings contain 16 papers. The topics discussed include: the influence of cognitive biases on architectural technical debt; constructing a shared infrastructure for software architecture analysis and maintenance; exploring web search engines to find architectural knowledge; enabling consistency between software artefacts for software adaption and evolution; system- and software-level architecting harmonization practices for systems-of-systems: an exploratory case study on a long-running large-scale scientific instrument; practitioner views on the interrelation of microservice APIs and domain-driven design: a grey literature study based on grounded theory; semi-automatic feedback for improving architecture conformance to microservice patterns and practices; and a decision model for choosing patterns in blockchain-based applications.,,,Rejected
911,"25th IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2018 - Proceedings","Kamran, A. and Syed, N.A. and Qureshi, M.F. and Rizvi, S.M.A. and Hayat, A.",Lecture Notes on Data Engineering and Communications Technologies,2021,"The purpose of this study is to investigate the impacts of surging debt servicing on economic growth, for the period ranging 19702016. Various econometric tools, such as multivariable regression and correlation etc. are used to analyse the data and conclude the results. Various errors in the data have been overcome by crosschecking of data. Smoothing techniques are also used to overcome the seasonal and non-seasonal variation in economic data. This report will generally focus on the Impacts of surging external debt servicing of Pakistan over a decade, on economic growth and will point out various areas from where our country can generate domestic as well as foreign revenues. © 2021, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-79203-9_64,"Faculty of Management Sciences, Department of Business Administration, ILMA University, Karachi, Pakistan; Department of Management Sciences, Bahria University, Karachi, Pakistan",Rejected
912,Poster: Reengineering legacy systems for supporting SOA: A case study on the brazilian's secretary of state for taxation,"Pigazzini, I. and Briola, D. and Fontana, F.A.",CEUR Workshop Proceedings,2021,"Technical debt is candidate to be the next buzzword in software engineering, and the number of studies evaluating the technical debt of software projects is increasing. A particular and dangerous type of debt is the architectural debt, i.e., the consequences of sub-optimal design decisions. Currently, there are no studies about the evaluation of architectural debt in MultiAgent Systems (MAS) and platforms. Hence, in this paper we propose the analysis of four well-known MAS development platforms, with the aim of evaluating their architectural debt and open the discussion in this field. We exploit a tool, named Arcan, developed for architectural smell detection and for the computation of an architectural debt index. The results show that MAS development platforms are subjected to architectural debt, and in particular to the presence of Cyclic Dependency smells. However, there is evidence that the minimum amount of debt is reached when developers report bug fixes and Improvements. © 2021 CEUR-WS. All rights reserved.",,"Department of Informatics, Systems and Communication (DISCO), University of Milano - Bicocca, Milan, 20125, Italy",Accepted
913,"3rd International New Metropolitan Perspectives. Local Knowledge and Innovation dynamics towards territory attractiveness through the implementation of Horizon/Europe2020/Agenda2030, 2018","Guo, Z. and Liu, S. and Liu, J. and Li, Y. and Chen, L. and Lu, H. and Zhou, Y.",ACM Transactions on Software Engineering and Methodology,2021,"Background. Self-admitted technical debt (SATD) is a special kind of technical debt that is intentionally introduced and remarked by code comments. Those technical debts reduce the quality of software and increase the cost of subsequent software maintenance. Therefore, it is necessary to find out and resolve these debts in time. Recently, many automatic approaches have been proposed to identify SATD. Problem. Popular IDEs support a number of predefined task annotation tags for indicating SATD in comments, which have been used in many projects. However, such clear prior knowledge is neglected by existing SATD identification approaches when identifying SATD. Objective. We aim to investigate how far we have really progressed in the field of SATD identification by comparing existing approaches with a simple approach that leverages the predefined task tags to identify SATD. Method. We first propose a simple heuristic approach that fuzzily Matches task Annotation Tags (MAT) in comments to identify SATD. In nature, MAT is an unsupervised approach, which does not need any data to train a prediction model and has a good understandability. Then, we examine the real progress in SATD identification by comparing MAT against existing approaches. Result. The experimental results reveal that: (1) MAT has a similar or even superior performance for SATD identification compared with existing approaches, regardless of whether non-effort-aware or effort-aware evaluation indicators are considered; (2) the SATDs (or non-SATDs) correctly identified by existing approaches are highly overlapped with those identified by MAT; and (3) supervised approaches misclassify many SATDs marked with task tags as non-SATDs, which can be easily corrected by their combinations with MAT. Conclusion. It appears that the problem of SATD identification has been (unintentionally) complicated by our community, i.e., the real progress in SATD comments identification is not being achieved as it might have been envisaged. We hence suggest that, when many task tags are used in the comments of a target project, future SATD identification studies should use MAT as an easy-to-implement baseline to demonstrate the usefulness of any newly proposed approach. © 2021 ACM.",10.1145/3447247,"State Key Laboratory for Novel Software Technology, Nanjing University, China; School of Computer Science and Communication Engineering, Jiangsu University, China",Accepted
914,The Portuguese coastal way and maritime heritage: An outstanding debt with the new technologies,"Yang, C. and Liang, P. and Fu, L. and Li, Z.",ACM International Conference Proceeding Series,2021,"Deep learning (DL) frameworks have been extensively designed, implemented, and used in software projects across many domains. However, due to the lack of knowledge or information, time pressure, complex context, etc., various uncertainties emerge during the development, leading to assumptions made in DL frameworks. Though not all the assumptions are negative to the frameworks, being unaware of certain assumptions can result in critical problems (e.g., system vulnerability and failures). As the first step of addressing the critical problems, there is a need to explore and understand the assumptions made in DL frameworks. To this end, we conducted an exploratory study to understand self-claimed assumptions (SCAs) about their distribution, classification, and impacts using code comments from nine popular DL framework projects on GitHub. The results are that: (1) 3, 084 SCAs are scattered across 1, 775 files in the nine DL frameworks, ranging from 1, 460 (TensorFlow) to 8 (Keras) SCAs. (2) There are four types of validity of SCAs: Valid SCA, Invalid SCA, Conditional SCA, and Unknown SCA, and four types of SCAs based on their content: Configuration and Context SCA, Design SCA, Tensor and Variable SCA, and Miscellaneous SCA. (3) Both valid and invalid SCAs may have an impact within a specific scope (e.g., in a function) on the DL frameworks. Certain technical debt is induced when making SCAs. There are source code written and decisions made based on SCAs. This is the first study on investigating SCAs in DL frameworks, which helps researchers and practitioners to get a comprehensive understanding on the assumptions made. We also provide the first dataset of SCAs for further research and practice in this area. © 2021 ACM.",10.1145/3463274.3463333,"IBO Technology (Shenzhen) Co., Ltd., Shenzhen, China; IBO Technology (Shenzhen) Co., Ltd., Shenzhen, China; School of Computer Science and Hubei Provincial, Key Laboratory of Artificial Intelligence and Smart Learning, Central China Normal University, Wuhan, China",Rejected
915,Using Model-Based Testing to Reduce Test Automation Technical Debt: An Industrial Experience Report,"Larrucea, X. and Santamaría, I. and Graña Romay, M.",IET Software,2021,"This study argues the difference between security and privacy and outlines the concept of Privacy Debt as a new Technical Debt. Privacy is gaining momentum in any software system due to mandatory compliance with respect to laws and regulations. There are several types of technical debts within the umbrella of software engineering, and most of them arise during different phases of software development. Several research studies have been focussed on highlighting different types of technical debts. However, authors introduce Privacy Debt as a particular technical debt focussed on privacy management and linked to a perturbative method. Privacy must be considered not only as technical debt requirements but also at design and deployment phases, among others. In addition, this method is illustrated with a use case. © 2021 The Authors. IET Software published by John Wiley & Sons Ltd on behalf of The Institution of Engineering and Technology.",10.1049/sfw2.12044,"TECNALIA, Basque Research and Technology Alliance (BRTA), Mendaro, Spain; Department of Computer Sciences and Artificial Intelligence, University of the Basque Country (UPV/EHU), Leioa, Spain",Accepted
916,"International Conference on Information Technology and Systems, ICITS 2019","Sousa, A. and Rocha, L. and Britto, R. and Gong, Z. and Lyu, F.","Proceedings - 2021 IEEE International Conference on Software Analysis, Evolution and Reengineering, SANER 2021",2021,"Technical debt (TD) is a metaphor that reflects the technical compromises that sacrifice the long-term health of a software product to achieve short term benefit. It is important to manage TD to avoid software degradation. In large-scale distributed projects, technical debt management (TDM) becomes more complex and challenging. There is a lack of empirical studies on the TD accumulation in large-scale distributed projects. Then, to address this gap, we conducted a case study in Ericsson (a European Telecom Company) to identify the relationship between TD accumulation and factors such as task complexity, lead time, total of developers, and task scaling. We used data from 33 projects extracted from managerial documents to conduct a regression analysis. We also conducted interviews with seniors developers of the team to interpret the results. We found out that Task Complexity has a strong relationship (p-value = 5.69 × 10-5) with Technical Debt, while Global Distance was mentioned by the interviewees as a relevant factor for TD accumulation (although not statistically significant in our regression analysis). Practitioners should consider avoiding complex/big tasks, breaking down big tasks into small ones (if possible). We also plan to analyze other projects in this company to confirm our findings further. © 2021 IEEE.",10.1109/SANER50967.2021.00071,"Federal University of Ceará, Fortaleza, Brazil; Blekinge Institute of Technology, Ericsson Ab, Karlskrona, Sweden; Blekinge Institute of Technology, Karlskrona, Sweden",Accepted
917,A Statistical Tool as a Decision Support in Enterprise Financial Crisis,"Tang, Y. and Khatchadourian, R. and Bagherzadeh, M. and Singh, R. and Stewart, A. and Raja, A.",Proceedings - International Conference on Software Engineering,2021,"Machine Learning (ML), including Deep Learning (DL), systems, i.e., those with ML capabilities, are pervasive in today's data-driven society. Such systems are complex; they are comprised of ML models and many subsystems that support learning processes. As with other complex systems, ML systems are prone to classic technical debt issues, especially when such systems are long-lived, but they also exhibit debt specific to these systems. Unfortunately, there is a gap of knowledge in how ML systems actually evolve and are maintained. In this paper, we fill this gap by studying refactorings, i.e., source-to-source semantics-preserving program transformations, performed in real-world, open-source software, and the technical debt issues they alleviate. We analyzed 26 projects, consisting of 4.2 MLOC, along with 327 manually examined code patches. The results indicate that developers refactor these systems for a variety of reasons, both specific and tangential to ML, some refactorings correspond to established technical debt categories, while others do not, and code duplication is a major cross-cutting theme that particularly involved ML configuration and model code, which was also the most refactored. We also introduce 14 and 7 new ML-specific refactorings and technical debt categories, respectively, and put forth several recommendations, best practices, and anti-patterns. The results can potentially assist practitioners, tool developers, and educators in facilitating long-term ML system usefulness. © 2021 IEEE.",10.1109/ICSE43902.2021.00033,"CUNY Graduate Center, United States; UNY Hunter College, United States; Oakland University, United States; CUNY Macaulay Honors College, United States",Accepted
918,Investigate the relationship between leverage deviations of management remuneration and corporate financial supply chain management on investment diversions accepted by Tehran Stock Exchange,"Sas, D. and Pigazzini, I. and Avgeriou, P. and Fontana, F.A.",IEEE Software,2021,"Architectural technical debt (TD) is the most significant type of TD in industrial practice. Our goals in this study were to better understand the phenomenon of architectural smells, help practitioners better manage them, and offer relevant support to researchers. © 1984-2012 IEEE.",10.1109/MS.2021.3103664,University of Groningen; University of Milano-Bicocca; University of Groningen,Accepted
919,Analysis of debt-paying ability of real estate enterprises based on fuzzy mathematics and K-means algorithm,"Trendowicz, A. and Siebert, J. and Jedlitschka, A.",IEEE Software,2021,"In this article, we summarize experience with data-driven technical debt management that we gained through several industry research projects. We report challenges and their consequences, propose solutions, and sketch improvement directions. © 1984-2012 IEEE.",10.1109/MS.2021.3103326,Fraunhofer Institute for Experimental Software Engineering,Accepted
920,"Proceedings - 2015 Asia-Pacific Conference on Computer-Aided System Engineering, APCASE 2015","Millington, J.D.A. and Katerinchuk, V. and Silva, R.F.B.D. and Victoria, D.D.C. and Batistella, M.",Environmental Modelling and Software,2021,"Increasing global demand for agricultural commodities has driven local land use/cover change (LUCC) and agricultural production across Brazil during the 21st century. Modelling tools are needed to help understand the range of possible outcomes due to these telecoupled global-to-local relationships, given future political, economic and environmental uncertainties. Here, we present CRAFTY-Brazil, a LUCC model representing production of multiple agricultural commodities that accounts for spatially explicit (e.g., land access) and temporally contingent (e.g., agricultural debt) processes of importance across our nearly four million km2 Brazilian study area. We calibrate the model calibration for 20012018, and run tests and scenarios about commodity demand, agricultural yields, climate change, and policy decisions for 20192035. Results indicate greater confidence in modelled time-series than spatial allocation. We discuss how our approach might be best understood to be agency-based, rather than agent-based, and highlight questions more and less appropriate for this approach. © 2021 Elsevier Ltd",10.1016/j.envsoft.2021.105024,"Department of Geography, King's College London, London, United Kingdom; Center for Systems Integration and Sustainability, Department of Fisheries and Wildlife, Michigan State University, United States; Center for Environmental Studies and Research, State University of Campinas (NEPAM/UNICAMP), Campinas, Brazil; Embrapa Agricultural Informatics. Brazilian Agricultural Research Corporation (EMBRAPA), Campinas, Brazil",Rejected
921,(Automated) software modularization using community detection,"Vidoni, M.",Journal of Systems and Software,2022,"R is a package-based programming ecosystem that provides an easy way to install third-party code, datasets, and examples. Thus, R developers rely heavily on the documentation of the packages they import to use them correctly and accurately. This documentation is often written using Roxygen, equivalent to Java's well-known Javadoc. This two-part study provides the first analysis in this area. First, 379 systematically-selected, open-source R packages were mined and analysed to address the quality of their documentation in terms of presence, distribution, and completeness to identify potential sources of documentation debt of technical debt that describes problems in the documentation. Second, a survey addressed how R package developers perceive documentation and face its challenges (with a response rate of 10.04%). Results show that incomplete documentation is the most common smell, with several cases of incorrect use of the Roxygen utilities. Unlike in traditional API documentation, developers do not focus on how behaviour is implemented but on common use cases and parameter documentation. Respondents considered the examples section the most useful, and commonly perceived challenges were unexplained examples, ambiguity, incompleteness and fragmented information. © 2022 Elsevier Inc.",10.1016/j.jss.2022.111265,"Australian National University, CESC School of Computing, Australia",Rejected
922,Data science: Technologies for better software,"Digkas, G. and Chatzigeorgiou, A. and Ampatzoglou, A. and Avgeriou, P.",IEEE Transactions on Software Engineering,2022,"While technical debt grows in absolute numbers as software systems evolve over time, the density of technical debt (technical debt divided by lines of code) is reduced in some cases. This can be explained by either the application of refactorings or the development of new artifacts with limited Technical Debt. In this paper we explore the second explanation, by investigating the relation between the amount of Technical Debt in new code and the evolution of Technical Debt in the system. To this end, we compare the Technical Debt Density of new code with existing code, and we investigate which of the three major types of code changes (additions, deletions and modifications) is primarily responsible for changes in the evolution of Technical Debt density. Furthermore, we study whether there is a relation between code quality practices and the 'cleanness' of new code. To obtain the required data, we have performed a large-scale case study on twenty-seven open-source software projects by the Apache Software Foundation, analyzing 66,661 classes and 56,890 commits. The results suggest that writing 'clean' (or at least 'cleaner') new code can be an efficient strategy for reducing Technical Debt Density, and thus preventing software decay over time. The findings also suggest that projects adopting an explicit policy for quality improvement, e.g., through discussions on code quality in board meetings, are associated with a higher frequency of cleaner new code commits. Therefore, we champion the establishment of processes that monitor the density of Technical Debt of new code to control the accumulation of Technical Debt in a software system. © 1976-2012 IEEE.",10.1109/TSE.2020.3032557,"University of Groningen, Institute of Mathematics and Computer Science, Groningen, 9712 CP, Netherlands; University of Macedonia, Department of Applied Informatics, Thessaloniki, 546 36, Greece",Accepted
923,Managing security debt across PLC phases in a VSE context,"Rehman, O.U. and Ali, Y. and Sabir, M.",International Journal of Critical Infrastructure Protection,2022,"The electric power sector is the driving force behind a country's economy and disruptions in its services have dire consequences. The purpose of this study is to identify the risk mitigation measures that should be incorporated by the electric power sector of Pakistan. These risk mitigation strategies were identified while considering the risks that are Most Probable, Severe, Costly, Difficult to Detect, and Control. This study employed Fuzzy Multi-Criteria Decision-Making (MCDM) techniques for the assessment of risks. The criteria for risk evaluation were gauged through Fuzzy Full Consistency Method (FUCOM) and Fuzzy VIKOR approach was used for ranking these risks. Moreover, the risk mitigation strategies were evaluated using the Fuzzy Quality Function Deployment (QFD) method, considering the previously prioritized risks. The analysis ranked Corruption, Circular Debts, Outdated Infrastructure, Energy Losses, and Lack of Research and Development as the most critical risks. For risk mitigation measures, Incorporation of the Internet of Things (IoT), Building an Investor-Friendly Environment, Improved Coordination between Organisations, and Maximizing the Energy Efficiency Potential gained preference, among other measures. The study proposed a novel framework for risk assessment and evaluation of risk mitigation strategies. Moreover, it fills a research gap in its application by focusing on the electric power sector of Pakistan, a developing country. © 2021 Elsevier B.V.",10.1016/j.ijcip.2021.100507,"School of Management Sciences, Ghulam Ishaq Khan Institute of Engineering Sciences and Technology, Topi, KPK, Swabi, Pakistan; NUST Business School, National University of Science and Technology, Islamabad, Pakistan",Rejected
924,Debt-Servicing Capacity and Economic Development: A Study of Pakistan,"Albarak, M. and Bahsoon, R. and Ozkaya, I. and Nord, R.",IEEE Transactions on Software Engineering,2022,"Database normalization is one of the main principles for designing relational databases, which is the most popular database model, with the objective of improving data and system qualities, such as performance. Refactoring the database for normalization can be costly, if the benefits of the exercise are not justified. Developers often ignore the normalization process due to the time and expertise it requires, introducing technical debt into the system. Technical debt is a metaphor that describes trade-offs between short-term goals and applying optimal design and development practices. We consider database normalization debts are likely to be incurred for tables below the fourth normal form. To manage the debt, we propose a multi-attribute analysis framework that makes a novel use of the Portfolio Theory and the TOPSIS method (Technique for Order of Preference by Similarity to Ideal Solution) to rank the candidate tables for normalization to the fourth normal form. The ranking is based on the tables estimated impact on data quality, performance, maintainability, and cost. The techniques are evaluated using an industrial case study of a database-backed web application for human resource management. The results show that the debt-aware approach can provide an informed justification for the inclusion of critical tables to be normalized, while reducing the effort and cost of normalization. © 1976-2012 IEEE.",10.1109/TSE.2020.3001339,"School of Computer Science, University of Birmingham, Birmingham, United Kingdom; Software Engineering Institute, Carnegie Mellon University, Pittsburgh, PA, United States; King Saud University, Riyadh, 11451, Saudi Arabia",Accepted
925,SDK4ED: A platform for technical debt management,"De Stefano, M. and Iannone, E. and Pecorelli, F. and Tamburri, D.A.",Science of Computer Programming,2022,"Software engineering projects are now more than ever a community effort. In the recent past, researchers have shown that their success not only depends on source code quality, but also on other aspects like the balance of power distance, culture, and global engineering practices, and more. In such a scenario, understanding the characteristics of the community around a project and foresee possible problems may be the key to develop successful systems. In this paper, we focus on this research problem and propose an exploratory study on the relation between community patterns, i.e.,recurrent mixes of organizational or social structure types, and aspects related to the quality of software products and processes by mining open-source software repositories hosted on GITHUB. We first exploit association rule mining to discover frequent relations between community pattern and community smells, i.e.,sub-optimal patterns across the organizational structure of a software development community that may be precursors of some form of social debt. Further on, we use statistical analyses to understand their impact on software maintainability and on the community engagement, in terms of contributions and issues. Our findings show that different organizational patterns are connected to different forms of socio-technical problems; further on, specific combinations are set in equally specific contextual conditions. Findings support two possible conclusions: (1) practitioners should put in place specific preventive actions aimed at avoiding the emergence of community smells and (2) such actions should be drawn according to the contextual conditions of the organization and the project. © 2021 Elsevier B.V.",10.1016/j.scico.2021.102731,"SeSa Lab, University of Salerno, Italy; JADE Lab, Eindhoven University of Technology - Jheronimus Academy of Data Science, Netherlands",Rejected
926,What determines the household decision to borrow for investment or repayment of old debt? The Indian story,"Do?an, E. and Tüzün, E.",Information and Software Technology,2022,"Context: Code review is a crucial step of the software development life cycle in order to detect possible problems in source code before merging the changeset to the codebase. Although there is no consensus on a formally defined life cycle of the code review process, many companies and open source software (OSS) communities converge on common rules and best practices. In spite of minor differences in different platforms, the primary purpose of all these rules and practices leads to a faster and more effective code review process. Non-conformance of developers to this process does not only reduce the advantages of the code review but can also introduce waste in later stages of the software development. Objectives: The aim of this study is to provide an empirical understanding of the bad practices followed in the code review process, that are code review (CR) smells. Methods: We first conduct a multivocal literature review in order to gather code review bad practices discussed in white and gray literature. Then, we conduct a targeted survey with 32 experienced software practitioners and perform follow-up interviews in order to get their expert opinion. Based on this process, a taxonomy of code review smells is introduced. To quantitatively demonstrate the existence of these smells, we analyze 226,292 code reviews collected from eight OSS projects. Results: We observe that a considerable number of code review smells exist in all projects with varying degrees of ratios. The empirical results illustrate that 72.2% of the code reviews among eight projects are affected by at least one code review smell. Conclusion: The empirical analysis shows that the OSS projects are substantially affected by the code review smells. The provided taxonomy could provide a foundation for best practices and tool support to detect and avoid code review smells in practice. © 2021",10.1016/j.infsof.2021.106737,"Bilkent University, Department of Computer Engineering, Ankara, Turkey",Accepted
927,Construction of Real Estate Debt Crisis Early Warning Model Based on RBF Neural Network,"Bhatia, S.","2022 International Conference on Communication, Computing and Internet of Things, IC3IoT 2022 - Proceedings",2022,"Historical financial crises like the 2007-2008 global financial crisis are a great example of the need for commercial institutions to predict the credit risk of their clients. Credit cards are a convenient and quick way to pay for products and services, but as debt increases over time, moreso with the pandemic and growing unemployment, the possibility of late payments increases. As the number of credit card users has been increasing, banks have been facing an escalating credit card default rate. This paper proposes a novel practical technique to segment customers by their predicted probability of defaulting on payments to help financial institutions assess risk before issuing credit cards. We have used the credit card default dataset to present our approach and results. However, the proposed approach has been generalized and can be applied to credit card default datasets from other countries as well. © 2022 IEEE.",10.1109/IC3IOT53935.2022.9768006,"Dr. D. y Patil Institute of Technology, Department of Computer Engineering, Pune, India",Rejected
928,Detecting and quantifying architectural debt: Theory and practice,"Lamprakos, C.P. and Marantos, C. and Papadopoulos, L. and Soudris, D.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2022,"Software projects must adhere to a variety of non-functional requirements, also known as software qualities. Automated evaluation with respect to such requirements can be conducted thanks to a wide array of available tools. Each tool usually focuses on a specific quality, since heterogeneous analyses are needed for each non-functional requirement. Apart from an overall index expressing the projects performance in terms of the software quality they specialize on, many tools recommend code changes that are expected to improve the aforementioned index. Thus, a development team that cares for more than one non-functional requirement is facing the problem of unknown trade-offs; besides improving the quality on which the tool that generated each suggestion focuses, how would this code change, if implemented, affect the rest of the non-functional requirements? We present a framework for dealing with this problem. We pick energy efficiency, technical debt and software security as our qualities of interest, and use three respective tools for the analysis of several open-source projects with regard to these qualities. We develop an extensible empirical model, based on fuzzy sets, for the characterization of each suggestions trade-offs. Finally, we present an intuitive visualization of said trade-offs, and suggest a method of utilizing them towards reliable decision-making. © 2022, Springer Nature Switzerland AG.",10.1007/978-3-031-04580-6_23,"School of ECE, National Technical University of Athens, Athens, Greece",Accepted
929,A replication case study to measure the architectural quality of a commercial system,"Halepmollasi, R. and Tosun, A.",Journal of Software: Evolution and Process,2022,"Refactoring, which aims to improve the internal structure of the software systems preserving their behavior, is the most common payment strategy for technical debt (TD) by removing the code smells. There exist many studies presenting code smell detection approaches/tools or investigating their impact on quality attributes. There are also studies that focus on refactoring techniques, their relation with quality attributes, tool supports, and opportunities for them. Although there are several studies addressing the gap between refactoring and TD indicators, the empirical evidence provided is still limited. In this study, we examine the distribution of 29 refactoring types among the different projects and their relation with code smells or faults. We explore the refactoring types that are most commonly performed together and other activities performed with refactorings. We conduct a large exploratory study with automatically detected 57,528 refactorings, 37,553 smells, 27,340 faults, and 134,812 commits of 33 Java projects. Results show that some refactoring types are more commonly applied by developers. Our analysis indicates that refactorings usually remove or do not affect the code smells, and this contradicts with the previous studies. Also, the commits in which refactoring(s) is performed are three times more fault inducing than those without refactoring. © 2022 John Wiley & Sons, Ltd.",10.1002/smr.2447,"Faculty of Computer and Informatics Engineering, Istanbul Technical University, Istanbul, Turkey",Accepted
930,Challenges Faced by Industries and Their Potential Solutions in Deploying Machine Learning Applications,"Beurer-Kellner, L. and Von Pilgrim, J. and Tsigkanos, C. and Kehrer, T.",IEEE Transactions on Services Computing,2022,"The communication of web services is typically organized through APIs, which rely on a common data model shared among system components. Over time, this data model must be changed in order to accommodate new or changing requirements, and the components including the data they are operating on must be migrated. In practice however, not all affected components can be migrated instantly and at the same time. A common approach is to plan data model changes in a backward compatible fashion, which causes serious maintenance problems and is a common cause of technical debt. We propose an alternative solution, using a translation layer serving as a round-trip migration service, responsible for the lossless translation of object-oriented data model instances of different versions. We present a framework which offers a version-aware interface definition language (IDL) for APIs, a typed JavaScript-based language using the IDL definition, and a run-time environment. From a methodological point of view, development is supported by a catalog which comprises a set of typical evolution scenarios along with corresponding round-trip migration strategies. We showcase the applicability of our approach via a case study of a real-world e-commerce web application, and evaluate correctness through automated testing. IEEE",10.1109/TSC.2022.3144613,"ETH Zrich, 27219 Zurich, ZH, Switzerland, (e-mail: lucabeurerkellner@gmail.com); Hamburg University of Applied Sciences, 14890 Hamburg, Hamburg, Germany, (e-mail: Jens.vonPilgrim@haw-hamburg.de); Institut fr Informatik, University of Bern, 27210 Bern, Bern, Switzerland, (e-mail: christos.tsigkanos@tuwien.ac.at); Institut fr Informatik, University of Bern, 27210 Bern, Bern, Switzerland, (e-mail: timo.kehrer@informatik.hu-berlin.de)",Rejected
931,Local government debt risk assessment: A deep learning-based perspective,"Wen, F. and Nagy, C. and Lanza, M. and Bavota, G.",Empirical Software Engineering,2022,"Most changes during software maintenance and evolution are not atomic changes, but rather the result of several related changes affecting different parts of the code. It may happen that developers omit needed changes, thus leaving a task partially unfinished, introducing technical debt or injecting bugs. We present a study investigating quick remedy commits performed by developers to implement changes omitted in previous commits. With quick remedy commits we refer to commits that (i) quickly follow a commit performed by the same developer, and (ii) aim at remedying issues introduced as the result of code changes omitted in the previous commit (e.g., fix references to code components that have been broken as a consequence of a rename refactoring) or simply improve the previously committed change (e.g., improve the name of a newly introduced variable). Through a manual analysis of 500 quick remedy commits, we define a taxonomy categorizing the types of changes that developers tend to omit. The taxonomy can (i) guide the development of tools aimed at detecting omitted changes and (ii) help researchers in identifying corner cases that must be properly handled. For example, one of the categories in our taxonomy groups the reverted commits, meaning changes that are undone in a subsequent commit. We show that not accounting for such commits when mining software repositories can undermine ones findings. In particular, our results show that considering completely reverted commits when mining software repositories accounts, on average, for 0.07 and 0.27 noisy data points when dealing with two typical MSR data collection tasks (i.e., bug-fixing commits identification and refactoring operations mining, respectively). © 2021, The Author(s).",10.1007/s10664-021-10051-z,"Software Institute, USI Università della Svizzera italiana, Lugano, Switzerland",Rejected
932,Handling Non-Fuctional Requirements in IoT-based Machine Learning Systems,"Sas, D. and Avgeriou, P. and Pigazzini, I. and Arcelli Fontana, F.",Journal of Software: Evolution and Process,2022,"Although architectural smells are one of the most studied type of architectural technical debt, their impact on maintenance effort has not been thoroughly investigated. Studying this impact would help to understand how much technical debt interest is being paid due to the existence of architecture smells and how this interest can be calculated. This work is a first attempt to address this issue by investigating the relation between architecture smells and source code changes. Specifically, we study whether the frequency and size of changes are correlated with the presence of a selected set of architectural smells. We detect architectural smells using the Arcan tool, which detects architectural smells by building a dependency graph of the system analyzed and then looking for the typical structures of the architectural smells. The findings, based on a case study of 31 open-source Java systems, show that 87% of the analyzed commits present more changes in artifacts with at least one smell, and the likelihood of changing increases with the number of smells. Moreover, there is also evidence to confirm that change frequency increases after the introduction of a smell and that the size of changes is also larger in smelly artifacts. These findings hold true especially in MediumLarge and Large artifacts. © 2021 The Authors. Journal of Software: Evolution and Process published by John Wiley & Sons Ltd.",10.1002/smr.2398,"Bernoulli Institute for Mathematics, Computer Science, and Artificial Intelligence, University of Groningen, Groningen, Netherlands; Department of Informatics, Systems, and Communications, University of Milano-Bicocca, Milan, Italy",Accepted
933,Crowdsmelling: A preliminary study on using collective knowledge in code smells detection,"Peruma, A. and Simmons, S. and AlOmar, E.A. and Newman, C.D. and Mkaouer, M.W. and Ouni, A.",Empirical Software Engineering,2022,"An essential part of software maintenance and evolution, refactoring is performed by developers, regardless of technology or domain, to improve the internal quality of the system, and reduce its technical debt. However, choosing the appropriate refactoring strategy is not always straightforward, resulting in developers seeking assistance. Although research in refactoring is well-established, with several studies altering between the detection of refactoring opportunities and the recommendation of appropriate code changes, little is known about their adoption in practice. Analyzing the perception of developers is critical to understand better what developers consider to be problematic in their code and how they handle it. Additionally, there is a need for bridging the gap between refactoring, as research, and its adoption in practice, by extracting common refactoring intents that are more suitable for what developers face in reality. In this study, we analyze refactoring discussions on Stack Overflow through a series of quantitative and qualitative experiments. Our results show that Stack Overflow is utilized by a diverse set of developers for refactoring assistance for a variety of technologies. Our observations show five areas that developers typically require help with refactoring Code Optimization, Tools and IDEs, Architecture and Design Patterns, Unit Testing, and Database. We envision our findings better bridge the support between traditional (or academic) aspects of refactoring and their real-world applicability, including better tool support. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-021-10045-x,"Rochester Institute of Technology, Rochester, NY, United States; ETS Montreal, University of Quebec, Montreal, QC, Canada",Accepted
934,Translating quality-driven code change selection to an instance of multiple-criteria decision making,"Nimmagadda, S. and Krishna Prasad, M.H.M.","Proceedings - 4th International Conference on Smart Systems and Inventive Technology, ICSSIT 2022",2022,"Loan recovery during the COVID-19 pandemic is anxious. Automated decision-making would boost the identification of bad debts while issuing loans. The objective of the proposed work is thus to design and implement an adaptive algorithm, which will be used to predict bad debts. Machine learning is an artificial intelligence technology, which gives systems the ability to automatically learn and improve from experience without explicit programming. The adaptive algorithm proposed is deterministic, uses two parameters known as neighborhood distance and minimum support threshold value for the risk profile, and can be very useful in predicting bad debts. It produces overlapped as well as non-overlapped clusters. This algorithm can detect the outliers with the help of an adaptive threshold value for the object's risk profile attribute. Objects with a moderately high or high value of risk profile attribute may emerge as outliers, and these outliers can be known as bad debts. The clusters generated are labeled as paid fully, not paid fully, and not paid. It can also generate clusters of different sizes. The proposed adaptive deterministic algorithm clusters the dataset without knowing the number of clusters. Many clusters are generated using this algorithm, but the parameter risk profile minimum threshold value prunes the clusters being formed. This proposed adaptive algorithm is testedusing real and artificial data sets and shows 83% accuracy in bad debt prediction. © 2022 IEEE",10.1109/ICSSIT53264.2022.9716467,"Department of CSE, Koneru Lakshmaiah Education Foundation, Vaddeswram, Guntur, India; Department of CSE, University College of Engineering, JNTUK, Kakinada, India",Rejected
935,SATDBailiff-mining and tracking self-admitted technical debt,"Sivasankaran, N. and Kanagaraj, A. and Israel, D. and Prasad, R.",International Journal of Electronic Finance,2022,"Entrepreneurs face financial dilemmas on a regular basis. These dilemmas are centred on taking major financial decisions such as how much of cash, debt, fixed cost, working capital and dividend is good for the firm i.e. whether the entrepreneurs should increase or decrease the size of these financial decision variables in order to increase their profitability. The paper discusses in detail these five financial decision dilemmas and offers the decision guidelines/rules for the entrepreneurs using the HEAD matrix as an analytical tool. © 2022 Inderscience Enterprises Ltd.",10.1504/IJEF.2022.122182,"XLRI-Xavier School of Management, Jamshedpur, India; ICFAI University, India",Rejected
936,Architectural technical debt of multiagent systems development platforms,"Pillpe-Garcia, C. and Diaz-Huaina, G. and Raymundo, C.",Lecture Notes in Networks and Systems,2022,"In this research we propose to apply the qualitative evaluation technique by points to the factors that influence the price of gold. In addition, we will simulate the context of 2015, a year in which the price of gold reached historical lows, and at the same time, a period in which the analyzed company was going through a period of crisis when seeing that its valuation was affected by the devaluation of its reserves and growth of debts with suppliers. The research was carried out for the forecast of the price of gold, the general budget of the company, the budget in the mine operations area and the budget of the plant operations area, but for reasons of space in the development of the paper we will only show the development with the price of gold and the area of operations in the process plant. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-85540-6_114,"Ingenieria de Gestion Minera, Universidad Peruana de Ciencias Aplicadas, Prolongacion Primavera 2390, Lima, 15023, Peru; Direccion de Investigacion, Universidad Peruana de Ciencias Aplicadas, Prolongacion Primavera 2390, Lima, 15023, Peru",Rejected
937,How Far Have We Progressed in Identifying Self-admitted Technical Debts? A Comprehensive Empirical Study,"Kuzmin, G. and Panov, A.I. and Razvorotnev, I. and Rezyapkin, V.",Lecture Notes in Networks and Systems,2022,"In the last few years, there is a growing interest in offline reinforcement learning (offline RL) and in reinforcement learning (RL) in general. In this paper, we presented an example of applying some of these methods to the debt collection process. We conducted several experiments using DQN, Munchausen DQN, DRQN and CQL modification for creating an optimal agent for our problem. As a result, we showed that CQL and Munchausen DQN could be successfully used in offline RL setting for debt collection process. Moreover, these agents show performance comparable with baseline DDQN agent but have several advantages for mentioned problem. We also described some practical obstacles in the usage of RL agents in a real-life task. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-87178-9_7,"Moscow Institute of Physics and Technology (National Research University), Moscow, Russian Federation; Tinkoff, Moscow, Russian Federation; Federal Research Center Computer Science and Control of the Russian Academy of Sciences, Moscow, Russian Federation",Rejected
938,Self-claimed assumptions in deep learning frameworks: An exploratory study,"Santos, O.O. and Anido, L.S. and Torres, M.O.",Lecture Notes in Networks and Systems,2022,"Companies are currently developing in a changing environment, which has led to more complex and uncertain environments and greater difficulty in their ability to make decisions. Among the most important decisions taken in the business management process is the approval, evaluation and execution of investments, since these generally involve high capital disbursements and even the participation of debt. The Molecular Immunology Center (CIM using its acronym in Spanish), a Cuban company belonging to the BIOCUBAFARMA group, is not exempt from this situation. INIM is the area in charge of Research and Development within the CIM and currently has a slow development of products from the patent until its commercial phase. This research aims to address the evaluation of an investment in the INIM from the optimum of fuzzy mathematics, due to the characteristics of the assets (intangible) and / or the sources of income in general that this entity presents, pretending that the technique addressed is applied to other investments and other areas of business decision making. Project supported by Red Iberoamericana para la Competitividad, Innovación y Desarrollo (REDCID), project number 616RT0515, in Programa Iberoamericano de Ciencia y Tecnología para el Desarrollo (CYTED). © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-93787-4_5,"Faculty of Economics, Havana University, Havana, 10400, Cuba",Rejected
939,Towards a privacy debt,"Vlasova, Y.A. and Rogova, T.M. and Ivolgina, N.V. and Gerzelieva, Z.I. and Lyukshin, A.M.",Lecture Notes in Networks and Systems,2022,"The article considers the problems associated with the peculiarities of current development, and the prospects for the global and national markets of green bonds, which are a tool for financing projects to improve the environment. The main problematic aspects of issuing green bonds are low investment appeal, high risks and low liquidity of these securities, as well as the high politicization of such markets, if the projects relate to strategically important sectors of the economy. This demonstrates the urgent need to develop forms of state support for green bonds, especially at the regional and municipal levels. Moreover, the green investment market in Russia also needs government help to create favorable conditions both for issuers of green bonds and incentives to invest in these instruments. To increase the demand for such bonds the authors suggest introducing special benefits and supporting measures for the regions, highlight that the access to the purchase of green bonds by individuals would have a positive impact on the development of this segment at the sub-federal level. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-94245-8_74,"Plekhanov Russian University of Economics, Moscow, Russian Federation",Rejected
940,Profiling developers through the lens of technical debt,"Kolankov, S.",Lecture Notes in Networks and Systems,2022,"The valuation issues of land plots, passed as a subject of mortgage, are considered. It is indicated that in modern publications on assessing the market value, sufficient attention is not paid to the specifics of calculating these land plots. It is noted that land plots are assessed by two approaches - profitable and costly, in each of their constituent methods, the presence of a mortgage debt should be taken into account. The limited application of the cost approach is noted. The methods of accounting for outstanding borrowed funds in direct capitalization and cash flow discounting, using the comparative approach methods are shown. Calculation schemes and formulas are given. Difficulties in determining the discount rate are noted; it is proposed to apply the method of boundary estimates, which makes it possible to overcome the uncertainty of information when estimating the discount value. In conclusion, it is noted that the recommended methods for assessing mortgaged land plots give an opportunity to take into account the theoretical position, according to which the market value of real estate, including land plots, decreases when various kinds of encumbrances are imposed. At the same time, as soon as the mortgage loan is paid off, the market value of land plots is increased. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-96380-4_55,"Emperor Alexander I St. Petersburg State Transport University, 9 Moskovskiy Ave., Saint Petersburg, 190031, Russian Federation",Rejected
941,Utilisation Efficiency of Construction Land in China's Coastal Cities Based on Debt Level,"Burov, M.P. and Nilipovskiy, V.I. and Margalitadze, O.N. and Gorbunov, V.S.",Lecture Notes in Networks and Systems,2022,"The ambiguity of the transformation processes taking place in the constituent entities of the Russian Federation makes it possible to formulate a variety of concepts of directions for the further development of the agro-industrial complex. At the same time, the need to follow the principles of sustainable development of local communities and the entire territory of the country is indisputable. Strengthening Russia in the world economic and geopolitical space entails the need for appropriate internal transformations. Its necessary to continue to improve many civil institutions, to increase the economic security of the regional space, to improve the system of elaboration, accounting and control of the most important state projects and development programs. The scientific article outlines some of the most significant aspects of the socio-economic development of the territories of the Russian Federation on which the rates of sustainable growth of business, state and society, built on the principles of the ESG concept, depend. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-93155-1_24,"State University of Land Use Planning, Moscow, Russian Federation",Rejected
942,Towards Better Technical Debt Detection with NLP and Machine Learning Methods,"Baccini, A. and Petrovich, E.",Scientometrics,2022,"Two alternative accounts can be given of the information contained in the acknowledgments of academic publications. According to the mainstream normative account the acknowledgments serve to repay debts towards formal or informal collaborators. According to the strategic account, by contrast, the acknowledgments serve to increase the perceived quality of papers by associating the authors to influential scholars. The two accounts are assessed by analyzing the acknowledgments indexed in Web of Science of 1218 articles published in the top-five journals of economics for the years 20152019. The analysis is focused on six dimensions: (i) the style of acknowledging texts, (ii) the distribution of mentions, (iii) the identity of the most mentioned acknowledgees, (iv) the shares of highly and lowly mentioned acknowledgees, (v) the hierarchy of the acknowledgment network, and (vi) the correlation at a paper level between intellectual similarity, measured by common references, and social similarity, measured by common acknowledges. Results show that the normative and the strategic account should be considered as valid but partial explanations of acknowledging behavior. Hence, acknowledgments should be used with extreme caution for investigating collaboration practices and they should not be used to produce acknowledgments-based metrics of scholars for evaluative purposes. © 2021, Akadémiai Kiadó, Budapest, Hungary.",10.1007/s11192-021-04185-6,"Department of Economics and Statistics, University of Siena, Siena, Italy",Rejected
943,Applying devops practices of continuous automation for machine learning,"Park, S. and Yang, J.-S.",Knowledge-Based Systems,2022,"For sustainable economic growth, information about economic activities and prospects is critical to decision-makers such as governments, central banks, and financial markets. However, accurate predictions have been challenging due to the complexity and uncertainty of financial and economic systems amid repeated changes in economic environments. This study provides two approaches for better economic prediction and decision-making. We present a deep learning model based on the long short-term memory (LSTM) network architecture to predict economic growth rates and crises by capturing sequential dependencies within the economic cycle. In addition, we provide an interpretable machine learning model that derives economic patterns of growth and crisis through efficient use of the eXplainable AI (XAI) framework. For major G20 countries from 1990 to 2019, our LSTM model outperformed other traditional predictive models, especially in emerging countries. Moreover, in our model, private debt in developed economies and government debt in emerging economies emerged as major factors that limit future economic growth. Regarding the economic impact of COVID-19, we found that sharply reduced interest rates and expansion of government debt increased the probability of a crisis in some emerging economies in the future. © 2022 Elsevier B.V.",10.1016/j.knosys.2022.108907,"Graduate School of Future Strategy, Korea Advanced Institute of Science and Technology, Daejeon, 34141, South Korea; Financial Supervisory Service, Seoul, 07321, South Korea",Rejected
944,Management of quality requirements in agile and rapid software development: A systematic mapping study,"Siavvas, M. and Tsoukalas, D. and Jankovic, M. and Kehagias, D. and Tzovaras, D.",Enterprise Information Systems,2022,"Vulnerability prediction facilitates the development of secure software, as it enables the identification and mitigation of security risks early enough in the software development lifecycle. Although several factors have been studied for their ability to indicate software security risk, very limited attention has been given to technical debt (TD), despite its potential relevance to software security. To this end, in the present study, we investigate the ability of common TD indicators to indicate security risks in software products, both at project-level and at class-level of granularity. Our findings suggest that TD indicators may potentially act as security indicators as well. © 2020 Informa UK Limited, trading as Taylor & Francis Group.",10.1080/17517575.2020.1824017,"Centre for Research and Technology Hellas, Information Technologies Institute, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece",Accepted
945,Technical Debt in Large-Scale Distributed Projects: An Industrial Case Study,"Bi, C. and Zhang, B. and Yang, F. and Wang, Y. and Bi, G.",European Journal of Operational Research,2022,"Debt-shared bank financing, as an innovative and collaborative financing scheme, allows the supplier to (partially) share the retailer's bank loan obligation, including principal and interest. We study the operational and financial decisions of a chain with a supplier (Stackelberg leader) selling to a capital-constrained retailer via a debt-shared contract. We derive the equilibrium debt-shared coefficient, wholesale price, order quantity and bank's interest rate with the retailer in different wealth regions. The very poor retailer always accepts debt-sharing and earns a profit, even if the supplier sets the wholesale price up to the retail price. The medium poor retailer might enter a supplier's debt-sharing hole (a retailer's wealth region) and acquire zero profit, by using debt-sharing with a wholesale price up to the retail price. For the medium poor retailer outside the hole or the medium rich retailer, the supplier offers either an optimal debt-shared bank financing contract or an optimal price-only contract at her benefit, mainly depending on the production cost and the retailer's capital. Under debt-shared bank financing, both the supplier's profit and the chain's efficiency improve. The retailer might overstock when the production cost is high. Computational studies show the not very rich retailer's profit is a bowl-shaped function of his capital and the bottom is the hole. The very poor retailer might earn a larger profit than under the optimal price-only contract. The supplier's profit is unimodal and it achieves globally optimum in the hole (at the upper bound of the hole if production cost is low). © 2021 Elsevier B.V.",10.1016/j.ejor.2021.02.025,"School of Management, University of Science and Technology of China, He Fei, 230026, China; School of Economics and Management, Beihang University, Beijing, 100191, China",Rejected
946,An empirical study of refactorings and technical debt in machine learning systems,"Behutiye, W. and Rodríguez, P. and Oivo, M. and Aaramaa, S. and Partanen, J. and Abhervé, A.",Journal of Systems and Software,2022,"Context: Agile software development (ASD) promotes minimal documentation and often prioritizes functional requirements over quality requirements (QRs). The minimal documentation emphasis may be beneficial in reducing time-to-market for software. However, it can also be a concern, especially with QRs, since they are challenging to specify and document and are crucial for software success. Therefore, understanding how practitioners perceive the importance of QR documentation is valuable because it can provide insight into how they approach this task. It also helps in developing models and guidelines that support the documentation of QRs in ASD, which is a research gap. Objective: We aim to understand practitioners perceptions of QR documentation and factors influencing this task to derive a model that supports optimal QR documentation in ASD. Method: We conducted a multiple case study involving 12 participants from three cases that apply ASD. Results: Practitioners identify QR documentation as important and perceive it as contributing to ensuring quality, clarifying QRs, and facilitating decision-making. Time constraints, QR awareness, and communication gaps affect QR documentation. Missing and outdated QR documentation may lead to technical debt and a lack of common understanding regarding QRs. We introduce a model to support optimal QR documentation in ASD by focusing on the factors: time constraints, QR awareness, and communication gaps. The model provides a representation and explanation of the factors affecting QR documentation in ASD and identifies mitigation strategies to overcome issues that may occur due to these factors. Conclusion: The study reveals the importance of documenting QRs in ASD. It introduces a model that is based on empirical knowledge of QR documentation practices in ASD. Both practitioners and researchers can potentially benefit from the model. For instance, practitioners can analyze how time constraints or QR awareness affect documentation, see potential issues that may arise from them, and utilize strategies suggested by the model to address these issues. Researchers can learn about QR documentation in ASD and utilize the model to understand the topic. They can also use the study as a baseline to investigate the topic with other cases. © 2021 The Author(s)",10.1016/j.jss.2021.111112,"M3S Empirical Software Engineering Research Unit, University of Oulu, Oulu, Finland; Universidad Politécnica de Madrid, Madrid, Spain; Nokia, Oulu, Finland; Bittium Wireless Ltd., Oulu, Finland; Softeam, Paris, France",Accepted
947,The Perception of Architectural Smells in Industrial Practice,"Kontsevoi, B. and Syraeshko, D. and Terekhov, S.",Lecture Notes in Networks and Systems,2022,"The paper covers the further development of the companys proprietary approach to the assessment of software product quality and measurement of technical debt. In the current paper, the authors show assessment results of the existing e-learning project with the help of the Technical dEbT Reduction plAtform (TETRA) with exact numbers of all reviewed metrics and assigned indices as well. The methodology, its advantages and limitations are also discussed. © 2022, The Author(s), under exclusive license to Springer Nature Singapore Pte Ltd.",10.1007/978-981-16-2380-6_74,"Intetics Inc., Naples, FL  34108, United States; Intetics Bel Ltd., Minsk, 220004, Belarus",Accepted
948,Data-Driven Technical Debt Management: Software Engineering or Data Science Challenge?,"de Lima, B.S. and Garcia, R.E. and Eler, D.M.",Software Quality Journal,2022,"Technical Debt (TD) is a metaphor that describes the costbenefit relationship between postponing technical development activities and the consequences of this long-term postponement. The lack of TD Management compromises the Softwares internal quality. It makes its maintenance complex and costly. TD instances are called Self-Admitted Technical Debt (SATD) when intentionally committed and documented through comments in the source code. Several studies explore the identification of SATD, but approaches to support the payment stage are lacking, particularly approaches to indicate which SATD priority for payment. This paper presents an approach to support the prioritization activity in SATD payment. The Prioritization Approach focuses on creating associations between SATD associations and problems found in the source code, identified by Automatic Static Analysis. The results demonstrate that using the issues found on source code and SATD description (found in comments) has greater precision to establish the priority among the SATD compared to the SATD description on comments. We applied the approach proposed to different software projects, and the results support developers prioritization. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s11219-021-09578-7,"São Paulo State University (UNESP), Faculty of Science and Technology, Department of Mathematics and Computer Science, SP, Presidente Prudente, Brazil",Accepted
949,A Dynamic System for Instabilities Prediction,"Wang, L. and Song, H.",Computational Intelligence and Neuroscience,2022,"In this paper, we propose a cooperative strategy-based self-organization mechanism to reconstruct the network. The mechanism includes a comprehensive evaluation algorithm and structure adjustment mechanism. The self-organization mechanism can be carried out simultaneously with the parameter optimization process. By calculating the similarity and independent contribution of normative neurons, the effectiveness of fuzzy rules can be jointly evaluated, and effective structural changes can be realized. Moreover, this mechanism should not set the threshold in advance in practical application. In order to optimize the parameters of SC-IR2FNN, we developed a parameter optimization mechanism based on an interaction strategy. The parameter optimization mechanism based on a joint strategy, namely multilayer optimization engine, can split SC-IR2FNN parameters into nonlinear and linear parameters for joint optimization. The nonlinear parameters are optimized by an advanced two-level algorithm, and the linear parameters are updated with the minimum biological multiplication. Two parameter optimization algorithms optimize nonlinear and linear parameters, reduce the computational complexity of SC-IR2FNN, and improve the learning rate. Using the principal component factor analysis method, seven representative common factors are selected to replace the original variables, which include the profitability factor of the financing enterprise, the solvency factor of the financing enterprise, the profitability factor of the core enterprise, the operation guarantee factor, and the growth ability of the financing enterprise. Factors, supply chain online degree factors, financing enterprise quality, and cooperation factors, can well measure the credit risk of online supply chains. The logistic model shows that the profitability factor of the financing company, the debt repayment factor of the financing company, and the profitability of the core company are three factors that have a significant impact on the credit risk of online supply chain finance. Based on the improved credit calculation model, we developed an online clue risk calculation. This method is based on site conditions and can evaluate credit risk. From the test results, the improved credit scoring system is the result of facing speculative and circular credit fraud and implies that the traders of risk commentators are in a leading position in each electronic device. The results show that risk analysis is effective in any case. © 2022 Lina Wang and Hui Song.",10.1155/2022/3088915,"School of Finacial Technology, Hebei Finance University, Baoding, Hebei, 071051, China; School of Information and Communication Engineering, Beijing University of Posts and Telecommunications, Haidian, Beijing, 100876, China",Rejected
950,Influence of Developer Factors on Code Quality: A Data Study,"AbuHassan, A. and Alshayeb, M. and Ghouti, L.",International Journal of Fuzzy Systems,2022,"Software evolution, an integral part of the software development process, encompasses frequent and numerous changes and updates that may lead to complex and poor-quality systems. Software engineers and quality practitioners continually refactor the software components to mitigate the negative effects of code and design smells. Although these smells are not directly connected to design and coding bugs, they are high indicators of technical debt that may arise as bugs in future software releases. Therefore, refactoring plays a significant role in the overall software evolution process. To fix the underlying code and design smells, they must be first detected and classified. As code smells have been the focus of research in the literature, this paper focuses on detecting design smells. A novel design smell detection scheme is proposed using adaptive neuro-fuzzy approaches. This scheme can be seamlessly integrated with any refactoring scheduling and prioritization models as it is efficiently designed using a fast-training scheme based on a neuro-fuzzy architecture. In addition, the design smell detection solution relies on a reduced set of software metrics. A large custom dataset with more than 30,000 class records is created to assess the performance of the design smell detection solution. The reported performance scores confirm the superiority of the proposed technique over the existing ones. The accuracy, precision, recall, and area-under-the-curve (AUC) scores attained 0.97, 0.98, 0.98, and 0.99, respectively. Thanks to the high detection scores, design smell refactoring sequencing and prioritization routines can be further enhanced. © 2022, The Author(s) under exclusive licence to Taiwan Fuzzy Systems Association.",10.1007/s40815-022-01248-5,"Computer Engineering Department, An-Najah National University, Nablus, Palestine; Information and Computer Science Department, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia; Interdisciplinary Research Center for Intelligent Secure Systems, King Fahd University of Petroleum and Minerals, Dhahran, 31261, Saudi Arabia; Department of Computer Science, Prince Sultan University, Riyadh, Saudi Arabia",Accepted
951,Intellectual capital and company profile effects on supply chain and earning per share based on the operational management,"Verdecchia, R. and Malavolta, I. and Lago, P. and Ozkaya, I.",PeerJ Computer Science,2022,"Background. Architectural Technical Debt (ATD) in a software-intensive system denotes architectural design choices which, while being suitable or even optimal when adopted, lower the maintainability and evolvability of the system in the long term, hindering future development activities. Despite the growing research interest in ATD, how to gain an informative and encompassing viewpoint of the ATD present in a software-intensive system is still an open problem. Objective. In this study, we evaluate ATDx, a data-driven approach providing an overview of the ATD present in a software-intensive system. The approach, based on the analysis of a software portfolio, calculates severity levels of architectural rule violations via a clustering algorithm, and aggregates results into different ATD dimensions. Method. To evaluate ATDx, we implement an instance of the approach based on SonarQube, and run the analysis on the Apache and ONAP ecosystems. The analysis results are then shared with the portfolio contributors, who are invited to participate in an online survey designed to evaluate the representativeness and actionability of the approach. Results. The survey results confirm the representativeness of the ATDx, in terms of both the ATDx analysis results and the used architectural technical debt dimensions. Results also showed the actionability of the approach, although to a lower extent when compared to the ATDx representativeness, with usage scenarios including refactoring, code review, communication, and ATD evolution analysis. Conclusions. With ATDx, we strive for the establishment of a sound, comprehensive, and intuitive architectural view of the ATD identifiable via source code analysis. The collected results are promising, and display both the representativeness and actionability of the approach. As future work, we plan to consolidate the approach via further empirical experimentation, by considering other development contexts (e.g., proprietary portfolios and other source code analysis tools), and enhancing the ATDx report capabilities. Copyright 2022 Verdecchia et al.",10.7717/peerj-cs.833,"Vrije Universiteit Amsterdam, Amsterdam, Netherlands; Chalmers University of Technology, Gothenburg, Sweden; Carnegie Mellon Software Engineering Institute, Pittsburgh, United States",Accepted
952,Scoring in microfinance: Credit risk management tool -Case of Morocco-,"Radev, D.","Studies in Systems, Decision and Control",2022,"The risk of default of sovereigns and banking institutions has proved to be of major concern for regulators during the Global financial and the recent euro area sovereign debt crises. In such turbulent times for markets and regulators, the consistent and assessment of the individual and systemic risks of banks and sovereigns is of utmost importance. © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-94281-6_4,"Faculty of Economics and Business Administration, Sofia University, Sofia, Bulgaria",Rejected
953,Devops round-trip engineering: Traceability from dev to ops and back again,"De Toledo, S.S. and Martini, A. and Nguyen, P.H. and Sjoberg, D.I.K.",IEEE Access,2022,"Many companies migrate to microservices because they help deliver value to customers quickly and continuously. However, like any architectural style, microservices are prone to architectural technical debt (ATD), which can be costly if the debts are not timely identified, avoided, or removed. During the early stages of migration, microservice-specific ATDs (MS-ATDs) may accumulate. For example, practitioners may decide to continue using poorly defined APIs in microservices while attempting to maintain compatibility with old functionalities. The riskiest MS-ATDs must be prioritized. Nevertheless, there is limited research regarding the prioritization of MS-ATDs in companies migrating to microservices. This study aims to identify, during migration, which MS-ATDs occur, are the most severe, and are the most challenging to solve. In addition, we propose a way to prioritize these debts. We conducted a multiple exploratory case study of three large companies that were early in the migration process to microservices. We interviewed 47 practitioners with several roles to identify the debts in their contexts. We report the MS-ATDs detected during migration, the MS-ATDs that practitioners estimate to occur in the future, and the MS-ATDs that practitioners report as difficult to solve. We discuss the results in the context of the companies involved in this study. In addition, we used a risk assessment approach to propose a way for prioritizing MS-ATDs. Practitioners from other organizations and researchers may use this approach to provide rankings to help identify and prioritize which MS-ATDs should be avoided or solved in their contexts. © 2013 IEEE.",10.1109/ACCESS.2022.3158648,"Department for Informatics, University of Oslo, Oslo, 0316, Norway; Sintef, Oslo, 0373, Norway",Accepted
954,On finding model smells based on code smells,"Passas, N.","Law, Governance and Technology Series",2022,"This paper inquires into trade diversion, a frequently complex type of misconduct about which little has been written in policy or academic papers, despite recent attention to illicit flows and trade-based money laundering (TBML). (African Forum and Network on Debt and Development, Illicit financial flows: towards a more integrated approach for curbing illicit flows from Zimbabwe, 2015; OECD, Illicit trade: converging criminal networks, 2016; Illicit Financial Flows: The Economy of Illicit Trade in West Africa, 2018; GFI, Illicit Financial Flows from Developing Countries: 20052014, 2017). © 2022, The Author(s), under exclusive license to Springer Nature Switzerland AG.",10.1007/978-3-030-88036-1_11,"School of Criminology and Criminal Justice, Northeastern University, Boston, MA, United States",Rejected
955,Neural network-based detection of self-Admitted technical debt: From performance to explainability,"Gnoyke, P. and Schulze, S. and Krüger, J.","Lecture Notes in Informatics (LNI), Proceedings - Series of the Gesellschaft fur Informatik (GI)",2022,"In this extended abstract, we summarize our paper with the homonymous title published at the International Conference on Software Maintenance and Evolution (ICSME) 2021 [GSK21]. © 2022 Gesellschaft fur Informatik (GI). All rights reserved.",,"Otto-von-Guericke University Magdeburg, Germany; University of Potsdam, Germany; Ruhr-University Bochum, Germany",Rejected
956,Towards a reduction in architectural knowledge vaporization during agile global software development,"Gluhov, V. and Kartavenko, O. and Kamyshova, A. and Popova, E. and Kapustin, N.",Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics),2022,"The increasing pressure of exogenous factors on the activities of mega-regulators at the time of the post-pandemic transformation of the market and changing monetary policy leads to lower profitability of deposits at commercial banks and at the same rises the yield curve of weighted average interest rates on interbank loans granted in euros, dollars, pounds and other currencies. The trading processes on the futures market are being intensively digitalized and so the post-pandemic transformation of the market is causing market players seeking to hedge risks to change their behavior. Changes that occurred on the debt capital market during the pandemic have increased investors interest in international derivatives market instruments and sped up the transformation of regional features of the derivatives market. These changes are mainly caused by the spread of the coronavirus infection and its impact on the global economy, which contributes to the development of digital technologies as instruments of interregional trade. International economic activity has been transformed by the opening and closing cycles of the economies of different countries, which affects the logistics and business processes of economic agents. The transformation of economic activity manifested in structural shifts occurring on the derivatives markets is confirmed by the changes in the dynamics of underlying assets of the derivatives market, such as stock indices, stocks, commodities, currencies, interest rates and ETFs. The analysis of the condition and specifics of the international derivatives market has revealed two problems worthy of independent research: 1) identifying major structural shifts in the international derivatives market that occurred during the pandemic; 2) evaluating the impact of the post-pandemic transformation of the market on the Russian derivatives market. The main parameters of the derivatives market, such as capitalization and trading activity, were determined in order to solve the indicated problems. The study of the dynamics of these indicators in the aggregate system of data of the international derivatives market allowed us to identify the main development trends on this market and assess the degree of influence of the pandemic on its main tools. The analysis of the regional characteristics of the international derivatives market made it possible to find out the main changes that took place on American, European, Asian, Middle Eastern and African exchange markets affected by growing digitalization. The data obtained made it possible to identify the place of the Russian derivatives market in the system of world economic relations on the derivatives markets during the period of post-pandemic transformation of the market and to compare the changes that took place in the Russian derivatives market with the trends of the international derivatives market. © 2022, Springer Nature Switzerland AG.",10.1007/978-3-030-97777-1_17,"Peter the Great St. Petersburg Polytechnic University, Saint Petersburg, Russian Federation; St. Petersburg State University of Economics, Saint Petersburg, Russian Federation",Rejected
957,Recover and RELAX: Concern-oriented software architecture recovery for systems development and maintenance,"Karn, A.L. and Sachin, V. and Sengan, S. and Indra, G.V. and Ravi, L. and Sharma, D.K. and Subramaniyaswamy, V.",Malaysian Journal of Computer Science,2022,"In the banking business, Machine Learning (ML) is critical for averting financial losses. Credit risk evaluation is perhaps the most important prediction task that may result in billions of dollars in damages each year (i.e., the risk of default on debt). Gradient Boosted Decision Tree (GBDT) models are now responsible for a large portion of the improvements in ML for predicting credit risk. However, these improvements begin to stagnate without adding pricey new data sources or carefully designed features. In this work, we describe our efforts to develop a unique Deep Learning (DL)-based technique for assessing credit risk that does not rely on additional model inputs. We present a new credit decision support approach with Gated Recurrent Unit (GRU) and Convolutional Neural Networks (CNN) that uses lengthy historical sequences of financial data while requiring few resources. We show that our DL technique, which uses Term Frequency-Inverse Document Frequency (TF-IDF) pre-classifiers, outperforms the benchmark models, resulting in considerable cost savings and early credit risk identification. We also show how our method may be utilized in a production setting, where our sampling methodology allows sequences to be effectively kept in memory and used for quick online learning and inference. © 2022. All Rights Reserved.",10.22452/mjcs.sp2022no1.9,"School of Management, Northwestern Polytechnical University, Xian, Shaanxi, 710072, China; Member Technical Staff, Zoho Corporation, Tamil Nadu, Chennai, India; Department of Computer Science and Engineering, PSN College of Engineering and Technology, Tamil Nadu, Tirunelveli, India; School of Electrical Engineering, Vellore Institute of Technology, Vellore, India; Department of Computer Science and Engineering, Vel Tech Rangarajan Dr. Sagunthala R&D Institute of Science & Technology, Chennai, Av",Rejected
958,Are static analysis violations really fixed? a closer look at realistic usage of sonarqube,"Yin, M. and Zhu, K. and Xiao, H. and Zhu, D. and Jiang, J.",Journal of Intelligent and Fuzzy Systems,2022,"Effectively identifying self-admitted technical debt (SATD) from project source code comments helps developers quickly find and repay these debts, thereby reducing its negative impact. Previous studies used techniques based on patterns, text mining, natural language processing, and neural networks to detect SATD. Compared with these above, Convolutional Neural Networks (CNN) have the strong feature extraction ability. Deep network ensembles are demonstrated great potential for the task of sentences classification. In order to boost the performance of CNN-based SATD detecting, we propose a deep neural network ensemble contribute to ensemble learning in a simple yet effective way. Specifically, CNN, CNN-LSTM (convolutional neural network and long short-term memory), and DPCNN (Deep Pyramid Convolutional Neural Networks) are used as individual classifiers to diversify the deep network ensembles. In order to improve the explainability, we introduce attention to measure the contribution of feature words to SATD classification. 62,285 source code comments from 10 projects were used in our experiments. The results show that our approach can effectively reduce misjudgment and detect more SATD, especially for cross-project, so as to greatly improve the detection accuracy. © 2022 - IOS Press. All rights reserved.",10.3233/JIFS-211273,"School of Software, Northwestern Polytechnical University, Shaanxi Province, Xi'an City, China; Debbie and Jerry Ivy College of Business, Iowa State UniversityIA, United States; School of Management, Northwestern Polytechnical University, Shaanxi Province, Xi'an City, China",Accepted
959,Research on software project developer behaviors with K-means clustering analysis,"Snoeck, M. and Wautelet, Y.",Software and Systems Modeling,2022,"Agile is often associated with a lack of architectural thinking causing technical debt but has the advantage of user centricity and a strong focus on value. Model-driven software engineering (MDSE) strongly performs for building a quality architecture and code, but lacks focus on user requirements and tends to consider development as a monolithic whole. The combination of Agile and MDSE has been explored, but a convincing integrated method has not been proposed yet. This paper addresses this gap by exploring the specific combination of MERODEas an example of a proven MDSE methodwith Scrum, a reference agile method offering a concrete (sprint-based) life cycle management on the basis of user stories. The method resulting of this integration is called Agile MERODE; it is driven by user stories, themselves associated with behavior-driven development scenarios. It allows for domain-driven design and permits fast development from domain models by means of code generation. An illustrative example further clarifies the practical application of Agile MERODE, while a case study shows the planning game application in the cases context. While the approach, in its entirety, allows reducing technical debt by building the architecture in a logical, consistent and complete manner, introducing MDSE involves a trade-off with pure value-driven development. Agile MERODE contributes to the state of the art by showing how to increase user centricity in MDSE, how to align model-driven engineering with the Scrum cycle, and how to reduce the technical debt of agile developments yet remaining value-focused. © 2022, The Author(s), under exclusive licence to Springer-Verlag GmbH Germany, part of Springer Nature.",10.1007/s10270-022-01015-y,"KU Leuven, Leuven, Belgium",Rejected
960,Nobrainer: An Example-Driven Framework for C/C++ Code Transformations,"Yuan, G.X. and Zhou, Y. and Liu, H. and Yan, C.",Procedia Computer Science,2022,"The main goal of this paper is to discuss how we establish the framework of CAFE system by applying the hologram approach in Fintech which is suitable for Chinese markets, and how our CAF system is able to resolve the current three major issues of rating being falsely high, the differentiation of credit rating grades being insufficient, and the poor performance of predicting early warning. After nearly 30 years of rapid development in China's financial industry, the current domestic credit rating market is facing at least these three problems: 1) the rating is falsely high; 2) the differentiation of credit rating grades is insufficient; and 3) the poor performance of predicting early warning and related issues. These issues and problems show that by so far there is no Credit Assessment System suitable for China with BBB credit rating grade as the basic investment level in accordance with international standard for capital markets in the practice, which have severely restricted the healthy development of Chinas capital market. From the perspective of financial technical processing, the main reason for this phenomenon is due to a simple fact that there is not enough default (bad) samples available from the markets in China, which led to the difficulty for domestic and foreign rating agencies to establish reliable credit rating assessment criteria for entities and bonds/debts for capital markets in China. Thus we must consider how to create a reasonable number of bad samples by using new approach in dealing with non-structured data, which is called hologram approach as a fundamental tool. In this way, it allows us to extract risk features based on the heterogeneous big data from different sources as breakthrough points to establish the so-called CAFE Risk Assessment System (CAFE System). © 2022 The Authors. Published by Elsevier B.V.",10.1016/j.procs.2022.04.006,"School of Economics, Sino-British Blockchain Research Center, Guangxi University, Nanning, 530004, China; Business School, Chengdu University, Chengdu, 610106, China; Business School, Sun Yat-sen University, Guangzhou, 510275, China; Shanghai Hammer Digital Technology Co., Ltd, Shanghai200093, China",Rejected
961,VisminerTD: a tool for automatic identification and interactive monitoring of the evolution of technical debt items,"Agrahari, V. and Chimalakonda, S.",ACM International Conference Proceeding Series,2022,"With the ever-increasing use of games, game developers are expected to write efficient code and support several aspects such as security, maintainability, and performance. However, the continuous need to update the features of games in shorter duration might compel the developers to use anti-patterns, code smells and quick-fix solutions that may affect the functional and non-functional requirements of the game. These bad practices may lead to technical debt, poor program comprehension, and can cause several issues during software maintenance. While there exists empirical research on games, we are not aware of any work on understanding and cataloguing these anti-patterns in the domain of games. Thus, in this paper, we propose a catalogue of game-specific anti-patterns by mining and analyzing 892 commits, 189 issues, and 104 pull requests from 100 open-source GitHub game repositories. We use regular expressions and thematic analysis on this dataset and present a catalogue of ten game-specific anti-patterns along with examples. We see this catalogue as a first step for further empirical research in the domain of games and can help game developers to improve quality of games. © 2022 ACM.",10.1145/3511430.3511436,"Research in Intelligent Software and Human Analytics (RISHA) Lab, Dept. of Computer Science and Engineering, Indian Institute of Technology, Tirupati, India",Rejected
962,Automating Change-Level Self-Admitted Technical Debt Determination,"Ilinski, K.",Entropy,2022,"In this short note we offer a novel quantitative approach to modeling of early stages of firms internalization, namely stages of accumulation of export readiness and their export debut. In particular, we introduce a new model of export readiness and offer an explicit way of how the export readiness can be accounted in the company share price. The model considers export readiness as a non-observable intangible asset that changes a firms asset dynamics. This, in the framework of an option-based debt-equity Merton model, affects both the equity and debt of the company. The approach also allows one to define the contribution of export readiness to equity price and to find a self-consistent quantitative solution to the problem of optimal export strategy and the corresponding optimal firms capital allocation. © 2022 by the author. Licensee MDPI, Basel, Switzerland.",10.3390/e24020173,"National Economics Research Center (NERC), St.-Petersburg University, 7-9-11 Universitetskaya Embankment, St. Petersburg, 199034, Russian Federation; Fusion Group, 8-10 Great George St., London, SW1P 3AE, United Kingdom",Rejected
963,E-Democracy: Can We Model Adequately the Close National Presidential Elections?,"Zabardast, E. and Ebo Bennin, K. and Gonzalez-Huerta, J.",Journal of Software: Evolution and Process,2022,"Context: Technical debt (TD) discusses the negative impact of sub-optimal decisions to cope with the need-for-speed in software development. Code technical debt items (TDI) are atomic elements of TD that can be observed in code artifacts. Empirical results on open-source systems demonstrated how code-smells, which are just one type of TDIs, are introduced and survive during release cycles. However, little is known about whether the results on the survivability of code-smells hold for other types of code TDIs (i.e., bugs and vulnerabilities) and in industrial settings. Goal: Understanding the survivability of code TDIs by conducting an empirical study analyzing two industrial cases and 31 open-source systems from Apache Foundation. Method: We analyzed 133,670 code TDIs (35,703 from the industrial systems) detected by SonarQube (in 193,196 commits) to assess their survivability using survivability models. Results: In general, code TDIs tend to remain and linger for long periods in open-source systems, whereas they are removed faster in industrial systems. Code TDIs that survive over a certain threshold tend to remain much longer, which confirms previous results. Our results also suggest that bugs tend to be removed faster, while code smells and vulnerabilities tend to survive longer. © 2022 The Authors. Journal of Software: Evolution and Process published by John Wiley & Sons Ltd.",10.1002/smr.2425,"Software Engineering Research Lab (SERL), Blekinge Institute of Technology, Blekinge, Sweden; Information Technology Group, Wageningen University and Research, Wageningen, Netherlands",Accepted
964,The technical debt dataset,"Tan, J. and Feitosa, D. and Avgeriou, P.",Information and Software Technology,2022,"Context: Technical Debt (TD) can be paid back either by those that incurred it or by others. We call the former self-fixed TD, and it can be particularly effective, as developers are experts in their own code and are well-suited to fix the corresponding TD issues. Objective: The goal of our study is to investigate self-fixed technical debt, especially the extent in which TD is self-fixed, which types of TD are more likely to be self-fixed, whether the remediation time of self-fixed TD is shorter than non-self-fixed TD and how development behaviors are related to self-fixed TD. Method: We report on an empirical study that analyzes the self-fixed issues of five types of TD (i.e., Code, Defect, Design, Documentation and Test), captured via static analysis, in more than 44,000 commits obtained from 20 Python and 16 Java projects of the Apache Software Foundation. Results: The results show that about half of the fixed issues are self-fixed and that the likelihood of contained TD issues being self-fixed is negatively correlated with project size, the number of developers and total issues. Moreover, there is no significant difference of the survival time between self-fixed and non-self-fixed issues. Furthermore, developers are more keen to pay back their own TD when it is related to lower code level issues, e.g., Defect Debt and Code Debt. Finally, developers who are more dedicated to or knowledgeable about the project contribute to a higher chance of self-fixing TD. Conclusions: These results can benefit both researchers and practitioners by aiding the prioritization of TD remediation activities and refining strategies within development teams, and by informing the development of TD management tools. © 2021",10.1016/j.infsof.2021.106738,"Faculty of Science and Engineering, University of Groningen, Netherlands; Campus Fryslân, University of Groningen, Netherlands",Accepted
965,Mitigating technical and architectural debt with sonargraph,"Aragão, B.S. and Andrade, R.M.C. and Santos, I.S. and Castro, R.N.S. and Lelli, V. and Darin, T.G.R.",Software Quality Journal,2022,"When deadlines and resources of software projects become scarce, testing is usually in the first row to have its activities aborted or reduced; however, if defects cannot be found, product quality can be affected. In the software development process, aborted or reduced activities that can bring short-term benefits, but can be harmful to the project in the long run, are considered Technical Debt (TD) and, when the TDs impact testing activities, they are called Test Debt. Although there are several studies dealing with Test Debt, current solutions often deal with specific types of tests (e.g., exploratory and automated tests) and do not address the whole software testing process. Aiming to fill these gaps, this work then proposes a Test Debt Catalog, called TestDCat, with subtypes of Test Debts and Technical Debt management activities. This catalog is built based on the results of an empirical study, a literature review and semi-structured interviews conducted with practitioners who perform testing activities on five projects from industry. For the TestDCat evaluation, a case study is conducted in real projects in order to identify if the catalog is user-friendly and if its use helps the Test Debt management during the execution of test activities in these software development projects. © 2021, Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s11219-020-09533-y,"Group of Computer Networks, Software Engineering, and Systems (GREat), Federal University of Ceará (UFC), Ceará, Fortazela, Brazil",Accepted
966,A Study on Architectural Smells Prediction,"Bedi, J. and Kaur, K.",International Journal of Information Technology (Singapore),2022,"Technical debt is the debt in the software development incurred due to preference of short term deadlines over the strategic ones. Analysis of the factors effecting technical debt (TD) is need of the hour from business as well as technical context. Based on the state of the art described in the literature, we have tried to identify the most contributing factors effecting TD. For doing so various statistical tools and models are used. The paper studies different factors effecting technical debt specifically commit frequency, LOC, coverage, code smells and reputation of the contributor. To unveil affect of these variables, SonarQube tool is used to find the technical debt and related metrics. The dataset taken for the purpose is open source version control system from Github. It is proved through the study that as we increase the commit frequency, lines of code, coverage and code smells there is corresponding considerable change in the technical debt as well. While, the reputation factors viz., stars, followers and repositories do not affect technical debt so considerably. The regression model of reputation and TD is also developed. © 2020, Bharati Vidyapeeth's Institute of Computer Applications and Management.",10.1007/s41870-020-00487-9,"BBK DAV College For Women, Lawrence Road, Amritsar, India; Guru Nanak Dev University, Amritsar, India",Accepted
967,Accounts receivable management in Digital transformation,"Jarmulska, B.",Journal of Forecasting,2022,"This study seeks to answer whether it is possible to design an effective and useful machine learning-based early warning system signaling a risk of fiscal stress in the near future. To do so, multiple models based on econometric logit and the random forest models are designed and compared. Using a dataset of 20 annual frequency variables pertaining to 43 advanced and emerging countries during 19922018, the results confirm the possibility of obtaining an effective model, which correctly predicts 7080% of fiscal stress events and tranquil periods. The random forest-based early warning model outperforms logit models both in terms of aggregate forecasting properties and when applied to an example of the euro area sovereign debt crisis. While the very effective random forest model is commonly understood to provide lower interpretability than logit models do, this study employs tools that can be used to provide useful information for understanding what is behind the black-box. These tools can provide information on the most important explanatory variables and on the shape of the relationship between these variables and the outcome classification. Thus, the study contributes to the discussion on the usefulness of machine learning methods in economics. © 2021 John Wiley & Sons, Ltd.",10.1002/for.2806,"European Central Bank, Frankfurt, Germany; Warsaw School of Economics, Warsaw, Poland",Rejected
968,Metamodel deprecation to manage technical debt in model co-evolution,"Xue, L. and Barua, A. and Constant, N. and Al-Rfou, R. and Narang, S. and Kale, M. and Roberts, A. and Raffel, C.",Transactions of the Association for Computational Linguistics,2022,"Most widely used pre-trained language models operate on sequences of tokens corresponding to word or subword units. By comparison, token-free models that operate directly on raw text (bytes or characters) have many benefits: They can process text in any language out of the box, they are more robust to noise, and they minimize technical debt by removing complex and error-prone text preprocessing pipelines. Because byte or character sequences are longer than token sequences, past work on token-free models has often introduced new model architectures designed to amortize the cost of operating directly on raw text. In this paper, we show that a standard Transformer architecture can be used with minimal modifications to process byte sequences. We characterize the trade-offs in terms of parameter count, training FLOPs, and inference speed, and show that byte-level models are competitive with their token-level counterparts. We also demonstrate that byte-level models are significantly more robust to noise and perform better on tasks that are sensitive to spelling and pronunciation. As part of our contribution, we release a new set of pre-trained byte-level Transformer models based on the T5 architecture, as well as all code and data used in our experiments.1 © 2022 Association for Computational Linguistics. Distributed under a CC-BY 4.0 license.",10.1162/tacl_a_00461,"Google Research, United States",Rejected
969,Investigating on the impact of software clones on technical debt,"Azuma, H. and Matsumoto, S. and Kamei, Y. and Kusumoto, S.",Empirical Software Engineering,2022,"In software development, ad hoc solutions that are intentionally implemented by developers are called self-admitted technical debt (SATD). Because the existence of SATD spreads poor implementations, it is necessary to remove it as soon as possible. Meanwhile, container virtualization has been attracting attention in recent years as a technology to support infrastructure such as servers. Currently, Docker is the de facto standard for container virtualization. In Docker, a file describing how to build a container (Dockerfile) is a set of procedural instructions; thus, it can be considered as a kind of source code. Moreover, because Docker is a relatively new technology, there are few developers who have accumulated good or bad practices for building Docker container. Hence, it is likely that Dockerfiles contain many SATDs, as is the case with general programming language source code analyzed in previous SATD studies. The goal of this paper is to categorize SATDs in Dockerfiles and to share knowledge with developers and researchers. To achieve this goal, we conducted a manual classification for SATDs in Dockerfile. We found that about 3.0% of the comments in Dockerfile are SATD. In addition, we have classified SATDs into five classes and eleven subclasses. Among them, there are some SATDs specific to Docker, such as SATDs for version fixing and for integrity check. The three most common classes of SATD were related to lowering maintainability, testing, and defects. © 2022, The Author(s).",10.1007/s10664-021-10081-7,"Graduate School of Information Science and Technology, Osaka University, Osaka, Japan; Faculty of Information Science and Electrical Engineering, Kyushu University, Fukuoka, Japan",Accepted
970,Extraction and interpretation of textual data from Czech insolvency proceedings,"Mahdavi-Hezaveh, R. and Ajmeri, N. and Williams, L.",Information and Software Technology,2022,"Context: Using feature toggles is a technique to turn a feature either on or off in program code by checking the value of a variable in a conditional statement. This technique is increasingly used by software practitioners to support continuous integration and continuous delivery (CI/CD). However, using feature toggles may increase code complexity, create dead code, and decrease the quality of a codebase. Objective: The goal of this research is to aid software practitioners in structuring feature toggles in the codebase by proposing and evaluating a set of heuristics and corresponding complexity, comprehensibility, and maintainability metrics based upon an empirical study of open source repositories. Method: We identified 80 GitHub repositories that use feature toggles in their development cycle. We conducted a qualitative analysis using 60 of the 80 repositories to identify heuristics and metrics. Then, we conducted a survey of practitioners of 80 repositories to obtain their feedback that the proposed heuristics can be used to guide the structure of feature toggles and to reduce technical debt. We also conducted a case study of the all 80 repositories to analyze relations between heuristics and metrics. Results: From the qualitative analysis, we proposed 7 heuristics to guide structuring feature toggles and identified 12 metrics to support the principles embodied in the heuristics. Our survey result shows that practitioners agree that managing feature toggles is difficult, and using identified heuristics can reduce technical debt. Based on our case study, we find a relationship between the adoption of heuristics and the values of metrics. Conclusions: Our results support that practitioners should have self-descriptive feature toggles, use feature toggles sparingly, avoid duplicate code in using feature toggles, and ensure complete removal of a feature toggle. © 2022 Elsevier B.V.",10.1016/j.infsof.2021.106813,"North Carolina State University, Raleigh, NC, United States; University of Bristol, Bristol, United Kingdom",Rejected
971,Refactoring verification using model transformation,"Yu, J. and Zhao, K. and Liu, J. and Liu, X. and Xu, Z. and Wang, X.",Journal of Systems and Software,2022,"Self-admitted technical debt (SATD) refers to a specific type of technical debt that is introduced intentionally in the software development and maintenance processes. SATD enables practitioners to take some temporary solutions instead of making comprehensive decisions, which will lead to the high complexity of the software. However, most existing studies relied on manual methods for detecting SATDs. A recent study proposed a method HATD that used a hybrid attention-based method to automatically detect SATDs and it achieved the state-of-the-art performance. However, HATD mainly focused on the locality of the comment instances and lacked of the relationship between long-distance and discontinuous comment instances. To address such an issue, in this work, we propose a novel approach named GGSATD. Specifically, GGSATD first builds the graph for comment instances and then employs the gated graph neural network to iteratively update node representation. The global representation can be obtained by the soft attention mechanism and pooling operation. Experiments on 10 projects show that our GGSATD method obtains promising performance against five baseline methods in both within-project and cross-project scenarios. Extended experiments on seven real-world projects illustrate the effectiveness of our GGSATD method. © 2022 Elsevier Inc.",10.1016/j.jss.2022.111219,"School of Computer Science, Wuhan University, Wuhan, China; School of Information Technology, Deakin University, Geelong, Australia; School of Big Data and Software Engineering, Chongqing University, Chongqing, China",Accepted
972,The use of facebook to promote engagement with local governments in Spain,"AlOmar, E.A. and Liu, J. and Addo, K. and Mkaouer, M.W. and Newman, C. and Ouni, A. and Yu, Z.",Automated Software Engineering,2022,"Commit messages are the atomic level of software documentation. They provide a natural language description of the code change and its purpose. Messages are critical for software maintenance and program comprehension. Unlike documenting feature updates and bug fixes, little is known about how developers document their refactoring activities. Specifically, developers can perform multiple refactoring operations, including moving methods, extracting classes, renaming attributes, for various reasons, such as improving software quality, managing technical debt, and removing defects. Yet, there is no systematic study that analyzes the extent to which the documentation of refactoring accurately describes the refactoring operations performed at the source code level. Therefore, this paper challenges the ability of refactoring documentation, written in commit messages, to adequately predict the refactoring types, performed at the commit level. Our analysis relies on the text mining of commit messages to extract the corresponding features (i.e., keywords) that better represent each class (i.e., refactoring type). The extraction of text patterns, specific to each refactoring type (e.g., rename, extract, move, inline, etc.) allows the design of a model that verifies the consistency of these patterns with their corresponding refactoring. Such verification process can be achieved via automatically predicting, for a given commit, the method-level type of refactoring being applied, namely Extract Method, Inline Method, Move Method, Pull-up Method, Push-down Method, and Rename Method. We compared various classifiers, and a baseline keyword-based approach, in terms of their prediction performance, using a dataset of 5004 commits. Our main findings show that the complexity of refactoring type prediction varies from one type to another. Rename Method and Extract Method were found to be the best documented refactoring activities, while Pull-up Method, and Push-down Method were the hardest to be identified via textual descriptions. Such findings bring the attention of developers to the necessity of paying more attention to the documentation of these types. © 2021, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10515-021-00314-w,"Rochester Institute of Technology, Rochester, United States; Stevens Institute of Technology, Hoboken, United States; University at Buffalo, Buffalo, United States; University of Maryland, College Park, United States; ETS Montreal, University of Quebec, Montreal, Canada",Rejected
973,"Spekl: A layered system for specification authoring, sharing, and usage","Yu, Z. and Fahid, F.M. and Tu, H. and Menzies, T.",IEEE Transactions on Software Engineering,2022,"Keeping track of and managing Self-Admitted Technical Debts (SATDs) are important to maintaining a healthy software project. This requires much time and effort from human experts to identify the SATDs manually. The current automated solutions do not have satisfactory precision and recall in identifying SATDs to fully automate the process. To solve the above problems, we propose a two-step framework called Jitterbug for identifying SATDs. Jitterbug first identifies the 'easy to find' SATDs automatically with close to 100 percent precision using a novel pattern recognition technique. Subsequently, machine learning techniques are applied to assist human experts in manually identifying the remaining 'hard to find' SATDs with reduced human effort. Our simulation studies on ten software projects show that Jitterbug can identify SATDs more efficiently (with less human effort) than the prior state-of-the-art methods. © 1976-2012 IEEE.",10.1109/TSE.2020.3031401,"Rochester Institute of Technology, Department of Software Engineering, Rochester, NY  14623, United States; North Carolina State University, Department of Computer Science, Raleigh, NC  27695, United States",Accepted
974,SAMWISE: An early career discovery platform for STEM fields,"Kashiwa, Y. and Nishikawa, R. and Kamei, Y. and Kondo, M. and Shihab, E. and Sato, R. and Ubayashi, N.",Information and Software Technology,2022,"Technical debt is a sub-optimal state of development in projects. In particular, the type of technical debt incurred by developers themselves (e.g., comments that mean the implementation is imperfect and should be replaced with another implementation) is called self-admitted technical debt (SATD). In theory, technical debt should not be left for a long period because it accumulates more cost over time, making it more difficult to process. Accordingly, developers have traditionally conducted code reviews to find technical debt. In fact, we observe that many SATD comments are often introduced during modern code reviews (MCR) that are light-weight reviews with web applications. However, it is uncertain about the nature of SATD comments that are introduced in the review process: impact, frequency, characteristics, and triggers. Herein, this study empirically examines the relationship between SATD and MCR. Our case study of 156,372 review records from the Qt and OpenStack systems shows that (i) review records involving SATD are about 6%7% less likely to be accepted by reviews than those without SATD; (ii) review records involving SATD tend to require two to three more revisions compared with those without SATD; (iii) 2848% of SATD comments are introduced during code reviews; (iv) SATD during reviews works for communicating between authors and reviewers; and (v) 20% of the SATD comments are introduced due to reviewers requests. © 2022 Elsevier B.V.",10.1016/j.infsof.2022.106855,"Kyushu University, Japan; Concordia University, Canada; The University of Tokyo, Japan",Accepted
975,"Code Smells Analysis Mechanisms, Detection Issues, and Effect on Software Maintainability","Rahman, M.R. and Imtiaz, N. and Storey, M.-A. and Williams, L.",Empirical Software Engineering,2022,"Checked-in secrets in version-controlled software projects pose security risks to software and services. Secret detection tools can identify the presence of secrets in the code, commit changesets, and project version control history. As these tools can generate false positives, developers are provided with mechanisms to bypass the warnings generated from these tools. Providing this override mechanism can result in developers sometimes exposing secrets in software repositories. The goal of this article is to aid software security practitioners in understanding why secrets are checked into repositories, despite being warned by tools, through an industrial case study of analysis of usage data of a secret detection tool and a survey of developers who bypassed the tool alert. In this case study, we analyzed the usage data of a checked-in secret detection tool used widely by a software company and we surveyed developers who bypassed the warnings generated by the tool. From the case study, we found that, despite developers classified 50% of the warning as false positive, developers also bypassed the warning due to time constraints, working with non-shipping projects, technical challenges of eliminating secrets completely from the version control history, technical debts, and perceptions that check-ins are low risk. We advocate practitioners and researchers to investigate the findings of our study further to improve secret detection tools and related development practices. We also advocate that organizations should insert secondary checks, as is done by the company we studied, to capture occasions where developers incorrectly bypass secret detection tools. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-021-10109-y,"North Carolina State University, Raleigh, NC, United States; University of Victoria, Victoria, BC, Canada",Rejected
976,Modelling drivers of Brazilian agricultural change in a telecoupled world,"Tu, H. and Menzies, T.",Empirical Software Engineering,2022,"Keeping track of and managing Self-Admitted Technical Debts (SATDs) is important for maintaining a healthy software project. Current active-learning SATD recognition tool involves manual inspection of 24% of the test comments on average to reach 90% of the recall. Among all the test comments, about 5% are SATDs. The human experts are then required to read almost a quintuple of the SATD comments which indicates the inefficiency of the tool. Plus, human experts are still prone to error: 95% of the false-positive labels from previous work were actually true positives. To solve the above problems, we propose DebtFree, a two-mode framework based on unsupervised learning for identifying SATDs. In mode1, when the existing training data is unlabeled, DebtFree starts with an unsupervised learner to automatically pseudo-label the programming comments in the training data. In contrast, in mode2 where labels are available with the corresponding training data, DebtFree starts with a pre-processor that identifies the highly prone SATDs from the test dataset. Then, our machine learning model is employed to assist human experts in manually identifying the remaining SATDs. Our experiments on 10 software projects show that both models yield statistically significant improvement in effectiveness over the state-of-the-art automated and semi-automated models. Specifically, DebtFree can reduce the labeling effort by 99% in mode1 (unlabeled training data), and up to 63% in mode2 (labeled training data) while improving the current active learners F1 relatively to almost 100%. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-022-10121-w,"Department of Computer Science, North Carolina State University, Raleigh, United States",Accepted
977,An architectural smells detection tool for C and C++ projects,"Ahmadi, H. and Ashtiani, M. and Azgomi, M.A. and Saheb-Nassagh, R.",Information and Software Technology,2022,"Context: Nowadays, technical debt has become a very important issue in software project management. The main mechanism to repay this debt is through refactoring. Refactoring software projects usually comes at a high cost. As a result, researchers have always looked for ways to minimize this cost, and a good potential candidate to reduce the cost of a process is to automate it. Objective: One of the automatic software refactoring methods that recently has received a lot of attention is based on search-based software engineering (SBSE) methods. Although because of comprehensiveness and versatility SBSE is considered an appropriate method for automatic refactoring, it has its downsides, the most important of which are the uncertainty of the results and the exponential execution time. Method: In this research, a solution is proposed inspired by search-based refactoring while taking advantage of exploitation in reinforcement learning techniques. This work aims to solve the uncertainty problems and execution time for large programs. In the proposed approach, the problem of uncertainty is solved by targeting the selection of refactoring actions used in the search-based approach. Also, due to the reduction of the dependency between the choice of the appropriate refactoring and its execution time, the time problem in large software refactoring has been greatly improved. Results: Amongst the performed evaluations and specifically for the refactoring of the largest case study, the proposed approach managed to increase the accuracy to more than twice of the SBSE refactoring approaches, while reducing the execution time of refactoring by more than 98%. Conclusion: The results of the tests show that with increasing the volume and size of the software, the performance of the proposed approach also improves compared to the methods based on SBSE, both in terms of reducing technical debt and speeding up the refactoring process. © 2022",10.1016/j.infsof.2022.106893,"School of Computer Engineering, Iran University of Science and Technology, Tehran, Iran",Accepted
978,"From lasagna to spaghetti, a decision model to manage defect debt","Ye, Y. and Lu, X. and Lu, T.",Information and Management,2022,"Social value-oriented consumers perform more sustainable consumption than conventional consumers do because consumers choices reflect their latent social values on environmental protection. However, whether sustainable consumption prompts more social value-oriented behaviors outside the consumption domain remains uncertain. The increased availability of consumer-level big data presents an opportunity to investigate consumers cross-domain behavior subsequent to sustainable consumption, which broadens the comprehension of sustainable consumption by going beyond the boundary of consumption behavior. Supported by a joint dataset comprising information on both consumers consumption behavior and their microloan repayment behavior, this study examines the effects of sustainable consumption on consumers subsequent debt default behavior to empirically test the cross-domain spillover effects of sustainable consumption behavior. The results suggest that the default probability of green consumers overall was 4.34 % lower than that of nongreen consumers, even though this positive effect on repayment disappears when sustainable consumption is for health reasons. The findings contribute to research on sustainable consumption by providing empirical evidence indicating that sustainable consumption has positive spillover effects in other domains. The results also provide an alternative perspective for identifying high-quality borrowers for microloan platforms. © 2020 Elsevier B.V.",10.1016/j.im.2020.103288,"Fudan University, Shanghai, China; Carnegie Mellon University, United States",Rejected
979,Architectural Technical Debt Identification: Moving Forward,"Sánchez, C. and Maldonado, S. and Vairetti, C.",Decision Support Systems,2022,"Debt collection is a very important business application of predictive analytics. This task consists of foreseeing repayment chances of late payers. In this sense, contact centers have a central role in debt collection since it improves profitability by turning monetary losses into a direct benefit to banks and other financial institutions. In this paper, we study the influence of contact center variables in predictive models for debt collection, which are combined with the financial information of late payers. We explore five different variants of three predictive analytics tasks: (1) the probability of successfully contacting a late payer, (2) the probability of achieving a contact that results in a promise to pay a debt, and (3) the probability that a defaulter repays his/her arrears. Four research questions are developed in the context of debt collection analytics and empirically discussed using data from a Chilean financial institution. Our results show the positive impact of the combination of the two data sources in terms of predictive performance, confirming that valuable information on late payers can be collected from contact centers. © 2022 Elsevier B.V.",10.1016/j.dss.2022.113812,"Universidad de los Andes, Facultad de Ingeniería y Ciencias Aplicadas, Chile; Department of Management Control and Information Systems, School of Economics and Business, University of Chile, Santiago, Chile; Instituto Sistemas Complejos de Ingenier a (ISCI), Chile",Rejected
980,Understanding test debt,"Vidoni, M. and Codabux, Z. and Fard, F.H.",Journal of Systems and Software,2022,"Code ridden with Technical Debt (TD) has motivated software engineers to keep the quality of systems under control to ease future maintenance tasks. In the last decade, there have been significant advances regarding TD management (TDM). However, research about incorporating TDM into the software development lifecycle remains scarce, and existing approaches aim to control TD through different processes. This proposal leverages the concept of infinite games from game theory to posit a different perspective. We argue that TD cannot be entirely removed and that its effects or consequences cannot be considered managed even when an occurrence (i.e., a smell) is repaid. Rather than using a mathematical approach, we present TDM in terms of the four components of infinite games (players, rules, goals, and time), its tradeoffs and relationships, to discuss its potential impact on TDM activities. As this is an incipient area, our goal is to motivate a change of mindset regarding TDM, stimulating reflective thinking and thus, posing a new line of research. We conclude with a series of potential research questions organised into three key areas. © 2022 Elsevier Inc.",10.1016/j.jss.2022.111336,"Australian National University, Australia; University of Saskatchewan, Canada; University of British Columbia, Canada",Accepted
981,Subjective and assessable exploration of India-Israel defense relationship,"Mattioli, J. and Pedroza, G. and Khalfaoui, S. and Leroy, B.",CEUR Workshop Proceedings,2022,"The development of AI-based systems entails a manifold of doubled-hard challenges. They are mainly due, on one side, to the technical debt of involved engineering disciplines (systems, safety, security), their inherent complexity, their yet-to-solve concerns, and, on the other side, to the emergent risks of AI autonomy, the trade-offs between AI heuristics vs. required determinism, and, overall, the difficulty to define, characterize, assess and prove that AI-based systems are sufficiently safe and trustworthy. Despite the vast amount of research contributions and the undeniable progress in many fields over the last decades, a gap still exists between experimental and certifiable AIs. The present paper aims at bridging this gap by design. Considering engineering paradigms as a basis to specify, relate and infer knowledge, a new paradigm is proposed to achieve AI certification. The proposed paradigm recognizes existing AI approaches, namely connectionist, symbolic, and hybrid, and proffers to leverage their essential traits captured as knowledge. A conceptual meta-body is thus obtained respectively containing categories for Data-, Knowledge- and Hybrid- driven. Since it is observed that research strays from Knowledge-driven and it rather strives for Data-driven approaches, our paradigm calls for empowering Knowledge Engineering relying upon Hybrid-driven approaches to improve their coupling and benefit from their complementarity. Copyright © 2022 for this paper by its authors. Use permitted under Creative Commons License Attribution 4.0 International (CC BY 4.0).",,"Thales, France; CEA List, U. Paris-Saclay, France; Valeo, France; Renault, France; IRT SystemX, France",Rejected
982,Legal disputes resolved via game theoretic methods,"Santamaria, I. and Larrucea, X. and Fernandez-Gauna, B.",Journal of Software: Evolution and Process,2022,"With the advent of regulations protecting users such as the General Data Protection Regulation, security and privacy concerns are playing a new role in small settings such as in very small entities. Their relevance is increasing, and privacy is being considered a Troy horse in software developments. In fact, privacy is a part of software architectural decisions, and they must be considered as a technical debt. The contributions of this paper are the following: a privacy debt definition with a principal and an interest, privacy-related activities to be considered within the ISO/IEC 29110 basic profile, and the use of the net present value within this context. All these contributions help us to integrate privacy debt and VSE's software developments. © 2022 John Wiley & Sons, Ltd.",10.1002/smr.2437,"TECNALIA Basque Research and Technology Alliance (BRTA), Bizkaia, Spain; Universidad del País Vasco/Euskal Herriko Unibertsitatea, UPV/EHU, Leioa, Spain",Rejected
983,A fluctuation-based modelling approach to quantification of the technical debt on mobile cloud-based service level,"Ampatzoglou, A. and Chatzigeorgiou, A. and Arvanitou, E.M. and Bibi, S.",Software - Practice and Experience,2022,"Technical debt management is of paramount importance for the software industry, since maintenance is the costlier activity in the software development lifecycle. In this article, we present the SDK4ED platform that enables efficient technical debt management (i.e., measurement, evolution analysis, prevention, etc.) at the code level, and evaluate its capabilities in an industrial setting. The SDK4ED platform is the outcome of a 3-year project, including several software industries. Since, the research rigor of the approaches that reside in SDK4ED have already been validated, in this work we focus: (a) on the presentation of the platform per se; (b) the evaluation of its industrial relevance; (c) the usability of the platform; as well as (d) the financial implications of its usage. © 2022 John Wiley & Sons Ltd.",10.1002/spe.3093,"Department of Applied Informatics, University of Macedonia, Thessaloniki, Greece; Department of Electrical and Computer Engineering, University of Western Macedonia, Kozani, Greece",Accepted
984,Managing technical debt in enterprise software packages,"Poddar, M. and Banerjee, T. and Raychaudhuri, A.",International Journal of Information and Decision Sciences,2022,"Borrowing for investment in either physical or human capital promotes growth while that for consumption or debt repayment may lead to so called 'debt-trap' for the households. The present paper probes deeper into the decision-making process of the households regarding choice between these alternative borrowing. The data comes from All India Debt and Investment Survey (NSS 70th round). These methods used are Cragg's Box-Cox double hurdle model and instrumental variable (IV) probit model. Our study shows the decision to borrow for investment purposes depends on such factors as gender, religion, location, education, asset position as well as on the status of financial inclusion of households. The decision to borrow for repayment of existing debt is most prevalent among urban educated households in addition to land-owning rural borrowers. Copyright © 2022 Inderscience Enterprises Ltd.",10.1504/IJIDS.2022.122720,"Department of Economics, Jadavpur University, 188, Raja S.C. Mallick Road, West Bengal, Kolkata, 700032, India",Rejected
985,Agile - Challenges from a scrum project,"Jianyu, G. and Wenzhi, P. and Mingqing, J. and Dong, Z.",Security and Communication Networks,2022,"The current market economic environment is constantly changing, and real estate companies are constantly facing various risks in the course of their operations, which have created some obstacles to real estate companies' normal financial activities, and the occurrence of a debt crisis may reduce the company's expected benefits. If real estate companies can identify debt risks early on and take effective steps to avoid them, they will have a better chance of avoiding debt problems. Therefore, this study introduces RBF neural network technology to construct a new real estate debt crisis early warning model. This study selects 20 indicators, constructs the financial early warning index system of listed companies, collects the financial data of 86 real estate listed companies from 2016 to 2020, uses the principal component analysis method to reduce the dimension of the collected financial data, and uses the reduced dimension data to construct the real estate debt crisis early warning model of RBF neural network to realize the real estate debt crisis early warning. The empirical results show that the early warning model constructed in this study can effectively warn the real estate debt crisis, effectively analyze the development trend of real estate companies, help to better prevent the debt crisis of real estate enterprises, and improve the comprehensive benefits of real estate enterprises. © 2022 Gui Jianyu et al.",10.1155/2022/1551883,"School Of Management And Economics, Jingdezhen Ceramic University, Jingdezhen, 333403, China; Department Of Planning & Financial Affairs, Jingdezhen Ceramic University, Jingdezhen, 333403, China; Institute Of Political Science In Sichuan, Academy Of Social Sciences, Chengdu, 610000, China",Rejected
986,Exploratory testing as a source of technical debt,"Shukla, R.M. and Cartlidge, J.","2022 IEEE 12th Annual Computing and Communication Workshop and Conference, CCWC 2022",2022,"Across all sectors, organizations attempt to make efficiency savings and performance improvements by incorporating machine learning (ML) into commercial application services. However, in comparison to traditional software applications, design, deployment, and maintenance of ML applications is more complicated. In particular, ML introduces new challenges of data availability, concept drift, scalability, and technical debt. In this paper, we introduce some of the practical challenges that arise when deploying ML applications, and describe potential solutions. Our analysis is based on experience designing and deploying a commercial spend classification service. © 2022 IEEE.",10.1109/CCWC54503.2022.9720900,"University of Bristol, Department of Computer Science, United Kingdom; Claritum Limited, Bath, United Kingdom",Rejected
987,Towards studying the evolution of technical debt in the Python projects from the apache software ecosystem,"Guo, Y. and Li, Y. and Qian, Y.",Information Processing and Management,2022,"The research assesses local government debt risks in China with deep learning methods. We perform natural language processing and sentiment classification on all publicly available prefecture-level governments annual work reports from the previous three years. Then, for each of these cities, we calculated sentiment scores related to debt risks and examined the regional distribution of risks. Our empirical findings indicate that special attention should be paid to China's inland areas, where local government debt risks are highly concentrated. This paper extends the existing literature on discourse analysis with quantitative methods to the research of political economy. © 2022 Elsevier Ltd",10.1016/j.ipm.2022.102948,"School of Economics and Management, Tongji University, Shanghai, 200092, China; School of International and Public Affairs, Shanghai Jiao Tong University, Shanghai, 200030, China; School of Statistics and Management, Shanghai University of Finance and Economics, Shanghai, 200083, China",Rejected
988,Software architecture reconstruction and compliance checking: A case study,"Khan, A. and Siddiqui, I.F. and Shaikh, M. and Anwar, S. and Shaikh, M.","7th International Conference on Digital Arts, Media and Technology, DAMT 2022 and 5th ECTI Northern Section Conference on Electrical, Electronics, Computer and Telecommunications Engineering, NCON 2022",2022,"In recent years, IoT and machine learning solutions have garnered immense popularity with the rise of industry 4.0. It is extremely important to document system requirements to deliver solutions that meet customer demands and increase satisfaction. However, the inclusion of non-functional requirements (NFRs) in software systems is either outright neglected or they are introduced in the later stages of the software development lifecycle, which often leads to architectural debt and, in the worst-case scenario, project failure. In the machine learning context, the poor handling of non-functional requirements affects architectural decision-making, which can potentially cripple the resulting system. Furthermore, our knowledge of existing NFRs no longer applies in this context due to the unique quality attribute concerns presented by the ML systems. This work aims to review the relationship between requirements engineering and software architecture w.r.t machine learning and present recently proposed methodologies for documenting and handling NFRs to deliver quality software systems. Three recent methodologies were also highlighted and compared. © 2022 IEEE.",10.1109/ECTIDAMTNCON53731.2022.9720403,"Mehran University of Engineering and Technology, Dept. of Software Engineering, Jamshoro, Pakistan",Rejected
989,Variability mining of technical architectures,"Reis, J.P. and Abreu, F.B. and Carneiro, G.F.",Empirical Software Engineering,2022,"Code smells are seen as major source of technical debt and, as such, should be detected and removed. However, researchers argue that the subjectiveness of the code smells detection process is a major hindrance to mitigate the problem of smells-infected code. This paper presents the results of a validation experiment for the Crowdsmelling approach proposed earlier. The latter is based on supervised machine learning techniques, where the wisdom of the crowd (of software developers) is used to collectively calibrate code smells detection algorithms, thereby lessening the subjectivity issue. In the context of three consecutive years of a Software Engineering course, a total crowd of around a hundred teams, with an average of three members each, classified the presence of 3 code smells (Long Method, God Class, and Feature Envy) in Java source code. These classifications were the basis of the oracles used for training six machine learning algorithms. Over one hundred models were generated and evaluated to determine which machine learning algorithms had the best performance in detecting each of the aforementioned code smells. Good performances were obtained for God Class detection (ROC= 0.896 for Naive Bayes) and Long Method detection (ROC= 0.870 for AdaBoostM1), but much lower for Feature Envy (ROC= 0.570 for Random Forrest). The results suggest that Crowdsmelling is a feasible approach for the detection of code smells. Further validation experiments based on dynamic learning are required to a comprehensive coverage of code smells to increase external validity. © 2022, The Author(s), under exclusive licence to Springer Science+Business Media, LLC, part of Springer Nature.",10.1007/s10664-021-10110-5,"ISTAR-Iscte, Instituto Universitário de Lisboa, Lisboa, Portugal; Universidade Salvador (UNIFACS), Bahia, Salvador, Brazil",Accepted
990,Managing software projects by the buglione-Trudel matrix,"Lamprakos, C.P. and Marantos, C. and Siavvas, M. and Papadopoulos, L. and Tsintzira, A.-A. and Ampatzoglou, A. and Chatzigeorgiou, A. and Kehagias, D. and Soudris, D.",Information and Software Technology,2022,"Context: The definition and assessment of software quality have not converged to a single specification. Each team may formulate its own notion of quality and tools and methodologies for measuring it. Software quality can be improved via code changes, most often as part of a software maintenance loop. Objective: This manuscript contributes towards providing decision support for code change selection given a) a set of preferences on a software product's qualities and b) a pool of heterogeneous code changes to select from. Method: We formulate the problem as an instance of Multiple-Criteria Decision Making, for which we provide both an abstract flavor and a prototype implementation. Our prototype targets energy efficiency, technical debt and dependability. Results: This prototype achieved inconsistent results, in the sense of not always recommending changes reflecting the decision maker's preferences. Encouraged from some positive cases and cognizant of our prototype's shortcomings, we propose directions for future research. Conclusion: This paper should thus be viewed as an imperfect first step towards quality-driven, code change-centered decision support and, simultaneously, as a curious yet pragmatic enough gaze on the road ahead. © 2022 Elsevier B.V.",10.1016/j.infsof.2022.106851,"School of Electrical and Computer Engineering, National Technical University of Athens, Greece; Centre for Research and Technology Hellas, Thessaloniki, Greece; Department of Applied Informatics, University of Macedonia, Greece",Rejected
991,Time to pay up: Technical debt from a software quality perspective,"AlOmar, E.A. and Christians, B. and Busho, M. and AlKhalid, A.H. and Ouni, A. and Newman, C. and Mkaouer, M.W.",Science of Computer Programming,2022,"Self-Admitted Technical Debt (SATD) is a metaphorical concept to describe the self-documented addition of technical debt to a software project in the form of source code comments. SATD can linger in projects and degrade source-code quality, but it can also be more visible than unintentionally added or undocumented technical debt. Understanding the implications of adding SATD to a software project is important because developers can benefit from a better understanding of the quality trade-offs they are making. However, empirical studies, analyzing the survivability and removal of SATD comments, are challenged by potential code changes or SATD comment updates that may interfere with properly tracking their appearance, existence, and removal. In this paper, we propose SATDBailiff, a tool that uses an existing state-of-the-art SATD detection tool, to identify SATD in method comments, then properly track their lifespan. SATDBailiff is given as input links to open source projects, and its output is a list of all identified SATDs, and for each detected SATD, SATDBailiff reports all its associated changes, including any updates to its text, all the way to reporting its removal. The goal of SATDBailiff is to aid researchers and practitioners in better tracking SATDs instances, and providing them with a reliable tool that can be easily extended. SATDBailiff was validated using a dataset of previously detected and manually validated SATD instances. SATDBailiff is publicly available as an open source, along with the manual analysis of SATD instances associated with its validation, on the project website. © 2021 Elsevier B.V.",10.1016/j.scico.2021.102693,"Rochester Institute of TechnologyNY, Belgium; ETS Montreal, University of Quebec, Canada",Accepted
